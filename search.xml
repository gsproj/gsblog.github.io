<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OpenStack学习笔记</title>
    <url>/2021/06/28/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="OpenStack笔记"><a href="#OpenStack笔记" class="headerlink" title="OpenStack笔记"></a><strong><font color=green>OpenStack笔记</font></strong></h1><p>​    OpenStack实现的是云计算IAAS</p>
<h2 id="一、服务架构发展"><a href="#一、服务架构发展" class="headerlink" title="一、服务架构发展"></a><font color=blue>一、服务架构发展</font></h2><h3 id="1-1-MVC架构"><a href="#1-1-MVC架构" class="headerlink" title="1.1 MVC架构"></a>1.1 MVC架构</h3><p>​    业务不拆分，一个服务挂，则所有的全挂</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">首页 www.jd.com&#x2F;index.html
秒杀 www.jd.com&#x2F;miaosha&#x2F;index.html
优惠券 www.jd.com&#x2F;juan&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-SOA架构（千万级）"><a href="#1-2-SOA架构（千万级）" class="headerlink" title="1.2 SOA架构（千万级）"></a>1.2 SOA架构（千万级）</h3><p>​    业务拆分，每一个功能都拆分成一个独立的web服务，每个独立的web服务，都至少拥有一个集群</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">首页 www.jd.com&#x2F;index.html
秒杀 miaosha.jd.com&#x2F;index.html
优惠券 juan.jd.com&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-微服务架构（亿级）"><a href="#1-3-微服务架构（亿级）" class="headerlink" title="1.3 微服务架构（亿级）"></a>1.3 微服务架构（亿级）</h3><p>阿里开源dubbo</p>
<p>Spring Boot</p>
<p>自动化代码上线：Jekins + gilab ci</p>
<p>自动化代码质量检查：sonarqube</p>
<h2 id="二、搭建OpenStack"><a href="#二、搭建OpenStack" class="headerlink" title="二、搭建OpenStack"></a><font color=blue>二、搭建OpenStack</font></h2><p>​    本流程为手动安装M版，脚本安装可以参考</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;my.oschina.net&#x2F;u&#x2F;4367225&#x2F;blog&#x2F;4255750<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>OpenStack的结构介绍：</p>
<blockquote>
<p>Nova – 提供VM虚拟化支持 8774</p>
<p>Glance – 提供镜像 9292</p>
<p>Clinder – 存储支持 8776</p>
<p>Neutron – 网络支持 9696</p>
<p>Cellometer –  监控计费 </p>
<p>KeyStone – 登录认证</p>
<p>Horizon – 网页UI，dashboard</p>
<p>Heat – 部署编排，批量建虚拟机</p>
<p>Switft – 对象存储（不是传统的文件夹存放，而是用数据库记录已上传的文件信息，当有文件上传，先查询数据库中是否有该文件的md5值，如果有，则不用重新上传，给个链接就是 — 百度云盘）</p>
</blockquote>
<p><img src="C:\Users\fr724\AppData\Roaming\Typora\typora-user-images\image-20210615135957367.png" alt="image-20210615135957367"></p>
<h3 id="2-1-虚拟机准备"><a href="#2-1-虚拟机准备" class="headerlink" title="2.1 虚拟机准备"></a>2.1 虚拟机准备</h3><p>虚拟机规划</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 系统：CentOS7.4
controller: 内存3G, CPU开启虚拟化	10.0.0.11
compute1: 内存1G，CPU开启虚拟化	    10.0.0.31
# 修改主机名，IP地址，host解析，测试ping百度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置本地M版yum源</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、资源准备
mount &#x2F;dev&#x2F;cdrom &#x2F;mnt # 追加到&#x2F;etc&#x2F;rc.local,自动挂载
解压openstack_rpm.tar.gz到&#x2F;opt&#x2F;repo

# 2、编辑repo文件
vim &#x2F;etc&#x2F;yum.repo.d&#x2F;local&#x2F;repo

#### 内容
[local]
name&#x3D;local
baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt
gpgcheck&#x3D;0

[openstack]
name&#x3D;openstack
baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;opt&#x2F;repo
gpgcheck&#x3D;0
####

# 3、更新yum源
yum makecache
yum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-2-基础服务安装"><a href="#2-2-基础服务安装" class="headerlink" title="2.2 基础服务安装"></a>2.2 基础服务安装</h3><h4 id="2-2-1-NTP时间同步"><a href="#2-2-1-NTP时间同步" class="headerlink" title="2.2.1 NTP时间同步"></a>2.2.1 NTP时间同步</h4><p>controller与阿里NTP服务器同步</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;chrony.conf
server ntp6.aliyun.com # 3行
allow 10.0.0.0&#x2F;24 # 24行
systemctl restart chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>computer与controller同步</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;chrony.conf
server 10.0.0.11 iburst # 3行
systemctl restart chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"><a href="#2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）" class="headerlink" title="2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"></a>2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo
yum makecache
yum list | grep openstack
yum install centos-release-openstack-ocata.noarch -y # 安装O版<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）"><a href="#2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）" class="headerlink" title="2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）"></a>2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install python-openstackclient openstack-selinux -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-2-4-安装和配置mariadb-仅控制节点执行"><a href="#2-2-4-安装和配置mariadb-仅控制节点执行" class="headerlink" title="2.2.4 安装和配置mariadb (仅控制节点执行)"></a>2.2.4 安装和配置mariadb (仅控制节点执行)</h4><p>安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install mariadb mariadb-server python2-PyMySQL -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;my.cnf.d&#x2F;openstack.cnf

#----------------
[mysqld]	
bind-address &#x3D; 10.0.0.11	# 监听地址
default-storage-engine &#x3D; innodb # 默认存储引擎
innodb_file_per_table  # 独立表空间文件
max_connections &#x3D; 4096	# 最大连接数
collation-server &#x3D; utf8_general_ci	# 默认字符集utf8
character-set-server &#x3D; utf8
#-----------------

# 启动服务
systemctl start mariadb
systemctl enable mariadb

# 数据库安全初始化,保障数据库安全性，如果不执行，同步数据库表会报错
mysql_secure_installation
回车 n y y y y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-5-消息队列配置-仅控制节点执行"><a href="#2-2-5-消息队列配置-仅控制节点执行" class="headerlink" title="2.2.5 消息队列配置(仅控制节点执行)"></a>2.2.5 消息队列配置(仅控制节点执行)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装rabbitmq
yum install rabbitmq-server -y
# 启动服务
systemctl start rabbitmq-server
systemctl enable rabbitmq-server
# 添加用户
rabbitmqctl add_user openstack RABBIT_PASS
# 设置用户权限（读、写、执行）
rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
rabbitmq-plugins enable rabbitmq_management
# 查看是否开启15672端口
netstat -lntup
# 浏览器登录rabbitmq
http:&#x2F;&#x2F;10.0.0.11:15672
默认用户名和密码：guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-6-缓存系统配置memcache（仅控制节点执行）"><a href="#2-2-6-缓存系统配置memcache（仅控制节点执行）" class="headerlink" title="2.2.6 缓存系统配置memcache（仅控制节点执行）"></a>2.2.6 缓存系统配置memcache（仅控制节点执行）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装
yum install memcached python-memched -y
# 配置
sed -i &#39;s#127.0.0.1#10.0.0.11#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;memcached
# 启动服务
systemctl restart memcached
systemctl enable memcached
# 查询端口11211是否已监听，默认使用该端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-安装keystone认证服务-仅控制节点执行"><a href="#2-3-安装keystone认证服务-仅控制节点执行" class="headerlink" title="2.3 安装keystone认证服务(仅控制节点执行)"></a>2.3 安装keystone认证服务(仅控制节点执行)</h3><h4 id="2-3-1-Keystone功能介绍"><a href="#2-3-1-Keystone功能介绍" class="headerlink" title="2.3.1 Keystone功能介绍"></a>2.3.1 Keystone功能介绍</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、认证管理：
	账户密码
2、授权管理
3、服务目录：
	跟电话本一样，keystone上可以查询到glance、nova等服务的地址端口等信息，每一个新加的服务都需要在keystone上注册<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-2-OpenStack服务器安装的通用步骤"><a href="#2-3-2-OpenStack服务器安装的通用步骤" class="headerlink" title="2.3.2 OpenStack服务器安装的通用步骤"></a>2.3.2 OpenStack服务器安装的通用步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、创库授权
2、在Keystone创建用户，关联角色
3、在keystone创建服务，注册api
4、安装服务相关的软件包
5、修改配置
	数据库的连接
	keystone认证授权信息
	rabbitmq连接信息
	其他配置
6、同步数据库，创建表
7、启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-3-安装步骤"><a href="#2-3-3-安装步骤" class="headerlink" title="2.3.3 安装步骤"></a>2.3.3 安装步骤</h4><p>1、创库授权</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 登录mysql
$ mysql -u root -p
# 创建keystone数据库
CREATE DATABASE keystone;
# 对&#96;&#96;keystone&#96;&#96;数据库授予恰当的权限
GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;KEYSTONE_DBPASS&#39;;
GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;KEYSTONE_DBPASS&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、安装keystone相关软件包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openstack-keystone httpd mod_wsgi -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、修改配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 备份原配置文件
\cp &#x2F;etc&#x2F;keystone&#x2F;keystone.conf&#123;,.bak&#125;
# 去除配置文件中的空格行和注释行
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf.bak &gt; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf

# 安装自动配置工具
yum install openstack-utils -y
# 使用工具设置（也可以直接修改文件）修改项 参数 &#x3D; 值
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf DEFAULT admin_token ADMIN_TOKEN
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf database connection  mysql+pymysql:&#x2F;&#x2F;keystone:KEYSTONE_DBPASS@controller&#x2F;keystone # 注意hostname--controller
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf token provider fernet
# 校验
md5sum &#x2F;etc&#x2F;keystone&#x2F;keystone.conf
d5acb3db852fe3f247f4f872b051b7a9 

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;keystone-manage db_sync&quot; keystone
# 查询是否生成表
mysql keystone -e &quot;show tables;&quot;

# 初始化fernet
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
# 验证
&#x2F;etc&#x2F;keystone&#x2F;fernet-keys已创建

# 配置httpd
echo &quot;ServerName controller&quot; &gt;&gt; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf

# 创建wsgi配置文件
vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wsgi-keystone.conf
###内容
Listen 5000
Listen 35357

&lt;VirtualHost *:5000&gt;
    WSGIDaemonProcess keystone-public processes&#x3D;5 threads&#x3D;1 user&#x3D;keystone group&#x3D;keystone display-name&#x3D;%&#123;GROUP&#125;
    WSGIProcessGroup keystone-public
    WSGIScriptAlias &#x2F; &#x2F;usr&#x2F;bin&#x2F;keystone-wsgi-public
    WSGIApplicationGroup %&#123;GLOBAL&#125;
    WSGIPassAuthorization On
    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;
    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-error.log
    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-access.log combined

    &lt;Directory &#x2F;usr&#x2F;bin&gt;
        Require all granted
    &lt;&#x2F;Directory&gt;
&lt;&#x2F;VirtualHost&gt;

&lt;VirtualHost *:35357&gt;
    WSGIDaemonProcess keystone-admin processes&#x3D;5 threads&#x3D;1 user&#x3D;keystone group&#x3D;keystone display-name&#x3D;%&#123;GROUP&#125;
    WSGIProcessGroup keystone-admin
    WSGIScriptAlias &#x2F; &#x2F;usr&#x2F;bin&#x2F;keystone-wsgi-admin
    WSGIApplicationGroup %&#123;GLOBAL&#125;
    WSGIPassAuthorization On
    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;
    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-error.log
    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-access.log combined

    &lt;Directory &#x2F;usr&#x2F;bin&gt;
        Require all granted
    &lt;&#x2F;Directory&gt;
&lt;&#x2F;VirtualHost&gt;
# 校验
md5sum &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wsgi-keystone.conf
8f051eb53577f67356ed03e4550315c2 

# 启动httpd
systemctl enable httpd
systemctl start httpd

# 创建服务和注册api
export OS_TOKEN&#x3D;ADMIN_TOKEN
export OS_URL&#x3D;http:&#x2F;&#x2F;controller:35357&#x2F;v3
export OS_IDENTITY_API_VERSION&#x3D;3
openstack service create --name keystone --description &quot;OpenStack Identity&quot; identity
openstack endpoint create --region RegionOne identity public http:&#x2F;&#x2F;controller:5000&#x2F;v3
openstack endpoint create --region RegionOne identity internal http:&#x2F;&#x2F;controller:5000&#x2F;v3
openstack endpoint create --region RegionOne identity admin http:&#x2F;&#x2F;controller:35357&#x2F;v3

# 创建域、项目（租户）、用户和角色
openstack domain create --description &quot;Default Domain&quot; default
openstack project create --domain default --description &quot;Admin Project&quot; admin
openstack user create --domain default --password ADMIN_PASS admin
openstack role create admin

# 关联项目，用户，角色
openstack role add --project admin --user admin admin
# 在admin项目上，给admin用户赋予admin角色
openstack project create --domain default --description &quot;Service Project&quot; service

# 创建环境变量脚本
export OS_PROJECT_DOMAIN_NAME&#x3D;default
export OS_USER_DOMAIN_NAME&#x3D;default
export OS_PROJECT_NAME&#x3D;admin
export OS_USERNAME&#x3D;admin
export OS_PASSWORD&#x3D;ADMIN_PASS
export OS_IMAGE_API_VERSION&#x3D;2
export OS_IDENTITY_API_VERSION&#x3D;3
export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;controller:35357&#x2F;v3

# 作为admin用户请求认证令牌
openstack token issue  

# 如果不设置环境变量可以通过传入参数的方式申请
openstack --os-auth-url http:&#x2F;&#x2F;controller:35357&#x2F;v3   --os-project-domain-name default --os-user-domain-name default   --os-project-name admin --os-username admin --os-password ADMIN_PASS token issue

# 查看用户列表
openstack user list

# 查看endpoint列表
openstack endpoint list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4-安装glance镜像服务"><a href="#2-4-安装glance镜像服务" class="headerlink" title="2.4 安装glance镜像服务"></a>2.4 安装glance镜像服务</h3><p>​    镜像服务 (glance) 允许用户发现、注册和获取虚拟机镜像。</p>
<h4 id="2-4-1-安装步骤"><a href="#2-4-1-安装步骤" class="headerlink" title="2.4.1 安装步骤"></a>2.4.1 安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 数据库创库授权
mysql &gt;&gt;
CREATE DATABASE glance
GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;GLANCE_DBPASS&#39;;
GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;GLANCE_DBPASS&#39;;
  
 # 在keystone创建glance用户关联角色
 openstack user create --domain default --password GLANCE_PASS glance
 openstack role add --project service --user glance admin
 
 # 在keystone上创建服务和注册api
openstack service create --name glance   --description &quot;OpenStack Image&quot; image
openstack endpoint create --region RegionOne \
  image public http:&#x2F;&#x2F;controller:9292
openstack endpoint create --region RegionOne \
  image internal http:&#x2F;&#x2F;controller:9292
openstack endpoint create --region RegionOne \
  image admin http:&#x2F;&#x2F;controller:9292
  
# 查看已创建的信息
openstack role assignment list
openstack role list
openstack project list
openstack user list （要有glance用户）

# mysql中验证表是否已创建
[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep user
federated_user
local_user
user
user_group_membership
[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep project
project
project_endpoint
project_endpoint_group

# 安装服务相应软件包
yum install openstack-glance -y

# 修改相应的配置文件--api
cp &#x2F;etc&#x2F;glance&#x2F;glance-api.conf&#123;,.bak&#125;
grep &#39;^[a-Z\[]&#39; &#x2F;etc&#x2F;glance&#x2F;glance-api.conf.bak &gt; &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf database connection mysql+pymysql:&#x2F;&#x2F;glance:GLANCE_DBPASS@controller&#x2F;glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken username glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken password GLANCE_PASS
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf paste_deploy flavor keystone
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store stores file,http
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store default_store file
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store filesystem_store_datadir &#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F;

# 修改相应的配置文件--registry
cp &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf&#123;,.bak&#125;
grep &#39;^[a-Z\[]&#39; &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf.bak &gt; &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf database connection mysql+pymysql:&#x2F;&#x2F;glance:GLANCE_DBPASS@controller&#x2F;glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken username glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken password GLANCE_PASS
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf paste_deploy flavor keystone

# md5值验证
md5sum &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
3e1a4234c133eda11b413788e001cba3  &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
md5sum &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf
46acabd81a65b924256f56fe34d90b8f  &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf

# 写入镜像服务数据库
su -s &#x2F;bin&#x2F;sh -c &quot;glance-manage db_sync&quot; glance # 会有Warning不用在意
# 验证
mysql glance -e &quot;show tables;&quot;

# 启动服务
systemctl enable openstack-glance-api.service   openstack-glance-registry.service
systemctl start openstack-glance-api.service   openstack-glance-registry.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4-2-上传镜像测试"><a href="#2-4-2-上传镜像测试" class="headerlink" title="2.4.2 上传镜像测试"></a>2.4.2 上传镜像测试</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 错误日志查看
&#x2F;var&#x2F;log&#x2F;glance

# 确保已获取token令牌
openstack token issue

# 下载测试镜像
wget http:&#x2F;&#x2F;download.cirros-cloud.net&#x2F;0.3.4&#x2F;cirros-0.3.4-x86_64-disk.img

# 上传测试镜像
openstack image create &quot;cirros&quot; \
--file cirros-0.3.4-x86_64-disk.img \
--disk-format qcow2 --container-format bare \
--public

# 上传文件确认
ls &#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F; (在&#x2F;etc&#x2F;glance&#x2F;glance-api.conf中设置)
mysql glance -e &quot;show tables;&quot; | grep image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-5-安装nova计算服务"><a href="#2-5-安装nova计算服务" class="headerlink" title="2.5 安装nova计算服务"></a>2.5 安装nova计算服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nova-api -- 接受并相应所有的计算服务请求，管理云主机生命周期
nova-compute（多个）-- 真正管理虚拟机(nova-compute调用libvirt)
nova-scheduler -- nova 调度器（挑选最合适的nova-compute）
nova-conductor -- 帮助nova-compute连接数据库
nova-network --  早期版本管理虚拟机的网络（已弃用，改用neutron，留着为了方便兼容早期版本）
nova-consoleauth和nova-novncproxy -- web版的vnc来直接操作云主机
novnproxy -- web版vnc客户端
nova-api-metadata -- 接受来自虚拟机发送的元数据请求（配合neutron-metadata-agent实现虚拟机定制化）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-1-控制节点–安装步骤"><a href="#2-5-1-控制节点–安装步骤" class="headerlink" title="2.5.1 控制节点–安装步骤"></a>2.5.1 控制节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创库授权
mysql &gt;&gt;
CREATE DATABASE nova_api;
CREATE DATABASE nova;
GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
  
# 在keystone创建用户nova
openstack user create --domain default   --password NOVA_PASS nova
# 给Nova用户添加admin角色
openstack role add --project service --user nova admin

# 在keystone上创建服务和注册api
openstack service create --name nova   --description &quot;OpenStack Compute&quot; compute
openstack endpoint create --region RegionOne   compute public http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s
openstack endpoint create --region RegionOne   compute internal http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s
openstack endpoint create --region RegionOne   compute admin http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s

# 安装相应软件包
yum install -y openstack-nova-api openstack-nova-conductor \
  openstack-nova-console openstack-nova-novncproxy \
  openstack-nova-scheduler
  
# 修改配置文件
cp &#x2F;etc&#x2F;nova&#x2F;nova.conf&#123;,.bak&#125;
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;nova&#x2F;nova.conf.bak &gt; &#x2F;etc&#x2F;nova&#x2F;nova.conf

openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT enabled_apis osapi_compute,metadata
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT my_ip 10.0.0.11
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT use_neutron True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf api_database connection mysql+pymysql:&#x2F;&#x2F;nova:NOVA_DBPASS@controller&#x2F;nova_api
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf database connection mysql+pymysql:&#x2F;&#x2F;nova:NOVA_DBPASS@controller&#x2F;nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf glance api_servers http:&#x2F;&#x2F;controller:9292
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken username nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;nova&#x2F;tmp
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_listen &#39;$my_ip&#39;
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_proxyclient_address &#39;$my_ip&#39;

# 校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
47ded61fdd1a79ab91bdb37ce59ef192  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage api_db sync&quot; nova
su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage db sync&quot; nova

# 验证
mysql nova_api -e &quot;show tables;&quot;
mysql nova -e &quot;show tables;&quot;

# 启动服务
systemctl enable openstack-nova-api.service \
openstack-nova-consoleauth.service openstack-nova-scheduler.service \
openstack-nova-conductor.service openstack-nova-novncproxy.service
systemctl restart openstack-nova-api.service \
openstack-nova-consoleauth.service openstack-nova-scheduler.service \
openstack-nova-conductor.service openstack-nova-novncproxy.service

# 验证
[root@controller ~]# nova service-list
+----+------------------+------------+----------+---------+-------+------------+-----------------+
| Id | Binary           | Host       | Zone     | Status  | State | Updated_at | Disabled Reason |
+----+------------------+------------+----------+---------+-------+------------+-----------------+
| 1  | nova-conductor   | controller | internal | enabled | down  | -          | -               |
| 4  | nova-scheduler   | controller | internal | enabled | down  | -          | -               |
| 5  | nova-consoleauth | controller | internal | enabled | down  | -          | -               |
+----+------------------+------------+----------+---------+-------+------------+-----------------+

# novncproxy 怎么检测起来没有？
[root@controller ~]# netstat -lntup | grep 6080
tcp        0      0 0.0.0.0:6080            0.0.0.0:*               LISTEN      8719&#x2F;python2
[root@controller ~]# ps -ef | grep 8719
nova       8719      1  0 21:53 ?        00:00:01 &#x2F;usr&#x2F;bin&#x2F;python2 &#x2F;usr&#x2F;bin&#x2F;nova-novncproxy --web &#x2F;usr&#x2F;share&#x2F;novnc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-1-计算节点–安装步骤"><a href="#2-5-1-计算节点–安装步骤" class="headerlink" title="2.5.1 计算节点–安装步骤"></a>2.5.1 计算节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装软件包
yum install -y openstack-nova-compute openstack-utils

# 修改配置文件
cp &#x2F;etc&#x2F;nova&#x2F;nova.conf&#123;,.bak&#125;
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;nova&#x2F;nova.conf.bak &gt; &#x2F;etc&#x2F;nova&#x2F;nova.conf

openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT enabled_apis osapi_compute,metadata
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT my_ip 10.0.0.31 # 注意ip
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT use_neutron True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf glance api_servers http:&#x2F;&#x2F;controller:9292
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken username nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;nova&#x2F;tmp
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc enabled  True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_listen 0.0.0.0
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_proxyclient_address &#39;$my_ip&#39;
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc novncproxy_base_url http:&#x2F;&#x2F;controller:6080&#x2F;vnc_auto.html

# 校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
45cab6030a9ab82761e9f697d6d79e14  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 启动服务
systemctl enable libvirtd.service openstack-nova-compute.service
systemctl restart libvirtd.service openstack-nova-compute.service

# 服务启动错误排查
参考博客：https:&#x2F;&#x2F;www.codeleading.com&#x2F;article&#x2F;89785382846&#x2F;
cat &#x2F;etc&#x2F;nova&#x2F;nova.conf # compute1日志查看
报错 nova AccessRefused: (0, 0): (403) ACCESS_REFUSED
处理步骤：
在controller
cat &#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;rabbit@controller.log # 发现报错AMQPLAIN login refused: user &#39;openstack&#39; - invalid credentials 无效凭证
rabbitmqctl list_users # 确认是否还有openstack用户
rabbitmqctl add_user openstack RABBIT_PASS
rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
systemctl restart rabbitmq-server.service # 重新创用户，并重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-6-安装neutron网络服务"><a href="#2-6-安装neutron网络服务" class="headerlink" title="2.6 安装neutron网络服务"></a>2.6 安装neutron网络服务</h3><p>neutron-server – 端口9696，api接受和响应外部的网络管理请求</p>
<p>neutron-linuxbridge-agent –  负责创建桥接网卡</p>
<p>neutron-dhcp-agent – 负责分配ip</p>
<p>neutron-metadata-agent –  配合nova-metadata-api实现虚拟机的定制化操作</p>
<p>L3-agent – 实现三层网络vxlan（网络层）</p>
<h4 id="2-6-1-控制节点–安装步骤"><a href="#2-6-1-控制节点–安装步骤" class="headerlink" title="2.6.1 控制节点–安装步骤"></a>2.6.1 控制节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创库授权
Mysql &gt;&gt;
CREATE DATABASE neutron;
GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NEUTRON_DBPASS&#39;;
GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NEUTRON_DBPASS&#39;;
  
# 在keystone创建用户neutron
openstack user create --domain default   --password NEUTRON_PASS neutron
# 给neutron用户添加admin角色
openstack role add --project service --user neutron admin

# 在keystone上创建服务和注册api
openstack service create --name neutron   --description &quot;OpenStack Networking&quot; network
openstack endpoint create --region RegionOne   network public http:&#x2F;&#x2F;controller:9696
openstack endpoint create --region RegionOne   network internal http:&#x2F;&#x2F;controller:9696
openstack endpoint create --region RegionOne   network admin http:&#x2F;&#x2F;controller:9696

# 网络配置--公共网络
cp &#x2F;etc&#x2F;neutron&#x2F;neutron.conf&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf.bak  &gt; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf database connection mysql+pymysql:&#x2F;&#x2F;neutron:NEUTRON_DBPASS@controller&#x2F;neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT core_plugin ml2
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT service_plugins
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT notify_nova_on_port_status_changes True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT notify_nova_on_port_data_changes True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken username neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova username nova
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 type_drivers flat,vlan
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 tenant_network_types
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 mechanism_drivers linuxbridge
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 extension_drivers port_security
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2_type_flat flat_networks provider
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini securitygroup enable_ipset True
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini vxlan enable_vxlan False
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT  dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT  enable_isolated_metadata True
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini DEFAULT nova_metadata_ip controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini DEFAULT metadata_proxy_shared_secret METADATA_SECRET
&gt;&gt;&gt;&gt;&gt;

# 再次修改nova配置文件，添加neutron服务
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron url http:&#x2F;&#x2F;controller:9696
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron username neutron
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron service_metadata_proxy True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron metadata_proxy_shared_secret METADATA_SECRET
# 校验文件
[root@controller ~]# md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
6334f359655efdbcf083b812ab94efc1  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 网络服务初始化脚本需要一个超链接
ln -s &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini &#x2F;etc&#x2F;neutron&#x2F;plugin.ini

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;neutron-db-manage --config-file &#x2F;etc&#x2F;neutron&#x2F;neutron.conf \
  --config-file &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini upgrade head&quot; neutron
  
# 检查数据库
mysql neutron -e &quot;show tables;&quot;

# 重启Nova服务
systemctl restart openstack-nova-api.service

# 启动Neutron服务
systemctl enable neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service
systemctl start neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service

# 查看服务有没有起来
neutron agent-list
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+
| id                                   | agent_type         | host       | availability_zone | alive | admin_state_up | binary                    |
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+
| 0d68dc27-f2b8-4cae-9c30-cddd126076b4 | Linux bridge agent | controller |                   | :-)   | True           | neutron-linuxbridge-agent |
| 688cc47d-424d-4243-ae2b-b1c4b298a2a8 | Metadata agent     | controller |                   | :-)   | True           | neutron-metadata-agent    |
| c4c5e360-ee02-4b9b-a1a5-59a0d0d088b0 | DHCP agent         | controller | nova              | :-)   | True           | neutron-dhcp-agent        |
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-6-2-计算节点–安装步骤"><a href="#2-6-2-计算节点–安装步骤" class="headerlink" title="2.6.2 计算节点–安装步骤"></a>2.6.2 计算节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装组件
yum install -y openstack-neutron-linuxbridge ebtables ipset

# 网络配置--公共网络
cp &#x2F;etc&#x2F;neutron&#x2F;neutron.conf&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf.bak  &gt; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf
&gt;&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken username neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp
&gt;&gt;&gt;&gt;&gt;&gt;
# md5校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
328cd5f0745e26a420e828b0dfc2934e  &#x2F;etc&#x2F;nova&#x2F;nova.conf

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini
&gt;&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini vxlan enable_vxlan False
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
&gt;&gt;&gt;&gt;&gt;&gt;

# 再次修改nova配置文件，添加neutron配置
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron url http:&#x2F;&#x2F;controller:9696
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron username neutron
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron password NEUTRON_PASS

# 重启nova服务
systemctl restart openstack-nova-compute.service

# 启动linuxbridge代理服务
systemctl enable neutron-linuxbridge-agent.service
systemctl restart neutron-linuxbridge-agent.service

# 查看是否配置成功
controller执行 &gt;&gt; neutron agent-list
配置正确会多出来一个
Linux bridge agent | compute1   |                   | :-)   | True 

# 查看计算资源
openstack compute service list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-7-安装horizon-（Dashboard）web界面"><a href="#2-7-安装horizon-（Dashboard）web界面" class="headerlink" title="2.7 安装horizon （Dashboard）web界面"></a>2.7 安装horizon （Dashboard）web界面</h3><h4 id="2-7-1-安装步骤（控制节点"><a href="#2-7-1-安装步骤（控制节点" class="headerlink" title="2.7.1 安装步骤（控制节点)"></a>2.7.1 安装步骤（控制节点)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装组件包
yum install -y openstack-dashboard

# 修改配置文件
vim &#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings
&gt;&gt;&gt;&gt;
OPENSTACK_HOST &#x3D; &quot;controller&quot;
ALLOWED_HOSTS &#x3D; [&#39;*&#39;, ]
SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;
CACHES &#x3D; &#123;
    &#39;default&#39;: &#123;
         &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,
         &#39;LOCATION&#39;: &#39;controller:11211&#39;,
    &#125;
&#125;
OPENSTACK_KEYSTONE_URL &#x3D; &quot;http:&#x2F;&#x2F;%s:5000&#x2F;v3&quot; % OPENSTACK_HOST
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT &#x3D; True
OPENSTACK_API_VERSIONS &#x3D; &#123;
    &quot;identity&quot;: 3,
    &quot;image&quot;: 2,
    &quot;volume&quot;: 2,
&#125;
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN &#x3D; &quot;default&quot;
OPENSTACK_KEYSTONE_DEFAULT_ROLE &#x3D; &quot;user&quot;
OPENSTACK_NEUTRON_NETWORK &#x3D; &#123;
    ...
    &#39;enable_router&#39;: False,
    &#39;enable_quotas&#39;: False,
    &#39;enable_distributed_router&#39;: False,
    &#39;enable_ha_router&#39;: False,
    &#39;enable_lb&#39;: False,
    &#39;enable_firewall&#39;: False,
    &#39;enable_vpn&#39;: False,
    &#39;enable_fip_topology_check&#39;: False,
&#125;
TIME_ZONE &#x3D; &quot;Asia&#x2F;Shanghai&quot;
&gt;&gt;&gt;&gt;

# 解决不能进入页面的BUG
vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-dashboard.conf
添加一行 &gt;&gt; WSGIAppicationGroup %&#123;GLOBAL&#125;

# 重启服务
systemctl restart httpd.service memcached.service

# 登录界面
https:&#x2F;&#x2F;10.0.0.11&#x2F;dashboard
域:default
用户名:admin
密码:ADMIN_PASS

# 扩展：查看文件输入那个rpm包
rpm -qf &#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-7-2-Dashboard报错解决"><a href="#2-7-2-Dashboard报错解决" class="headerlink" title="2.7.2 Dashboard报错解决"></a>2.7.2 Dashboard报错解决</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 问题1--Invalid service catalog service: image
发生原因：
	openstack service list 存在两个 glance
解决方法：
    openstack service delete c12c125edc2041e3aaf2f250442162c6
    openstack service delete 6a11431b95bc44d1bd1e9371c0faa16b # 两个glance都删掉
    重复2.4.1在keystone上创建glance服务和注册api
    再重启服务systemctl restart httpd.service memcached.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-8-启动一个云主机"><a href="#2-8-启动一个云主机" class="headerlink" title="2.8 启动一个云主机"></a>2.8 启动一个云主机</h3><h3 id="2-8-1-创建步骤"><a href="#2-8-1-创建步骤" class="headerlink" title="2.8.1 创建步骤"></a>2.8.1 创建步骤</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建网络
neutron net-create --shared --provider:physical_network provider \
  --provider:network_type flat gs
  
# 在网络中创建一个子网
neutron subnet-create --name gs2 \
  --allocation-pool start&#x3D;10.0.0.101,end&#x3D;10.0.0.250 \
  --dns-nameserver 223.5.5.5 --gateway 10.0.0.2 \
  gs 10.0.0.0&#x2F;24
  
# 创建云主机硬件配置方案（规格）
openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano

# 创建密钥键值对
ssh-keygen -q -N &quot;&quot; -f ~&#x2F;.ssh&#x2F;id_rsa
openstack keypair create --public-key ~&#x2F;.ssh&#x2F;id_rsa.pub mykey
# 验证公钥的添加
openstack keypair list

# 添加安全组规则
openstack security group rule create --proto icmp default
openstack security group rule create --proto tcp --dst-port 22 default

# 在公有网络启动一个实例
openstack flavor list # 查看可用的配置规格
openstack image list # 查看可用镜像
openstack network list # 查看可用网络
openstack security group list # 查看已设置的安全组

openstack server create --flavor 规格名&#x2F;ID --image 镜像名&#x2F;ID \
  --nic net-id&#x3D;网络ID --security-group default \
  --key-name mykey 实例名称
示例：
openstack server create --flavor m1.tiny --image cirros \
--nic net-id&#x3D;cb032582-893b-414d-b78d-c89c6548612d --security-group default \
--key-name mykey my-instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-8-2-创建云主机问题解决"><a href="#2-8-2-创建云主机问题解决" class="headerlink" title="2.8.2 创建云主机问题解决"></a>2.8.2 创建云主机问题解决</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、启动云主机时，No valid host was found
【计算节点中】
查看云主机创建日志：&#x2F;var&#x2F;log&#x2F;nova&#x2F;nova-compute.log，里面有记录问题原因是CPU feature spec-ctrl not found
修改&#x2F;usr&#x2F;share&#x2F;libvirt&#x2F;cpu_map.xml，将和spec-ctrl相关的特性删除
然后重启服务
systemctl restart libvirtd openstack-nova-compute
参考博客：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;laolieren&#x2F;p&#x2F;solve_openstack_create_instance_error.html

# 2、云主机控制台seabios -- Booting from Hard Disk错误
【计算节点中】
vim &#x2F;etc&#x2F;nova&#x2F;nova.conf
&gt;&gt;&gt;&gt;
[libvirt]
virt_type &#x3D; qemu
cpu_mode &#x3D; none
&gt;&gt;&gt;&gt;
systemctl restart libvirtd openstack-nova-compute
重启云主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>OpenStack</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2021/06/28/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h1><p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁。</p>
<p>隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
<h2 id="1-1-容器和虚拟化的区别"><a href="#1-1-容器和虚拟化的区别" class="headerlink" title="1.1 容器和虚拟化的区别"></a>1.1 容器和虚拟化的区别</h2><p>KVM虚拟化：</p>
<p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr/gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：/sbin/init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
<p>容器：</p>
<p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
<h2 id="1-2-容器的优缺点："><a href="#1-2-容器的优缺点：" class="headerlink" title="1.2 容器的优缺点："></a>1.2 容器的优缺点：</h2><p>优点：</p>
<p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
<p>缺点：</p>
<p>使用同一内核，存在安全性问题</p>
<h2 id="1-3-容器技术的发展过程"><a href="#1-3-容器技术的发展过程" class="headerlink" title="1.3 容器技术的发展过程"></a>1.3 容器技术的发展过程</h2><p>chroot — lxc —- docker</p>
<h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><p># 添加docker安装源 </p>
<p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a> </p>
<p>查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce) yum list docker-ce –showduplicates | sort -r # 安装docker-ce yum install docker-ce -y</p>
<h1 id="三、Docker镜像的常用命令"><a href="#三、Docker镜像的常用命令" class="headerlink" title="三、Docker镜像的常用命令"></a>三、Docker镜像的常用命令</h1><p># 搜索镜像docker search [镜像名称]# 拉取镜像docker pull [域名镜像名称]:[版本号]例如：docker pull daocloud.io/hzc/alpine:3.6 # 默认拉取Lastest最新版PS: docker image pull = docker pull# 如何查看镜像有那些版本？dockerhub网页搜索 daocloud 国内的dockhub# 镜像加速：（1）阿里云docker镜像加速器服务（2）配置docker镜像加速(推荐) vi /etc/docker/daemon.json {   “registry-mirrors”:[“<a href="https://registry.docker-cn.com”]">https://registry.docker-cn.com”]</a> } systemctl daemon-reload# 上传镜像docker push [镜像名称]# 查看已有镜像docker images = docker image ls# 导出镜像docker image save alpine:latest -o docker_alpine.tar.gz # save跟export选哪个？都是导出镜像，但是export没带版本标签，export弃用# 导入镜像docker image load -i docker_alpine.tar.gz # load跟import选哪个？都是导入镜像，load对应save，import不带版本标签，import弃用# 删除镜像docker image rm alpine:3.6# 构建镜像docker image build# 查看构建镜像用到的历史命令docker image histroy# 查看镜像的详细属性docker image inspect# 批量删除镜像docker image prune# 给镜像打标签docker image tag [镜像ID] oldboy:v1 # Docker的容器管理1、查看容器列表 docker container ls -a docker ps # 默认只查看活着的容器 docker ps -a # 查看所有容器 docker ps -a -q # 静默输出，显示所有容器的ID docker ps -a -l docker ps -a -l –no-trunc # 查看完整命令（不隐藏）# 停止容器docker container stop [容器ID] docker container kill [容器ID]# 恢复容器 docker container start 【容器ID】# 启动容器 docker run -d -p 80:80 nginx:latest run 创建并运行一个容器 -d   放在后台运行 -p 端口映射 -v 源地址(宿主机)：目标地址(容器) docker run -it –name centos6 centos:6.9 /bin/bash -it 分配交互式的终端 –name 制定容器的名称 /bin/sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖※进入容器（调试、排错）docker exec - it [容器名称/ID] /bin/bash docker attach 【容器名称/ID】 (使用同一个终端)临时退出容器：ctrl +p和ctrl + q退出# 删除容器docker container rm [容器ID] docker rm [容器ID]如何批量删除容器：docker rm <code>docker ps -a -q</code></p>
<p><strong>总结：</strong></p>
<p>docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>业务在容器中运行：前台运行夯住，启动服务</p>
<h1 id="四、-Docker的网络访问"><a href="#四、-Docker的网络访问" class="headerlink" title="四、 Docker的网络访问"></a>四、 Docker的网络访问</h1><h2 id="4-1-容器网络访问流程"><a href="#4-1-容器网络访问流程" class="headerlink" title="4.1 容器网络访问流程"></a>4.1 容器网络访问流程</h2><p>实际上是端口映射，docker容器有自己的ip，需要靠宿主机NAT上网 </p>
<p> -p设置自动端口映射，在iptables中有增的Chain Docker, 也可以手动设置NAT</p>
<p>查看当前设置的nat：iptables -t nat -L -n</p>
<h2 id="4-2-容器网络访问注意事项："><a href="#4-2-容器网络访问注意事项：" class="headerlink" title="4.2 容器网络访问注意事项："></a>4.2 容器网络访问注意事项：</h2><p>sysctl -a | grep ipv4 | grep forward </p>
<p>查看</p>
<p>net.ipv4.ip_forward = 1 # 为1时，docker容器才能上网，虚拟机挂起将使他变成0</p>
<p>解决方法:</p>
<p>1、sysctl net.ipv4.ip_forward = 1 设置为1</p>
<p>2、不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</p>
<h2 id="4-3-指定映射-p-参数详解"><a href="#4-3-指定映射-p-参数详解" class="headerlink" title="4.3 指定映射(-p)参数详解"></a>4.3 指定映射(-p)参数详解</h2><p>-p hostPort:containerPort # 指定端口 -p ip:hostPort:containerPort # 指定ip+端口 -p ip::containerPort # 指定随机端口 -p 10.0.0.100:53:udp # 指定随机端口 + udp -p hostPort:containerPort -p hostPort:containerPort # 指定多个端口</p>
<h1 id="五、容器的数据卷挂载"><a href="#五、容器的数据卷挂载" class="headerlink" title="五、容器的数据卷挂载"></a>五、容器的数据卷挂载</h1><h2 id="5-1-临时挂载"><a href="#5-1-临时挂载" class="headerlink" title="5.1 临时挂载"></a>5.1 临时挂载</h2><p># 将/opt/xiaoniao目录挂载到容器的html目录 docker run -d -p 80:80 -v /opt/xiaoniao:/usr/share/nginx/html nginx:latest</p>
<h2 id="5-2-持久化挂载"><a href="#5-2-持久化挂载" class="headerlink" title="5.2 持久化挂载"></a>5.2 持久化挂载</h2><p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
<p># 创建名为oldboy的容器卷并挂载到容器html目录 docker run -d -p 80:80 -v oldboy:/usr/share/nginx/html nginx:latest # 查看当前有哪些容器卷 docker volume ls # 查看名为oldboy的卷的信息 docker volume inspect oldboy # PS：删除容器并删除卷，无法将卷删除 docker rm -f -v [容器ID]   -v –volume</p>
<h1 id="六、小案例练习"><a href="#六、小案例练习" class="headerlink" title="六、小案例练习"></a>六、小案例练习</h1><p>&gt;&gt; 基于Nginx多端点的多站点 基于nginx启动一个容器，监听80和81，访问80，出现nginx默认的欢迎首页，访问81，出现小鸟页面。</p>
<h1 id="七、如何制作Docker镜像"><a href="#七、如何制作Docker镜像" class="headerlink" title="七、如何制作Docker镜像"></a>七、如何制作Docker镜像</h1><h2 id="7-1-启动一个基础的容器"><a href="#7-1-启动一个基础的容器" class="headerlink" title="7.1 启动一个基础的容器"></a>7.1 启动一个基础的容器</h2><p>docker run -it centos:6.9 # yum docker run -it alpine:3.9 # apk</p>
<h2 id="7-2-容器中安装服务"><a href="#7-2-容器中安装服务" class="headerlink" title="7.2 容器中安装服务"></a>7.2 容器中安装服务</h2><p># dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; /etc/hosts # 替换源为阿里源 curl -o /etc/yum.repo.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/CentOS-6.repo">https://mirrors.aliyun.com/repo/CentOS-6.repo</a> # 安装并启动openssh服务 yum install openssh-server -y service opensshd restart # 修改root密码 echo ‘123456’ | passwd –stdin root 或者 echo 123456:root | chpassw</p>
<p>7.3 把已经安装服务的容器打包成镜像</p>
<p>docker contanier commit 5617e5d123432 centos6.9_ssh:v1</p>
<h2 id="7-4-测试镜像的功能"><a href="#7-4-测试镜像的功能" class="headerlink" title="7.4 测试镜像的功能"></a>7.4 测试镜像的功能</h2><p># 使用镜像启动一个新容器,并开启ssh服务 docker run -d -p 1022:22 centos6.9_ssh:v1 tail -f /usr/sbin/sshd -D</p>
<h2 id="7-5-创建一个ssh-nginx双服务的镜像"><a href="#7-5-创建一个ssh-nginx双服务的镜像" class="headerlink" title="7.5 创建一个ssh + nginx双服务的镜像"></a>7.5 创建一个ssh + nginx双服务的镜像</h2><p>(1) 启动一个基础容器 docker yun -it -p 80:80 -p 1023:22 centos6.9_ssh:v1 /bin/bash (2) 在容器中安装服务(hosts与repo源在新容器会重新挂载) # dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; /etc/hosts # 替换源为阿里源 curl -o /etc/yum.repo.d/epel.repo <a href="https://mirrors.aliyun.com/repo/epel.repo">https://mirrors.aliyun.com/repo/epel.repo</a> # 安装nginx服务 yum install nginx -y (3) 把已经安装好服务的容器，提交为镜像 docker commit e6a6dsa6 centos6.9_ssh_nginx:v2 (4) 测试镜像功能 vim init.sh &gt;&gt;&gt;&gt;&gt; #!/bin/bash service sshd restart nginx -g ‘daemon off;’ &gt;&gt;&gt;&gt;&gt; # 启动镜像，执行脚本：开启服务，并夯住 docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 /bin/bash /init.sh</p>
<h3 id="7-6-自定义容器镜像的密码"><a href="#7-6-自定义容器镜像的密码" class="headerlink" title="7.6 自定义容器镜像的密码"></a>7.6 自定义容器镜像的密码</h3><p># 修改脚本，添加密码相关的脚本行，见右图 vim init.sh # 启动容器，并附带环境变量 docker run -d -p 1025:22 -p 80:80 -e “SSH_PWD=123456” centos6.9_ssh_nginx:v2 /bin/bash /init.sh</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="7-7-作业"><a href="#7-7-作业" class="headerlink" title="7.7 作业"></a>7.7 作业</h3><p>制作基于centos6的lnmp架构的镜像，discuz论坛</p>
<p>怎么夯住？</p>
<p>启动所有需要的服务</p>
<p>最后tail -F (大F无论文件有没有) </p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="八、Dockfile的使用"><a href="#八、Dockfile的使用" class="headerlink" title="八、Dockfile的使用"></a>八、Dockfile的使用</h1><p>发布镜像太大了，而dockerfile只有几kb，使用dockfile文件可以构建出相同的镜像，</p>
<h2 id="8-1-使用dockfile自动构建镜像"><a href="#8-1-使用dockfile自动构建镜像" class="headerlink" title="8.1 使用dockfile自动构建镜像"></a>8.1 使用dockfile自动构建镜像</h2><p>自动构建镜像的步骤：</p>
<p>1、手动构建一遍</p>
<p>2、参考历史命令，编写dockerfile</p>
<p>3、构建镜像</p>
<p>dockerfile build -t centos6.9_ssh .</p>
<p>4、测试</p>
<h2 id="8-2-Dockerfile常用命令详解"><a href="#8-2-Dockerfile常用命令详解" class="headerlink" title="8.2 Dockerfile常用命令详解"></a>8.2 Dockerfile常用命令详解</h2>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(一)-安装Docker</title>
    <url>/2021/06/28/Docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h2 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h2><blockquote>
<p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁，隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
</blockquote>
<h3 id="1-容器和虚拟化的区别"><a href="#1-容器和虚拟化的区别" class="headerlink" title="1 容器和虚拟化的区别"></a>1 容器和虚拟化的区别</h3><ul>
<li><p>KVM虚拟化：</p>
<ul>
<li><p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr/gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：/sbin/init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
</li>
</ul>
</li>
<li><p>容器：</p>
<ul>
<li><p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-容器的优缺点"><a href="#2-容器的优缺点" class="headerlink" title="2 容器的优缺点"></a>2 容器的优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li><p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>使用同一内核，存在安全性问题</li>
</ul>
</li>
</ul>
<h3 id="3-容器技术的发展过程"><a href="#3-容器技术的发展过程" class="headerlink" title="3 容器技术的发展过程"></a>3 容器技术的发展过程</h3><blockquote>
<p>chroot — lxc —- docker</p>
</blockquote>
<h3 id="4-Docker组成"><a href="#4-Docker组成" class="headerlink" title="4 Docker组成"></a>4 Docker组成</h3><p>​    Docker基于Go语言开发，C/S模式</p>
<ul>
<li>主要组件<ul>
<li>镜像</li>
<li>容器</li>
<li>仓库：最大的dockerhub</li>
<li>网络</li>
<li>存储</li>
</ul>
</li>
</ul>
<h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><blockquote>
<p>参考网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a></p>
</blockquote>
<h3 id="1-联网在线安装"><a href="#1-联网在线安装" class="headerlink" title="1 联网在线安装"></a>1 联网在线安装</h3><p>开启rpm包缓存，方便制作离线安装包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;yum.conf
keepcache&#x3D;1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你之前安装过 docker，请先删掉</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装一些依赖</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根据你的发行版下载repo文件（Centos）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把软件仓库替换为TUNA：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo sed -i &#39;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后安装:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum makecache fast
    sudo yum install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-无网环境下离线安装"><a href="#2-无网环境下离线安装" class="headerlink" title="2 无网环境下离线安装"></a>2 无网环境下离线安装</h3><p>搜集联网环境下下载的rpm包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find &#x2F;var&#x2F;cache&#x2F;yum&#x2F;x86_64&#x2F;7&#x2F; -name &quot;*.rpm&quot; | xargs -i mv &#123;&#125; docker_rpm&#x2F;
tar -zvcf docker_rpm.tgz docker_rpm&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>拷贝到无网环境的服务器中安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -vxf docker_rpm.tgz # 解压
cd docker_rpm	
rpm -Uvh .&#x2F;*.rpm # 安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-启动服务并验证安装是否成功"><a href="#3-启动服务并验证安装是否成功" class="headerlink" title="3 启动服务并验证安装是否成功"></a>3 启动服务并验证安装是否成功</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动服务
systemctl enable docker
systemctl start docker

# 验证是否安装成功
docker version
docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-Docker镜像下载加速"><a href="#4-Docker镜像下载加速" class="headerlink" title="4 Docker镜像下载加速"></a>4 Docker镜像下载加速</h3><ul>
<li>阿里云docker镜像加速器服务</li>
<li>配置docker镜像加速(推荐)</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建文件
vi &#x2F;etc&#x2F;docker&#x2F;daemon.json
&#123;    
	&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]
&#125; 
# 重新加载
systemctl daemon-reload
systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-创建并运行一个nginx容器"><a href="#5-创建并运行一个nginx容器" class="headerlink" title="5 创建并运行一个nginx容器"></a>5 创建并运行一个nginx容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(二)-Docker常用管理命令</title>
    <url>/2021/06/28/Docker%E7%B3%BB%E5%88%97-%E4%BA%8C-Docker%E5%B8%B8%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="一、常用镜像管理命令"><a href="#一、常用镜像管理命令" class="headerlink" title="一、常用镜像管理命令"></a>一、常用镜像管理命令</h2><blockquote>
<p>​    Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数(如匿名卷、环境变量、用户等)。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</blockquote>
<h3 id="1-在镜像仓库查找镜像"><a href="#1-在镜像仓库查找镜像" class="headerlink" title="1 在镜像仓库查找镜像"></a>1 在镜像仓库查找镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-在镜像仓库拉取镜像"><a href="#2-在镜像仓库拉取镜像" class="headerlink" title="2 在镜像仓库拉取镜像"></a>2 在镜像仓库拉取镜像</h3><blockquote>
<p>不指定版本号时默认下载最新版（latest），版本可在dockerhub(官方仓库)、DaoCloud(私有仓库)等仓库查到</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># dockerhub拉取
docker pull alpine:3.6
# daocloud拉取
docker pull daocloud.io&#x2F;jermine&#x2F;alpine:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-查看已有镜像"><a href="#3-查看已有镜像" class="headerlink" title="3 查看已有镜像"></a>3 查看已有镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image ls
# 别名
docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-导出镜像"><a href="#4-导出镜像" class="headerlink" title="4 导出镜像"></a>4 导出镜像</h3><blockquote>
<p>弃用export，导出的镜像不带版本TAG信息</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image save alpine -o alpine.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5 删除镜像"></a>5 删除镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除alpine镜像
docker image rm d4ff818577bc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="6-导入镜像"><a href="#6-导入镜像" class="headerlink" title="6 导入镜像"></a>6 导入镜像</h3><blockquote>
<p>弃用import，导入的镜像不带版本TAG信息</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image load -i alpine.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-查看镜像属性"><a href="#7-查看镜像属性" class="headerlink" title="7 查看镜像属性"></a>7 查看镜像属性</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image inspect 4f380adfc10f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="8-镜像批量删除"><a href="#8-镜像批量删除" class="headerlink" title="8 镜像批量删除"></a>8 镜像批量删除</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="9-指定TAG信息"><a href="#9-指定TAG信息" class="headerlink" title="9 指定TAG信息"></a>9 指定TAG信息</h3><blockquote>
<p>docker images查看docker image import的镜像，没有镜像名和TAG，可以使用此方法来修改</p>
</blockquote>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker image tag d4ff818577bc oldbly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、常用容器管理命令"><a href="#二、常用容器管理命令" class="headerlink" title="二、常用容器管理命令"></a>二、常用容器管理命令</h2><blockquote>
<p>​    镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>​    容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立宿主的系统下操作一样。这种特性使容器封装的应用比直接在宿主运行更加安全。</p>
</blockquote>
<h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1 运行容器"></a>1 运行容器</h3><blockquote>
<p>1、docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>2、业务在容器中运行：前台运行夯住，启动服务</p>
<p>3、如果不指定执行命令，会运行默认的执行命令</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 放后台运行
docker run -d -p 80:80 nginx:latest
run 创建并运行一个容器
-d	放在后台运行
-p 	端口映射
-v 	源地址(宿主机)：目标地址(容器)

# 交互式方式进入容器执行
docker run -it --name centos6 centos:6.9 &#x2F;bin&#x2F;bash
-it 	分配交互式的终端
--name 	制定容器的名称
&#x2F;bin&#x2F;sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-查看已有容器"><a href="#2-查看已有容器" class="headerlink" title="2 查看已有容器"></a>2 查看已有容器</h3><blockquote>
<p>-a 显示所有容器（默认只显示running的容器）</p>
<p>-l 显示最新的容器</p>
<p>–no-trunc 显示完整id</p>
<p>-q 静默输出（只显示容器id）</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container ls -a
# 别名
docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-停止容器"><a href="#3-停止容器" class="headerlink" title="3 停止容器"></a>3 停止容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker contaner stop <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-杀死容器"><a href="#4-杀死容器" class="headerlink" title="4 杀死容器"></a>4 杀死容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker contaner kill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>kill与stop的区别：</p>
<ul>
<li><p>kill：不管容器同不同意，发送SIGKILL信号，强行终止。</p>
</li>
<li><p>stop：首先给容器发送一个SIGTERM信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再发送SIGKILL信号，强行终止。</p>
</li>
</ul>
</blockquote>
<h3 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5 启动容器"></a>5 启动容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker contaner start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="6-进入容器（重要！调试、排错）"><a href="#6-进入容器（重要！调试、排错）" class="headerlink" title="6 进入容器（重要！调试、排错）"></a>6 进入容器（重要！调试、排错）</h3><p>使用同一终端：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 交互式方式运行容器（开启新终端）
docker run -it --name centos6.9 centos:6.9 &#x2F;bin&#x2F;bash
# 暂时退出当前终端
ctrl + p 再 ctrl + q
# 重新进入该终端
docker attach d4ff818577bc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用不同终端（常用）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it d4ff818577bc &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-删除容器"><a href="#7-删除容器" class="headerlink" title="7 删除容器"></a>7 删除容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container rm 55e9c7cb59a6 55e9c7cb59a5
# 别名
docker rm 55e9c7cb59a6
# 批量删除容器
docker rm &#96;docker ps -a -q&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(三)-容器的网络访问</title>
    <url>/2021/06/29/Docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E5%AE%B9%E5%99%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="一、容器的网络访问流程"><a href="#一、容器的网络访问流程" class="headerlink" title="一、容器的网络访问流程"></a>一、容器的网络访问流程</h2><blockquote>
<p>参考：<a href="https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02">https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02</a></p>
</blockquote>
<h3 id="1-虚拟机注意事项"><a href="#1-虚拟机注意事项" class="headerlink" title="1 虚拟机注意事项"></a>1 虚拟机注意事项</h3><p>查看net.ipv4.ip_forward值是否为1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sysctl -a | grep ipv4 | grep forward <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只有值为1时docker容器才能上网，而vmware虚拟机挂起将使他变成0，解决方法：</p>
<ul>
<li>sysctl net.ipv4.ip_forward = 1 设置为1</li>
<li>不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</li>
</ul>
<h2 id="二、容器端口映射"><a href="#二、容器端口映射" class="headerlink" title="二、容器端口映射"></a>二、容器端口映射</h2><h3 id="1-docker-run-p端口映射参数"><a href="#1-docker-run-p端口映射参数" class="headerlink" title="1 docker run -p端口映射参数"></a>1 docker run -p端口映射参数</h3><p>指定端口访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将容器80端口，映射到主机180端口
docker run -p 180:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定IP+端口访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 多网卡环境下，将容器80端口映射到10.0.0.1的180端口
docker run -p 10.0.0.1:180:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定随机端口</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she"># 将容器80端口，映射到主机随机端口
docker run -p 10.0.0.1::80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定随机端口+UDP (默认映射TCP)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将容器80端口映射到主机随机端口，并使用UDP协议
-p 10.0.0.100:80:udp # 指定随机端口 + udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以指定多个端口</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p 180:80 -p 1443:443 # 指定多个端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>随机映射</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(四)-容器的数据卷挂载与小案例练习</title>
    <url>/2021/06/29/Docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E5%AE%B9%E5%99%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%B8%8E%E5%B0%8F%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一、数据卷挂载"><a href="#一、数据卷挂载" class="headerlink" title="一、数据卷挂载"></a>一、数据卷挂载</h2><h3 id="1-临时挂载"><a href="#1-临时挂载" class="headerlink" title="1 临时挂载"></a>1 临时挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将&#x2F;opt&#x2F;xiaoniao目录挂载到容器的html目录
docker run -d -p 80:80 -v &#x2F;opt&#x2F;xiaoniao:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-使用卷挂载"><a href="#2-使用卷挂载" class="headerlink" title="2 使用卷挂载"></a>2 使用卷挂载</h3><blockquote>
<p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
</blockquote>
<p>创建名为myvol的容器卷并挂载到容器html目录</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 -v myvol:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看当前有哪些容器卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看名为myvol的卷的信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker volume inspect myvol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除容器并删除卷（无效）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># PS：删除容器并删除卷，无法将卷删除
docker rm -f -v [容器ID]
    -v --volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="二、小案例：多端口多站点"><a href="#二、小案例：多端口多站点" class="headerlink" title="二、小案例：多端口多站点"></a>二、小案例：多端口多站点</h2><blockquote>
<p>80端口访问nginx首页</p>
<p>81端口访问水果忍者</p>
</blockquote>
<p>获取水果忍者HTML5小游戏源码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;7npmedia.w3cschool.cn&#x2F;1-FruitNinja.7z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建81端口nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;opt&#x2F;fruitninjia.conf
server &#123;
    listen       81;
    listen  [::]:81;
    server_name  localhost;

    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;

    location &#x2F; &#123;
        root   &#x2F;data;
        index  index.html index.htm;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将游戏源码文件解压至/opt/fruitninjia，并运行nginx容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将&#x2F;opt&#x2F;fruitninjia挂载到容器&#x2F;data中
docker run -d -p 80:80 -p 81:81 -v &#x2F;opt&#x2F;fruitninjia:&#x2F;data -v &#x2F;opt&#x2F;fruitninjia.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;fruitninjia.conf nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>网页访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;10.0.0.11:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(五)-手动制作docker镜像</title>
    <url>/2021/06/29/Docker%E7%B3%BB%E5%88%97-%E4%BA%94-%E6%89%8B%E5%8A%A8%E5%88%B6%E4%BD%9Cdocker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="一、制作Docker镜像"><a href="#一、制作Docker镜像" class="headerlink" title="一、制作Docker镜像"></a>一、制作Docker镜像</h2><h3 id="1-启动基础容器"><a href="#1-启动基础容器" class="headerlink" title="1 启动基础容器"></a>1 启动基础容器</h3><pre class="line-numbers language-she" data-language="she"><code class="language-she">docker run -it centos:6.9 # yum
docker run -it alpine:3.9 # apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-在容器中安装服务"><a href="#2-在容器中安装服务" class="headerlink" title="2 在容器中安装服务"></a>2 在容器中安装服务</h3><p>修改yum源（Centos6阿里源已停止维护）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo &#39;[centos-office]
name&#x3D;centos-office
failovermethod&#x3D;priority
baseurl&#x3D;https:&#x2F;&#x2F;vault.centos.org&#x2F;6.10&#x2F;os&#x2F;x86_64&#x2F;
gpgcheck&#x3D;1
gpgkey&#x3D;https:&#x2F;&#x2F;vault.centos.org&#x2F;6.10&#x2F;os&#x2F;x86_64&#x2F;RPM-GPG-KEY-CentOS-6&#39; &gt; CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装并启动openssh服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openssh-server -y
service sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改root密码(默认没有密码)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo &#39;123456&#39; | passwd --stdin root
# 或者
echo root:123456 | chpassw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>将已经安装好sshd服务的容器打包成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container commit 981877f137c9 centos6.9_ssh:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试镜像</p>
<blockquote>
<p>sshd -D：以后台守护进程的方式运行服务</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动sshd并将22端口映射出来，可以使用xshell连接
docker run -d -p 1022:22 centos6.9_ssh:v1 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="二、小案例：创建一个ssh-nginx双服务的镜像"><a href="#二、小案例：创建一个ssh-nginx双服务的镜像" class="headerlink" title="二、小案例：创建一个ssh+nginx双服务的镜像"></a>二、小案例：创建一个ssh+nginx双服务的镜像</h2><p>创建容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1023:22 centos6.9_ssh:v1 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改yum源和epel源</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">由于Centos6阿里云停止维护
参考：https:&#x2F;&#x2F;blog.csdn.net&#x2F;u013250554&#x2F;article&#x2F;details&#x2F;110684307<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>安装nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建运行服务的脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;root&#x2F;init.sh
#!&#x2F;bin&#x2F;bash
service sshd restart
nginx -g &#39;daemon off;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>将容器封装成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit e6a6dsa6 centos6.9_ssh_nginx:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动镜像，开启服务，并夯住</p>
<blockquote>
<p>可以使用工具ssh登录，并且可以访问到nginx的欢迎页面</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;root&#x2F;init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="三、通过环境变量设置容器密码"><a href="#三、通过环境变量设置容器密码" class="headerlink" title="三、通过环境变量设置容器密码"></a>三、通过环境变量设置容器密码</h2><p>修改/root/init.sh文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash

if [ -z $SSH_PWD ];then
        SSH_PWD&#x3D;123456
fi
echo &quot;$SSH_PWD&quot; | passwd --stdin root

service sshd restart
nginx -g &#39;daemon off;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>打包成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit 12386c6504d4 centos6.9_ssh_nginx_passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行容器</p>
<blockquote>
<p>docker run -e：指定环境变量</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 -p 80:80 -e &quot;SSH_PWD&#x3D;123456&quot; centos6.9_ssh_nginx_passwd &#x2F;bin&#x2F;bash &#x2F;root&#x2F;init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(六)-Dockfile的使用</title>
    <url>/2021/06/30/Docker%E7%B3%BB%E5%88%97-%E5%85%AD-Dockfile%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、Dokerfile简介"><a href="#一、Dokerfile简介" class="headerlink" title="一、Dokerfile简介"></a>一、Dokerfile简介</h2><blockquote>
<p>Dockerfile 是一个用来自动构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>建议存放在/opt/dockerfile中，如创建centosXX的镜像，则创建/opt/dockerfile/centosXX/Dockerfile</p>
</blockquote>
<h3 id="1-Dockerfile的简单使用"><a href="#1-Dockerfile的简单使用" class="headerlink" title="1 Dockerfile的简单使用"></a>1 Dockerfile的简单使用</h3><blockquote>
<p>创建一个开启sshd服务的centos6.9镜像</p>
</blockquote>
<p>创建yum源文件，用于拷贝到centos6.9镜像中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh
vim CentOS-Base.repo
...内容省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>创建Dockerfile文件/opt/dockfile/centos6.9_ssh/Dockerfile，内容如下：</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:6.9
ADD CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d
RUN yum install openssh-server -y
RUN service sshd restart
RUN echo &#39;123456&#39; | passwd --stdin root
CMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;,&quot;-D&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS：RUN的执行过程：创建临时容器，执行命令，提交成临时镜像，删除临时容器，重复此步骤。</p>
</blockquote>
<p>构建镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t centos6.9_ssh:v2 &#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>PS：最后传入的是包含Dockerfile的文件夹，区分大小写，可以用”.”代替 </p>
</blockquote>
<p>验证镜像是否正常</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>PS：最后不用接命令，将自动执行CMD指定的命令</p>
</blockquote>
<h3 id="2-小案例"><a href="#2-小案例" class="headerlink" title="2 小案例"></a>2 小案例</h3><blockquote>
<p>创建centos6.9 + ssh + nginx的Dockerfile</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 centos6.9_ssh_nginx]# pwd
&#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh_nginx
[root@docker01 centos6.9_ssh_nginx]# ls
CentOS-Base.repo  Dockerfile  epel.repo  init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># init.sh
#!&#x2F;bin&#x2F;bash
service sshd restart
nginx -g &quot;daemon off;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写Dockerfile</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centos:6.9
ADD CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d
ADD epel.repo &#x2F;etc&#x2F;yum.repos.d
ADD init.sh &#x2F;root
RUN yum install openssh-server nginx -y
RUN echo &#39;123456&#39; | passwd --stdin root
CMD [&quot;&#x2F;bin&#x2F;bash&quot;,&quot;&#x2F;root&#x2F;init.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构建镜像</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">docker build -t centos6.9_ssh_nginx:v3 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 -p 81:80 centos6.9_ssh_nginx:v3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、Docker指令"><a href="#二、Docker指令" class="headerlink" title="二、Docker指令"></a>二、Docker指令</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FROM</td>
<td align="left">基于那个镜像来构建</td>
</tr>
<tr>
<td align="left">MAINTAINER</td>
<td align="left">镜像的创建者</td>
</tr>
<tr>
<td align="left">ENV</td>
<td align="left">设置环境变量</td>
</tr>
<tr>
<td align="left">ADD</td>
<td align="left">添加宿主机文件到容器里，有需要解压的文件会自动解压</td>
</tr>
<tr>
<td align="left">COPY</td>
<td align="left">添加宿主机文件到容器里</td>
</tr>
<tr>
<td align="left">WORKDIR</td>
<td align="left">切换工作目录</td>
</tr>
<tr>
<td align="left">EXPOSE</td>
<td align="left">开放可用端口</td>
</tr>
<tr>
<td align="left">CMD</td>
<td align="left">容器启动后执行的命令，可被docker run指定的命令覆盖</td>
</tr>
<tr>
<td align="left">ENTRYPOINT</td>
<td align="left">容器启动后执行的命令，但不回被docker run指定的命令覆盖，如需覆盖，需要加–entrypoint参数</td>
</tr>
<tr>
<td align="left">VOLUME</td>
<td align="left">创建挂载卷，将宿主机的目录挂载到容器里</td>
</tr>
</tbody></table>
<h2 id="三、案例：Dockerfile构建可道云容器"><a href="#三、案例：Dockerfile构建可道云容器" class="headerlink" title="三、案例：Dockerfile构建可道云容器"></a>三、案例：Dockerfile构建可道云容器</h2><blockquote>
<p>项目：</p>
<p>​    可道云网盘kodexplorer</p>
<p>环境：</p>
<p>​    httpd+php或者nginx+php<br>​    php所需模块：php5.5以上<br>​    基础镜像：centos:7.9<br>​    项目下载地址: <a href="http://static.kodcloud.com/update/download/kodexplorer4.37.zip">http://static.kodcloud.com/update/download/kodexplorer4.37.zip</a><br>​    项目官网：<a href="https://kodcloud.com/download/">https://kodcloud.com/download/</a></p>
</blockquote>
<h3 id="1-手工部署一遍"><a href="#1-手工部署一遍" class="headerlink" title="1 手工部署一遍"></a>1 手工部署一遍</h3><blockquote>
<p>写Dockerfile前自己手动部署一遍，主要是nginx + php的搭建，参考博客</p>
<p><a href="https://cloud.tencent.com/developer/article/1015237">https://cloud.tencent.com/developer/article/1015237</a></p>
</blockquote>
<p>修改nginx.conf</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># For more information on configuration, see:
#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;
#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;

user nginx;
worker_processes auto;
error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;
pid &#x2F;run&#x2F;nginx.pid;

# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.
include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;

events &#123;
    worker_connections 1024;
&#125;

http &#123;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;
    default_type        application&#x2F;octet-stream;

    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.
    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include
    # for more information.
    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;

    server &#123;
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;

        # Load configuration files for the default server block.
        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;

        error_page 404 &#x2F;404.html;
        location &#x3D; &#x2F;404.html &#123;
        &#125;

        error_page 500 502 503 504 &#x2F;50x.html;
        location &#x3D; &#x2F;50x.html &#123;
        &#125;

    	location ~ \.php$ &#123;
        try_files $uri &#x3D;404;
        fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php-fpm&#x2F;php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    	&#125;
	
    	location &#x2F; &#123;
        index  index.php index.html index.htm;
        try_files $uri $uri&#x2F; &#x2F;index.php?$args;
    	&#125;
    &#125;

# Settings for a TLS enabled server.
#
#    server &#123;
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
#
#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;
#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;
#
#        error_page 404 &#x2F;404.html;
#            location &#x3D; &#x2F;40x.html &#123;
#        &#125;
#
#        error_page 500 502 503 504 &#x2F;50x.html;
#            location &#x3D; &#x2F;50x.html &#123;
#        &#125;
#    &#125;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改php-fpm.conf</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;

; All relative paths in this configuration file are relative to PHP&#39;s install
; prefix.

; Include one or more files. If glob(3) exists, it is used to include a bunch of
; files from a glob(3) pattern. This directive can be used everywhere in the
; file.
include&#x3D;&#x2F;etc&#x2F;php-fpm.d&#x2F;*.conf

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
; Pid file
; Default Value: none
pid &#x3D; &#x2F;run&#x2F;php-fpm&#x2F;php-fpm.pid

; Error log file
; Default Value: &#x2F;var&#x2F;log&#x2F;php-fpm.log
error_log &#x3D; &#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;error.log

; Log level
; Possible Values: alert, error, warning, notice, debug
; Default Value: notice
;log_level &#x3D; notice

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of &#39;0&#39; means &#39;Off&#39;.
; Default Value: 0
;emergency_restart_threshold &#x3D; 0

; Interval of time used by emergency_restart_interval to determine when 
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator&#39;s shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;emergency_restart_interval &#x3D; 0

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;process_control_timeout &#x3D; 0

; Send FPM to background. Set to &#39;no&#39; to keep FPM in foreground for debugging.
; Default Value: yes
daemonize &#x3D; no

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ; 
;;;;;;;;;;;;;;;;;;;;

; See &#x2F;etc&#x2F;php-fpm.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改<a href="http://www.conf/">www.conf</a></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 12行
listen &#x3D; &#x2F;var&#x2F;run&#x2F;php-fpm&#x2F;php-fpm.sock
# 31-32行
listen.owner &#x3D; nobody
listen.group &#x3D; nobody
# 39-41行
user &#x3D; nginx
; RPM: Keep a group allowed to write in log dir.
group &#x3D; nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改php.ini</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cgi.fix_pathinfo 把它的值设置为 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-Dockerfile部署"><a href="#2-Dockerfile部署" class="headerlink" title="2 Dockerfile部署"></a>2 Dockerfile部署</h3><p>文件存放</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 centos7.9_kod]# ll
total 92
-rw-r--r--. 1 root root   661 Jul  2 11:21 Dockerfile
-rw-r--r--. 1 root root   171 Jul  1 14:28 init.sh
-rw-r--r--. 1 root root  2715 Jul  1 13:50 nginx.conf
-rw-r--r--. 1 root root  1691 Jul  1 13:50 php-fpm.conf
-rw-r--r--. 1 root root 64945 Jul  1 14:48 php.ini
-rw-r--r--. 1 root root 10029 Jul  1 13:50 www.conf
[root@docker01 centos7.9_kod]# pwd
&#x2F;opt&#x2F;dockfile&#x2F;centos7.9_kod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写Dockerfile</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:7.9.2009
RUN curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo &amp;&amp; \
curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo &amp;&amp; \
yum install openssh-server nginx net-tools php-cli php-fpm unzip php-gd php-mbstring  -y
ADD nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
ADD php-fpm.conf &#x2F;etc&#x2F;php-fpm.conf
ADD www.conf &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf
ADD php.ini &#x2F;etc
ADD init.sh &#x2F;root&#x2F;
EXPOSE 80 22
WORKDIR &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
RUN curl -o kod.zip https:&#x2F;&#x2F;static.kodcloud.com&#x2F;update&#x2F;download&#x2F;kodexplorer4.45.zip &amp;&amp; \
unzip kod.zip &amp;&amp; \
chmod -R 777 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;
CMD [&quot;&#x2F;bin&#x2F;bash&quot;,&quot;&#x2F;root&#x2F;init.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构建镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t centos7.9_kod:v1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 -p 1022:22 -e &quot;SSH_PWD&#x3D;redhat123&quot; --privileged centos7.9_kod:v1 &#x2F;usr&#x2F;sbin&#x2F;init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>进入容器，并运行初始化命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it 865 &#x2F;bin&#x2F;bash
# 容器启动服务，设置root密码
[root@88179198e672 html]#systemctl restart sshd php-fpm nginx
[root@88179198e672 html]#echo &quot;redhat123&quot; | passwd --stdin root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试访问：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">网页访问：http:&#x2F;&#x2F;10.0.0.11可进去可道云界面
ssh 10.0.0.11 -p1022 可以登录镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ZStack(一)ZStack安装部署</title>
    <url>/2021/06/30/ZStack-%E4%B8%80-%E5%88%9D%E8%AF%86ZStack/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><blockquote>
<ul>
<li>完全国产自主研发，核心开源的轻量级laas平台软件产品</li>
<li>不是基于OpenStack开发</li>
<li>中国最产品化的私有云/混合云iaas平台软件</li>
<li>一键部署、升级</li>
</ul>
</blockquote>
<h2 id="扁平大二层技术"><a href="#扁平大二层技术" class="headerlink" title="扁平大二层技术"></a>扁平大二层技术</h2><p>网络设备堆叠</p>
<p>网卡bond</p>
<p>​    链路聚合</p>
<p>​    主备接入</p>
<p>vlan技术</p>
<p>​    最多支持4096</p>
<p>vxlan技术</p>
<h2 id="三层网络"><a href="#三层网络" class="headerlink" title="三层网络"></a>三层网络</h2><p>传统三层网络结构</p>
<p>​    核心层（堆叠）</p>
<p>​    汇聚层</p>
<p>​    接入层</p>
<p>常见扁平网络结构（中小规模）</p>
<p>​    核心层（堆叠）</p>
<p>​    接入层（互相堆叠）</p>
<p>常见扁平网络结构（大规模）</p>
<p>​    叶脊结构网络</p>
<p>弹性IP：</p>
<p>​    外网访问云主机</p>
<p>​    云主机访问外网</p>
]]></content>
      <categories>
        <category>ZStack</category>
      </categories>
      <tags>
        <tag>ZStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(八)-Docker私有仓库</title>
    <url>/2021/07/06/Docker%E7%B3%BB%E5%88%97-%E5%85%AB-Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="Docker私有仓库搭建流程"><a href="#Docker私有仓库搭建流程" class="headerlink" title="Docker私有仓库搭建流程"></a>Docker私有仓库搭建流程</h2><p>拉取私有仓库镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动私有仓库容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -di --name&#x3D;registry -p 5000:5000 registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>验证是否正常</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 浏览器输入
10.0.0.12:5000&#x2F;v2&#x2F;_catalog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改daemon.json，让 docker信任私有仓库地址</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json
# 添加
&#123;
	&quot;insecure-registries&quot;:[&quot;10.0.0.12:5000&quot;]
&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启docker服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl reset-failed docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上传镜像到私有仓库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker push 10.0.0.11:5000&#x2F;registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从私有仓库下载镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull http:&#x2F;&#x2F;10.0.0.12:5000&#x2F;registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列(七)-Docker镜像分层与同主机中容器互连</title>
    <url>/2021/07/05/Docker%E7%B3%BB%E5%88%97-%E4%B8%83-Docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E4%B8%8E%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%AD%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker镜像分层"><a href="#一、Docker镜像分层" class="headerlink" title="一、Docker镜像分层"></a>一、Docker镜像分层</h2><blockquote>
<p>镜像分层的好处：</p>
<p>​    复用、节省磁盘空间，相同的内容只需加载一份到内存</p>
<p>​    修改dockerfile后，重新构建时可以用缓存，速度快</p>
</blockquote>
<h3 id="1-查看docker镜像分层"><a href="#1-查看docker镜像分层" class="headerlink" title="1 查看docker镜像分层"></a>1 查看docker镜像分层</h3><p>通过导入镜像可以查看到镜像分层</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load -i [镜像文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过查看镜像历史可以查看到分层</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 ~]# docker image history centos6.9_ssh:v2
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
57761235f898   2 days ago    &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot; &quot;-D…   0B
c0a2c21457c4   2 days ago    &#x2F;bin&#x2F;sh -c echo &#39;123456&#39; | passwd --stdin ro…   537B
29d10ff8b8e0   2 days ago    &#x2F;bin&#x2F;sh -c service sshd restart                 4.91kB
666b9ddfff15   2 days ago    &#x2F;bin&#x2F;sh -c yum install openssh-server -y        154MB
5b00553af9fc   2 days ago    &#x2F;bin&#x2F;sh -c #(nop) ADD file:65a30e1b327fec80b…   1.18kB
2199b8eb8390   2 years ago   &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;bash&quot;]            0B
&lt;missing&gt;      2 years ago   &#x2F;bin&#x2F;sh -c #(nop)  LABEL name&#x3D;CentOS Base Im…   0B
&lt;missing&gt;      2 years ago   &#x2F;bin&#x2F;sh -c #(nop) ADD file:0e6d175401c5b4260…   195MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有的这些层都会在<code>Docker</code>主机本地存储区域内存储，可以通过以下指令来列出：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-通过Dockerfile优化分层信息"><a href="#2-通过Dockerfile优化分层信息" class="headerlink" title="2  通过Dockerfile优化分层信息"></a>2  通过Dockerfile优化分层信息</h3><ul>
<li>尽量合并RUN和ADD来减少镜像分层数</li>
<li>新加的Dockerfile语句加到最后，不要加到前面</li>
</ul>
<h2 id="二、同主机中容器互连（–link是单向的）"><a href="#二、同主机中容器互连（–link是单向的）" class="headerlink" title="二、同主机中容器互连（–link是单向的）"></a>二、同主机中容器互连（–link是单向的）</h2><blockquote>
<p>docker官方已不推荐使用docker run –link来链接2个容器互相通信，随后的版本中会删除–link</p>
</blockquote>
<h3 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1 功能介绍"></a>1 功能介绍</h3><p>docker run –link可以用来链接2个容器，使得源容器（被链接的容器）和接受容器（主动去链接的容器）之间可以互相通信，并且接收容器可以获取源容器的一些数据，如源容器的环境变量。使用案例如下：</p>
<p>源容器启动：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name src_docker nginx 
容器ID:xxxx01, IP:172.16.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接受容器连接：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name dest_docker --link src_docker:web centos7.9:v2
容器ID:xxxx02, IP:172.16.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>进入接受容器测试，不需要ping IP，直接ping别名就可以，web和src_docker都指向172.16.0.2<font color=red>（单向）</font></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it xxxx01 &#x2F;bin&#x2F;bash
ping web
ping src_docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>接受容器的/etc/hosts将更新</p>
</blockquote>
<h3 id="2-案例：构建zabbix-server"><a href="#2-案例：构建zabbix-server" class="headerlink" title="2 案例：构建zabbix-server"></a>2 案例：构建zabbix-server</h3><p>启动一个mysql的容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name mysql-server -t \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      -d mysql:5.7 \
      --character-set-server&#x3D;utf8 --collation-server&#x3D;utf8_bin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动java-gateway容器监控java服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name zabbix-java-gateway -t \
      -d zabbix&#x2F;zabbix-java-gateway:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>启动zabbix-mysql容器使用link连接mysql与java-gateway</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name zabbix-server-mysql -t \
      -e DB_SERVER_HOST&#x3D;&quot;mysql-server&quot; \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      -e ZBX_JAVAGATEWAY&#x3D;&quot;zabbix-java-gateway&quot; \
      --link mysql-server:mysql \
      --link zabbix-java-gateway:zabbix-java-gateway \
      -p 10051:10051 \
      -d zabbix&#x2F;zabbix-server-mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动zabbix web显示，使用link连接zabbix-mysql与mysql</p>
<blockquote>
<p>zabbix的默认端口已有80改为8080，可见配置文件/etc/zabbix/nginx.conf</p>
</blockquote>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">docker run --name zabbix-web-nginx-mysql -t \
      -e DB_SERVER_HOST&#x3D;&quot;mysql-server&quot; \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      --link mysql-server:mysql \
      --link zabbix-server-mysql:zabbix-server \
      -p 8082:8080 \     
      -d zabbix&#x2F;zabbix-web-nginx-mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>登录Zabbix</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">浏览器访问：10.0.0.11:8082
Admin
zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加被监控节点-安装zabbix-agent</p>
<blockquote>
<p>获取zabbix-agent：</p>
<p>uname -a 查看内核版本</p>
<p>web页面查看zabbix版本</p>
<p><a href="https://www.zabbix.com/download">https://www.zabbix.com/download</a> 获取对应agent的安装方法</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -Uvh https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.4-1.el7.noarch.rpm
yum clean all
yum install zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加被监控节点-agent配置文件修改</p>
<blockquote>
<p>117行：Server=10.0.0.11, 注意防火墙和selinux的阻挡</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf
systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="三、docker重启后容器不退出"><a href="#三、docker重启后容器不退出" class="headerlink" title="三、docker重启后容器不退出"></a>三、docker重启后容器不退出</h2><blockquote>
<p>默认情况下，systemctl restart docker之后，容器将处于Exited状态</p>
</blockquote>
<h3 id="1-添加容器启动参数"><a href="#1-添加容器启动参数" class="headerlink" title="1 添加容器启动参数"></a>1 添加容器启动参数</h3><blockquote>
<p>docker重启后，容器先停止，再立即重新启动</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --restart&#x3D;always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-daemon配置文件修改（不推荐）"><a href="#2-daemon配置文件修改（不推荐）" class="headerlink" title="2 daemon配置文件修改（不推荐）"></a>2 daemon配置文件修改（不推荐）</h3><blockquote>
<p>docker重启后，容器不会停止，一直在运行，不推荐使用，不好控制</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json
# 添加一行，上行后面加逗号
&quot;live-restore&quot;:true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>





<p>​    </p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列-九-Dokcer跨主机容器互连</title>
    <url>/2021/07/06/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker容器的四种网络类型"><a href="#一、Docker容器的四种网络类型" class="headerlink" title="一、Docker容器的四种网络类型"></a>一、Docker容器的四种网络类型</h2><blockquote>
<p>哪四种？</p>
<ul>
<li>bridge（默认）：NAT桥接模式</li>
<li>none：不分配网络，什么服务都访问不了</li>
<li>host：与宿主机共享网络，共享主机名，端口共用(宿主机用了的端口，容器也不能用)，【网络性能最高】</li>
<li>container:容器id：与容器xx共享网络，共享主机名、hosts、hostname、端口等….【K8S常用】</li>
</ul>
</blockquote>
<h3 id="1-指定与查看容器网络类型的方法"><a href="#1-指定与查看容器网络类型的方法" class="headerlink" title="1 指定与查看容器网络类型的方法"></a>1 指定与查看容器网络类型的方法</h3><p>指定容器网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --network none # 指定网络类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看容器网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker instpect 容器id # 可以查看当前的容器网络类型
# 查看字段
&quot;NetworkSettings&quot;: &#123;
	&quot;Bridge&quot;: &quot;&quot;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看有哪些网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network ls # 查看有哪些网络类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="二、使用macvlan实现"><a href="#二、使用macvlan实现" class="headerlink" title="二、使用macvlan实现"></a>二、使用macvlan实现</h2><blockquote>
<p>优势：</p>
<p>​    性能比overlay高</p>
<p>​    不用做端口映射，外界可直接访问</p>
<p>劣势：</p>
<p>​    IP需要手动指定</p>
</blockquote>
<h3 id="1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信</h3><blockquote>
<p>宿主机信息（虚拟机）：</p>
<p>​    docker01: 10.0.0.11 网关: 10.0.0.2</p>
<p>​    docker02: 10.0.0.12 网关: 10.0.0.2</p>
</blockquote>
<p>宿主机1,2分别创建macvlan</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create --driver macvlan --subnet 10.0.0.0&#x2F;24 --gateway 10.0.0.2 -o parent&#x3D;ens33 macvlan_1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置网卡为混杂模式【Ubuntu需要设置】</p>
<blockquote>
<p>混杂模式是计算机网络中的术语。 是指一台机器的网卡能够接收所有经过它的数据流，而不论其目的地址是否是它。</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip link set ens33 promisc on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>宿主机1,2分别使用centos7.9_ssh:v2镜像创建容器，并指定为macvlan_1网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01
docker run -d --network macvlan_1 --ip&#x3D;10.0.0.100 centos6.9_ssh:v2
# docker02
docker run -d --network macvlan_1 --ip&#x3D;10.0.0.200 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试，docker exec进入docker01中运行容器，开启抓包，并使用docker02中的容器ping它</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpdump icmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过xshell或者mobaxterm可以直接ssh到容器中 (PS:并没有 -p 22端口)</p>
<blockquote>
<p>实际测试宿主机并不能ssh到容器，显示No route to host，但是物理机可以连接</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh root@10.0.0.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="三、使用overlay实现"><a href="#三、使用overlay实现" class="headerlink" title="三、使用overlay实现"></a>三、使用overlay实现</h2><blockquote>
<p>优势：</p>
<p>​    可以自动分配ip地址</p>
<p>劣势：</p>
<p>​    需要做端口映射才能访问容器服务</p>
<p>overlay参考：<a href="https://www.cnblogs.com/CloudMan6/p/7270551.html">https://www.cnblogs.com/CloudMan6/p/7270551.html</a></p>
</blockquote>
<h3 id="1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信</h3><p>docker01启动consul</p>
<blockquote>
<p>consul是一个key:value类型的存储数据库</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 8500:8500 --restart&#x3D;always -h consul --name consul progrium&#x2F;consul -server -bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>docker01,02上设置daemon.json文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"hosts"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"tcp://0.0.0.0:2376"</span><span class="token punctuation">,</span><span class="token string">"unix:///var/run/docker.sock"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">"cluster-store"</span><span class="token operator">:</span><span class="token string">"consul://10.0.0.11:8500"</span><span class="token punctuation">,</span>
<span class="token property">"cluster-advertise"</span><span class="token operator">:</span><span class="token string">"10.0.0.11:2376"</span> # 此处不同，docker01为<span class="token number">10.0</span>.<span class="token number">0.11</span>，docker02为<span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>修改docker.service文件</p>
<blockquote>
<p>因为daemon.json中的hosts项与docker.service中的-H参数冲突，需要去掉</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service
ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock
# 删除-H fd:&#x2F;&#x2F;
ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启docker服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reload
systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>测试consul是否搭建成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">浏览器访问：http:&#x2F;&#x2F;10.0.0.11:8500&#x2F;
在KEY&#x2F;VALUE标签页正常显示10.0.0.11和12两台宿主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>docker01,02创建overlay网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create -d overlay --subnet 172.16.1.0&#x2F;24 --gateway 172.16.1.254 ol1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01
docker run -d --network ol1 --name centos6.9_01 centos6.9_ssh:v2
# docker02
docker run -d --network ol1 --name centos6.9_02 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试容器间网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01中的容器ping另一容器的hostname
[root@e1e8cc01792d &#x2F;]# ping centos6.9_02
PING centos6.9_02 (172.16.1.2) 56(84) bytes of data.
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.197 ms
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.269 ms
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;1.04 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Overlay的网络访问流程图"><a href="#2-Overlay的网络访问流程图" class="headerlink" title="2 Overlay的网络访问流程图"></a>2 Overlay的网络访问流程图</h3><img src="/2021/07/06/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/overlay%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE.png" class="" title="overlay网络访问">]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
