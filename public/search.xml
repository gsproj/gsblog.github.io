<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github IO如何绑定域名</title>
    <url>/2022/07/20/04_%E6%9D%82%E8%AE%B0/Githubio%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<blockquote>
<p>“如何将自己的域名绑定到Github IO”</p>
</blockquote>
<h2 id="1-获取原地址IP"><a href="#1-获取原地址IP" class="headerlink" title="1 获取原地址IP"></a>1 获取原地址IP</h2><p>通过ping获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@3yserver ~]# ping gsproj.github.io</span><br><span class="line">PING gsproj.github.io (185.199.110.153) 56(84) bytes of data.</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=1 ttl=54 time=36.1 ms</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=2 ttl=54 time=36.0 ms</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=3 ttl=54 time=35.9 ms</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=4 ttl=54 time=35.9 ms</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=5 ttl=54 time=38.3 ms</span><br><span class="line">64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq=6 ttl=54 time=36.1 ms</span><br></pre></td></tr></table></figure>

<h2 id="2-在CDN将IP地址和域名绑定"><a href="#2-在CDN将IP地址和域名绑定" class="headerlink" title="2 在CDN将IP地址和域名绑定"></a>2 在CDN将IP地址和域名绑定</h2><p><img src="/../../img/image-20220718111616313.png" alt="image-20220718111616313"></p>
<h2 id="3-域名申请网站填写DNS解析地址"><a href="#3-域名申请网站填写DNS解析地址" class="headerlink" title="3 域名申请网站填写DNS解析地址"></a>3 域名申请网站填写DNS解析地址</h2><p><img src="/../../img/image-20220718112050165.png" alt="image-20220718112050165"></p>
<h2 id="3-确保新域名能ping通，解析正常"><a href="#3-确保新域名能ping通，解析正常" class="headerlink" title="3 确保新域名能ping通，解析正常"></a>3 确保新域名能ping通，解析正常</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@3yserver ~]# ping codefish.cf</span><br><span class="line">PING codefish.cf (104.21.96.42) 56(84) bytes of data.</span><br><span class="line">64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq=1 ttl=59 time=2.63 ms</span><br><span class="line">64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq=2 ttl=59 time=2.64 ms</span><br><span class="line">64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq=3 ttl=59 time=2.73 ms</span><br><span class="line">64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq=4 ttl=59 time=2.71 ms</span><br><span class="line">64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq=5 ttl=59 time=2.62 ms</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS: 此处IP不是185开头的IP，是因为cloudflare做了代理，不影响使用，可以通就可以</p>
</blockquote>
<h2 id="4-在Github添加域名"><a href="#4-在Github添加域名" class="headerlink" title="4 在Github添加域名"></a>4 在Github添加域名</h2><p><img src="/../../img/image-20220718111923212.png" alt="image-20220718111923212"></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>测试工具使用说明-完善中</title>
    <url>/2022/07/06/02_%E6%B5%8B%E8%AF%95/02_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E-%E5%AE%8C%E5%96%84%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="测试工具使用说明-汇总"><a href="#测试工具使用说明-汇总" class="headerlink" title="测试工具使用说明-汇总"></a>测试工具使用说明-汇总</h1><h1 id="一、SPEC-CPU-2017-测试"><a href="#一、SPEC-CPU-2017-测试" class="headerlink" title="一、SPEC CPU 2017 测试"></a>一、SPEC CPU 2017 测试</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>​	标准性能评测机构（SPEC）开发的用于评测CPU性能的基准程序测试组，是一套CPU子系统测试工具。处理器、内存和编译都会影响最终的测试结果，目前SPEC CPU是业界首选的CPU评测工具。 </p>
<h2 id="1-2-工具安装"><a href="#1-2-工具安装" class="headerlink" title="1.2 工具安装"></a>1.2 工具安装</h2><p>获取镜像包：</p>
<p>​	cpu2017-1_0_5.iso</p>
<p>挂载IOS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o loop -t iso9660 cpu2017-1_0_5.iso /xxx/cpu2017CD</span><br></pre></td></tr></table></figure>

<p>安装工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /xxx/cpu2017CD</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<h2 id="1-3-测试步骤"><a href="#1-3-测试步骤" class="headerlink" title="1.3 测试步骤"></a>1.3 测试步骤</h2><p>spec2017主要分为四项测试：</p>
<ul>
<li>​	intrate</li>
<li>​	fprate</li>
<li>​	intspeed</li>
<li>​	fpspeed</li>
</ul>
<p>​	根据需要测试的cpu型号，可以到官网下载相应的cfg文件，修改icc、Jemalloc库、qkmalloc库的路径，放入config文件夹中。</p>
<p>测试命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source shrc</span><br><span class="line">ulimit -s unlimited</span><br><span class="line"><span class="meta">#</span><span class="bash"> speed 测试</span></span><br><span class="line">runcpu --config=icc-speed-official.cfg --threads=48 --define cores=48 -n 3 -i ref fpspeed intspeed</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rate 测试</span></span><br><span class="line">runcpu --config=icc-rate-official.cfg -copies=48 -n 3 -i ref intrate fprate</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅编译不跑测试</span></span><br><span class="line">--action=build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新编译</span></span><br><span class="line">--rebuild</span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑核跑</span></span><br><span class="line">taskset -c </span><br></pre></td></tr></table></figure>

<h2 id="1-4-测试优化"><a href="#1-4-测试优化" class="headerlink" title="1.4 测试优化"></a>1.4 测试优化</h2><blockquote>
<p>Bios设置：</p>
<p>​	开启超线程</p>
<p>​	 尝试开启LLC-PREFETCH</p>
</blockquote>
<h2 id="1-5-其他事项："><a href="#1-5-其他事项：" class="headerlink" title="1.5 其他事项："></a>1.5 其他事项：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cfg文件中的submit可以设置绑核选项</span><br></pre></td></tr></table></figure>

<h1 id="二、SPEC-CPU-2006-测试"><a href="#二、SPEC-CPU-2006-测试" class="headerlink" title="二、SPEC CPU 2006 测试"></a>二、SPEC CPU 2006 测试</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>​	作用同Spec CPU 2017, 近年来逐渐被淘汰</p>
<h2 id="2-2-测试步骤"><a href="#2-2-测试步骤" class="headerlink" title="2.2 测试步骤"></a>2.2 测试步骤</h2><p>1、spec2006.tgz 解压，使用install.sh安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SPEC CPU2006 Installation</span><br><span class="line">Top of the CPU2006 tree is &#x27;/vol8/tarball/cpu2006&#x27;</span><br><span class="line">These appear to be valid toolsets:</span><br><span class="line">ft-spec2006-tool</span><br><span class="line">aarch64-linux</span><br><span class="line">Enter the architecture you are using:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; aarch64-linux</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source shrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单核测试</span></span><br><span class="line">runspec -c linux64-arm64-gcc52.cfg -i ref -n 3 -I all </span><br><span class="line"><span class="meta">#</span><span class="bash"> 多核测试（16）</span></span><br><span class="line">runspec -c linux64-arm64-gcc52.cfg -r 16 -n 3 -i ref -I all</span><br></pre></td></tr></table></figure>

<h1 id="三、-SPEC-OMP-2012-测试"><a href="#三、-SPEC-OMP-2012-测试" class="headerlink" title="三、 SPEC OMP 2012 测试"></a>三、 SPEC OMP 2012 测试</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>​	基于SPEC测试套件的OpenMP评测工具，其中包含15个基于OpenMP的并行程序。</p>
<h2 id="3-2-工具安装"><a href="#3-2-工具安装" class="headerlink" title="3.2 工具安装"></a>3.2 工具安装</h2><p>​	获取源包：</p>
<p>​		omp2012-1.1.zip</p>
<p>​	解压后使用install.sh安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">./install.sh -d /home/xx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅编译</span></span><br><span class="line">runspec --action=build --config=gcc.cfg -i ref -I all</span><br></pre></td></tr></table></figure>

<h2 id="3-3-测试步骤"><a href="#3-3-测试步骤" class="headerlink" title="3.3 测试步骤"></a>3.3 测试步骤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source shrc</span><br><span class="line">ulimit -s unlimited</span><br><span class="line">export OMP_NUM_THREADS=48</span><br><span class="line">runspec --config=gcc.cfg --threads 48 -n 3 -i ref -I all</span><br></pre></td></tr></table></figure>

<h1 id="四、NPB-测试"><a href="#四、NPB-测试" class="headerlink" title="四、NPB 测试"></a>四、NPB 测试</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>​	NAS并行基准测试程序（NPB），是由美国航空航天局开发的一套代表流体动力学计算的应用程序集，它已经成为公认的用于测评大规模并行机和超级计算机的标准测试程序。NPB可用于常用的编程模型，如MPI和OpenMP。</p>
<h2 id="4-2-工具安装"><a href="#4-2-工具安装" class="headerlink" title="4.2 工具安装"></a>4.2 工具安装</h2><p>源包获取：</p>
<p>​	NPB3.4.tar.gz         OpenMP || MPICH</p>
<p>​	NPB3.4-MZ.tar.gz  OpenMP &amp;&amp; MPICH</p>
<p>解压即可。</p>
<h2 id="4-3-测试步骤"><a href="#4-3-测试步骤" class="headerlink" title="4.3 测试步骤"></a>4.3 测试步骤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make suite</span><br><span class="line">cd bin</span><br><span class="line">mpirun -np 4 ./xxx</span><br></pre></td></tr></table></figure>

<h1 id="五、Stream-测试"><a href="#五、Stream-测试" class="headerlink" title="五、Stream 测试"></a>五、Stream 测试</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>​	STREAM是一套综合性能测试程序集，通过fortran和C两种高级且高效的语言编写完成，由于这两种语言在数学计算方面的高效率， 使得 STREAM 测试例程可以充分发挥出内存的能力。Stream测试是内存测试中业界公认的内存带宽性能测试基准工具。</p>
<h2 id="5-2-工具安装"><a href="#5-2-工具安装" class="headerlink" title="5.2 工具安装"></a>5.2 工具安装</h2><p>源包获取：</p>
<p>​	stream.tgz  刘新娃修改过</p>
<p>​	<font color='red'>Intel平台请用ICC</font></p>
<p>解压后编译stream.c, 生成可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">icc -O3 -fopenmp -DNTIMES=10 -mcmodel=large -o stream_c stream.c</span><br></pre></td></tr></table></figure>

<p>没有修改过的怎么编译呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">icc -mtune=native -march=native -O3 -mcmodel=large -fopenmp -DSTREAM_ARRAY_SIZE=100000000 -DNTIMES=30 -DOFFSET=512 stream.c -o stream-gs</span><br></pre></td></tr></table></figure>

<h2 id="5-3-测试步骤"><a href="#5-3-测试步骤" class="headerlink" title="5.3 测试步骤"></a>5.3 测试步骤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export OMP_NUM_THREADS=48/32/16/8/4  # 设置每个进程的线程数</span><br><span class="line">./stream_c 200000 # 使用200G内存</span><br></pre></td></tr></table></figure>

<h2 id="5-4-其他事项"><a href="#5-4-其他事项" class="headerlink" title="5.4 其他事项"></a>5.4 其他事项</h2><blockquote>
<p><code>STREAM_ARRAY_SIZE</code>即<code>N</code>指定计算中a[],b[],c[]三个数组的大小，且数组的值采用了双精度（8个字节）。数组的维数 N定义时需要注意以下几点：</p>
<p>一、要充分考虑内存容量的需求，粗略估计是 N× 8（双精度浮点类型） × 3 （三个数组）&lt;&#x3D; 0.6*M；M 是用户的可用内存。</p>
<p>二、要保证测试过程中，使用到的内存容量要大于处理器内的缓存，只有这样才会有内存的操作，而不仅仅是对处理器内缓存的操作。</p>
<p>三、为了保证测试可以持续一段时间，测试过程中内存带宽可以达到一定的最大值， 从而避免得不到实际最大峰值的情况，如果四项测试中有完成时间小于20微秒的情况，就需要适当的增大测试数组的维度 N。</p>
</blockquote>
<h1 id="六、Linpack-测试"><a href="#六、Linpack-测试" class="headerlink" title="六、Linpack 测试"></a>六、Linpack 测试</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>​	Linpack是国际上使用最广泛的测试高性能计算机系统浮点性能的基准测试。通过对高性能计算机采用高斯消元法求解一元 N次稠密线性代数方程组的测试，评价高性能计算机的浮点计算性能。Linpack的结果按每秒浮点运算次数（flops）表示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">N ^ 2 * 8 = 总内存</span><br></pre></td></tr></table></figure>

<h2 id="6-2-工具安装"><a href="#6-2-工具安装" class="headerlink" title="6.2 工具安装"></a>6.2 工具安装</h2><p>源包获取：</p>
<p>​	linpack.tgz</p>
<p>解压即可。</p>
<h2 id="6-3-测试步骤"><a href="#6-3-测试步骤" class="headerlink" title="6.3 测试步骤"></a>6.3 测试步骤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1进48线100G内存</span></span><br><span class="line">./xhpl -n 1 -b 384 -p 1 -q 1 -m 100000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1进48线200G内存</span></span><br><span class="line">./xhpl -n 1 -b 384 -p 1 -q 1 -m 200000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2进24线共100G内存</span></span><br><span class="line">mpirun -n 2 ./xhpl -b 384 -p 1 -q 2 -m 50000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2进24线共200G内存</span></span><br><span class="line">mpirun -n 2 ./xhpl -b 384 -p 1 -q 2 -m 100000</span><br></pre></td></tr></table></figure>

<p>用mpirun提交xhplrun.sh效果更好</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PRO_SIZE=$&#123;PMI_SIZE&#125;</span><br><span class="line">threads=`echo $&#123;Cores&#125;/$&#123;PMI_SIZE&#125; | bc`</span><br><span class="line">PMI_RANK_my=$&#123;PMI_RANK&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-测试优化（重点）"><a href="#6-4-测试优化（重点）" class="headerlink" title="6.4 测试优化（重点）"></a>6.4 测试优化（重点）</h2><blockquote>
<p>一、计算理论内存总带宽</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">计算方法：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">查看内存带宽：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">dmidecode | grep -A 16 <span class="string">&quot;Memory Device&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">例如内存信息为：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">三星 DDR4</span> </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">16G 每根</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">2666 MT/s（Mhz）</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">查看cpu支持的通道数，例如intel 6252N支持6通道，两个CPU支持12通道</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">理论带宽计算DDR4：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">单条内存带宽 = 内存核心频率 x 内存总线位数 x 倍增系数</span></span><br><span class="line"> = 2666 * 64 / 8 = 21328 MB/s = 21.3G/s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">12通道总内存带宽 = 21328 * 12 = 255936 = 250G/s</span></span><br></pre></td></tr></table></figure>

<p>二、使用stream测试实际内存总带宽</p>
<p>​	如果可以达到90%或以上，说明内存带宽正常, 继续Linpack测试</p>
<p>三、计算CPU理论峰值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">计算方法：</span></span><br><span class="line">Mhz * 每个时钟周期执行浮点运算的次数 * CPU数目</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">=</span></span><br><span class="line">2.3 x ( 8 x 2 x 2 ) x 48 = 3532.8 Gflops</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">说明：</span></span><br><span class="line">峰值计算分为单精度和双精度浮点运算</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">单精度：</span></span><br><span class="line">32bit的指令长度的运算，对应32位操作系统</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">双精度：</span></span><br><span class="line">64bit的指令长度的运算，对应64位操作系统</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">查找CPU可以处理什么样的指令集：</span></span><br><span class="line">例如Intel官网查到Intel Xeon 6252N</span><br><span class="line">支持AVX-512，</span><br><span class="line"><span class="meta">#</span><span class="bash"> of AVX-512 FMA Units = 2</span></span><br><span class="line">(Fused Multiply Add instructions) 融合了 乘法 和 加法</span><br><span class="line">即可以单个周期同时执行2条512bit的加法和2条512bit的乘法</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">理解上述两个概念，可以开始计算（CPU单周期浮点计算能力）</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">Intel 6252N (支持avx512，有512位)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">单精度：</span></span><br><span class="line">2.3 x 512/32 x 2 x 2 = 147.2Gflops </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">双精度</span></span><br><span class="line">2.3 x 512/64 x 2 x 2 = 73.6Gflops</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">双精度共48核</span></span><br><span class="line">74.6 x 48 = 3580</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">FT2000+ 和 FT1500A (只有128位)，FT3000加入sve指令集(128-256位)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">单精度：</span> </span><br><span class="line">2.2 x 128/32 * 2 = 4.4</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">双精度:</span></span><br><span class="line">2.2 x 128/64 * 2 = 8.8</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">双精度共64核</span></span><br><span class="line">8.8 x 64 = 563.2</span><br></pre></td></tr></table></figure>

<p>四、使用Linapack测试CPU实际峰值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">如果性能达到理论峰值的70%说明正常，如果未达到尝试以下优化</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">1、使用mpirun运行xhpl, 按`lscpu` 中的NUMA分组绑定,`比如48核，分为两个Numa Node`, 则用mpirun`跑两个xhpl进程`，每个进程使用 OMP_NUM_THREADS=24, 跑24线程，这样可以将核用满。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">在`Intel`平台，两个进程分别使用 HPL_HOST_CORE=<span class="string">&#x27;0-23&#x27;</span> 以及 HPL_HOST_CORE=<span class="string">&#x27;24-47&#x27;</span> 绑定核</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">在`Arm64`平台，则使用 GOMP_CPU_AFFINITY=<span class="string">&#x27;0-23&#x27;</span> 以及 GOMP_CPU_AFFINITY=<span class="string">&#x27;24-47&#x27;</span> 绑定</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">2、内存不用分配太大，根据stream测试结果分配，从小开始测</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">3、Intel平台编译器使用ICC，测试linpack使用icc自带的linpack，mpi使用icc自带的</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">4、Bios中关闭超线程，开启超频(turbo/P-state)</span></span><br></pre></td></tr></table></figure>

<p><strong><font color="blue">先测stream,判断带宽是否正常，再测linpack，然后再测Spec Cpu</font></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Intel平台可以使用的控制频率的命令</span></span><br><span class="line">cpupower -c all frequency-set -g performance</span><br><span class="line">cpupower -c 0-95 frequency-set -g userspace</span><br><span class="line">cpupower -c 0-95 frequency-set -f 2700000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前频率控制是否为perfomance？</span></span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 跑xhpl之前设置指令集，或许有用</span></span><br><span class="line">export MKL_ENABLE_INSTRUCTIONS=AVX512</span><br></pre></td></tr></table></figure>

<p><img src="G:\工作\2020年3月\CN9性能测试\测试组合.png" alt="image-20200415171716940"></p>
<h2 id="6-5-HPL-dat修改"><a href="#6-5-HPL-dat修改" class="headerlink" title="6.5 HPL.dat修改"></a>6.5 HPL.dat修改</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第1-2行，注释说明行</span></span><br><span class="line">HPLinpack benchmark input file   </span><br><span class="line">Innovative Computing Laboratory, University of Tennessee  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第 3-4 行，输出结果文件的形式</span></span><br><span class="line">HPL.out      output file name (if any)  </span><br><span class="line">6            device out (6=stdout,7=stderr,file) </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5-6行，求解矩阵的大小</span></span><br><span class="line">1            # of problems sizes (N)  </span><br><span class="line">1000         Ns   </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7-8行 求解矩阵分块的大小</span></span><br><span class="line">1            # of NBs</span><br><span class="line">192 256      NBs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9行 处理器阵列的排列方式，行还是列</span></span><br><span class="line">0：适用于节点较少，单个节点CPU较多的胖系统</span><br><span class="line">1：适用于节点较多，单个节点CPU较少的瘦系统（机群上远好于按行排列）</span><br><span class="line">1            PMAP process mapping (0=Row-,1=Column-major) </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10-12行 定义二维处理网格P/Q</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> P X Q = 进程数，P尽量小于Q</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> P=2^n,P最好选择2的幂</span></span><br><span class="line">1            # of process grids (P x Q) </span><br><span class="line">1 2          Ps</span><br><span class="line">1 2          Qs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 13行 设置阀值，不用修改</span></span><br><span class="line">16.0         threshold</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 14-21行 设置L的分解方式</span></span><br><span class="line">1            # of panel fact</span><br><span class="line">2 1 0        PFACTs (0=left, 1=Crout, 2=Right) # 对性能影响不大</span><br><span class="line">1            # of recursive stopping criterium</span><br><span class="line">4 8          NBMINs (&gt;= 1)   # 4或8都不错</span><br><span class="line">1            # of panels in recursion</span><br><span class="line">2            NDIVs  # 选2比较理想</span><br><span class="line">1            # of recursive panel fact.</span><br><span class="line">1 0 2        RFACTs (0=left, 1=Crout, 2=Right) # 对性能影响不大</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 22-23行 设置L的横向广播方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前四种，适用于快速网络，后两种适用于速度较慢的网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小规模系统，选择0/1，大规模系统选择3</span></span><br><span class="line">1            # of broadcast</span><br><span class="line">0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 24-25行 设置横向通信的通信深度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小规模系统选择1/2，大规模系统2-5之间</span></span><br><span class="line">1            # of lookahead depth</span><br><span class="line">1            DEPTHs (&gt;=0)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 26-27 设置U的广播算法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小规模系统，使用缺省值即可</span></span><br><span class="line">0            SWAP (0=bin-exch,1=long,2=mix)</span><br><span class="line">1            swapping threshold</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 28-29行 L和U的数据存放格式</span></span><br><span class="line">0：按列存放</span><br><span class="line">1：按行存放</span><br><span class="line">0            L1 in (0=transposed,1=no-transposed) form</span><br><span class="line">0            U  in (0=transposed,1=no-transposed) form</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 30-31 缺省值即可</span></span><br><span class="line">0            Equilibration (0=no,1=yes)</span><br><span class="line">8            memory alignment in double (&gt; 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-6-测试脚本编写"><a href="#6-6-测试脚本编写" class="headerlink" title="6.6 测试脚本编写"></a>6.6 测试脚本编写</h2><h3 id="6-6-1-本地mpirun测试脚本（Intel版本）"><a href="#6-6-1-本地mpirun测试脚本（Intel版本）" class="headerlink" title="6.6.1 本地mpirun测试脚本（Intel版本）"></a>6.6.1 本地mpirun测试脚本（Intel版本）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地单节点测试，需要根据`lscpu`中numa分区情况(node)的使用mpirun测试xhpl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eg:在未开超线程的情况下，分为两个node，每个node中有12个核，则最佳测试方法为mpirun -np 2 ./myrun.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下为myrun.sh的具体实现</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ulimit -s unlimited</span><br><span class="line">Cores=48</span><br><span class="line">ThreadsNum=`echo &quot;$&#123;Cores&#125;/$&#123;PMI_SIZE&#125;&quot; | bc` # 计算每个进程跑的线程数</span><br><span class="line">case $&#123;PMI_SIZE&#125; in</span><br><span class="line">2)</span><br><span class="line">        case $&#123;PMI_RANK&#125; in</span><br><span class="line">        0)</span><br><span class="line">        export OMP_NUM_THREADS=$&#123;ThreadsNum&#125;</span><br><span class="line">        export HPL_HOST_CORE=&#x27;0-23&#x27;</span><br><span class="line">        ./xhpl -n 1 -b 384 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">        ;;</span><br><span class="line">        1)</span><br><span class="line">        export OMP_NUM_THREADS=$&#123;ThreadsNum&#125;</span><br><span class="line">        export HPL_HOST_CORE=&#x27;24-47&#x27;</span><br><span class="line">        ./xhpl -n 1 -b 384 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-6-2-Slurm-srun测试脚本-FT版本"><a href="#6-6-2-Slurm-srun测试脚本-FT版本" class="headerlink" title="6.6.2 Slurm srun测试脚本(FT版本)"></a>6.6.2 Slurm srun测试脚本(FT版本)</h2><p>xhplrun.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ulimit -s unlimited</span><br><span class="line">Cores=48</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">PMI_SIZE=$SLURM_NPROCS</span><br><span class="line">PMI_RANK=$SLURM_PROCID</span><br><span class="line">MPI_NUM_NODE=$SLURM_NNODES</span><br><span class="line">MPI_PER_NODE=$((PMI_SIZE / MPI_NUM_NODES))</span><br><span class="line">MPI_RANK_FOR_NODE=$((PMI_RANK % MPI_PER_NODE))</span><br><span class="line"></span><br><span class="line">PRO_SIZE=$&#123;MPI_PER_NODE&#125;</span><br><span class="line">PMI_RANK_my=$&#123;MPI_RANK_FOR_NODE&#125;</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">echo $&#123;PRO_SIZE&#125; $&#123;PMI_RANK_my&#125; $&#123;threads&#125; $&#123;PMI_SIZE&#125; $&#123;PMI_RANK&#125; $&#123;MPI_NUM_NODES&#125; $&#123;MPI_PER_NODE&#125; $&#123;MPI_RANK_FOR_NODE&#125;</span><br><span class="line"></span><br><span class="line">export HPL_CMDLINE=1</span><br><span class="line">case $&#123;PRO_SIZE&#125; in</span><br><span class="line">1)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-1 -N 0-1 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0,4 -N 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-63&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -m 3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-31&#x27;</span><br><span class="line">numactl -i 4-7 -N 0-3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 4-7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -m 7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-63&#x27;</span><br><span class="line">numactl -i 0-3 -N 4-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta">#</span><span class="bash">mpirun -n 1 numactl -i 0-3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span> : -n 1 numactl -i 4-7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>yhrun 提交作业 runpro.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">duqi</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 5 ]</span><br><span class="line">then</span><br><span class="line">        echo Usage: ./runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir</span><br><span class="line">        exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export HPL_CMDLINE=1</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/mpi3/lib:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">nodes=$&#123;1&#125;</span><br><span class="line">nnodes=$&#123;2&#125;</span><br><span class="line">nprocs=$&#123;3&#125;</span><br><span class="line">nmem=$&#123;4&#125;</span><br><span class="line">logdir=$&#123;5&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;logdir&#125;</span><br><span class="line"></span><br><span class="line">tnprocs=$(($&#123;nnodes&#125;*$&#123;nprocs&#125;))</span><br><span class="line">P=1</span><br><span class="line">Q=1</span><br><span class="line">for i in `seq 1 $&#123;tnprocs&#125;`</span><br><span class="line">do</span><br><span class="line">        for j in `seq 1 $&#123;tnprocs&#125;`</span><br><span class="line">        do</span><br><span class="line">                PQ=$(($&#123;i&#125;*$&#123;j&#125;))</span><br><span class="line">                if [ $&#123;PQ&#125; -eq $&#123;tnprocs&#125; ] &amp;&amp; [ $&#123;i&#125; -le $&#123;j&#125; ]</span><br><span class="line">                then</span><br><span class="line">                        P=$&#123;i&#125;</span><br><span class="line">                        Q=$&#123;j&#125;</span><br><span class="line">                fi</span><br><span class="line">        done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in `yhcontrol show hostname $&#123;nodes&#125;`</span><br><span class="line">do</span><br><span class="line">        scp HPL.dat $i:/root/linpack &amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">sleep 1</span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">runnodes=&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">for i in `yhcontrol show hostname $&#123;nodes&#125;`</span><br><span class="line">do</span><br><span class="line">        runnodes+=$&#123;i&#125;,</span><br><span class="line">        let j++</span><br><span class="line">        if [ $&#123;j&#125; -eq $&#123;nnodes&#125; ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;yhrun -p all -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D /root/linpack /root/linpack/xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log &amp;&quot;</span><br><span class="line">                echo $&#123;runnodes&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log</span><br><span class="line">                yhrun -p all -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D /root/linpack /root/linpack/xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log &amp;</span><br><span class="line">                j=0</span><br><span class="line">                runnodes=&#x27;&#x27;</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="6-7-Bios设置"><a href="#6-7-Bios设置" class="headerlink" title="6.7 Bios设置"></a>6.7 Bios设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">琦哥的：</span><br><span class="line">    UPI Configuration</span><br><span class="line">        Link Lop -&gt; disable</span><br><span class="line">        Link L1  -&gt; disable </span><br><span class="line">        IO Directory Cache -&gt; enable</span><br><span class="line">        Isoc Mode -&gt; enable</span><br><span class="line"></span><br><span class="line">    Memory Configuration</span><br><span class="line">        Eufsrce POR -&gt; enable</span><br><span class="line">        PPR Type -&gt; Soft PPR</span><br><span class="line">        Memory Frequency -&gt; 2666</span><br><span class="line">        Data Scrambling for NVMDIMM -&gt; enable</span><br><span class="line">        Data Scrambling for DDR4 -&gt; enable</span><br><span class="line">        Enable AOR -&gt; enable</span><br><span class="line">        Refresh Option -&gt; enable</span><br><span class="line">        Memory RAS</span><br><span class="line">            Memory Rank Sparing -&gt; enable</span><br><span class="line"></span><br><span class="line">    IIO Configuration</span><br><span class="line">        PCI-E Port Max Payload Size -&gt; 256B</span><br><span class="line"></span><br><span class="line">    CPU P-State</span><br><span class="line">        SpeedStep -&gt; disable/enable?</span><br><span class="line">        PBF </span><br><span class="line">        Hardware P-State -&gt; enable</span><br><span class="line">        Package c state -&gt; No limit </span><br><span class="line">	</span><br><span class="line">网上找的系统Bios设置优化</span><br><span class="line">    关闭超线程</span><br><span class="line">    打开EIST</span><br><span class="line">    打开Turbo Mode</span><br><span class="line">    Boot Performance mode设置为max performance</span><br><span class="line">    Energy Performance BIAS设置为Performance</span><br><span class="line">    打开Monitor/Mwait</span><br><span class="line">    Package C stat limit设置为C0/C1 state</span><br><span class="line">    关闭CPU C3 report</span><br><span class="line">    关闭CPU C6 report</span><br><span class="line">    关闭Enhanced Halt State</span><br><span class="line">    关闭Intel VT for Directed I/O</span><br><span class="line">    Linux OS下CPU Power Management设置为max performance</span><br><span class="line">    QPI及Memory Frequency保持为Max Frequency</span><br><span class="line">    关闭NUMA功能 </span><br></pre></td></tr></table></figure>

<h2 id="6-8-结果反馈"><a href="#6-8-结果反馈" class="headerlink" title="6.8 结果反馈"></a>6.8 <span id="jump">结果反馈</span></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">linpack测试以我们为主导</span></span><br><span class="line"></span><br><span class="line">1、grep FAILED 关键字,查看是否有节点计算错误</span><br><span class="line">2、grep WR 查看节点性能是否正常</span><br><span class="line">3、统计跑死的点</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何反馈？</span></span><br><span class="line">一轮Linpack40分钟测试完成</span><br><span class="line">	一、6个点本是drain*状态</span><br><span class="line">	二、3个点跑死，cn[1,2,3]</span><br><span class="line">	三、5个点Linpack计算FAILED</span><br><span class="line">	四、其他点linpakc性能正常</span><br><span class="line">可以考虑更换下一批</span><br></pre></td></tr></table></figure>

<h2 id="6-9-风冷系统linpack测试全过程记录"><a href="#6-9-风冷系统linpack测试全过程记录" class="headerlink" title="6.9 风冷系统linpack测试全过程记录"></a>6.9 风冷系统linpack测试全过程记录</h2><blockquote>
<h5 id="1、了解风冷系统的架构"><a href="#1、了解风冷系统的架构" class="headerlink" title="1、了解风冷系统的架构"></a>1、了解风冷系统的架构</h5><p>按批次测试，测完一批换下一批</p>
<p>一批为192个节点，每个框32个节点，共6个框</p>
<p>每个节点128G内存，芯片为FT2000+, 通过mhz获取频率为2000（降频），64物理核</p>
<p>系统版本： 4.19.46-cn+</p>
<h5 id="2、计算每个节点的理论峰值"><a href="#2、计算每个节点的理论峰值" class="headerlink" title="2、计算每个节点的理论峰值"></a>2、计算每个节点的理论峰值</h5><p>2000 * 128 &#x2F; 64 * 2 * 64&#x3D; 512000</p>
<h5 id="3、开始测试"><a href="#3、开始测试" class="headerlink" title="3、开始测试"></a>3、开始测试</h5><p>runpro.sh脚本参数说明:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">./runpro.sh NodeList NodeBind ProcessesPerNode MemSize</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">NodeList 节点列表,例如cn[0-8]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">NodeBind 几个节点绑定运行，例如2，则计算效率时，需要将结果得到的效率/2/512</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">ProcessesPerNode 每给节点运行几个xhpl进程，根据numa node来，FT一般是8</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">MemSize 每个节点中，每个进程分配的内存，一般使用到约总内存的80%，例如单节点128G，填写12000（单位为Mb），则总使用96G内存</span></span><br></pre></td></tr></table></figure>

<p>单节点测试：</p>
<p>​	不需要互联测试网络联通性，仅对单节点进行压力测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">./runpro.sh cn0 1 8 12000 logdir</span></span><br></pre></td></tr></table></figure>

<p>多节点测试：</p>
<p>​	需要互联测试网络联通性， 2，4， 8， 16， 32， 64， 128，如果要求测多节点稳定性，测试的8点8进8线，结果按<a href="#jump">章节6.8</a>反馈</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">./runpro.sh cn0 1 8 12000 logdir</span></span><br></pre></td></tr></table></figure>

<p>问题解决一：</p>
<p>​	测试到128节点，性能异常，效率仅有43%</p>
<p>互联那边回应：</p>
<p>​	节点数超过64，通信就跨框</p>
<p>琦哥建议的做法：</p>
<p>​	把128个节点分到4个框，测试一下，看是不是带宽的原因</p>
<p>最后的解决方法：</p>
<p>​	网络拓扑更换，矩阵值不能相等，使用原本32 x 32，改为16 x 64，但是换成160节点后还是有问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">./runpro.sh cn[xx-xx] 128 8 12000 dir</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">其中执行的xhplrun.sh的参数为</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">xhplrun.sh 32 32 12000</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h1 id="七、Lmbench-测试"><a href="#七、Lmbench-测试" class="headerlink" title="七、Lmbench 测试"></a>七、Lmbench 测试</h1><h2 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h2><p>​	Lmbench是一套简易，可移植的，符合ANSI&#x2F;C标准为UNIX&#x2F;POSIX而制定的微型测评工具。一般来说，它衡量两个关键特征：反应时间和带宽。LmBench旨在使系统开发者深入了解关键操作的基础成本。</p>
<h2 id="7-2-工具安装"><a href="#7-2-工具安装" class="headerlink" title="7.2 工具安装"></a>7.2 工具安装</h2><p>获取源包：</p>
<p>​	lmbench3.tar.gz</p>
<p>gcc编译安装</p>
<h2 id="7-3-测试步骤"><a href="#7-3-测试步骤" class="headerlink" title="7.3 测试步骤"></a>7.3 测试步骤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">make results</span><br><span class="line">make see</span><br><span class="line">内存10G。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">错误处理：</span><br><span class="line">[root@cn9 lmbench3]# cd src/</span><br><span class="line">[root@cn9 src]# make results</span><br><span class="line">gmake[1]: Entering directory `/home/testcpu/test652/tools/lmbench3/src&#x27;</span><br><span class="line">gmake[1]: *** No rule to make target `../SCCS/s.ChangeSet&#x27;, needed by `bk.ver&#x27;.  Stop.</span><br><span class="line">gmake[1]: Leaving directory `/home/testcpu/test652/tools/lmbench3/src&#x27;</span><br><span class="line">解决方法：</span><br><span class="line">	vim Makefile</span><br><span class="line">	231行修改：</span><br><span class="line"><span class="meta">	$</span><span class="bash">O/lmbench : ../scripts/lmbench bk.ver</span></span><br><span class="line">	改为</span><br><span class="line"><span class="meta">	$</span><span class="bash">O/lmbench : ../scripts/lmbench</span></span><br></pre></td></tr></table></figure>

<h1 id="八、IOR-测试（暂无）"><a href="#八、IOR-测试（暂无）" class="headerlink" title="八、IOR 测试（暂无）"></a>八、IOR 测试（暂无）</h1><h1 id="九、alltoall测试"><a href="#九、alltoall测试" class="headerlink" title="九、alltoall测试"></a>九、alltoall测试</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yhrun -n 128 -N 8 -w cn34,cn35,cn36,cn37,cn38,cn39,cn40,cn41, /root/xm_alltoall 102400 1000</span><br></pre></td></tr></table></figure>

<h1 id="附录：常用工具链编译方法"><a href="#附录：常用工具链编译方法" class="headerlink" title="附录：常用工具链编译方法"></a>附录：常用工具链编译方法</h1><h2 id="一、GCC编译"><a href="#一、GCC编译" class="headerlink" title="一、GCC编译"></a>一、GCC编译</h2><p>需要依次编译依赖软件，然后在编译gcc中使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置isl的库路径</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/testcpu/test652/tools/gcc830/lib:$LD_LIBRARY_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译GCC</span></span><br><span class="line">../configure --prefix=/home/testcpu/test652/tools/gcc830 --enable-lto --disable-bootstrap --enable-languages=c,c++,fortran --with-gmp=/home/testcpu/test652/tools/gcc830 --with-mpfr=/home/testcpu/test652/tools/gcc830 --with-mpc=/home/testcpu/test652/tools/gcc830 --with-isl=/home/testcpu/test652/tools/gcc830</span><br></pre></td></tr></table></figure>

<h3 id="1-1-依赖软件编译"><a href="#1-1-依赖软件编译" class="headerlink" title="1.1 依赖软件编译"></a>1.1 依赖软件编译</h3><h4 id="1-1-2-编译安装gmp"><a href="#1-1-2-编译安装gmp" class="headerlink" title="1.1.2 编译安装gmp"></a>1.1.2 编译安装gmp</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/testcpu/test652/tools/gcc830</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">./configure --with-gmp=/home/testcpu/test652/tools/gcc83 --with-mpfr=/home/testcpu/test652/tools/gcc83  --prefix=/home/testcpu/test652/tools/gcc83</span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-编译安装mpfr"><a href="#1-1-3-编译安装mpfr" class="headerlink" title="1.1.3 编译安装mpfr"></a>1.1.3 编译安装mpfr</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/testcpu/test652/tools/gcc830 --with-gmp=/home/testcpu/test652/tools/gcc830</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="1-1-4-编译安装mpc"><a href="#1-1-4-编译安装mpc" class="headerlink" title="1.1.4 编译安装mpc"></a>1.1.4 编译安装mpc</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/testcpu/test652/tools/gcc830 --with-gmp=/home/testcpu/test652/tools/gcc830 --with-mpfr=/home/testcpu/test652/tools/gcc830</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="1-1-5-编译安装isl"><a href="#1-1-5-编译安装isl" class="headerlink" title="1.1.5 编译安装isl"></a>1.1.5 编译安装isl</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/testcpu/test652/tools/gcc830 --with-gmp-prefix=/home/testcpu/test652/tools/gcc830</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> yum install gcc-* gtk2 gtk3 x11 libX11.x86_64 libX11-devel.x86_64 libXorg libXss libXScrnSaver.x86_64 xorg-x11-server-Xorg.x86_64 xulrunner.x86_64 xulrunner.i686 libstdc++.i686 libstdc++-devel.i686</span><br><span class="line">glibc.i686 glibc-devel.i686 libgcc* xulrunner.x86_64 xulrunner.i686 glibc-devel.x86_64 glibc.x86_64 autoconf-archive.noarch gtk2 gtk3 pango libXScrnSaver libX11.x86_64 libX11-devel.x86_64 libX11-common.noarch libxkbcommon-x11.x86_64 xorg-x11-server-common.x86_64 libstdc++* -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mount -o loop -t iso9660 /home/testcpu/test652/images/rhel-server-7.6-x86_64-dvd.iso /home/testcpu/test652/mnt/CDROM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install gcc-* gtk2 gtk3 glibc-devel.i686 x11 libX11.x86_64 libX11-devel.x86_64 libXorg libXss libXScrnSaver.x86_64 xorg-x11-server-Xorg.x86_64 xulrunner.x86_64 xulrunner.i686 libstdc++.i686 libstdc++-devel.i686 glibc* libgcc* xulrunner* autoconf-archive.noarch gtk2 gtk3 pango libXScrnSaver libX11.x86_64 libX11-devel.x86_64 libX11-common.noarch libxkbcommon-x11.x86_64 xorg-x11-server-common.x86_64 libstdc++* -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二、MPICH3编译"><a href="#二、MPICH3编译" class="headerlink" title="二、MPICH3编译"></a>二、MPICH3编译</h2><p>设置gcc830的环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/home/testcpu/test652/tools/gcc830/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/home/testcpu/test652/tools/gcc830/lib:$LD_LIBRARY_PATH</span><br><span class="line">export LD_INCLUDE_PATH=/home/testcpu/test652/tools/gcc830/include:$LD_INCLUDE_PATH</span><br><span class="line">export CPATH=/home/testcpu/test652/tools/gcc830/include:$CPATH</span><br><span class="line">export LD_LIBRARY_PATH=/home/testcpu/test652/tools/gcc830/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export LD_LIBRARY_PATH=/home/testcpu/test652/tools/gcc830/libexec:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>

<p>再编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/testcpu/test652/tools/mpi3-gcc830 --enable-fast --enable-shared=yes --enable-threads=runtime --with-ch3-rank-bits=32 --enable-romio --with-file-system=ufs+nfs --with-mpe</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>设置环境变量使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/home/testcpu/test652/tools/mpi3-gcc830/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/home/testcpu/test652/tools/mpi3-gcc830/lib:$LD_LIBRARY_PATH</span><br><span class="line">export LD_INCLUDE_PATH=/home/testcpu/test652/tools/mpi3-gcc830/include:$LD_INCLUDE_PATH</span><br></pre></td></tr></table></figure>



<h3 id="三、Redhat设置本地镜像源"><a href="#三、Redhat设置本地镜像源" class="headerlink" title="三、Redhat设置本地镜像源"></a>三、Redhat设置本地镜像源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o loop -t iso9660 /home/IOSYS/test652/images/rhel-server-7.6-x86_64-dvd.iso /home/IOSYS/test652/mnt/CDROM</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/redhat.repo</span><br><span class="line"></span><br><span class="line">[rhel7.6]</span><br><span class="line">name=rhel7.6</span><br><span class="line">baseurl=file:///home/testcpu/test652/mnt/CDROM</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line">yum clean</span><br><span class="line">yum update</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>

<h2 id="四、找不到so库的解决方法"><a href="#四、找不到so库的解决方法" class="headerlink" title="四、找不到so库的解决方法"></a>四、找不到so库的解决方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方法一：</span></span><br><span class="line">	设置LD_LIBRARY_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：</span></span><br><span class="line"> 	vim /etc/ld.so.conf</span><br><span class="line"> 	----------------------------------------------------</span><br><span class="line"> 	include ld.so.conf.d/*.conf</span><br><span class="line">	/opt/intel/compilers_and_libraries/linux/lib/intel64</span><br><span class="line">	ldconfig 更新</span><br></pre></td></tr></table></figure>

<h2 id="五、复制以及查看端口占用"><a href="#五、复制以及查看端口占用" class="headerlink" title="五、复制以及查看端口占用"></a>五、复制以及查看端口占用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看端口占用</span></span><br><span class="line">netstat -nultp | grep 8080</span><br><span class="line">netstat -anp  | grep 80</span><br><span class="line">netstat -ano | grep 18130</span><br><span class="line">lsof -i:18130</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制</span></span><br><span class="line">rsync -chavP /var/opt/gitlab/postgresql .</span><br><span class="line">rsync -avzP 复制显示进度</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Bios版本</span></span><br><span class="line">dmidecode</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mpiicc -DAdd__ -DF77_INTEGER=int -DStringSunStyle -DHPL_DETAILED_TIMING -DHPL_PROGRESS_REPORT -I/root/hpl/include -I/root/hpl/include/Linux_Intel64 -I/opt/intel/compilers_and_libraries_2019.4.243/linux/mkl/mkl/include  -O3 -w -ansi-alias -i-static -z noexecstack -z relro -z now -nocompchk -Wall -qopenmp -mt_mpi -o /root/hpl/bin/Linux_Intel64/xhpl HPL_pddriver.o         HPL_pdinfo.o           HPL_pdtest.o /root/hpl/lib/Linux_Intel64/libhpl.a  -L/opt/intel/compilers_and_libraries_2019.4.243/linux/mkl/mkl/lib/intel64 -Wl,--start-group /opt/intel/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_intel_lp64.a /opt/intel/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_intel_thread.a /opt/intel/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -ldl</span><br></pre></td></tr></table></figure>

<h2 id="六、查看cpu主频率-和-内存信息"><a href="#六、查看cpu主频率-和-内存信息" class="headerlink" title="六、查看cpu主频率 和 内存信息"></a>六、查看cpu主频率 和 内存信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看CPU信息</span></span><br><span class="line">lscpu 其中 sockets个数代表物理核个数</span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line">lmbench的mhz</span><br><span class="line">/usr/bin/turbostat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看内存信息</span></span><br><span class="line">cat /proc/meminfo</span><br><span class="line">dmidecode | grep -A 16 &quot;Memory Device&quot;、</span><br></pre></td></tr></table></figure>

<h2 id="七、GLSL-1-50-is-not-supported"><a href="#七、GLSL-1-50-is-not-supported" class="headerlink" title="七、GLSL 1.50 is not supported"></a>七、GLSL 1.50 is not supported</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 报错：</span></span><br><span class="line">ERROR: In /home/gs/src/VTK8.2/VTK-8.2.0/Rendering/OpenGL2/vtkShaderProgram.cxx, line 447</span><br><span class="line">vtkShaderProgram (0x2b87270): 0:1(10): error: GLSL 1.50 is not supported. Supported versions are: 1.10, 1.20, 1.30, 1.00 ES, and 3.00 ES</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方法</span></span><br><span class="line">export MESA_GL_VERSION_OVERRIDE=3.2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cn[16-19,24-27,144-147,152-155]</span><br></pre></td></tr></table></figure>

<h2 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h2><h3 id="8-1-Linpack脚本"><a href="#8-1-Linpack脚本" class="headerlink" title="8.1 Linpack脚本"></a>8.1 Linpack脚本</h3><blockquote>
<p>runpro.sh</p>
<p>.&#x2F;runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir</p>
<p>node_list 节点列表</p>
<p>nodes_num 几个点连在一起跑，单点 双点 多点</p>
<p> proc_per_node 每个节点跑几个进程，看node分为几个，FT一般是8</p>
<p> mem 12000 每个进程分配的内存，*8 大概&#x3D; 总内存的80%</p>
<p> logdir 日志文件</p>
<p> 单点8进程，一轮≈35分钟</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">duqi</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 5 ]</span><br><span class="line">then</span><br><span class="line">        echo Usage: ./runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir</span><br><span class="line">        exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export HPL_CMDLINE=1</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/mpi3/lib:LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">nodes=$&#123;1&#125;</span><br><span class="line">nnodes=$&#123;2&#125;</span><br><span class="line">nprocs=$&#123;3&#125;</span><br><span class="line">nmem=$&#123;4&#125;</span><br><span class="line">logdir=$&#123;5&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;logdir&#125;</span><br><span class="line"></span><br><span class="line">tnprocs=$(($&#123;nnodes&#125;*$&#123;nprocs&#125;))</span><br><span class="line">P=1</span><br><span class="line">Q=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_max=1</span><br><span class="line">for i in `seq 1 $&#123;tnprocs&#125;`</span><br><span class="line">do</span><br><span class="line">        j=$(($&#123;i&#125;*$&#123;i&#125;))</span><br><span class="line">        if [ $&#123;tnprocs&#125; -le $&#123;j&#125; ]; then</span><br><span class="line">                num_max=$&#123;i&#125;</span><br><span class="line">                break</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">for i in `seq 1 $&#123;num_max&#125;`</span><br><span class="line">do</span><br><span class="line">        for j in `seq $&#123;num_max&#125; $&#123;tnprocs&#125;`</span><br><span class="line">        do</span><br><span class="line">                PQ=$(($&#123;i&#125;*$&#123;j&#125;))</span><br><span class="line">                if [ $&#123;PQ&#125; -eq $&#123;tnprocs&#125; ]</span><br><span class="line">                then</span><br><span class="line">                        P=$&#123;i&#125;</span><br><span class="line">                        Q=$&#123;j&#125;</span><br><span class="line">                fi</span><br><span class="line">        done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in `yhcontrol show hostname $&#123;nodes&#125;`</span><br><span class="line">do</span><br><span class="line">        scp HPL.dat $i:/root/linpack &amp;</span><br><span class="line">done</span><br><span class="line">sleep 1</span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">runnodes=&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">for i in `yhcontrol show hostname $&#123;nodes&#125;`</span><br><span class="line">do</span><br><span class="line">        runnodes+=$&#123;i&#125;,</span><br><span class="line">        let j++</span><br><span class="line">        if [ $&#123;j&#125; -eq $&#123;nnodes&#125; ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D /root/linpack /root/linpack/xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log &amp;&quot;</span><br><span class="line">                echo $&#123;runnodes&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log &amp;</span><br><span class="line">                echo &quot;yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D /root/linpack /root/linpack/xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125;&quot; &amp;&gt;&gt; $&#123;logdir&#125;/list.log</span><br><span class="line">                yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D /root/linpack /root/linpack/xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;/$&#123;i&#125;.log &amp;</span><br><span class="line">                j=0</span><br><span class="line">                runnodes=&#x27;&#x27;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>xhplrun.sh</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">duqi</span></span><br><span class="line"></span><br><span class="line">ulimit -s unlimited</span><br><span class="line"></span><br><span class="line">Cores=64</span><br><span class="line"><span class="meta">#</span><span class="bash">==========================================================</span></span><br><span class="line">PMI_SIZE=$SLURM_NPROCS</span><br><span class="line"></span><br><span class="line">PMI_RANK=$SLURM_PROCID</span><br><span class="line"></span><br><span class="line">MPI_NUM_NODES=$SLURM_NNODES</span><br><span class="line"></span><br><span class="line">MPI_PER_NODE=$((PMI_SIZE / MPI_NUM_NODES))</span><br><span class="line"></span><br><span class="line">MPI_RANK_FOR_NODE=$((PMI_RANK % MPI_PER_NODE))</span><br><span class="line"><span class="meta">#</span><span class="bash">==========================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads=`echo $&#123;Cores&#125;*$&#123;SLURM_NNODES&#125;/$&#123;PMI_SIZE&#125; | bc`</span><br><span class="line"></span><br><span class="line">PRO_SIZE=$&#123;MPI_PER_NODE&#125;</span><br><span class="line">PMI_RANK_my=$&#123;MPI_RANK_FOR_NODE&#125;</span><br><span class="line"></span><br><span class="line">echo $&#123;PRO_SIZE&#125; $&#123;PMI_RANK_my&#125; $&#123;threads&#125; $&#123;PMI_SIZE&#125; $&#123;PMI_RANK&#125; $&#123;MPI_NUM_NODES&#125; $&#123;MPI_PER_NODE&#125; $&#123;MPI_RANK_FOR_NODE&#125;</span><br><span class="line"></span><br><span class="line">export HPL_CMDLINE=1</span><br><span class="line">case $&#123;PRO_SIZE&#125; in</span><br><span class="line">1)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-1 -N 0-1 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0,4 -N 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-63&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -m 3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-31&#x27;</span><br><span class="line">numactl -i 4-7 -N 0-3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 4-7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -m 7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-63&#x27;</span><br><span class="line">numactl -i 0-3 -N 4-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta">#</span><span class="bash">mpirun -n 1 numactl -i 0-3 -N 0-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span> : -n 1 numactl -i 4-7 -N 4-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-15&#x27;</span><br><span class="line">numactl -i 0-7 -N 0-1 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 2-3 -N 0-1 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;16-31&#x27;</span><br><span class="line">numactl -i 0-7 -N 2-3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 4-5 -N 2-3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-47&#x27;</span><br><span class="line">numactl -i 0-7 -N 4-5 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 6-7 -N 4-5 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;48-63&#x27;</span><br><span class="line">numactl -i 0-7 -N 6-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-1 -N 6-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-7&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 4 -N 0 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;8-15&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 2 -N 1 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;16-23&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 6 -N 2 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;24-31&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 1 -N 3 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-39&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0 -N 4 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;40-47&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 7 -N 5 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;48-55&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 5 -N 6 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;56-63&#x27;</span><br><span class="line">numactl -i 0-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 3 -N 7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">16)</span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-3&#x27;</span><br><span class="line">numactl -i 0-7 -C 0-3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;4-7&#x27;</span><br><span class="line">numactl -i 0-7 -C 4-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;8-11&#x27;</span><br><span class="line">numactl -i 0-7 -C 8-11 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;12-15&#x27;</span><br><span class="line">numactl -i 0-7 -C 12-15 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;16-19&#x27;</span><br><span class="line">numactl -i 0-7 -C 16-19 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;20-23&#x27;</span><br><span class="line">numactl -i 0-7 -C 20-23 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;24-27&#x27;</span><br><span class="line">numactl -i 0-7 -C 24-27 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;28-31&#x27;</span><br><span class="line">numactl -i 0-7 -C 28-31 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-35&#x27;</span><br><span class="line">numactl -i 0-7 -C 32-35 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">9)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;36-39&#x27;</span><br><span class="line">numactl -i 0-7 -C 36-39 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">10)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;40-43&#x27;</span><br><span class="line">numactl -i 0-7 -C 40-43 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">11)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;44-47&#x27;</span><br><span class="line">numactl -i 0-7 -C 44-47 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">12)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;48-51&#x27;</span><br><span class="line">numactl -i 0-7 -C 48-51 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">13)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;52-55&#x27;</span><br><span class="line">numactl -i 0-7 -C 52-55 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">14)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;56-59&#x27;</span><br><span class="line">numactl -i 0-7 -C 56-59 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">15)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;60-63&#x27;</span><br><span class="line">numactl -i 0-7 -C 60-63 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">32)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> OMP_NUM_THREADS=<span class="variable">$&#123;threads&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">;;</span></span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0-1&#x27;</span><br><span class="line">numactl -i 0-7 -C 0-1 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;2-3&#x27;</span><br><span class="line">numactl -i 0-7 -C 2-3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;4-5&#x27;</span><br><span class="line">numactl -i 0-7 -C 4-5 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;6-7&#x27;</span><br><span class="line">numactl -i 0-7 -C 6-7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;8-9&#x27;</span><br><span class="line">numactl -i 0-7 -C 8-9 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;10-11&#x27;</span><br><span class="line">numactl -i 0-7 -C 10-11 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;12-13&#x27;</span><br><span class="line">numactl -i 0-7 -C 12-13 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;14-15&#x27;</span><br><span class="line">numactl -i 0-7 -C 14-15 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;16-17&#x27;</span><br><span class="line">numactl -i 0-7 -C 16-17 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">9)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;18-19&#x27;</span><br><span class="line">numactl -i 0-7 -C 18-19 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">10)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;20-21&#x27;</span><br><span class="line">numactl -i 0-7 -C 20-21 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">11)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;22-23&#x27;</span><br><span class="line">numactl -i 0-7 -C 22-23 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">12)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;24-25&#x27;</span><br><span class="line">numactl -i 0-7 -C 24-25 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">13)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;26-27&#x27;</span><br><span class="line">numactl -i 0-7 -C 26-27 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">14)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;28-29&#x27;</span><br><span class="line">numactl -i 0-7 -C 28-29 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">15)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;30-31&#x27;</span><br><span class="line">numactl -i 0-7 -C 30-31 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">16)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32-33&#x27;</span><br><span class="line">numactl -i 0-7 -C 32-33 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">17)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;34-35&#x27;</span><br><span class="line">numactl -i 0-7 -C 34-35 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">18)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;36-37&#x27;</span><br><span class="line">numactl -i 0-7 -C 36-37 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">19)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;38-39&#x27;</span><br><span class="line">numactl -i 0-7 -C 38-39 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">20)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;40-41&#x27;</span><br><span class="line">numactl -i 0-7 -C 40-41 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">21)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;42-43&#x27;</span><br><span class="line">numactl -i 0-7 -C 42-43 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">22)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;44-45&#x27;</span><br><span class="line">numactl -i 0-7 -C 44-45 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">23)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;46-47&#x27;</span><br><span class="line">numactl -i 0-7 -C 46-47 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">24)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;48-49&#x27;</span><br><span class="line">numactl -i 0-7 -C 48-49 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">25)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;50-51&#x27;</span><br><span class="line">numactl -i 0-7 -C 50-51 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">26)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;52-53&#x27;</span><br><span class="line">numactl -i 0-7 -C 52-53 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">27)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;54-55&#x27;</span><br><span class="line">numactl -i 0-7 -C 54-55 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">28)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;56-57&#x27;</span><br><span class="line">numactl -i 0-7 -C 56-57 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">29)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;58-59&#x27;</span><br><span class="line">numactl -i 0-7 -C 58-59 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">30)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;60-61&#x27;</span><br><span class="line">numactl -i 0-7 -C 60-61 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">31)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;62-63&#x27;</span><br><span class="line">numactl -i 0-7 -C 62-63 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">64)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> GOMP_CPU_AFFINITY=<span class="string">&#x27;0-63&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">numactl -i 0-7 ./xhpl -n 1 -b 192 -p <span class="variable">$&#123;1&#125;</span> -q <span class="variable">$&#123;2&#125;</span> -m <span class="variable">$&#123;3&#125;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">;;</span></span><br><span class="line">case $&#123;PMI_RANK_my&#125; in</span><br><span class="line">0)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;0&#x27;</span><br><span class="line">numactl -i 0-7 -C 0 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">1)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;1&#x27;</span><br><span class="line">numactl -i 0-7 -C 1 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;2&#x27;</span><br><span class="line">numactl -i 0-7 -C 2 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;3&#x27;</span><br><span class="line">numactl -i 0-7 -C 3 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;4&#x27;</span><br><span class="line">numactl -i 0-7 -C 4 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;5&#x27;</span><br><span class="line">numactl -i 0-7 -C 5 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;6&#x27;</span><br><span class="line">numactl -i 0-7 -C 6 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;7&#x27;</span><br><span class="line">numactl -i 0-7 -C 7 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;8&#x27;</span><br><span class="line">numactl -i 0-7 -C 8 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">9)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;9&#x27;</span><br><span class="line">numactl -i 0-7 -C 9 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">10)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;10&#x27;</span><br><span class="line">numactl -i 0-7 -C 10 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">11)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;11&#x27;</span><br><span class="line">numactl -i 0-7 -C 11 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">12)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;12&#x27;</span><br><span class="line">numactl -i 0-7 -C 12 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">13)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;13&#x27;</span><br><span class="line">numactl -i 0-7 -C 13 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">14)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;14&#x27;</span><br><span class="line">numactl -i 0-7 -C 14 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">15)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;15&#x27;</span><br><span class="line">numactl -i 0-7 -C 15 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">16)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;16&#x27;</span><br><span class="line">numactl -i 0-7 -C 16 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">17)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;17&#x27;</span><br><span class="line">numactl -i 0-7 -C 17 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">18)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;18&#x27;</span><br><span class="line">numactl -i 0-7 -C 18 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">19)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;19&#x27;</span><br><span class="line">numactl -i 0-7 -C 19 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">20)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;20&#x27;</span><br><span class="line">numactl -i 0-7 -C 20 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">21)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;21&#x27;</span><br><span class="line">numactl -i 0-7 -C 21 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">22)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;22&#x27;</span><br><span class="line">numactl -i 0-7 -C 22 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">23)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;23&#x27;</span><br><span class="line">numactl -i 0-7 -C 23 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">24)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;24&#x27;</span><br><span class="line">numactl -i 0-7 -C 24 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">25)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;25&#x27;</span><br><span class="line">numactl -i 0-7 -C 25 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">26)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;26&#x27;</span><br><span class="line">numactl -i 0-7 -C 26 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">27)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;27&#x27;</span><br><span class="line">numactl -i 0-7 -C 27 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">28)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;28&#x27;</span><br><span class="line">numactl -i 0-7 -C 28 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">29)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;29&#x27;</span><br><span class="line">numactl -i 0-7 -C 29 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">30)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;30&#x27;</span><br><span class="line">numactl -i 0-7 -C 30 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">31)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;31&#x27;</span><br><span class="line">numactl -i 0-7 -C 31 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">32)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;32&#x27;</span><br><span class="line">numactl -i 0-7 -C 32 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">33)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;33&#x27;</span><br><span class="line">numactl -i 0-7 -C 33 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">34)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;34&#x27;</span><br><span class="line">numactl -i 0-7 -C 34 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">35)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;35&#x27;</span><br><span class="line">numactl -i 0-7 -C 35 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">36)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;36&#x27;</span><br><span class="line">numactl -i 0-7 -C 36 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">37)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;37&#x27;</span><br><span class="line">numactl -i 0-7 -C 37 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">38)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;38&#x27;</span><br><span class="line">numactl -i 0-7 -C 38 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">39)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;39&#x27;</span><br><span class="line">numactl -i 0-7 -C 39 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">40)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;40&#x27;</span><br><span class="line">numactl -i 0-7 -C 40 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">41)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;41&#x27;</span><br><span class="line">numactl -i 0-7 -C 41 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">42)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;42&#x27;</span><br><span class="line">numactl -i 0-7 -C 42 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">43)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;43&#x27;</span><br><span class="line">numactl -i 0-7 -C 43 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">44)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;44&#x27;</span><br><span class="line">numactl -i 0-7 -C 44 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">45)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;45&#x27;</span><br><span class="line">numactl -i 0-7 -C 45 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">46)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;46&#x27;</span><br><span class="line">numactl -i 0-7 -C 46 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">47)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;47&#x27;</span><br><span class="line">numactl -i 0-7 -C 47 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">48)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;48&#x27;</span><br><span class="line">numactl -i 0-7 -C 48 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">49)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;49&#x27;</span><br><span class="line">numactl -i 0-7 -C 49 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">50)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;50&#x27;</span><br><span class="line">numactl -i 0-7 -C 50 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">51)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;51&#x27;</span><br><span class="line">numactl -i 0-7 -C 51 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">52)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;52&#x27;</span><br><span class="line">numactl -i 0-7 -C 52 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">53)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;53&#x27;</span><br><span class="line">numactl -i 0-7 -C 53 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">54)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;54&#x27;</span><br><span class="line">numactl -i 0-7 -C 54 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">55)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;55&#x27;</span><br><span class="line">numactl -i 0-7 -C 55 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">56)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;56&#x27;</span><br><span class="line">numactl -i 0-7 -C 56 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">57)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;57&#x27;</span><br><span class="line">numactl -i 0-7 -C 57 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">58)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;58&#x27;</span><br><span class="line">numactl -i 0-7 -C 58 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">59)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;59&#x27;</span><br><span class="line">numactl -i 0-7 -C 59 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">60)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;60&#x27;</span><br><span class="line">numactl -i 0-7 -C 60 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">61)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;61&#x27;</span><br><span class="line">numactl -i 0-7 -C 61 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">62)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;62&#x27;</span><br><span class="line">numactl -i 0-7 -C 62 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">63)</span><br><span class="line">export OMP_NUM_THREADS=$&#123;threads&#125;</span><br><span class="line">export GOMP_CPU_AFFINITY=&#x27;63&#x27;</span><br><span class="line">numactl -i 0-7 -C 63 ./xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h3 id="8-2-编译问题"><a href="#8-2-编译问题" class="headerlink" title="8.2 编译问题"></a>8.2 编译问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-lc </span><br><span class="line">	解决找不到memcpy问题 </span><br><span class="line">-lstdc++</span><br><span class="line">	解决vtable for xxxx 问题</span><br><span class="line">-lgcc_s</span><br><span class="line">	undefined reference to `_Unwind_Resume&#x27;</span><br><span class="line">	undefined reference to `__popcountdi2&#x27;</span><br><span class="line"><span class="meta">	</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;sys/types.h&gt;</span></span><br><span class="line">	 implicit declaration of function ‘fstat’</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;sys/sysmacros.h&gt;</span></span><br><span class="line">	implicit declaration of function ‘major’</span><br></pre></td></tr></table></figure>

<h1 id="十、Linux操作"><a href="#十、Linux操作" class="headerlink" title="十、Linux操作"></a>十、Linux操作</h1><h2 id="10-1-ncat端口转发"><a href="#10-1-ncat端口转发" class="headerlink" title="10.1 ncat端口转发"></a>10.1 ncat端口转发</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ncat --sh-exec &quot;ncat 25.8.27.6 15929&quot; -l 15929 --keep-open</span><br></pre></td></tr></table></figure>

<h1 id="十一、DDT安装"><a href="#十一、DDT安装" class="headerlink" title="十一、DDT安装"></a>十一、DDT安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp Licence /home/gs/tools/arm/forge/licences/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp Licence.14713 /home/gs/tools/arm/licenceserver/licences/</span></span><br><span class="line"></span><br><span class="line">export PATH=/opt/mpi3.3/bin:/home/gs/tools/arm/forge/bin:/home/gs/tools/arm/licenceserver/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/opt/mpi3.3/lib:$LD_LIBRARY_PATH</span><br><span class="line">ifconfig eth3 hw ether 00:1b:21:14:15:60</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">glex高速网版本的MPI改为本地调试用</span></span><br><span class="line">export MPICH_NO_LOCAL=0 //？不一定需要</span><br><span class="line">export MPICH_NEMESIS_NETMOD=tcp</span><br><span class="line">export PATH=/usr/local/mpi3/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/mpi3/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>



<h1 id="十二、SPEC使用"><a href="#十二、SPEC使用" class="headerlink" title="十二、SPEC使用"></a>十二、SPEC使用</h1><h2 id="12-1-SPEC使用系统工具"><a href="#12-1-SPEC使用系统工具" class="headerlink" title="12.1 SPEC使用系统工具"></a>12.1 SPEC使用系统工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> SEPC设置使用系统的工具</span></span><br><span class="line">vim /home/gs/tools/spack-v5/etc/spack/defaults/packages.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考：</span></span><br><span class="line">../../../lib/spack/docs/build_settings.rst</span><br></pre></td></tr></table></figure>

<h1 id="十三、mi协议"><a href="#十三、mi协议" class="headerlink" title="十三、mi协议"></a>十三、mi协议</h1><h2 id="13-1-使用mi启动调试"><a href="#13-1-使用mi启动调试" class="headerlink" title="13.1 使用mi启动调试"></a>13.1 使用mi启动调试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gs@ft-svr:~/matrix$ gdb --interpreter mi test</span><br><span class="line">=thread-group-added,id=&quot;i1&quot;</span><br><span class="line">~&quot;GNU gdb (Ubuntu 8.2.91.20190405-0ubuntu3) 8.2.91.20190405-git\n&quot;</span><br><span class="line">~&quot;Copyright (C) 2019 Free Software Foundation, Inc.\n&quot;</span><br><span class="line">~&quot;License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.&quot;</span><br><span class="line">~&quot;\nType \&quot;show copying\&quot; and \&quot;show warranty\&quot; for details.\n&quot;</span><br><span class="line">~&quot;This GDB was configured as \&quot;aarch64-linux-gnu\&quot;.\n&quot;</span><br><span class="line">~&quot;Type \&quot;show configuration\&quot; for configuration details.\n&quot;</span><br><span class="line">~&quot;For bug reporting instructions, please see:\n&quot;</span><br><span class="line">~&quot;&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\n&quot;</span><br><span class="line">~&quot;Find the GDB manual and other documentation resources online at:\n    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.&quot;</span><br><span class="line">~&quot;\n\n&quot;</span><br><span class="line">~&quot;For help, type \&quot;help\&quot;.\n&quot;</span><br><span class="line">~&quot;Type \&quot;apropos word\&quot; to search for commands related to \&quot;word\&quot;...\n&quot;</span><br><span class="line">~&quot;Reading symbols from test...\n&quot;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<h2 id="13-2-断点命令（BreakPoint）"><a href="#13-2-断点命令（BreakPoint）" class="headerlink" title="13.2 断点命令（BreakPoint）"></a>13.2 断点命令（BreakPoint）</h2><h3 id="13-2-1-break-after"><a href="#13-2-1-break-after" class="headerlink" title="13.2.1 -break-after"></a>13.2.1 -break-after</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-after number count</span><br><span class="line">第number个断点在执行count次后有效</span><br></pre></td></tr></table></figure>

<h3 id="13-2-2-break-condition"><a href="#13-2-2-break-condition" class="headerlink" title="13.2.2 -break-condition"></a>13.2.2 -break-condition</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-condition number expr</span><br><span class="line">第number个断点在表达式expr为true时有效</span><br></pre></td></tr></table></figure>

<h3 id="13-2-3-break-delete"><a href="#13-2-3-break-delete" class="headerlink" title="13.2.3 -break-delete"></a>13.2.3 -break-delete</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-delete(breakpoint number)+</span><br><span class="line">删除指定number的多个断点</span><br></pre></td></tr></table></figure>

<h3 id="13-2-4-break-disable"><a href="#13-2-4-break-disable" class="headerlink" title="13.2.4 -break-disable"></a>13.2.4 -break-disable</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-disable(breakpoint number)+</span><br><span class="line">使用指定Number的多个断点失效</span><br></pre></td></tr></table></figure>

<h3 id="13-2-5-break-enable"><a href="#13-2-5-break-enable" class="headerlink" title="13.2.5 -break-enable"></a>13.2.5 -break-enable</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-enable(breakpoint number)+</span><br><span class="line">使用指定Number的多个断点生效</span><br></pre></td></tr></table></figure>

<h3 id="13-2-6-break-info"><a href="#13-2-6-break-info" class="headerlink" title="13.2.6 -break-info"></a>13.2.6 -break-info</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-info breakpoint</span><br><span class="line">得到指定断点的信息</span><br></pre></td></tr></table></figure>

<h3 id="13-2-7-break-insert"><a href="#13-2-7-break-insert" class="headerlink" title="13.2.7 -break-insert"></a>13.2.7 -break-insert</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-insert</span><br><span class="line">	-t				插入临时断点</span><br><span class="line">	-h				插入硬件断点</span><br><span class="line">	-r				插入正则断点，当函数名匹配正则表达式时生效</span><br><span class="line">	-c condition    插入条件断点</span><br><span class="line">	-i ignore-count 插入一个指定无效次数的断点</span><br><span class="line">	-p thread  		</span><br><span class="line">	line | addr(func) </span><br></pre></td></tr></table></figure>

<h3 id="13-2-8-break-list"><a href="#13-2-8-break-list" class="headerlink" title="13.2.8. -break-list"></a>13.2.8. -break-list</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-list</span><br><span class="line">显示已插入的断点列表</span><br></pre></td></tr></table></figure>

<h3 id="13-2-9-break-watch"><a href="#13-2-9-break-watch" class="headerlink" title="13.2.9 -break-watch"></a>13.2.9 -break-watch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-break-watch [-a|-r] variable</span><br><span class="line">创建一个观察点，-a标识对variable读写时有效，-r标识只读时有效</span><br></pre></td></tr></table></figure>

<h2 id="13-3-程序环境命令-Program-Context"><a href="#13-3-程序环境命令-Program-Context" class="headerlink" title="13.3 程序环境命令(Program Context)"></a>13.3 程序环境命令(Program Context)</h2><h2 id="13-4-线程-thread"><a href="#13-4-线程-thread" class="headerlink" title="13.4 线程(thread)"></a>13.4 线程(thread)</h2><h2 id="13-5-程序执行-Program-Execution"><a href="#13-5-程序执行-Program-Execution" class="headerlink" title="13.5 程序执行(Program Execution)"></a>13.5 程序执行(Program Execution)</h2><h2 id="13-6-栈-Stack"><a href="#13-6-栈-Stack" class="headerlink" title="13.6 栈(Stack)"></a>13.6 栈(Stack)</h2><h2 id="13-7-变量-Variable"><a href="#13-7-变量-Variable" class="headerlink" title="13.7 变量(Variable)"></a>13.7 变量(Variable)</h2><h2 id="13-8-数据-Data"><a href="#13-8-数据-Data" class="headerlink" title="13.8 数据(Data)"></a>13.8 数据(Data)</h2><h2 id="13-9-跟踪点-TracePoint"><a href="#13-9-跟踪点-TracePoint" class="headerlink" title="13.9 跟踪点(TracePoint)"></a>13.9 跟踪点(TracePoint)</h2><h2 id="13-10-符号-Symbol"><a href="#13-10-符号-Symbol" class="headerlink" title="13.10 符号(Symbol)"></a>13.10 符号(Symbol)</h2><h2 id="13-11-文件-File"><a href="#13-11-文件-File" class="headerlink" title="13.11 文件(File)"></a>13.11 文件(File)</h2><h2 id="13-12-目标数据-Target-Manipulation"><a href="#13-12-目标数据-Target-Manipulation" class="headerlink" title="13.12 目标数据(Target Manipulation)"></a>13.12 目标数据(Target Manipulation)</h2><h2 id="13-13-其他"><a href="#13-13-其他" class="headerlink" title="13.13 其他"></a>13.13 其他</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-enable-pretty-printing</span><br><span class="line">-var-create - * map</span><br><span class="line">-var-list-children --all-values var1 0 10</span><br><span class="line"></span><br><span class="line">-data-evaluate-expression map</span><br><span class="line">^done,value=&quot;std::map with 140737353945088 elements&lt;error reading variable: Cannot access memory at address 0x1f0fc35f415e51&gt;&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//    // 设置标记类型与颜色</span><br><span class="line">//    this-&gt;markerDefine(QsciScintilla::Circle, 0);</span><br><span class="line">//    this-&gt;setMarkerBackgroundColor(QColor(&quot;#ee6666&quot;), 0);</span><br><span class="line">//    this-&gt;markerDefine(QsciScintilla::Circle, 1);</span><br><span class="line">//    this-&gt;setMarkerBackgroundColor(QColor(&quot;#aaaaaa&quot;), 1);</span><br><span class="line">//    this-&gt;markerDefine(QsciScintilla::RightArrow, 2);</span><br><span class="line">//    this-&gt;setMarkerBackgroundColor(QColor(&quot;#eaf593&quot;), 2);</span><br></pre></td></tr></table></figure>

<h1 id="十四、Git改密码"><a href="#十四、Git改密码" class="headerlink" title="十四、Git改密码"></a>十四、Git改密码</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rails console production</span><br><span class="line"></span><br><span class="line">irb(main):002:0&gt; user=User.where(email:&#x27;cuiyingbomail@163.com&#x27;).first</span><br><span class="line">=&gt; #&lt;User id:30 @cyb&gt;</span><br><span class="line">irb(main):003:0&gt; user.password=12345678</span><br><span class="line">=&gt; 12345678</span><br><span class="line">irb(main):004:0&gt; user.password_confirmation=12345678</span><br><span class="line">=&gt; 12345678</span><br><span class="line">irb(main):005:0&gt; user.save!</span><br><span class="line">Enqueued ActionMailer::DeliveryJob (Job ID: 540244db-c6ec-44f9-880e-72338b955aa5) to Sidekiq(mailers) with arguments: &quot;DeviseMailer&quot;, &quot;password_change&quot;, &quot;deliver_now&quot;, #&lt;GlobalID:0x00007f57f5da3208 @uri=#&lt;URI::GID gid://gitlab/User/30&gt;&gt;</span><br><span class="line">=&gt; true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="十五、YHPDE（eclipse）FT部署"><a href="#十五、YHPDE（eclipse）FT部署" class="headerlink" title="十五、YHPDE（eclipse）FT部署"></a>十五、YHPDE（eclipse）FT部署</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、安装eclipse:</span><br><span class="line">	gitlab</span><br><span class="line">2、插件安装，参考手册</span><br><span class="line">2、新版SLURM需要</span><br><span class="line">vim org.eclipse.ptp.rm.slurm.proxy_4.0.7.201104291906/src/ptp_slurm_proxy.c</span><br><span class="line">1625行：slurm_allocation_lookup_lite -&gt; slurm_allocation_lookup</span><br><span class="line">2942行: primary = 1; -&gt;  primary = 0;</span><br><span class="line">2943行：secondary = 2; -&gt; secondary = 1;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试</category>
        <category>信创POC测试</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>国产化POC测试工具使用指南</title>
    <url>/2022/07/06/02_%E6%B5%8B%E8%AF%95/01_POC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="一、性能测试"><a href="#一、性能测试" class="headerlink" title="一、性能测试"></a>一、性能测试</h1><blockquote>
<p>测试台式机&#x2F;笔记本的软硬件性能</p>
</blockquote>
<h2 id="1-开机时间"><a href="#1-开机时间" class="headerlink" title="1 开机时间"></a>1 开机时间</h2><blockquote>
<p>测试整机启动的时间（从按下电源开始计时，到出现登录界面计时结束）</p>
</blockquote>
<p>测试步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">手机计时</span><br><span class="line">从按下电源的一刻到进入系统的时间</span><br></pre></td></tr></table></figure>



<h2 id="2-CPU性能测试（整型-x2F-浮点型）"><a href="#2-CPU性能测试（整型-x2F-浮点型）" class="headerlink" title="2 CPU性能测试（整型&#x2F;浮点型）"></a>2 CPU性能测试（整型&#x2F;浮点型）</h2><blockquote>
<p>测试CPU整型计算性能，包括单线程基准值、满线程基准值</p>
<p>测试CPU浮点计算性能，包括单线程基准值、满线程基准值</p>
</blockquote>
<h3 id="2-1-CPU2006"><a href="#2-1-CPU2006" class="headerlink" title="2.1 CPU2006"></a>2.1 CPU2006</h3><blockquote>
<p>测试环境:</p>
<p>​	CPU：飞腾D2000</p>
<p>​	内存：16G</p>
<p>​	系统：麒麟V10-SP1-2107 桌面操作系统</p>
</blockquote>
<p>1、准备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">测试工具包：</span><br><span class="line">d2000-spec2006test.tar.gz</span><br></pre></td></tr></table></figure>

<p>2、测试步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、把下载好的d2000-spec2006test.tar.gz测试包放到根目录下（建议整机内存≥16GB，否则会影响测试跑分）</span><br><span class="line"><span class="meta">#</span><span class="bash">如果不知道如何放到根目录下，可以先把d2000-spec2006test.tar.gz这个包放到桌面，然后点击鼠标右键打开终端，sudo su ，然后输入密码进入root权限，然后输入cp -r d2000-spec2006test.tar.gz /  ，这样就复制到了根目录下。</span> </span><br><span class="line">2、cd / ，进入根目录，sudo su ，然后输入密码，进入root权限。</span><br><span class="line">3、解压，tar -xvf d2000-spec2006test.tar.gz</span><br><span class="line">4、更改权限，chmod -R 777 cpu2006-1.2</span><br><span class="line">5、进入spec2006目录，cd cpu2006-1.2</span><br><span class="line">6、执行脚本，bash run.sh   #配置依赖环境，！！需要联网，会自动下载部分依赖！！</span><br><span class="line">7、source /etc/profile  #更新profile文件,此处一定要更新</span><br><span class="line">8、source ./shrc    #配置环境变量	</span><br><span class="line">9、ulimit -s unlimited #内存分配无限制，大于或者等于16G内存的机器可以加此命令，如果是8G内存的机器不要运行此命令，会因内存不够用影响整型测试的429测试项</span><br><span class="line">10、echo 3 &gt; /proc/sys/vm/drop_caches   #执行测试前，建议清一下缓存</span><br><span class="line">11、gcc -v   #测试前查看一下gcc的版本是否为GCC931,若不是GCC931，输入source /etc/profile， 再gcc -v查看版本，是GCC931即可执行第12步启动测试</span><br><span class="line">12、bash d2000-test.sh  #执行8核、单核的整形和浮点测试</span><br></pre></td></tr></table></figure>

<p>3、结果查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PDF测试结果存放在results文件夹</span><br></pre></td></tr></table></figure>

<p>4、编译问题处理（如遇到编译问题，可参考）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 450报错：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mpsinput.cc: In member <span class="keyword">function</span> <span class="string">&#x27;bool soplex::MPSInput::readLine()&#x27;</span>: mpsinput.cc:75:52: error: no match <span class="keyword">for</span> <span class="string">&#x27;operator==&#x27;</span> (operand types are <span class="string">&#x27;std::basic_istream&lt;char&gt;::__istream_type&#x27;</span> &#123;aka <span class="string">&#x27;std::basic_istream&lt;char&gt;&#x27;</span>&#125; and <span class="string">&#x27;int&#x27;</span>)</span></span><br><span class="line">g++ -std=c++03</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lto1 fatal error bytecode stream generated with lto version</span> </span><br><span class="line">编译选项添加: fno-lto</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决zfnlm问题:</span></span><br><span class="line">actual argument contains too few elements for dummy argument &#x27;zfnlm&#x27;</span><br><span class="line">cfg文件编译选项设置： -std=legacy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> undefined reference to <span class="string">&#x27;__gcov_exit&#x27;</span></span></span><br><span class="line">-lgcov --coverage</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> glob.c:(.text+0x53c): undefined reference to `__alloca<span class="string">&#x27;</span></span></span><br><span class="line">编辑glob.c文件</span><br><span class="line">修改第54行&quot;==&quot;改为&quot;&gt;=&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> if _GNU_GLOB_INTERFACE_VERSION &gt;= GLOB_INTERFACE_VERSION</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 2006的题483在v10-sp1-2107跑起来，我干了什么？ 否则老是报错483.xalancbmk  non-zero return code (rc=254, signal=0) XML等</span></span></span><br><span class="line">1、安装统信UOS的GCC8.3.0</span><br><span class="line">2、SPEC2006的工具集重新编译，再安装</span><br><span class="line">3、清除题下面的run/build/exe</span><br><span class="line">4、执行了一次apt-get install gcc?? 不知道有没有影响</span><br><span class="line">5、放到没有中文的路径/home/gretwall/cpu2006</span><br><span class="line">6、使用普通用户greatwall执行</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 416报错</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4、测试项说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source shrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 多核测试（8）</span></span><br><span class="line">runspec -c greatwall.cfg -r 8 -n 1 -i ref -T base -I all</span><br><span class="line">选项解析：</span><br><span class="line">	-c # 指定config/中的配置文件</span><br><span class="line">	-r # --rate的缩写，跑rate测试，指定测试的副本数（Copies）</span><br><span class="line">	--speed # 指定跑speed测试，和测试副本数（Copies）（默认跑speed测试）</span><br><span class="line">	-n # 指定测试的次数	</span><br><span class="line">	-i（-size） # 指定测试的规模，由小到大为test/train/ref,其中test最快，适合用来验证CPU的完整性，跑分要用ref</span><br><span class="line">	--reportable / --noreportable # 表示检测/不检测生成的二进制文件是否修改过</span><br><span class="line">	--action=build	# 只编译，不测试</span><br><span class="line">	--rebuild	# 重新编译选题的二进制文件</span><br><span class="line">	--tune（-T） # 可选peak / base / all，默认跑all</span><br><span class="line">	最后的参数	# int-(int选题) / fp-(fp选题) / all-(所有选题) / 单个选题-（如483） </span><br></pre></td></tr></table></figure>

<p>5、去除PDF报告的Invalid标记</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp CINT2006.559.ref.rsf CINT2006.559.ref.rsf.retry</span><br><span class="line">rawformat --flagsurl myfixedflags.xml --output_format pdf,raw CINT2006.559.ref.rsf.retry</span><br></pre></td></tr></table></figure>



<h3 id="2-2-CPU2017"><a href="#2-2-CPU2017" class="headerlink" title="2.2 CPU2017"></a>2.2 CPU2017</h3><h2 id="3-lmbench测试（用时3小时）"><a href="#3-lmbench测试（用时3小时）" class="headerlink" title="3 lmbench测试（用时3小时）"></a>3 lmbench测试（用时3小时）</h2><blockquote>
<p>测试简单的系统调用时间、shell命令启动时间、系统信号处理时间、统计2p&#x2F;16K的上下文切换性能、16p&#x2F;64K的上下文切换性能、0K&#x2F;10K文件创建时间、0K&#x2F;10K文件删除时间</p>
</blockquote>
<p>源码包准备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.bitmover.com/lmbench/lmbench3.tar.gz</span><br></pre></td></tr></table></figure>

<p>编译前的准备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf lmbench3.tar.gz</span><br><span class="line">cd lmbench3</span><br><span class="line">mkdir SCCS</span><br><span class="line">touch  SCCS/s.ChangeSet</span><br></pre></td></tr></table></figure>

<p>编译并测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make results OS=arch-linux</span><br></pre></td></tr></table></figure>

<p>读取测试结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make see</span><br></pre></td></tr></table></figure>

<p>错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">报错: undefined reference to &#x27;llseek&#x27;</span><br><span class="line">解决方法:</span><br><span class="line">修改src/disk.c文件</span><br><span class="line">将llseek改为lseek64</span><br></pre></td></tr></table></figure>

<h2 id="4-文件读写测试"><a href="#4-文件读写测试" class="headerlink" title="4 文件读写测试"></a>4 文件读写测试</h2><blockquote>
<p>测试硬盘内文件（10G）拷贝性能，记录时间</p>
</blockquote>
<p>测试步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建10G的大文件</span></span><br><span class="line">dd if=/dev/zero of=big_file count=10 bs=1G</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试拷贝时间</span></span><br><span class="line">time cp big_file  big_file_bak</span><br></pre></td></tr></table></figure>



<h2 id="5-USB存储设备读写性能"><a href="#5-USB存储设备读写性能" class="headerlink" title="5 USB存储设备读写性能"></a>5 USB存储设备读写性能</h2><blockquote>
<p>测试USB存储设备读写性能（Mb&#x2F;s），平均读写速度等</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可选准备</span></span><br><span class="line">1.将U盘（USB3.0）插入被测试机器,假定识别设备为sdc</span><br><span class="line">2.创建vfat文件系统分区</span><br><span class="line">/dev/sdb1分区容量大于30GB</span><br><span class="line">umount /dev/sdc1</span><br><span class="line">mkfs -t vfat /dev/sdc1</span><br><span class="line">mkdir /upan</span><br><span class="line">mount -t vfat /dev/sdc1 /upan</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试写性能</span></span><br><span class="line">cd /upan</span><br><span class="line">dd if=/dev/zero of=./largefile bs=64k count=10000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试读性能</span></span><br><span class="line">sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">dd if=./largefile of=/dev/null bs=64k</span><br></pre></td></tr></table></figure>



<h2 id="6-硬盘读写测试-IOZONE-x2F"><a href="#6-硬盘读写测试-IOZONE-x2F" class="headerlink" title="6 硬盘读写测试-IOZONE&#x2F;"></a>6 硬盘读写测试-IOZONE&#x2F;</h2><p>安装步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载源码包</span></span><br><span class="line">wget http://www.iozone.org/src/current/iozone3_487.tar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -vxf iozone3_487.tar &amp;&amp; cd iozone3_489/src/current</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make linux</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iozone</span><br><span class="line">    -a 全面测试，比如块大小它会自动加</span><br><span class="line">    -i N 用来选择测试项, 比如Read/Write/Random 比较常用的是0 1 2,可以指定成-i 0 -i 1 -i2.这些别的详细内容请查man</span><br><span class="line">        0=write/rewrite</span><br><span class="line">        1=read/re-read</span><br><span class="line">        2=random-read/write</span><br><span class="line">        3=Read-backwards</span><br><span class="line">        4=Re-write-record</span><br><span class="line">        5=stride-read</span><br><span class="line">        6=fwrite/re-fwrite</span><br><span class="line">        7=fread/Re-fread</span><br><span class="line">        8=random mix</span><br><span class="line">        9=pwrite/Re-pwrite</span><br><span class="line">        10=pread/Re-pread</span><br><span class="line">        11=pwritev/Re-pwritev</span><br><span class="line">    	12=preadv/Re-preadv</span><br><span class="line">    -r block size 指定一次写入/读出的块大小</span><br><span class="line">    -s file size 指定测试文件的大小</span><br><span class="line">    -f filename 指定测试文件的名字,完成后会自动删除(这个文件必须指定你要测试的那个硬盘中)</span><br><span class="line">    -F file1 file2… 指定多线程下测试的文件名</span><br><span class="line">    </span><br><span class="line">    批量测试项:</span><br><span class="line">    -g -n 指定测试文件大小范围,最大测试文件为4G,可以这样写 -g 4G</span><br><span class="line">    -y -q 指定测试块的大小范围</span><br><span class="line">    </span><br><span class="line">    输出:</span><br><span class="line">    下面是几个日志记录的参数.好像要输出成图象进行分析，需要指定-a的测试才能输出</span><br><span class="line">    -R 产生Excel到标准输出</span><br><span class="line">    -b 指定输出到指定文件上. 比如 -Rb ttt.xls</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1、测试硬盘读写性能（Mb&#x2F;s），包括随机和顺序读写平均读写速度（IOzone设置块大小16M，文件大小为物理内存2倍、1倍、1&#x2F;2倍三组数据）</p>
</blockquote>
<p>测试步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要root权限</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 块大小16M，文件大小为物理内存2倍（测试机器内存为8G的情况下）</span></span><br><span class="line">./iozone -i 0 -i 1 -i 2 -s 16g -r 16m -f /iozone.tmpfile -Rb ./report/iotest_16G_0.xls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 块大小16M，文件大小为物理内存1倍（测试机器内存为8G的情况下）</span></span><br><span class="line">./iozone -i 0 -i 1 -i 2 -s 8g -r 16m -f /iozone.tmpfile -Rb ./report/iotest_8G_0.xls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 块大小16M，文件大小为物理内存0.5倍（测试机器内存为8G的情况下）</span></span><br><span class="line">./iozone -i 0 -i 1 -i 2 -s 4g -r 16m -f /iozone.tmpfile -Rb ./report/iotest_4G_0.xls</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、测试数据盘（裸设备）的在块大小为512B、1MB下的读写性能（包括IOPS、带宽和响应时间）</p>
</blockquote>
<h2 id="7-内存读写性能测试-Stream"><a href="#7-内存读写性能测试-Stream" class="headerlink" title="7 内存读写性能测试-Stream"></a>7 内存读写性能测试-Stream</h2><blockquote>
<p>测试单线和并发读写性能（Mb&#x2F;s）</p>
</blockquote>
<p>测试步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装gfortran</span></span><br><span class="line">sudo apt-get install gfortran</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译stream</span></span><br><span class="line">make</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">stream_c 200000000   # 参数为Array大小</span><br></pre></td></tr></table></figure>

<p>多线程测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单线程编译</span><br><span class="line">gcc -O3 stream.c -o stream</span><br><span class="line"># 多线程编译</span><br><span class="line">gcc -O3 -fopenmp stream.c -o stream.omp</span><br></pre></td></tr></table></figure>

<h2 id="10-操作系统综合性能测试-unixbench（用时1小时）"><a href="#10-操作系统综合性能测试-unixbench（用时1小时）" class="headerlink" title="10 操作系统综合性能测试-unixbench（用时1小时）"></a>10 操作系统综合性能测试-unixbench（用时1小时）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压UnixBench工具包：</span></span><br><span class="line">unzip Unixbench-Kylin.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入Unixbench解压后的目录下</span></span><br><span class="line">cd UnixBench</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改Makefile文件74行</span></span><br><span class="line">OPTON = -O3 -fomit-frame-pointer -fforce-addr -ffast-math -Wall -static -flto</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译：</span></span><br><span class="line">sudo make clean &amp;&amp; make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存：</span></span><br><span class="line">sudo su</span><br><span class="line">sync</span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试单线程和多线程性能，执行命令：</span></span><br><span class="line">sudo ./Run -c 1 -c N</span><br><span class="line">// 其中N代表cpu核数</span><br></pre></td></tr></table></figure>



<h2 id="11-显卡性能测试-unixbench（用时约半小时）"><a href="#11-显卡性能测试-unixbench（用时约半小时）" class="headerlink" title="11 显卡性能测试-unixbench（用时约半小时）"></a>11 显卡性能测试-unixbench（用时约半小时）</h2><blockquote>
<p>1、测试2D显示处理性能，主要包括画点、画线、画三角形、画平行四边形、画正方形、画多边形等性能测试</p>
<p>2、测试3D显示处理性能，主要包括3D的显示、色彩填充、渲染、旋转等性能测试</p>
</blockquote>
<p>编译Unibench</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">apt-get install libgl1-mesa-dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改Makefile文件,防止编译报错</span></span><br><span class="line">vim UnixBench/Makefile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第47行取消注释</span></span><br><span class="line">GRAPHIC_TESTS = defined</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第50行加上-lm</span></span><br><span class="line">GL_LIBS = -lGL -lXext -lX11 -lm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第74行修改</span></span><br><span class="line">OPTON = -O2 -fomit-frame-pointer -fforce-addr -ffast-math -Wall</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改Run文件</span></span><br><span class="line">vim UnixBench/Run</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第109-112行，修改可支持的最大核数，当前是8</span></span><br><span class="line">&#x27;system&#x27;    =&gt; &#123; &#x27;name&#x27; =&gt; &quot;System Benchmarks&quot;, &#x27;maxCopies&#x27; =&gt; 8 &#125;,</span><br><span class="line">&#x27;2d&#x27;        =&gt; &#123; &#x27;name&#x27; =&gt; &quot;2D Graphics Benchmarks&quot;, &#x27;maxCopies&#x27; =&gt; 8 &#125;,</span><br><span class="line">&#x27;3d&#x27;        =&gt; &#123; &#x27;name&#x27; =&gt; &quot;3D Graphics Benchmarks&quot;, &#x27;maxCopies&#x27; =&gt; 8 &#125;,</span><br><span class="line">&#x27;misc&#x27;      =&gt; &#123; &#x27;name&#x27; =&gt; &quot;Non-Index Benchmarks&quot;, &#x27;maxCopies&#x27; =&gt; 8 &#125;,</span><br></pre></td></tr></table></figure>

<p>编译运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean &amp;&amp; make -j 8</span><br><span class="line">./Run graphics</span><br></pre></td></tr></table></figure>

<p>3D测试优化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件10-vsync.conf</span></span><br><span class="line">&lt;driconf&gt;</span><br><span class="line">    &lt;option name=&quot;vblank_mode&quot; value=&quot;0&quot; /&gt;</span><br><span class="line">&lt;/driconf&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝文件到指定路径</span></span><br><span class="line">sudo cp 10-vsync.conf  ~/.drirc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行测试</span></span><br><span class="line">vblank_mode=0 ./Run ubgears</span><br></pre></td></tr></table></figure>

<h2 id="11-显卡测试-Glmark2"><a href="#11-显卡测试-Glmark2" class="headerlink" title="11 显卡测试-Glmark2"></a>11 显卡测试-Glmark2</h2><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./waf configure --with-flavors=x11-gl</span><br><span class="line">sudo ./waf build -j 4</span><br><span class="line">sudo ./waf install</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">glmark2</span><br></pre></td></tr></table></figure>

<h2 id="12-显卡测试-Glxgears"><a href="#12-显卡测试-Glxgears" class="headerlink" title="12 显卡测试-Glxgears"></a>12 显卡测试-Glxgears</h2><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mesa-utils</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 终端执行</span></span><br><span class="line">glxgears</span><br></pre></td></tr></table></figure>

<h2 id="12-网络性能测试-Netperf"><a href="#12-网络性能测试-Netperf" class="headerlink" title="12 网络性能测试-Netperf"></a>12 网络性能测试-Netperf</h2><blockquote>
<p>测试网络传输速率、网络吞吐率、网络响应时间等，包括TCP、UDP流吞吐速率等</p>
</blockquote>
]]></content>
      <categories>
        <category>测试</category>
        <category>信创POC测试</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统自启动应用</title>
    <url>/2022/07/22/04_%E6%9D%82%E8%AE%B0/Linux%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>“前言：工作上有这方面的需求，特记录下来，方便之后参考”</p>
<h3 id="1-创建rc-local服务文件🌞"><a href="#1-创建rc-local服务文件🌞" class="headerlink" title="1 创建rc-local服务文件🌞"></a>1 创建rc-local服务文件🌞</h3><p>创建文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>

<p>内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">ConditionPathExists=/etc/rc.local</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">StandardOutput=tty</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">SysVStartPriority=99</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="2-激活rc-local服务🌞"><a href="#2-激活rc-local服务🌞" class="headerlink" title="2 激活rc-local服务🌞"></a>2 激活rc-local服务🌞</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc-local.service	</span><br></pre></td></tr></table></figure>

<h3 id="3-添加服务文件🌞"><a href="#3-添加服务文件🌞" class="headerlink" title="3 添加服务文件🌞"></a>3 添加服务文件🌞</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#</span></span></span><br><span class="line">rc.local</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#</span></span></span><br><span class="line">This script is executed at the end of each multiuser runlevel.</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure that the script will <span class="string">&quot;exit 0&quot;</span> on success or any other</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> value on error.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#</span></span></span><br><span class="line">In order to enable or disable this script just change the execution</span><br><span class="line"><span class="meta">#</span><span class="bash"> bits.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#</span></span></span><br><span class="line">By default this script does nothing.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是要开机启动的命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动redis</span></span><br><span class="line">/home/sofware/redis/redis-4.8.0/src/redis-server /home/sofware/redis/redis-4.8.0/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nacos</span></span><br><span class="line">/bin/bash -f /home/Software/nacos/startup.sh -m standalone</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>给脚本文件添加执行权限  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">给予脚本执行权限</span></span><br><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>

<h3 id="4-启动rc-local服务🌞"><a href="#4-启动rc-local服务🌞" class="headerlink" title="4 启动rc-local服务🌞"></a>4 启动rc-local服务🌞</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemc start rc-local.service</span><br></pre></td></tr></table></figure>

<h3 id="5-查看服务启动情况🌞"><a href="#5-查看服务启动情况🌞" class="headerlink" title="5 查看服务启动情况🌞"></a>5 查看服务启动情况🌞</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status rc-local</span><br></pre></td></tr></table></figure>

<p>正常情况下<code>Active</code>状态显示<code>active(exited)</code>  </p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>Oracle VPS部署V2Ray</title>
    <url>/2022/07/15/04_%E6%9D%82%E8%AE%B0/%E7%94%B2%E9%AA%A8%E6%96%87VPS%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>​	本文介绍如何使用甲骨文（Oracle）的免费VPS部署V2Ray</p>
<p>甲骨文服务器申请地址：</p>
<p><a href="https://www.oracle.com/cloud/free/">https://www.oracle.com/cloud/free/</a></p>
<blockquote>
<p>c7 &#x2F; 7q &#x2F; F+</p>
</blockquote>
<h2 id="2-域名申请"><a href="#2-域名申请" class="headerlink" title="2 域名申请"></a>2 域名申请</h2><p><font color='red'><strong>！！本节使用Firefox浏览器操作！！</strong></font></p>
<h3 id="2-1-Firefox浏览器Gooreplacer插件设置"><a href="#2-1-Firefox浏览器Gooreplacer插件设置" class="headerlink" title="2.1 Firefox浏览器Gooreplacer插件设置"></a>2.1 Firefox浏览器Gooreplacer插件设置</h3><blockquote>
<p>防止freenom在订单提交阶段失败</p>
</blockquote>
<p>安装完插件后，点击“配置规则”</p>
<p><img src="/../../img/image-20220715144835831.png" alt="image-20220715144835831"></p>
<p>规则配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">重定向填写：</span><br><span class="line">https://www.google.com/recaptcha</span><br><span class="line">目标地址填写：</span><br><span class="line">https://www.recaptcha.net/recaptcha</span><br></pre></td></tr></table></figure>

<p><img src="/../../img/image-20220715145007138.png" alt="image-20220715145007138"></p>
<h3 id="2-2-freenom域名申请"><a href="#2-2-freenom域名申请" class="headerlink" title="2.2 freenom域名申请"></a>2.2 freenom域名申请</h3><blockquote>
<p>freenom可以申请免费的域名，申请地址：</p>
<p><a href="https://www.freenom.com/en/index.html">https://www.freenom.com/en/index.html</a></p>
</blockquote>
<ul>
<li><p>登录，选择”注册一个新域名”<img src="/../../img/image-20220715145353695.png" alt="image-20220715145353695"></p>
</li>
<li><p>输入需要注册的域名名</p>
</li>
</ul>
<p><img src="/../../img/image-20220715145306545.png" alt="image-20220715145306545"></p>
<ul>
<li>选择免费域名，加入购物车</li>
</ul>
<p><img src="/../../img/image-20220715145556778.png" alt="image-20220715145556778"></p>
<ul>
<li>期限修改为12个月</li>
</ul>
<p><img src="/../../img/image-20220715145640940.png" alt="image-20220715145640940"></p>
<ul>
<li>勾选允许协议，点击完成</li>
</ul>
<p><img src="/../../img/image-20220715145722733.png" alt="image-20220715145722733"></p>
<ul>
<li>看到此界面，说明申请成功，如果申请失败，回到2.1检查Gooreplacer插件是否配置正常</li>
</ul>
<p><img src="/../../img/image-20220715145825655.png" alt="image-20220715145825655"></p>
<ul>
<li>查看我的域名</li>
</ul>
<p><img src="/../../img/image-20220715150619814.png" alt="image-20220715150619814"></p>
<ul>
<li><p>设置域名</p>
<p><img src="/../../img/image-20220715150723654.png" alt="image-20220715150723654"></p>
</li>
<li><p>添加域名解析</p>
</li>
</ul>
<p><img src="/../../img/image-20220715150801833.png" alt="image-20220715150801833"></p>
<ul>
<li><p>填写域名解析服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PAITYN.NS.CLOUDFLARE.COM</span><br><span class="line">SYEEF.NS.CLOUDFLARE.COM</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/../../img/image-20220715150832903.png" alt="image-20220715150832903"></p>
<h2 id="3-域名解析配置（CDN）"><a href="#3-域名解析配置（CDN）" class="headerlink" title="3 域名解析配置（CDN）"></a>3 域名解析配置（CDN）</h2><blockquote>
<p>这里使用cloudflare</p>
</blockquote>
<p>添加站点</p>
<p><img src="/../../img/image-20220715151303012.png" alt="image-20220715151303012"></p>
<p>选择免费的方案</p>
<p><img src="/../../img/image-20220715151454194.png" alt="image-20220715151454194"></p>
<p>添加VPS服务器地址</p>
<p><img src="/../../img/image-20220715151735023.png" alt="image-20220715151735023"></p>
<p>校验服务器是否生效：</p>
<blockquote>
<p>解析的IP不一致，是因为勾选了”代理“，不影响正常使用</p>
</blockquote>
<p><img src="/../../img/image-20220715151954505.png" alt="image-20220715151954505"></p>
<h2 id="4-VPS部署V2Ray"><a href="#4-VPS部署V2Ray" class="headerlink" title="4 VPS部署V2Ray"></a>4 VPS部署V2Ray</h2><blockquote>
<p>参考：<a href="https://www.ioiox.com/archives/99.html">https://www.ioiox.com/archives/99.html</a></p>
</blockquote>
<h3 id="4-1-系统设置"><a href="#4-1-系统设置" class="headerlink" title="4.1 系统设置"></a>4.1 系统设置</h3><h4 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h4><p>切换至root创建密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换至 root 账号</span></span><br><span class="line">passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br></pre></td></tr></table></figure>

<p>修改ssh配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑 sshd_config</span></span><br><span class="line"></span><br><span class="line">添加或修改Port 22222以确保SSH端口安全.</span><br><span class="line">查找到#PermitRootLogin yes,去掉#注释符号.</span><br><span class="line">查找到#PasswordAuthentication yes,去掉#注释符号.</span><br><span class="line">查找到#ClientAliveInterval 0,去掉#注释符号,0改为30.</span><br><span class="line">查找到#MaxSessions 10,去掉#注释符号.</span><br></pre></td></tr></table></figure>

<p>重启ssh服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 sshd 生效</span></span><br></pre></td></tr></table></figure>

<h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><blockquote>
<p>甲骨文云的<code>CentOS 7</code>在使用<code>hostnamectl set-hostname</code>命令修改主机名时,重启服务器后依旧会恢复为 Web 端创建实例时所设置的名字.网上查找了各种方法都无效,最终找到了解决方案.</p>
</blockquote>
<p>编辑修改<code>oci-hostname.conf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/oci-hostname.conf</span><br></pre></td></tr></table></figure>

<p>将<code>PRESERVE_HOSTINFO=0</code>中的的值<code>0</code>修改为<code>1</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This configuration file controls the hostname persistence behavior <span class="keyword">for</span> Oracle Linux</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> compute instance on Oracle Cloud Infrastructure (formerly Baremetal Cloud Services)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set PRESERVE_HOSTINFO to one of the following values</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   0 -- default behavior to update hostname, /etc/hosts and /etc/resolv.conf to</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">        reflect the hostname <span class="built_in">set</span> during instance creation from the metadata service</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   1 -- preserve user configured hostname across reboots; update /etc/hosts and</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">           /etc/resolv.conf from the metadata service</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash">   2 -- preserve user configured hostname across instance reboots; no custom</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash">        changes to /etc/hosts and /etc/resolv.conf from the metadata service,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        but dhclient will still overwrite /etc/resolv.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   3 -- preserve hostname and /etc/hosts entries across instance reboots;</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">        update /etc/resolv.conf from instance metadata service</span></span><br><span class="line">PRESERVE_HOSTINFO=0</span><br></pre></td></tr></table></figure>

<p>使用<code>hostnamectl set-hostname</code>命令修改主机名即可.重启也不会失效.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxxxxx</span><br></pre></td></tr></table></figure>

<h4 id="卸载相关程序"><a href="#卸载相关程序" class="headerlink" title="卸载相关程序"></a>卸载相关程序</h4><h5 id="rpcbind"><a href="#rpcbind" class="headerlink" title="rpcbind"></a>rpcbind</h5><p>使用<code>netstat -ntlp</code>命令发现<code>rpcbind</code>监听了<code>111</code>端口,如担心安全可执行以下命令卸载禁用:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop rpcbind</span><br><span class="line">systemctl stop rpcbind.socket</span><br><span class="line">systemctl disable rpcbind</span><br><span class="line">systemctl disable rpcbind.socket </span><br></pre></td></tr></table></figure>

<h5 id="oracle-cloud-agent"><a href="#oracle-cloud-agent" class="headerlink" title="oracle-cloud-agent"></a>oracle-cloud-agent</h5><p>卸载甲骨文云官方后台监控程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop oracle-cloud-agent</span><br><span class="line">systemctl disable oracle-cloud-agent</span><br><span class="line">systemctl stop oracle-cloud-agent-updater</span><br><span class="line">systemctl disable oracle-cloud-agent-updater</span><br></pre></td></tr></table></figure>



<h3 id="4-2-安装BBRPlus"><a href="#4-2-安装BBRPlus" class="headerlink" title="4.2 安装BBRPlus"></a>4.2 安装BBRPlus</h3><blockquote>
<p>参考：<a href="https://www.ioiox.com/archives/63.html">https://www.ioiox.com/archives/63.html</a></p>
<p>Oracle VPS部署BBR，按普通的方式安装，将导致BBR安装并重启机器后，服务器失联，需要安装特定的内核，并作一些列设置</p>
</blockquote>
<h4 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h4><p>更新 yum</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<p>查看内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内核版本 3.10.0-1062.12.1.el7.x86_64</span></span><br></pre></td></tr></table></figure>

<p>手动下载<code>秋水 BBRPlus</code>版内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/bbrplus/centos/7/kernel-4.14.129-bbrplus.rpm</span><br></pre></td></tr></table></figure>

<p>手动安装内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install kernel-4.14.129-bbrplus.rpm</span><br></pre></td></tr></table></figure>

<p>更新引导</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg</span><br></pre></td></tr></table></figure>

<p>列出系统开机启动项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo awk -F\&#x27; &#x27;$1==&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&#x27; /boot/efi/EFI/centos/grub.cfg</span><br></pre></td></tr></table></figure>

<p>设置新版内核默认启动项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h4 id="开启-BBRPlus-及优化"><a href="#开启-BBRPlus-及优化" class="headerlink" title="开启 BBRPlus 及优化"></a>开启 BBRPlus 及优化</h4><p>秋水一键脚本,选择<code>7</code>开启<code>BBRPlus</code>加速.<br>再次<code>./tcp.sh</code>运行脚本,选择<code>10</code>优化并重启完成.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tc</span><br></pre></td></tr></table></figure>



<h3 id="4-3-安装V2Ray"><a href="#4-3-安装V2Ray" class="headerlink" title="4.3 安装V2Ray"></a>4.3 安装V2Ray</h3><p>在梯子服务器，执行一键搭建脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sL https://gist.githubusercontent.com/JodenHe/815dd91277b722d36a860d39c2296083/raw/7f2b5ac0f8137b245d44741fc4a9f40cffa36755/v2Ray-install.sh)</span><br></pre></td></tr></table></figure>

<p><img src="/../../img/image-20220715155109519.png" alt="image-20220715155109519"></p>
<p>BBR已经安装过，这里选n （笔者第一次在这选y直接安装BBR，结果服务器重启后失联，没法登录，后采用4.2小节的方式，先安装BBRPlus）</p>
<p><img src="/../../img/image-20220715155122886.png" alt="image-20220715155122886"></p>
<p>安装成功，可以使用链接配置V2RayN</p>
<p><img src="/../../img/image-20220715155230097.png" alt="image-20220715155230097"></p>
<h2 id="5-v2Ray-客户端"><a href="#5-v2Ray-客户端" class="headerlink" title="5 v2Ray 客户端"></a>5 v2Ray 客户端</h2><p>参考：<a href="https://tlanyan.pp.ua/v2ray-clients-download/">https://tlanyan.pp.ua/v2ray-clients-download/</a></p>
<p>笔者使用的windows客户端为：<code>V2rayN</code>, 安卓客户端为：<code>V2rayNG</code></p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h2><p><a href="https://toutyrater.github.io/">https://toutyrater.github.io/</a></p>
<p><a href="https://tlanyan.pp.ua/v2ray-clients-download/">https://tlanyan.pp.ua/v2ray-clients-download/</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1689185764130254565&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1689185764130254565&amp;wfr=spider&amp;for=pc</a></p>
<p><a href="https://www.ioiox.com/archives/99.html">https://www.ioiox.com/archives/99.html</a></p>
<p><a href="https://blog.joden123.top/2022/02/20/proxy/v2ray-install/">https://blog.joden123.top/2022/02/20/proxy/v2ray-install/</a></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>KylinV10 桌面版SVN搭建</title>
    <url>/2022/07/11/04_%E6%9D%82%E8%AE%B0/SVN%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="一、服务端配置"><a href="#一、服务端配置" class="headerlink" title="一、服务端配置"></a>一、服务端配置</h2><h3 id="1-1-安装SVN"><a href="#1-1-安装SVN" class="headerlink" title="1.1 安装SVN"></a>1.1 安装SVN</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install subversion</span><br></pre></td></tr></table></figure>

<h3 id="1-2-新建仓库文件夹"><a href="#1-2-新建仓库文件夹" class="headerlink" title="1.2 新建仓库文件夹"></a>1.2 新建仓库文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目仓库文件夹</span></span><br><span class="line">mkdir /data/svn/project</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件夹权限</span></span><br><span class="line">chmod -R 777 /data/svn/project</span><br></pre></td></tr></table></figure>

<h3 id="1-3-创建版本库"><a href="#1-3-创建版本库" class="headerlink" title="1.3 创建版本库"></a>1.3 创建版本库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin create /data/svn/project</span><br></pre></td></tr></table></figure>

<p>完成后会在文件夹中生成一系列文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greatwall@greatwall-GW-001M1A-FTF:/data/svn/project$ ls</span><br><span class="line">conf  db  format  hooks  locks  README.txt</span><br></pre></td></tr></table></figure>

<p>修改db权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 db</span><br></pre></td></tr></table></figure>

<h3 id="1-4-设置访问权限"><a href="#1-4-设置访问权限" class="headerlink" title="1.4 设置访问权限"></a>1.4 设置访问权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /data/svn/project/conf/svnserve.conf</span><br></pre></td></tr></table></figure>

<p>做如下修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greatwall@greatwall-GW-001M1A-FTF:/data/svn/project/conf$ cat svnserve.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This file controls the configuration of the svnserve daemon, if you</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## use it to allow access to this repository.  (If you only allow</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## access through http: and/or file: URLs, then this file is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## irrelevant.)</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Visit http://subversion.apache.org/ for more information.</span></span></span><br><span class="line"></span><br><span class="line">[general]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The anon-access and auth-access options control access to the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## repository for unauthenticated (a.k.a. anonymous) users and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## authenticated users, respectively.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Valid values are &quot;write&quot;, &quot;read&quot;, and &quot;none&quot;.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Setting the value to &quot;none&quot; prohibits both reading and writing;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## &quot;read&quot; allows read-only access, and &quot;write&quot; allows complete</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## read/write access to the repository.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The sample settings below are the defaults and specify that anonymous</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## users have read-only access to the repository, while authenticated</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## users have read and write access to the repository.</span></span></span><br><span class="line">anon-access = none	# 非认证用户不让写</span><br><span class="line">auth-access = write</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The password-db option controls the location of the password</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## database file.  Unless you specify a path starting with a /,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## the file&#x27;s location is relative to the directory containing</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## this configuration file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## If SASL is enabled (see below), this file will NOT be used.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Uncomment the line below to use the default password file.</span></span></span><br><span class="line">password-db = passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The authz-db option controls the location of the authorization</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## rules for path-based access control.  Unless you specify a path</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## starting with a /, the file&#x27;s location is relative to the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## directory containing this file.  The specified path may be a</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## repository relative URL (^/) or an absolute file:// URL to a text</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## file in a Subversion repository.  If you don&#x27;t specify an authz-db,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## no path-based access control is done.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Uncomment the line below to use the default authorization file.</span></span></span><br><span class="line">authz-db = authz</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The groups-db option controls the location of the groups file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Unless you specify a path starting with a /, the file&#x27;s location is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## relative to the directory containing this file.  The specified path</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## may be a repository relative URL (^/) or an absolute file:// URL to a</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## text file in a Subversion repository.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> groups-db = groups</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This option specifies the authentication realm of the repository.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## If two repositories have the same authentication realm, they should</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## have the same password database, and vice versa.  The default realm</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## is repository&#x27;s uuid.</span></span></span><br><span class="line">realm = My First Repository</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The force-username-case option causes svnserve to case-normalize</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## usernames before comparing them against the authorization rules in the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## authz-db file configured above.  Valid values are &quot;upper&quot; (to upper-</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## case the usernames), &quot;lower&quot; (to lowercase the usernames), and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## &quot;none&quot; (to compare usernames as-is without case conversion, which</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## is the default behavior).</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> force-username-case = none</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The hooks-env options specifies a path to the hook script environment</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## configuration file. This option overrides the per-repository default</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## and can be used to configure the hook script environment for multiple</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## repositories in a single file, if an absolute path is specified.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Unless you specify an absolute path, the file&#x27;s location is relative</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## to the directory containing this file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hooks-env = hooks-env</span></span><br><span class="line"></span><br><span class="line">[sasl]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This option specifies whether you want to use the Cyrus SASL</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## library for authentication. Default is false.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This section will be ignored if svnserve is not built with Cyrus</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## SASL support; to check, run &#x27;svnserve --version&#x27; and look for a line</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## reading &#x27;Cyrus SASL authentication is available.&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use-sasl = <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## These options specify the desired strength of the security layer</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## that you want SASL to provide. 0 means no encryption, 1 means</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## integrity-checking only, values larger than 1 are correlated</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## to the effective key length for encryption (e.g. 128 means 128-bit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## encryption). The values below are the defaults.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-encryption = 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> max-encryption = 256</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-添加访问用户"><a href="#1-5-添加访问用户" class="headerlink" title="1.5 添加访问用户"></a>1.5 添加访问用户</h3><p>修改passwd文件，添加访问用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greatwall@greatwall-GW-001M1A-FTF:/data/svn/project/conf$ cat passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This file is an example password file for svnserve.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Its format is similar to that of svnserve.conf. As shown in the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## example below it contains one section labelled [users].</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The name and password for each user follow, one account per line.</span></span></span><br><span class="line"></span><br><span class="line">[users]</span><br><span class="line"><span class="meta">#</span><span class="bash"> harry = harryssecret</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sally = sallyssecret</span></span><br><span class="line">admin=mysecret</span><br><span class="line">gs=mysecret</span><br></pre></td></tr></table></figure>

<h3 id="1-6-设置用户权限"><a href="#1-6-设置用户权限" class="headerlink" title="1.6 设置用户权限"></a>1.6 设置用户权限</h3><p>修改authz文件，设置用户权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greatwall@greatwall-GW-001M1A-FTF:/data/svn/project/conf$ cat authz</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This file is an example authorization file for svnserve.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Its format is identical to that of mod_authz_svn authorization</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## files.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## As shown below each section defines authorizations for the path and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## (optional) repository specified by the section name.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The authorizations follow. An authorization line can refer to:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - a single user,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - a group of users defined in a special [groups] section,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - an alias defined in a special [aliases] section,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - all authenticated users, using the &#x27;$authenticated&#x27; token,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - only anonymous users, using the &#x27;$anonymous&#x27; token,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  - anyone, using the &#x27;*&#x27; wildcard.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## A match can be inverted by prefixing the rule with &#x27;~&#x27;. Rules can</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## grant read (&#x27;r&#x27;) access, read-write (&#x27;rw&#x27;) access, or no access</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## (&#x27;&#x27;).</span></span></span><br><span class="line"></span><br><span class="line">[aliases]</span><br><span class="line"><span class="meta">#</span><span class="bash"> joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</span></span><br><span class="line"></span><br><span class="line">[groups]</span><br><span class="line"><span class="meta">#</span><span class="bash"> harry_and_sally = harry,sally</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> harry_sally_and_joe = harry,sally,&amp;joe</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [/foo/bar]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> harry = rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &amp;joe = r</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> * =</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [repository:/baz/fuz]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @harry_and_sally = rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> * = r</span></span><br><span class="line"></span><br><span class="line">team1=admin,gs	# 创建用户组</span><br><span class="line"></span><br><span class="line">[/]</span><br><span class="line">@team1 = rw # 用户组权限设置为读写</span><br><span class="line">* = r</span><br></pre></td></tr></table></figure>

<h3 id="1-7-启动服务"><a href="#1-7-启动服务" class="headerlink" title="1.7 启动服务"></a>1.7 启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnserve -d -r /data/svn</span><br></pre></td></tr></table></figure>

<p>查看服务是否在运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep svnserve</span><br></pre></td></tr></table></figure>

<p>干掉服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">killall svnserve</span><br></pre></td></tr></table></figure>

<h2 id="二、客户端连接"><a href="#二、客户端连接" class="headerlink" title="二、客户端连接"></a>二、客户端连接</h2><p>svn:&#x2F;&#x2F;10.47.76.90&#x2F;project</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>长城TD120A2安装OpenEuler</title>
    <url>/2022/07/11/04_%E6%9D%82%E8%AE%B0/%E9%95%BF%E5%9F%8ETD120A2%E5%AE%89%E8%A3%85OpenEuler/</url>
    <content><![CDATA[<blockquote>
<p>记录安装过程</p>
</blockquote>
<h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><table>
<thead>
<tr>
<th></th>
<th>型号</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>飞腾D2000&#x2F;8核</td>
</tr>
<tr>
<td>内存</td>
<td>紫光DDR4 3200</td>
</tr>
<tr>
<td>显卡</td>
<td>AMD RX520</td>
</tr>
<tr>
<td>安装系统</td>
<td>OpenEuler 20.09</td>
</tr>
</tbody></table>
<h3 id="二、OpenEuler安装"><a href="#二、OpenEuler安装" class="headerlink" title="二、OpenEuler安装"></a>二、OpenEuler安装</h3><p>1、镜像准备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openEuler-20.09-aarch64-dvd.iso</span><br></pre></td></tr></table></figure>

<p>2、制作启动盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用win32diskimager制作U盘启动器</span><br></pre></td></tr></table></figure>

<p>3、安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">进入安装界面：</span><br><span class="line">Install openEuler 20.09...</span><br><span class="line">Test this media &amp; install openEuler 20.09...</span><br><span class="line">Troubleshooting</span><br><span class="line"></span><br><span class="line">选择到Install openEuler 20.09...行</span><br><span class="line">Ctrl + e 进入编辑界面</span><br><span class="line">删除&quot;video=efifb:off&quot;</span><br><span class="line">Ctrl + x 保存并退出，进入图形化安装界面</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么要删除此grub参数？ —直接安装将卡在此界面</p>
<p>EFI stub: Booting Linux Kernel…</p>
<p>EFI stub: EFI_RNG_PROTOCOL unavaliable, no randomness supplied</p>
<p>EFI stub: Using DTB from configuration table</p>
<p>EFT stub: Exiting boot services and installing virtual address map…</p>
</blockquote>
<p>4、启动系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">进入系统后，修改/boot/efi/EFI/openEuler/grub.cfg文件</span><br><span class="line">同样，将&quot;video=efifb:off&quot;注释或者删除</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;防止重启卡在引导界面</span></span><br></pre></td></tr></table></figure>

<p>5、无线网卡连接wifi</p>
<blockquote>
<p>TD120A2安装OpenEuler后,有线网卡无法识别，需要安装USB无线网卡，并安装配套的驱动，无线网卡识别后可以连接wifi</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli dev wifi # 查询wifi</span><br><span class="line">nmcli dev wifi connet 网络名 password 密码</span><br></pre></td></tr></table></figure>

<p>6、图形化界面安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf makecache</span><br><span class="line">sudo dnf groupinstall ukui</span><br><span class="line">systemctl set-default graphical</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(九)-Dokcer跨主机容器互连</title>
    <url>/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker容器的四种网络类型"><a href="#一、Docker容器的四种网络类型" class="headerlink" title="一、Docker容器的四种网络类型"></a>一、Docker容器的四种网络类型</h2><blockquote>
<p>哪四种？</p>
<ul>
<li>bridge（默认）：NAT桥接模式</li>
<li>none：不分配网络，什么服务都访问不了</li>
<li>host：与宿主机共享网络，共享主机名，端口共用(宿主机用了的端口，容器也不能用)，【网络性能最高】</li>
<li>container:容器id：与容器xx共享网络，共享主机名、hosts、hostname、端口等….【K8S常用】</li>
</ul>
</blockquote>
<h3 id="1-指定与查看容器网络类型的方法"><a href="#1-指定与查看容器网络类型的方法" class="headerlink" title="1 指定与查看容器网络类型的方法"></a>1 指定与查看容器网络类型的方法</h3><p>指定容器网络类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network none # 指定网络类型</span><br></pre></td></tr></table></figure>

<p>查看容器网络类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker instpect 容器id # 可以查看当前的容器网络类型</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看字段</span></span><br><span class="line">&quot;NetworkSettings&quot;: &#123;</span><br><span class="line">	&quot;Bridge&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure>

<p>查看有哪些网络类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls # 查看有哪些网络类型</span><br></pre></td></tr></table></figure>



<h2 id="二、使用macvlan实现"><a href="#二、使用macvlan实现" class="headerlink" title="二、使用macvlan实现"></a>二、使用macvlan实现</h2><blockquote>
<p>优势：</p>
<p>​	性能比overlay高</p>
<p>​	不用做端口映射，外界可直接访问</p>
<p>劣势：</p>
<p>​	IP需要手动指定</p>
</blockquote>
<h3 id="1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信</h3><blockquote>
<p>宿主机信息（虚拟机）：</p>
<p>​	docker01: 10.0.0.11 网关: 10.0.0.2</p>
<p>​	docker02: 10.0.0.12 网关: 10.0.0.2</p>
</blockquote>
<p>宿主机1,2分别创建macvlan</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver macvlan --subnet 10.0.0.0/24 --gateway 10.0.0.2 -o parent=ens33 macvlan_1</span><br></pre></td></tr></table></figure>

<p>设置网卡为混杂模式【Ubuntu需要设置】</p>
<blockquote>
<p>混杂模式是计算机网络中的术语。 是指一台机器的网卡能够接收所有经过它的数据流，而不论其目的地址是否是它。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set ens33 promisc on</span><br></pre></td></tr></table></figure>

<p>宿主机1,2分别使用centos7.9_ssh:v2镜像创建容器，并指定为macvlan_1网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker01</span></span><br><span class="line">docker run -d --network macvlan_1 --ip=10.0.0.100 centos6.9_ssh:v2</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker02</span></span><br><span class="line">docker run -d --network macvlan_1 --ip=10.0.0.200 centos6.9_ssh:v2</span><br></pre></td></tr></table></figure>

<p>测试，docker exec进入docker01中运行容器，开启抓包，并使用docker02中的容器ping它</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump icmp</span><br></pre></td></tr></table></figure>

<p>通过xshell或者mobaxterm可以直接ssh到容器中 (PS:并没有 -p 22端口)</p>
<blockquote>
<p>实际测试宿主机并不能ssh到容器，显示No route to host，但是物理机可以连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@10.0.0.100</span><br></pre></td></tr></table></figure>



<h2 id="三、使用overlay实现"><a href="#三、使用overlay实现" class="headerlink" title="三、使用overlay实现"></a>三、使用overlay实现</h2><blockquote>
<p>优势：</p>
<p>​	可以自动分配ip地址</p>
<p>劣势：</p>
<p>​	需要做端口映射才能访问容器服务</p>
<p>overlay参考：<a href="https://www.cnblogs.com/CloudMan6/p/7270551.html">https://www.cnblogs.com/CloudMan6/p/7270551.html</a></p>
</blockquote>
<h3 id="1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信</h3><p>docker01启动consul</p>
<blockquote>
<p>consul是一个key:value类型的存储数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8500:8500 --restart=always -h consul --name consul progrium/consul -server -bootstrap</span><br></pre></td></tr></table></figure>

<p>docker01,02上设置daemon.json文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hosts&quot;</span>:[<span class="string">&quot;tcp://0.0.0.0:2376&quot;</span>,<span class="string">&quot;unix:///var/run/docker.sock&quot;</span>],</span><br><span class="line"><span class="string">&quot;cluster-store&quot;</span>:<span class="string">&quot;consul://10.0.0.11:8500&quot;</span>,</span><br><span class="line"><span class="string">&quot;cluster-advertise&quot;</span>:<span class="string">&quot;10.0.0.11:2376&quot;</span> # 此处不同，docker01为<span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>，docker02为<span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>修改docker.service文件</p>
<blockquote>
<p>因为daemon.json中的hosts项与docker.service中的-H参数冲突，需要去掉</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除-H fd://</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>

<p>重启docker服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>测试consul是否搭建成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">浏览器访问：http://10.0.0.11:8500/</span><br><span class="line">在KEY/VALUE标签页正常显示10.0.0.11和12两台宿主机</span><br></pre></td></tr></table></figure>

<p>docker01,02创建overlay网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay --subnet 172.16.1.0/24 --gateway 172.16.1.254 ol1</span><br></pre></td></tr></table></figure>

<p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker01</span></span><br><span class="line">docker run -d --network ol1 --name centos6.9_01 centos6.9_ssh:v2</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker02</span></span><br><span class="line">docker run -d --network ol1 --name centos6.9_02 centos6.9_ssh:v2</span><br></pre></td></tr></table></figure>

<p>测试容器间网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker01中的容器ping另一容器的hostname</span></span><br><span class="line">[root@e1e8cc01792d /]# ping centos6.9_02</span><br><span class="line">PING centos6.9_02 (172.16.1.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq=1 ttl=64 time=0.197 ms</span><br><span class="line">64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq=2 ttl=64 time=0.269 ms</span><br><span class="line">64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq=3 ttl=64 time=1.04 ms</span><br></pre></td></tr></table></figure>

<h3 id="2-Overlay的网络访问流程图"><a href="#2-Overlay的网络访问流程图" class="headerlink" title="2 Overlay的网络访问流程图"></a>2 Overlay的网络访问流程图</h3><img src="/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/overlay%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE.png" class="" title="overlay网络访问">

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客维护</title>
    <url>/2022/07/07/04_%E6%9D%82%E8%AE%B0/hexo%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<h2 id="1-Hexo博客维护"><a href="#1-Hexo博客维护" class="headerlink" title="1 Hexo博客维护"></a>1 Hexo博客维护</h2><p>版本：<code>Next 8.12.2</code></p>
<p>1、下载安装nodejs</p>
<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>2、切换npm为阿里源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>3、使用npm安装hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p>否则会报错:</p>
<p>$ hexo clean<br>ERROR Cannot find module ‘hexo’ from ‘C:\Users\fr724\Desktop\新建文件夹\gsproj.github.io’<br>ERROR Local hexo loading failed in ~\Desktop\新建文件夹\gsproj.github.io<br>ERROR Try running: ‘rm -rf node_modules &amp;&amp; npm install –force’</p>
</blockquote>
<p>4、使用npm安装搜索功能依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>5、内容上线</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d # 上线到githubio</span><br><span class="line">hexo s # 本地试运行</span><br></pre></td></tr></table></figure>



<h2 id="2-功能添加"><a href="#2-功能添加" class="headerlink" title="2 功能添加"></a>2 功能添加</h2><h3 id="2-1-搜索功能"><a href="#2-1-搜索功能" class="headerlink" title="2.1 搜索功能"></a>2.1 搜索功能</h3><p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>修改主题设置文件<code>themes/next/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 此处改为true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-菜单显示归档-x2F-书签"><a href="#2-2-菜单显示归档-x2F-书签" class="headerlink" title="2.2 菜单显示归档&#x2F;书签"></a>2.2 菜单显示归档&#x2F;书签</h3><p>修改主题设置文件next&#x2F;_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment">#home: / || fa fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span>	<span class="comment"># 取消注释</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span>	<span class="comment"># 取消注释</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span>	<span class="comment"># 取消注释</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="/../../img/image-20220719101836015.png" alt="image-20220719101836015"></p>
<h3 id="2-3-鼠标点击烟花效果"><a href="#2-3-鼠标点击烟花效果" class="headerlink" title="2.3 鼠标点击烟花效果"></a>2.3 鼠标点击烟花效果</h3><p>下载<a href="https://aliyun-oss-pic-bucket.oss-cn-beijing.aliyuncs.com/file/fireworks.js">fireworks.js</a>文件放到<code>themes/next/source\js\cursor</code>中</p>
<p>创建<code>themes/next/layout/_custom</code>文件夹，并在其中创建<code>custom.swig</code>文件，内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># 鼠标点击烟花特效 #&#125;</span></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.cursor_effect == <span class="string">&quot;fireworks&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">&quot;explosion&quot;</span> %&#125;</span><br><span class="line">  &lt;canvas <span class="class"><span class="keyword">class</span>=&quot;<span class="title">fireworks</span>&quot; <span class="title">style</span>=&quot;<span class="title">position</span>:</span> fixed;left: <span class="number">0</span>;top: <span class="number">0</span>;z-index: <span class="number">1</span>; pointer-events: none;<span class="string">&quot; &gt;&lt;/canvas&gt;</span></span><br><span class="line"><span class="string">  &lt;script src=&quot;</span>//cdn.bootcss.com/animejs/<span class="number">2.2</span><span class="number">.0</span>/anime.<span class="built_in">min</span>.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script async src=&quot;</span>/js/cursor/explosion.<span class="built_in">min</span>.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;% elseif theme.cursor_effect == &quot;</span>love<span class="string">&quot; %&#125;</span></span><br><span class="line"><span class="string">  &lt;script async src=&quot;</span>/js/cursor/love.<span class="built_in">min</span>.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;% elseif theme.cursor_effect == &quot;</span>text<span class="string">&quot; %&#125;</span></span><br><span class="line"><span class="string">  &lt;script async src=&quot;</span>/js/cursor/text.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>编辑&#96;themes&#x2F;next&#x2F;layout&#x2F;_layout.njk文件，在尾行导入swig文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  &#123;&#123; partial(&#x27;_scripts/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_third-party/statistics/index.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- include &#x27;_third-party/math/index.njk&#x27; -%&#125;</span><br><span class="line">  &#123;%- include &#x27;_third-party/quicklink.njk&#x27; -%&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;bodyEnd&#x27;) &#125;&#125;</span><br><span class="line">  &#123;% include &#x27;_custom/custom.swig&#x27; %&#125;	# 导入swig文件</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>编辑<code>themes/next/_config.yml</code>文件，添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击烟花特效</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>PS:一个小修改，防止烟花残留</strong></p>
<p>参考：<a href="https://yfx2012.top/2022/01/17/hexo/mouse-click-fireworks/">https://yfx2012.top/2022/01/17/hexo/mouse-click-fireworks/</a></p>
<p>修改firewaors.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handlePageHide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.booms = []</span><br><span class="line">  <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 简单修改，清理停留不动的烟火特效</span></span><br><span class="line">  <span class="built_in">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">  <span class="built_in">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-4-关闭文章目录的自动章节号"><a href="#2-4-关闭文章目录的自动章节号" class="headerlink" title="2.4 关闭文章目录的自动章节号"></a>2.4 关闭文章目录的自动章节号</h3><p>未修改前，自动排了序号，看上去很乱：</p>
<p><img src="/../../img/image-20220719104324299.png" alt="image-20220719104324299"></p>
<p>修改主题配置文件<code>/themes/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>	<span class="comment"># 改为false关闭</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>修改后，清爽了很多：</p>
<p><img src="/../../img/image-20220719104519550.png" alt="image-20220719104519550"></p>
<h3 id="2-5-添加头像"><a href="#2-5-添加头像" class="headerlink" title="2.5 添加头像"></a>2.5 添加头像</h3><p>将头像文件放到<code>themes/next/source/images</code>中</p>
<p>修改主题配置文件<code>/themes/next/_config.yml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Replace the default image and <span class="built_in">set</span> the url here.</span></span><br><span class="line">  url: /images/myavatar.png</span><br></pre></td></tr></table></figure>

<h3 id="2-6-修改背景图片"><a href="#2-6-修改背景图片" class="headerlink" title="2.6 修改背景图片"></a>2.6 修改背景图片</h3><blockquote>
<p>白花花的有点单调</p>
</blockquote>
<p>将背景图片放到<code>themes\next\source\images</code></p>
<p>新建<code>source\_data</code>文件夹（是hexo目录下的source,不是主题的source）</p>
<p>在<code>_data</code>中新建<code>styles.styl</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">body</span> &#123;</span><br><span class="line">    <span class="string">background:url(/images/xhc.jpg);</span></span><br><span class="line">    <span class="attr">background-repeat:</span> <span class="literal">no</span><span class="string">-repeat;</span></span><br><span class="line">    <span class="string">background-attachment:fixed;</span></span><br><span class="line">    <span class="string">background-position:50%</span> <span class="number">50</span><span class="string">%;</span></span><br><span class="line">    <span class="string">//</span> <span class="attr">background-size:</span> <span class="number">100</span><span class="string">%</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">    <span class="attr">background-size:</span> <span class="string">cover;</span></span><br><span class="line">    <span class="string">-webkit-background-size:</span> <span class="string">cover;</span></span><br><span class="line">    <span class="string">-o-background-size:</span> <span class="string">cover;</span></span><br><span class="line">    <span class="string">-moz-background-size:</span> <span class="string">cover;</span></span><br><span class="line">    <span class="string">-ms-background-size:</span> <span class="string">cover;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将<code>themes/next/_config.yml</code>配置文件中<code>custom_file_path:</code>下的<code>#style: source/_data/styles.styl</code>#号去掉，如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<h3 id="2-7-修改为圆角"><a href="#2-7-修改为圆角" class="headerlink" title="2.7 修改为圆角"></a>2.7 修改为圆角</h3><p>创建<code>source/_data/variables.styl</code>文件</p>
<p>在里面添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$<span class="attribute">border-radius</span>-inner     = <span class="number">20px</span>;</span><br><span class="line">$<span class="attribute">border-radius</span>           = <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p>然后将<code>themes/next/_config.yml</code>配置文件中<code>custom_file_path:</code>下的<code>#style: source/_data/variables.styl</code>#号去掉，如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>部分微调:</p>
<p>1）侧边栏部分没有圆角</p>
<p>编辑2.6创建的<code>styles.styl</code>文件，添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">.site-brand-container</span> &#123;</span><br><span class="line">    <span class="attr">border-radius-inner:</span> <span class="string">20px</span> <span class="string">20px</span> <span class="number">0</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="attr">border-radius:</span> <span class="string">20px</span> <span class="string">20px</span> <span class="number">0</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）返回顶部按钮显示为方形</p>
<p>编辑<code>themes\next\source\css\_variables\Gemini.styl</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">$body-bg-color</span>           <span class="string">=</span> <span class="comment">#eee;	# 注释</span></span><br><span class="line"><span class="string">$body-bg-color</span>           <span class="string">=</span> <span class="string">transparent;</span>	<span class="comment"># 新增</span></span><br></pre></td></tr></table></figure>

<h3 id="2-8-加载动画速度调整"><a href="#2-8-加载动画速度调整" class="headerlink" title="2.8 加载动画速度调整"></a>2.8 加载动画速度调整</h3><p>页面加载会有段动画，默认比较慢，可以调整</p>
<p>编辑文件<code>themes\next\source\js\motion.js</code>，调整<code>duration</code>的值，默认200，越大越慢，可以调小一些</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">bootstrap: <span class="built_in">function</span>() &#123;</span><br><span class="line">    if (!CONFIG.motion.async) this.queue = [this.queue];</span><br><span class="line">    this<span class="selector-class">.queue</span><span class="selector-class">.forEach</span>(sequence =&gt; &#123;</span><br><span class="line">        const timeline = window<span class="selector-class">.anime</span><span class="selector-class">.timeline</span>(&#123;</span><br><span class="line">            duration: <span class="number">100</span>,	# 调整为<span class="number">100</span></span><br><span class="line">                easing  : <span class="string">&#x27;linear&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        sequence<span class="selector-class">.forEach</span>(item =&gt; &#123;</span><br><span class="line">            if (item<span class="selector-class">.deltaT</span>) timeline<span class="selector-class">.add</span>(item, item<span class="selector-class">.deltaT</span>);</span><br><span class="line">            else timeline<span class="selector-class">.add</span>(item);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9-图片点击放大"><a href="#2-9-图片点击放大" class="headerlink" title="2.9 图片点击放大"></a>2.9 图片点击放大</h3><p>修改<code>themes/next/_config.yml</code>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-10-界面透明"><a href="#2-10-界面透明" class="headerlink" title="2.10 界面透明"></a>2.10 界面透明</h3><p>修改<code>source\_data\styles.styl</code>文件，添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 界面透明</span><br><span class="line"><span class="selector-class">.main-inner</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-inner</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">	<span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-11-mac代码块"><a href="#2-11-mac代码块" class="headerlink" title="2.11 mac代码块"></a>2.11 mac代码块</h3><p>修改hexo的<code>_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 开启highlight渲染引擎</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>	<span class="comment"># 关闭prismjs渲染引擎</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改<code>themes/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">a11y-dark</span>	<span class="comment"># 选用highlight引擎，并启用a11y-dark风格</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">docco</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span>	<span class="comment"># 启用mac风格</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../img/image-20220720150943450.png" alt="image-20220720150943450"></p>
<h3 id="2-12-添加回到顶部按钮-小猫"><a href="#2-12-添加回到顶部按钮-小猫" class="headerlink" title="2.12 添加回到顶部按钮-小猫"></a>2.12 添加回到顶部按钮-小猫</h3><p>将小猫图片放到<code>themes/next/source/images</code>中</p>
<p>编辑2.6创建的<code>styles.styl</code>文件，添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//自定义回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;  //图片素材宽度</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>;  //图片素材高度</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/scroll.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  //隐藏箭头图标</span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? <span class="built_in">calc</span>( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑<code>themes/next/_config.yml</code>文件，打开返回顶部按钮开关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 改为true打开</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-13-给blockquote添加颜色"><a href="#2-13-给blockquote添加颜色" class="headerlink" title="2.13 给blockquote添加颜色"></a>2.13 给blockquote添加颜色</h3><p>编辑<code>themes\next\source\css\_common\scaffolding\base.styl</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">4px</span> solid $grey-lighter;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--blockquote-color);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">  // 添加颜色</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span> rgba(<span class="number">212</span>,<span class="number">239</span>,<span class="number">223</span>,.<span class="number">6</span>);</span><br><span class="line">  <span class="attribute">border-left</span> <span class="number">4px</span> solid rgb(<span class="number">30</span>,<span class="number">132</span>,<span class="number">73</span>);</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">cite</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p><font color=blue><strong>TIPS:</strong></font></p>
<p>这是一段Blockquote的演示文字</p>
</blockquote>
<h3 id="2-14-修改选中文字底色"><a href="#2-14-修改选中文字底色" class="headerlink" title="2.14 修改选中文字底色"></a>2.14 修改选中文字底色</h3><p>编辑2.6创建的<code>styles.styl</code>文件，添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 修改选中文字底色</span><br><span class="line"><span class="comment">/* webkit, opera, IE9 */</span></span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f7f7f7</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* firefox */</span></span><br><span class="line">::-moz-selection &#123; </span><br><span class="line">    background: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f7f7f7</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-15-添加阅读全文功能"><a href="#2-15-添加阅读全文功能" class="headerlink" title="2.15 添加阅读全文功能"></a>2.15 添加阅读全文功能</h3><p>安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>编辑hexo的<code>_config.yml</code>文件，添加以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 阅读全文</span></span><br><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">1</span>	<span class="comment"># 他的大小就是全文阅读预览长度设置</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>编辑主题的<code>_config.yml</code>文件，添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-16-开启不蒜子统计访问量"><a href="#2-16-开启不蒜子统计访问量" class="headerlink" title="2.16 开启不蒜子统计访问量"></a>2.16 开启不蒜子统计访问量</h3><p>编辑<code>themes\next\layout\_partials\footer.njk</code>文件，在<code>首行</code>添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  async</span><br><span class="line">  <span class="attribute">src</span>=&quot;https://dn-lbstatics.qbox.me/busuanzi/<span class="number">2.3</span>/busuanzi.pure.mini.js<span class="string">&quot;</span></span><br><span class="line"><span class="string">&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>编辑主题配置文件<code>themes\next\_config.yml</code>，开启设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>  <span class="comment"># 访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span> <span class="comment"># 访问量</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<h3 id="2-17-字体大小修改"><a href="#2-17-字体大小修改" class="headerlink" title="2.17 字体大小修改"></a>2.17 字体大小修改</h3><p>编辑<code>themes\next\source\css\_variables\base.styl</code>, 修改字体大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="attribute">Font</span> size</span><br><span class="line">$<span class="attribute">font-size</span>-base           = (hexo-config(&#x27;<span class="attribute">font</span><span class="selector-class">.enable</span>&#x27;) and hexo-config(&#x27;<span class="attribute">font</span><span class="selector-class">.global</span><span class="selector-class">.size</span>&#x27;) is <span class="selector-tag">a</span> &#x27;unit&#x27;) ? unit(hexo-config(&#x27;<span class="attribute">font</span><span class="selector-class">.global</span><span class="selector-class">.size</span>&#x27;), <span class="selector-tag">em</span>) : <span class="number">1em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-smallest       = <span class="number">10px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-smaller        = <span class="number">11px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-small          = <span class="number">12px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-medium         = <span class="number">13px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-large          = <span class="number">14px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-larger         = <span class="number">15px</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-largest        = <span class="number">22px</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>K8S系列(一)-安装K8S</title>
    <url>/2021/07/08/01_%E8%BF%90%E7%BB%B4/05-K8S/K8S%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%AE%89%E8%A3%85K8S/</url>
    <content><![CDATA[<p>课程目录：</p>
<blockquote>
<p>第一部分：K8S概念和架构</p>
<p>第二部分：K8S安装</p>
<p>​	kubeadm</p>
<p>​	二进制</p>
<p>第三部分：K8S核心概念</p>
<p>POD </p>
<p>CONTROLLER</p>
<p>SERVICE</p>
<p>INGRESS</p>
<p>RABC</p>
<p>HELM</p>
<p>持久化存储</p>
<p>第四部分：集群监控平台</p>
<p>第五部分：从零开始搭建高可用K8S集群</p>
<p>第六部分：在集群环境中部署项目</p>
</blockquote>
<h2 id="一、K8S概念和架构"><a href="#一、K8S概念和架构" class="headerlink" title="一、K8S概念和架构"></a>一、K8S概念和架构</h2><h3 id="1-K8S概述和特性"><a href="#1-K8S概述和特性" class="headerlink" title="1 K8S概述和特性"></a>1 K8S概述和特性</h3><h4 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h4><ul>
<li>K8S是谷歌在2014年开发的容器化集群管理系统</li>
<li>使用K8S可以进行容器化应用部署</li>
<li>使用K8S利于应用扩展</li>
<li>K8S目标是让部署容器化应用更加简洁和高效</li>
</ul>
<p>容器化部署的好处：</p>
<h4 id="1-2-K8S的特性和优势"><a href="#1-2-K8S的特性和优势" class="headerlink" title="1.2 K8S的特性和优势"></a>1.2 K8S的特性和优势</h4><p>自动装箱：自动部署应用容器</p>
<p>自我修复（自愈能力）： </p>
<p>水平扩展：副本数量增加</p>
<p>服务发现（负载均衡）：通过Service实现，为多个副本对外提供统一的入口，节点调度负载均衡</p>
<p>滚动更新：</p>
<p>版本回退：</p>
<p>密钥配置管理：不需要重新构建镜像，可以部署和更新密钥和应用配置</p>
<p>存储编排：</p>
<p>批处理：	</p>
<h3 id="2-K8S架构组件"><a href="#2-K8S架构组件" class="headerlink" title="2 K8S架构组件"></a>2 K8S架构组件</h3><h3 id="3-K8S核心概念"><a href="#3-K8S核心概念" class="headerlink" title="3 K8S核心概念"></a>3 K8S核心概念</h3><p>3.1 Pod</p>
<p>3.2 Controller</p>
<p>3.3 Service</p>
<h2 id="二、K8S安装"><a href="#二、K8S安装" class="headerlink" title="二、K8S安装"></a>二、K8S安装</h2><blockquote>
<p>master  192.168.44.146</p>
<p>node1	192.168.44.145</p>
<p>node2	192.168.44.144</p>
</blockquote>
<h3 id="1-kubeadm安装"><a href="#1-kubeadm安装" class="headerlink" title="1 kubeadm安装"></a>1 kubeadm安装</h3><h3 id="2-二进制安装"><a href="#2-二进制安装" class="headerlink" title="2 二进制安装"></a>2 二进制安装</h3><hr>
<p>生产环境通用需求：</p>
<p>​	服务的自动发现和负载均衡</p>
<p>​	自愈</p>
<p>​	一键升级和回滚</p>
<p>​	水平扩展（弹性伸缩） </p>
<h3 id="1-容器管理平台"><a href="#1-容器管理平台" class="headerlink" title="1 容器管理平台"></a>1 容器管理平台</h3><p>docker swarm</p>
<p>messos</p>
<p>marathon</p>
<p>kubernetes  (90%市场)</p>
<h2 id="2-K8S发展"><a href="#2-K8S发展" class="headerlink" title="2 K8S发展"></a>2 K8S发展</h2><p>发布频繁，一年4个版本	</p>
<h3 id="3-核心组件"><a href="#3-核心组件" class="headerlink" title="3 核心组件"></a>3 核心组件</h3><h2 id="二、K8S安装-1"><a href="#二、K8S安装-1" class="headerlink" title="二、K8S安装"></a>二、K8S安装</h2><blockquote>
<p>K8S安装方式很多：</p>
<ul>
<li>源码编译安装 ：golang编译环境</li>
<li>二进制安装 ：文档，全程手动，ansible等</li>
<li>kubeadm安装：网络要求</li>
<li>minikube ：开发者学习</li>
<li>yum安装</li>
</ul>
<p>这里使用yum安装的方法</p>
</blockquote>
<h3 id="1-虚拟机准备"><a href="#1-虚拟机准备" class="headerlink" title="1 虚拟机准备"></a>1 虚拟机准备</h3><blockquote>
<p>centos7, 1CPU 1G</p>
<p>设置主机名，<strong>添加hosts解析</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">k8s-master  --  10.0.0.21</span><br><span class="line">k8s-node1   --  10.0.0.22</span><br><span class="line">k8s-node2   --  10.0.0.23</span><br></pre></td></tr></table></figure>

<p>配置Centos7源和epel7源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="2-Master节点安装"><a href="#2-Master节点安装" class="headerlink" title="2 Master节点安装"></a>2 Master节点安装</h3><h4 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker -y</span><br></pre></td></tr></table></figure>

<h4 id="2-2-安装etcd"><a href="#2-2-安装etcd" class="headerlink" title="2.2 安装etcd"></a>2.2 安装etcd</h4><blockquote>
<p>etcd是一个nosql数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install etcd -y</span><br></pre></td></tr></table></figure>

<p>修改etcd配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/etcd/etcd.conf</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;http://10.0.0.21:2379&quot;</span><br></pre></td></tr></table></figure>

<p>启动etcd服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable etcd</span><br><span class="line">systemctl restart etcd</span><br></pre></td></tr></table></figure>

<p>测试etcd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcdctl set testdir/testkey0 0</span><br><span class="line">etcdctl get testdir/testkey0</span><br></pre></td></tr></table></figure>

<p>etcdctl相关设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcdctl -C http://10.0.0.21:2379 cluster-health</span><br></pre></td></tr></table></figure>

<h4 id="2-3-安装k8s服务"><a href="#2-3-安装k8s服务" class="headerlink" title="2.3 安装k8s服务"></a>2.3 安装k8s服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install kubernetes-master -y</span><br></pre></td></tr></table></figure>

<p>配置文件修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/apiserver</span><br><span class="line">KUBE_API_ADDRESS=&quot;--insecure-bind-address=0.0.0.0&quot;</span><br><span class="line">KUBE_API_PORT=&quot;--port=8080&quot;</span><br><span class="line">KUBE_ETCD_SERVERS=&quot;--etcd-servers=http://10.0.0.21:2379&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 23行删除ServiceAccount，如下</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota&quot; # </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/config</span><br><span class="line">KUBE_MASTER=&quot;--master=http://10.0.0.21:8080&quot;</span><br></pre></td></tr></table></figure>

<p>开放防火墙端口【重要】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2379/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable kube-apiserver</span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line">systemctl enable kube-controller-manager</span><br><span class="line">systemctl restart kube-controller-manager</span><br><span class="line">systemctl enable kube-scheduler</span><br><span class="line">systemctl restart kube-scheduler</span><br></pre></td></tr></table></figure>

<h3 id="3-Node节点安装"><a href="#3-Node节点安装" class="headerlink" title="3 Node节点安装"></a>3 Node节点安装</h3><h4 id="3-1-安装k8s-node服务"><a href="#3-1-安装k8s-node服务" class="headerlink" title="3.1 安装k8s-node服务"></a>3.1 安装k8s-node服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install kubernetes-node</span><br></pre></td></tr></table></figure>

<p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/config</span><br><span class="line">KUBE_MASTER=&quot;--master=http://10.0.0.21:8080&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/kubelet</span><br><span class="line">KUBELET_ADDRESS=&quot;--address=0.0.0.0&quot;</span><br><span class="line">KUBELET_PORT=&quot;--port=10250&quot;</span><br><span class="line">KUBELET_HOSTNAME=&quot;--hostname-override=10.0.0.22&quot;</span><br><span class="line">KUBELET_API_SERVER=&quot;--api-servers=http://10.0.0.21:8080&quot;</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl enable kube-proxy</span><br><span class="line">systemctl restart kube-proxy</span><br></pre></td></tr></table></figure>

<h4 id="3-2-fannel网络服务安装"><a href="#3-2-fannel网络服务安装" class="headerlink" title="3.2 fannel网络服务安装"></a>3.2 fannel网络服务安装</h4><blockquote>
<p>用于节点之间通信</p>
</blockquote>
<p>所有节点安装并配置fannel</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install flannel -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/flanneld</span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=&quot;http://10.0.0.21:2379&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">etcdctl mk /atomic.io/network/config &#x27;&#123;&quot;Network&quot;:&quot;172.16.0.0/16&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>重新启动服务—Master节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable fanneld</span><br><span class="line">systemctl restart fanneld</span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line">systemctl restart kube-controller-manager</span><br><span class="line">systemctl restart kube-scheduler	</span><br></pre></td></tr></table></figure>

<p>重新启动服务—Node节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable fanneld</span><br><span class="line">systemctl restart fanneld</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl restart kube-proxy</span><br></pre></td></tr></table></figure>

<h3 id="4-配置Master为镜像服务器"><a href="#4-配置Master为镜像服务器" class="headerlink" title="4 配置Master为镜像服务器"></a>4 配置Master为镜像服务器</h3><h2 id="三、K8S使用"><a href="#三、K8S使用" class="headerlink" title="三、K8S使用"></a>三、K8S使用</h2><p>1 查看节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<p>2 查看服务状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get componentstatus</span><br></pre></td></tr></table></figure>

<h3 id="1-Pod使用"><a href="#1-Pod使用" class="headerlink" title="1 Pod使用"></a>1 Pod使用</h3><p>创建pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create -f k8s_pod.yml</span><br></pre></td></tr></table></figure>

<p>删除pod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete pod oldboy</span><br><span class="line">kubectl delete pod --all 删除所有</span><br></pre></td></tr></table></figure>

<p>查看pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl get pods -o wides</span><br></pre></td></tr></table></figure>

<p>查看pod详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl descripe pod nginx</span><br></pre></td></tr></table></figure>

<p> 更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl replace xxxx.yml</span><br></pre></td></tr></table></figure>



<h4 id="1-1-创建一个pod-为什么要启动两个容器？"><a href="#1-1-创建一个pod-为什么要启动两个容器？" class="headerlink" title="1.1 创建一个pod,为什么要启动两个容器？"></a>1.1 创建一个pod,为什么要启动两个容器？</h4><blockquote>
<p>一个pod中可以挂多个容器</p>
</blockquote>
<p>比如创建一个niginx pod，将启动一个pod容器，一个nginx容器</p>
<p>Pod容器172.16.18.2</p>
<p>Nginx容器，共用pod容器ip</p>
<p>主要通过用POD来实现K8S的高级功能</p>
<h4 id="1-2-rc副本控制器的使用"><a href="#1-2-rc副本控制器的使用" class="headerlink" title="1.2 rc副本控制器的使用"></a>1.2 rc副本控制器的使用</h4><p>通过rc保证容器高可用</p>
<p>调整rc副本数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl scale rc myweb --replicates=1</span><br></pre></td></tr></table></figure>

<h4 id="1-3-利用rc实现滚动升级和一键回滚"><a href="#1-3-利用rc实现滚动升级和一键回滚" class="headerlink" title="1.3 利用rc实现滚动升级和一键回滚"></a>1.3 利用rc实现滚动升级和一键回滚</h4><p>案例：nginx 1.13升级1.15</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每5s升级一个</span></span><br><span class="line">kubectl rolling-update myweb -f nginx-rc1.15.yaml --update-period=5s</span><br></pre></td></tr></table></figure>

<p>案例：nginx1.15回滚到1.13</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl rolling-update mywebv2 -f nginx-rc1.13.yaml</span><br></pre></td></tr></table></figure>



<h3 id="service的创建和访问"><a href="#service的创建和访问" class="headerlink" title="service的创建和访问"></a>service的创建和访问</h3><blockquote>
<p>外部访问容器，端口映射</p>
</blockquote>
<h4 id="K8S小结"><a href="#K8S小结" class="headerlink" title="K8S小结"></a>K8S小结</h4><p>1 端口30000开始？</p>
<p>2 查看yml字段编写帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl explain svc.spec</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（五）K8S</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(一)-安装Docker</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h2 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h2><blockquote>
<p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁，隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
</blockquote>
<h3 id="1-容器和虚拟化的区别"><a href="#1-容器和虚拟化的区别" class="headerlink" title="1 容器和虚拟化的区别"></a>1 容器和虚拟化的区别</h3><ul>
<li><p>KVM虚拟化：</p>
<ul>
<li><p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr&#x2F;gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：&#x2F;sbin&#x2F;init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
</li>
</ul>
</li>
<li><p>容器：</p>
<ul>
<li><p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-容器的优缺点"><a href="#2-容器的优缺点" class="headerlink" title="2 容器的优缺点"></a>2 容器的优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li><p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>使用同一内核，存在安全性问题</li>
</ul>
</li>
</ul>
<h3 id="3-容器技术的发展过程"><a href="#3-容器技术的发展过程" class="headerlink" title="3 容器技术的发展过程"></a>3 容器技术的发展过程</h3><blockquote>
<p>chroot — lxc —- docker</p>
</blockquote>
<h3 id="4-Docker组成"><a href="#4-Docker组成" class="headerlink" title="4 Docker组成"></a>4 Docker组成</h3><p>​	Docker基于Go语言开发，C&#x2F;S模式</p>
<ul>
<li>主要组件<ul>
<li>镜像</li>
<li>容器</li>
<li>仓库：最大的dockerhub</li>
<li>网络</li>
<li>存储</li>
</ul>
</li>
</ul>
<h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><blockquote>
<p>参考网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a></p>
</blockquote>
<h3 id="1-联网在线安装"><a href="#1-联网在线安装" class="headerlink" title="1 联网在线安装"></a>1 联网在线安装</h3><p>开启rpm包缓存，方便制作离线安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.conf</span><br><span class="line">keepcache=1 </span><br></pre></td></tr></table></figure>

<p>如果你之前安装过 docker，请先删掉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<p>安装一些依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>根据你的发行版下载repo文件（Centos）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>把软件仓库替换为TUNA：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i &#x27;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>最后安装:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br><span class="line">    sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="2-无网环境下离线安装"><a href="#2-无网环境下离线安装" class="headerlink" title="2 无网环境下离线安装"></a>2 无网环境下离线安装</h3><p>搜集联网环境下下载的rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /var/cache/yum/x86_64/7/ -name &quot;*.rpm&quot; | xargs -i mv &#123;&#125; docker_rpm/</span><br><span class="line">tar -zvcf docker_rpm.tgz docker_rpm/</span><br></pre></td></tr></table></figure>

<p>拷贝到无网环境的服务器中安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -vxf docker_rpm.tgz # 解压</span><br><span class="line">cd docker_rpm	</span><br><span class="line">rpm -Uvh ./*.rpm # 安装</span><br></pre></td></tr></table></figure>

<h3 id="3-启动服务并验证安装是否成功"><a href="#3-启动服务并验证安装是否成功" class="headerlink" title="3 启动服务并验证安装是否成功"></a>3 启动服务并验证安装是否成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证是否安装成功</span></span><br><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h3 id="4-Docker镜像下载加速"><a href="#4-Docker镜像下载加速" class="headerlink" title="4 Docker镜像下载加速"></a>4 Docker镜像下载加速</h3><ul>
<li>阿里云docker镜像加速器服务</li>
<li>配置docker镜像加速(推荐)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;    </span><br><span class="line">	&quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="5-创建并运行一个nginx容器"><a href="#5-创建并运行一个nginx容器" class="headerlink" title="5 创建并运行一个nginx容器"></a>5 创建并运行一个nginx容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(七)-Docker镜像分层与同主机中容器互连</title>
    <url>/2021/07/05/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%83-Docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E4%B8%8E%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%AD%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker镜像分层"><a href="#一、Docker镜像分层" class="headerlink" title="一、Docker镜像分层"></a>一、Docker镜像分层</h2><blockquote>
<p>镜像分层的好处：</p>
<p>​	复用、节省磁盘空间，相同的内容只需加载一份到内存</p>
<p>​	修改dockerfile后，重新构建时可以用缓存，速度快</p>
</blockquote>
<h3 id="1-查看docker镜像分层"><a href="#1-查看docker镜像分层" class="headerlink" title="1 查看docker镜像分层"></a>1 查看docker镜像分层</h3><p>通过导入镜像可以查看到镜像分层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i [镜像文件]</span><br></pre></td></tr></table></figure>

<p>通过查看镜像历史可以查看到分层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@docker01 ~]# docker image history centos6.9_ssh:v2</span><br><span class="line">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class="line">57761235f898   2 days ago    /bin/sh -c #(nop)  CMD [&quot;/usr/sbin/sshd&quot; &quot;-D…   0B</span><br><span class="line">c0a2c21457c4   2 days ago    /bin/sh -c echo &#x27;123456&#x27; | passwd --stdin ro…   537B</span><br><span class="line">29d10ff8b8e0   2 days ago    /bin/sh -c service sshd restart                 4.91kB</span><br><span class="line">666b9ddfff15   2 days ago    /bin/sh -c yum install openssh-server -y        154MB</span><br><span class="line">5b00553af9fc   2 days ago    /bin/sh -c #(nop) ADD file:65a30e1b327fec80b…   1.18kB</span><br><span class="line">2199b8eb8390   2 years ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B</span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop)  LABEL name=CentOS Base Im…   0B</span><br><span class="line">&lt;missing&gt;      2 years ago   /bin/sh -c #(nop) ADD file:0e6d175401c5b4260…   195MB</span><br></pre></td></tr></table></figure>

<p>所有的这些层都会在<code>Docker</code>主机本地存储区域内存储，可以通过以下指令来列出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /var/lib/docker/overlay2/</span><br></pre></td></tr></table></figure>

<h3 id="2-通过Dockerfile优化分层信息"><a href="#2-通过Dockerfile优化分层信息" class="headerlink" title="2  通过Dockerfile优化分层信息"></a>2  通过Dockerfile优化分层信息</h3><ul>
<li>尽量合并RUN和ADD来减少镜像分层数</li>
<li>新加的Dockerfile语句加到最后，不要加到前面</li>
</ul>
<h2 id="二、同主机中容器互连（–link是单向的）"><a href="#二、同主机中容器互连（–link是单向的）" class="headerlink" title="二、同主机中容器互连（–link是单向的）"></a>二、同主机中容器互连（–link是单向的）</h2><blockquote>
<p>docker官方已不推荐使用docker run –link来链接2个容器互相通信，随后的版本中会删除–link</p>
</blockquote>
<h3 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1 功能介绍"></a>1 功能介绍</h3><p>docker run –link可以用来链接2个容器，使得源容器（被链接的容器）和接受容器（主动去链接的容器）之间可以互相通信，并且接收容器可以获取源容器的一些数据，如源容器的环境变量。使用案例如下：</p>
<p>源容器启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name src_docker nginx </span><br><span class="line">容器ID:xxxx01, IP:172.16.0.2</span><br></pre></td></tr></table></figure>

<p>接受容器连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name dest_docker --link src_docker:web centos7.9:v2</span><br><span class="line">容器ID:xxxx02, IP:172.16.0.3</span><br></pre></td></tr></table></figure>

<p>进入接受容器测试，不需要ping IP，直接ping别名就可以，web和src_docker都指向172.16.0.2<font color=red>（单向）</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it xxxx01 /bin/bash</span><br><span class="line">ping web</span><br><span class="line">ping src_docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接受容器的&#x2F;etc&#x2F;hosts将更新</p>
</blockquote>
<h3 id="2-案例：构建zabbix-server"><a href="#2-案例：构建zabbix-server" class="headerlink" title="2 案例：构建zabbix-server"></a>2 案例：构建zabbix-server</h3><p>启动一个mysql的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql-server -t \</span><br><span class="line">      -e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \</span><br><span class="line">      -d mysql:5.7 \</span><br><span class="line">      --character-set-server=utf8 --collation-server=utf8_bin </span><br></pre></td></tr></table></figure>

<p>启动java-gateway容器监控java服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-java-gateway -t \</span><br><span class="line">      -d zabbix/zabbix-java-gateway:latest</span><br></pre></td></tr></table></figure>

<p>启动zabbix-mysql容器使用link连接mysql与java-gateway</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-server-mysql -t \</span><br><span class="line">      -e DB_SERVER_HOST=&quot;mysql-server&quot; \</span><br><span class="line">      -e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \</span><br><span class="line">      -e ZBX_JAVAGATEWAY=&quot;zabbix-java-gateway&quot; \</span><br><span class="line">      --link mysql-server:mysql \</span><br><span class="line">      --link zabbix-java-gateway:zabbix-java-gateway \</span><br><span class="line">      -p 10051:10051 \</span><br><span class="line">      -d zabbix/zabbix-server-mysql:latest</span><br></pre></td></tr></table></figure>

<p>启动zabbix web显示，使用link连接zabbix-mysql与mysql</p>
<blockquote>
<p>zabbix的默认端口已有80改为8080，可见配置文件&#x2F;etc&#x2F;zabbix&#x2F;nginx.conf</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-web-nginx-mysql -t \</span><br><span class="line">      -e DB_SERVER_HOST=&quot;mysql-server&quot; \</span><br><span class="line">      -e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \</span><br><span class="line">      --link mysql-server:mysql \</span><br><span class="line">      --link zabbix-server-mysql:zabbix-server \</span><br><span class="line">      -p 8082:8080 \     </span><br><span class="line">      -d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure>

<p>登录Zabbix</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器访问：10.0.0.11:8082</span><br><span class="line">Admin</span><br><span class="line">zabbix</span><br></pre></td></tr></table></figure>

<p>添加被监控节点-安装zabbix-agent</p>
<blockquote>
<p>获取zabbix-agent：</p>
<p>uname -a 查看内核版本</p>
<p>web页面查看zabbix版本</p>
<p><a href="https://www.zabbix.com/download">https://www.zabbix.com/download</a> 获取对应agent的安装方法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/zabbix-release-5.4-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br><span class="line">yum install zabbix-agent</span><br></pre></td></tr></table></figure>

<p>添加被监控节点-agent配置文件修改</p>
<blockquote>
<p>117行：Server&#x3D;10.0.0.11, 注意防火墙和selinux的阻挡</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure>

<h2 id="三、docker重启后容器不退出"><a href="#三、docker重启后容器不退出" class="headerlink" title="三、docker重启后容器不退出"></a>三、docker重启后容器不退出</h2><blockquote>
<p>默认情况下，systemctl restart docker之后，容器将处于Exited状态</p>
</blockquote>
<h3 id="1-添加容器启动参数"><a href="#1-添加容器启动参数" class="headerlink" title="1 添加容器启动参数"></a>1 添加容器启动参数</h3><blockquote>
<p>docker重启后，容器先停止，再立即重新启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always</span><br></pre></td></tr></table></figure>

<h3 id="2-daemon配置文件修改（不推荐）"><a href="#2-daemon配置文件修改（不推荐）" class="headerlink" title="2 daemon配置文件修改（不推荐）"></a>2 daemon配置文件修改（不推荐）</h3><blockquote>
<p>docker重启后，容器不会停止，一直在运行，不推荐使用，不好控制</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一行，上行后面加逗号</span></span><br><span class="line">&quot;live-restore&quot;:true</span><br></pre></td></tr></table></figure>





<p>​	</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(三)-容器的网络访问</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E5%AE%B9%E5%99%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="一、容器的网络访问流程"><a href="#一、容器的网络访问流程" class="headerlink" title="一、容器的网络访问流程"></a>一、容器的网络访问流程</h2><blockquote>
<p>参考：<a href="https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02">https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02</a></p>
</blockquote>
<h3 id="1-虚拟机注意事项"><a href="#1-虚拟机注意事项" class="headerlink" title="1 虚拟机注意事项"></a>1 虚拟机注意事项</h3><p>查看net.ipv4.ip_forward值是否为1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -a | grep ipv4 | grep forward </span><br></pre></td></tr></table></figure>

<p>只有值为1时docker容器才能上网，而vmware虚拟机挂起将使他变成0，解决方法：</p>
<ul>
<li>sysctl net.ipv4.ip_forward &#x3D; 1 设置为1</li>
<li>不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</li>
</ul>
<h2 id="二、容器端口映射"><a href="#二、容器端口映射" class="headerlink" title="二、容器端口映射"></a>二、容器端口映射</h2><h3 id="1-docker-run-p端口映射参数"><a href="#1-docker-run-p端口映射参数" class="headerlink" title="1 docker run -p端口映射参数"></a>1 docker run -p端口映射参数</h3><p>指定端口访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将容器80端口，映射到主机180端口</span></span><br><span class="line">docker run -p 180:80</span><br></pre></td></tr></table></figure>

<p>指定IP+端口访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 多网卡环境下，将容器80端口映射到10.0.0.1的180端口</span></span><br><span class="line">docker run -p 10.0.0.1:180:80</span><br></pre></td></tr></table></figure>

<p>指定随机端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将容器80端口，映射到主机随机端口</span><br><span class="line">docker run -p 10.0.0.1::80</span><br></pre></td></tr></table></figure>

<p>指定随机端口+UDP (默认映射TCP)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将容器80端口映射到主机随机端口，并使用UDP协议</span></span><br><span class="line">-p 10.0.0.100:80:udp # 指定随机端口 + udp</span><br></pre></td></tr></table></figure>

<p>可以指定多个端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p 180:80 -p 1443:443 # 指定多个端口</span><br></pre></td></tr></table></figure>

<p>随机映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -P</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(八)-Docker私有仓库</title>
    <url>/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%85%AB-Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、官方私有仓库registry"><a href="#一、官方私有仓库registry" class="headerlink" title="一、官方私有仓库registry"></a>一、官方私有仓库registry</h2><h3 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1 安装步骤"></a>1 安装步骤</h3><p>拉取私有仓库镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>

<p>启动私有仓库容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>

<p>验证是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 浏览器输入</span></span><br><span class="line">10.0.0.12:5000/v2/_catalog</span><br></pre></td></tr></table></figure>

<p>修改daemon.json，让 docker信任私有仓库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">&#123;</span><br><span class="line">	&quot;insecure-registries&quot;:[&quot;10.0.0.12:5000&quot;]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>重启docker服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl reset-failed docker.service</span><br></pre></td></tr></table></figure>

<p>上传镜像到私有仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push 10.0.0.11:5000/registry</span><br></pre></td></tr></table></figure>

<p>从私有仓库下载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull http://10.0.0.12:5000/registry</span><br></pre></td></tr></table></figure>

<h2 id="二、企业级私有仓库Harbor"><a href="#二、企业级私有仓库Harbor" class="headerlink" title="二、企业级私有仓库Harbor"></a>二、企业级私有仓库Harbor</h2><blockquote>
<p>Harbor：第三方registry组件</p>
<p>项目地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p>
<p>老男孩强哥博客地址：<a href="https://oldqiang.com/">https://oldqiang.com/</a></p>
</blockquote>
<h3 id="1-为什么使用Harbor"><a href="#1-为什么使用Harbor" class="headerlink" title="1 为什么使用Harbor"></a>1 为什么使用Harbor</h3><p>因为官方仓库registry存在诸多问题：</p>
<ul>
<li><p>https问题</p>
</li>
<li><p>网页简陋，查看镜像、删除镜像不方便</p>
</li>
<li><p>权限控制不方便（要么有权限，要么完全没权限），不支持多用户</p>
</li>
</ul>
<h3 id="2-Harbor安装步骤"><a href="#2-Harbor安装步骤" class="headerlink" title="2 Harbor安装步骤"></a>2 Harbor安装步骤</h3><blockquote>
<p>这里以v2.2.3为例</p>
</blockquote>
<p>离线安装包获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.2.3/harbor-offline-installer-v2.2.3.tgz</span><br></pre></td></tr></table></figure>

<p>解压文件，并修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -vxf harbor-offline-installer-v2.2.3.tgz</span><br><span class="line">cd harbor/</span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释https设置项，并修改以下内容</span></span><br><span class="line">hostname = 10.0.0.12  </span><br><span class="line">harbor_admin_password = 1qaz@WSX</span><br></pre></td></tr></table></figure>

<p>执行安装脚本（时间比较长）</p>
<blockquote>
<p>需要先安装docker-compose，</p>
<p><a href="https://gsproj.github.io/2021/07/07/Docker%E7%B3%BB%E5%88%97-%E5%8D%81-Dokcer%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/">docker-compose安装参考</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>网页访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://10.0.0.12</span><br><span class="line">admin</span><br></pre></td></tr></table></figure>

<h3 id="3-镜像推送与下载"><a href="#3-镜像推送与下载" class="headerlink" title="3 镜像推送与下载"></a>3 镜像推送与下载</h3><p>docker配置文件添加白名单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;10.0.0.12&quot;],  # 不要加端口,可以是IP或域名，中间逗号隔开可加多个</span><br></pre></td></tr></table></figure>

<p>镜像打标签</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull 10.0.0.12/xxx/centos6.9_ssh:v2   # xxx是仓库中的创建的项目名</span><br></pre></td></tr></table></figure>

<p>登录到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login 10.0.0.12</span><br></pre></td></tr></table></figure>

<p>推送到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push 10.0.0.12/xxx/centos6.9_ssh:v2</span><br></pre></td></tr></table></figure>

<p>从仓库下载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull 10.0.0.12/xxx/centos6.9_ssh:v2</span><br></pre></td></tr></table></figure>

<h3 id="4-将Harbor升级为https访问"><a href="#4-将Harbor升级为https访问" class="headerlink" title="4 将Harbor升级为https访问"></a>4 将Harbor升级为https访问</h3><p>配置文件修改，主要是添加证书路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> https related config</span></span><br><span class="line">https:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> https port <span class="keyword">for</span> harbor, default is 443</span></span><br><span class="line">  port: 443</span><br><span class="line"><span class="meta">  #</span><span class="bash"> The path of cert and key files <span class="keyword">for</span> nginx</span></span><br><span class="line">  certificate: /your/certificate/path</span><br><span class="line">  private_key: /your/private/key/path</span><br></pre></td></tr></table></figure>

<p>再次执行安装脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(六)-Dockfile的使用</title>
    <url>/2021/06/30/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%85%AD-Dockfile%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、Dokerfile简介"><a href="#一、Dokerfile简介" class="headerlink" title="一、Dokerfile简介"></a>一、Dokerfile简介</h2><blockquote>
<p>Dockerfile 是一个用来自动构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>建议存放在&#x2F;opt&#x2F;dockerfile中，如创建centosXX的镜像，则创建&#x2F;opt&#x2F;dockerfile&#x2F;centosXX&#x2F;Dockerfile</p>
</blockquote>
<h3 id="1-Dockerfile的简单使用"><a href="#1-Dockerfile的简单使用" class="headerlink" title="1 Dockerfile的简单使用"></a>1 Dockerfile的简单使用</h3><blockquote>
<p>创建一个开启sshd服务的centos6.9镜像</p>
</blockquote>
<p>创建yum源文件，用于拷贝到centos6.9镜像中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/dockfile/centos6.9_ssh</span><br><span class="line">vim CentOS-Base.repo</span><br><span class="line">...内容省略</span><br></pre></td></tr></table></figure>

<p>创建Dockerfile文件&#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh&#x2F;Dockerfile，内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">6.9</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> CentOS-Base.repo /etc/yum.repos.d</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install openssh-server -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> service sshd restart</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;123456&#x27;</span> | passwd --stdin root</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/usr/sbin/sshd&quot;</span>,<span class="string">&quot;-D&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：RUN的执行过程：创建临时容器，执行命令，提交成临时镜像，删除临时容器，重复此步骤。</p>
</blockquote>
<p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t centos6.9_ssh:v2 /opt/dockfile/centos6.9_ssh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：最后传入的是包含Dockerfile的文件夹，区分大小写，可以用”.”代替 </p>
</blockquote>
<p>验证镜像是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1022:22 centos6.9_ssh:v2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：最后不用接命令，将自动执行CMD指定的命令</p>
</blockquote>
<h3 id="2-小案例"><a href="#2-小案例" class="headerlink" title="2 小案例"></a>2 小案例</h3><blockquote>
<p>创建centos6.9 + ssh + nginx的Dockerfile</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@docker01 centos6.9_ssh_nginx]# pwd</span><br><span class="line">/opt/dockfile/centos6.9_ssh_nginx</span><br><span class="line">[root@docker01 centos6.9_ssh_nginx]# ls</span><br><span class="line">CentOS-Base.repo  Dockerfile  epel.repo  init.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> init.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">service sshd restart</span><br><span class="line">nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure>

<p>编写Dockerfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos:6.9</span><br><span class="line">ADD CentOS-Base.repo /etc/yum.repos.d</span><br><span class="line">ADD epel.repo /etc/yum.repos.d</span><br><span class="line">ADD init.sh /root</span><br><span class="line">RUN yum install openssh-server nginx -y</span><br><span class="line">RUN echo &#x27;123456&#x27; | passwd --stdin root</span><br><span class="line">CMD [&quot;/bin/bash&quot;,&quot;/root/init.sh&quot;]</span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t centos6.9_ssh_nginx:v3 .</span><br></pre></td></tr></table></figure>

<p>测试使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1022:22 -p 81:80 centos6.9_ssh_nginx:v3</span><br></pre></td></tr></table></figure>

<h2 id="二、Docker指令"><a href="#二、Docker指令" class="headerlink" title="二、Docker指令"></a>二、Docker指令</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FROM</td>
<td align="left">基于那个镜像来构建</td>
</tr>
<tr>
<td align="left">MAINTAINER</td>
<td align="left">镜像的创建者</td>
</tr>
<tr>
<td align="left">ENV</td>
<td align="left">设置环境变量</td>
</tr>
<tr>
<td align="left">ADD</td>
<td align="left">添加宿主机文件到容器里，有需要解压的文件会自动解压</td>
</tr>
<tr>
<td align="left">COPY</td>
<td align="left">添加宿主机文件到容器里</td>
</tr>
<tr>
<td align="left">WORKDIR</td>
<td align="left">切换工作目录</td>
</tr>
<tr>
<td align="left">EXPOSE</td>
<td align="left">开放可用端口</td>
</tr>
<tr>
<td align="left">CMD</td>
<td align="left">容器启动后执行的命令，可被docker run指定的命令覆盖</td>
</tr>
<tr>
<td align="left">ENTRYPOINT</td>
<td align="left">容器启动后执行的命令，但不回被docker run指定的命令覆盖，如需覆盖，需要加–entrypoint参数</td>
</tr>
<tr>
<td align="left">VOLUME</td>
<td align="left">创建挂载卷，将宿主机的目录挂载到容器里</td>
</tr>
</tbody></table>
<h2 id="三、案例：Dockerfile构建可道云容器"><a href="#三、案例：Dockerfile构建可道云容器" class="headerlink" title="三、案例：Dockerfile构建可道云容器"></a>三、案例：Dockerfile构建可道云容器</h2><blockquote>
<p>项目：</p>
<p>​	可道云网盘kodexplorer</p>
<p>环境：</p>
<p>​	httpd+php或者nginx+php<br>​	php所需模块：php5.5以上<br>​	基础镜像：centos:7.9<br>​	项目下载地址: <a href="http://static.kodcloud.com/update/download/kodexplorer4.37.zip">http://static.kodcloud.com/update/download/kodexplorer4.37.zip</a><br>​	项目官网：<a href="https://kodcloud.com/download/">https://kodcloud.com/download/</a></p>
</blockquote>
<h3 id="1-手工部署一遍"><a href="#1-手工部署一遍" class="headerlink" title="1 手工部署一遍"></a>1 手工部署一遍</h3><blockquote>
<p>写Dockerfile前自己手动部署一遍，主要是nginx + php的搭建，参考博客</p>
<p><a href="https://cloud.tencent.com/developer/article/1015237">https://cloud.tencent.com/developer/article/1015237</a></p>
</blockquote>
<p>修改nginx.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For more information on configuration, see:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       [::]:80;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    	location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    	&#125;</span><br><span class="line">	</span><br><span class="line">    	location / &#123;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.php?$args;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Settings <span class="keyword">for</span> a TLS enabled server.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#    server &#123;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        listen       443 ssl http2;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        listen       [::]:443 ssl http2;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        server_name  _;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        ssl_certificate_key <span class="string">&quot;/etc/pki/nginx/private/server.key&quot;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#        # Load configuration files for the default server block.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#        error_page 404 /404.html;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">            location = /40x.html &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">            location = /50x.html &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改php-fpm.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; FPM Configuration ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">; All relative paths in this configuration file are relative to PHP&#x27;s install</span><br><span class="line">; prefix.</span><br><span class="line"></span><br><span class="line">; Include one or more files. If glob(3) exists, it is used to include a bunch of</span><br><span class="line">; files from a glob(3) pattern. This directive can be used everywhere in the</span><br><span class="line">; file.</span><br><span class="line">include=/etc/php-fpm.d/*.conf</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Global Options ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">; Pid file</span><br><span class="line">; Default Value: none</span><br><span class="line">pid = /run/php-fpm/php-fpm.pid</span><br><span class="line"></span><br><span class="line">; Error log file</span><br><span class="line">; Default Value: /var/log/php-fpm.log</span><br><span class="line">error_log = /var/log/php-fpm/error.log</span><br><span class="line"></span><br><span class="line">; Log level</span><br><span class="line">; Possible Values: alert, error, warning, notice, debug</span><br><span class="line">; Default Value: notice</span><br><span class="line">;log_level = notice</span><br><span class="line"></span><br><span class="line">; If this number of child processes exit with SIGSEGV or SIGBUS within the time</span><br><span class="line">; interval set by emergency_restart_interval then FPM will restart. A value</span><br><span class="line">; of &#x27;0&#x27; means &#x27;Off&#x27;.</span><br><span class="line">; Default Value: 0</span><br><span class="line">;emergency_restart_threshold = 0</span><br><span class="line"></span><br><span class="line">; Interval of time used by emergency_restart_interval to determine when </span><br><span class="line">; a graceful restart will be initiated.  This can be useful to work around</span><br><span class="line">; accidental corruptions in an accelerator&#x27;s shared memory.</span><br><span class="line">; Available Units: s(econds), m(inutes), h(ours), or d(ays)</span><br><span class="line">; Default Unit: seconds</span><br><span class="line">; Default Value: 0</span><br><span class="line">;emergency_restart_interval = 0</span><br><span class="line"></span><br><span class="line">; Time limit for child processes to wait for a reaction on signals from master.</span><br><span class="line">; Available units: s(econds), m(inutes), h(ours), or d(ays)</span><br><span class="line">; Default Unit: seconds</span><br><span class="line">; Default Value: 0</span><br><span class="line">;process_control_timeout = 0</span><br><span class="line"></span><br><span class="line">; Send FPM to background. Set to &#x27;no&#x27; to keep FPM in foreground for debugging.</span><br><span class="line">; Default Value: yes</span><br><span class="line">daemonize = no</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Pool Definitions ; </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">; See /etc/php-fpm.d/*.conf</span><br></pre></td></tr></table></figure>

<p>修改<a href="http://www.conf/">www.conf</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 12行</span></span><br><span class="line">listen = /var/run/php-fpm/php-fpm.sock</span><br><span class="line"><span class="meta">#</span><span class="bash"> 31-32行</span></span><br><span class="line">listen.owner = nobody</span><br><span class="line">listen.group = nobody</span><br><span class="line"><span class="meta">#</span><span class="bash"> 39-41行</span></span><br><span class="line">user = nginx</span><br><span class="line">; RPM: Keep a group allowed to write in log dir.</span><br><span class="line">group = nginx</span><br></pre></td></tr></table></figure>

<p>修改php.ini</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cgi.fix_pathinfo 把它的值设置为 0</span><br></pre></td></tr></table></figure>

<h3 id="2-Dockerfile部署"><a href="#2-Dockerfile部署" class="headerlink" title="2 Dockerfile部署"></a>2 Dockerfile部署</h3><p>文件存放</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@docker01 centos7.9_kod]# ll</span><br><span class="line">total 92</span><br><span class="line">-rw-r--r--. 1 root root   661 Jul  2 11:21 Dockerfile</span><br><span class="line">-rw-r--r--. 1 root root   171 Jul  1 14:28 init.sh</span><br><span class="line">-rw-r--r--. 1 root root  2715 Jul  1 13:50 nginx.conf</span><br><span class="line">-rw-r--r--. 1 root root  1691 Jul  1 13:50 php-fpm.conf</span><br><span class="line">-rw-r--r--. 1 root root 64945 Jul  1 14:48 php.ini</span><br><span class="line">-rw-r--r--. 1 root root 10029 Jul  1 13:50 www.conf</span><br><span class="line">[root@docker01 centos7.9_kod]# pwd</span><br><span class="line">/opt/dockfile/centos7.9_kod</span><br></pre></td></tr></table></figure>

<p>编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; \</span></span><br><span class="line"><span class="bash">curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo &amp;&amp; \</span></span><br><span class="line"><span class="bash">yum install openssh-server nginx net-tools php-cli php-fpm unzip php-gd php-mbstring  -y</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> php-fpm.conf /etc/php-fpm.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> www.conf /etc/php-fpm.d/www.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> php.ini /etc</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> init.sh /root/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -o kod.zip https://static.kodcloud.com/update/download/kodexplorer4.45.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">unzip kod.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">chmod -R 777 /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;/root/init.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t centos7.9_kod:v1 .</span><br></pre></td></tr></table></figure>

<p>运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -p 1022:22 -e &quot;SSH_PWD=redhat123&quot; --privileged centos7.9_kod:v1 /usr/sbin/init</span><br></pre></td></tr></table></figure>

<p>进入容器，并运行初始化命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 865 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器启动服务，设置root密码</span></span><br><span class="line">[root@88179198e672 html]#systemctl restart sshd php-fpm nginx</span><br><span class="line">[root@88179198e672 html]#echo &quot;redhat123&quot; | passwd --stdin root</span><br></pre></td></tr></table></figure>

<p>测试访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">网页访问：http://10.0.0.11可进去可道云界面</span><br><span class="line">ssh 10.0.0.11 -p1022 可以登录镜像</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(五)-手动制作docker镜像</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%BA%94-%E6%89%8B%E5%8A%A8%E5%88%B6%E4%BD%9Cdocker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="一、制作Docker镜像"><a href="#一、制作Docker镜像" class="headerlink" title="一、制作Docker镜像"></a>一、制作Docker镜像</h2><h3 id="1-启动基础容器"><a href="#1-启动基础容器" class="headerlink" title="1 启动基础容器"></a>1 启动基础容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it centos:6.9 # yum</span><br><span class="line">docker run -it alpine:3.9 # apk</span><br></pre></td></tr></table></figure>

<h3 id="2-在容器中安装服务"><a href="#2-在容器中安装服务" class="headerlink" title="2 在容器中安装服务"></a>2 在容器中安装服务</h3><p>修改yum源（Centos6阿里源已停止维护）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;[centos-office]</span><br><span class="line">name=centos-office</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=https://vault.centos.org/6.10/os/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://vault.centos.org/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6&#x27; &gt; CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p>安装并启动openssh服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install openssh-server -y</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<p>修改root密码(默认没有密码)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;123456&#x27; | passwd --stdin root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">echo root:123456 | chpassw</span><br></pre></td></tr></table></figure>

<p>将已经安装好sshd服务的容器打包成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container commit 981877f137c9 centos6.9_ssh:v1</span><br></pre></td></tr></table></figure>

<p>测试镜像</p>
<blockquote>
<p>sshd -D：以后台守护进程的方式运行服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动sshd并将22端口映射出来，可以使用xshell连接</span></span><br><span class="line">docker run -d -p 1022:22 centos6.9_ssh:v1 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<h2 id="二、小案例：创建一个ssh-nginx双服务的镜像"><a href="#二、小案例：创建一个ssh-nginx双服务的镜像" class="headerlink" title="二、小案例：创建一个ssh+nginx双服务的镜像"></a>二、小案例：创建一个ssh+nginx双服务的镜像</h2><p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1023:22 centos6.9_ssh:v1 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<p>修改yum源和epel源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于Centos6阿里云停止维护</span><br><span class="line">参考：https://blog.csdn.net/u013250554/article/details/110684307</span><br></pre></td></tr></table></figure>

<p>安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure>

<p>创建运行服务的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/init.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">service sshd restart</span><br><span class="line">nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>

<p>将容器封装成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit e6a6dsa6 centos6.9_ssh_nginx:v2</span><br></pre></td></tr></table></figure>

<p>启动镜像，开启服务，并夯住</p>
<blockquote>
<p>可以使用工具ssh登录，并且可以访问到nginx的欢迎页面</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 /bin/bash /root/init.sh</span><br></pre></td></tr></table></figure>

<h2 id="三、通过环境变量设置容器密码"><a href="#三、通过环境变量设置容器密码" class="headerlink" title="三、通过环境变量设置容器密码"></a>三、通过环境变量设置容器密码</h2><p>修改&#x2F;root&#x2F;init.sh文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ -z $SSH_PWD ];then</span><br><span class="line">        SSH_PWD=123456</span><br><span class="line">fi</span><br><span class="line">echo &quot;$SSH_PWD&quot; | passwd --stdin root</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br><span class="line">nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>

<p>打包成镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 12386c6504d4 centos6.9_ssh_nginx_passwd</span><br></pre></td></tr></table></figure>

<p>运行容器</p>
<blockquote>
<p>docker run -e：指定环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1022:22 -p 80:80 -e &quot;SSH_PWD=123456&quot; centos6.9_ssh_nginx_passwd /bin/bash /root/init.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(二)-Docker常用管理命令</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%BA%8C-Docker%E5%B8%B8%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="一、常用镜像管理命令"><a href="#一、常用镜像管理命令" class="headerlink" title="一、常用镜像管理命令"></a>一、常用镜像管理命令</h2><blockquote>
<p>​	Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数(如匿名卷、环境变量、用户等)。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</blockquote>
<h3 id="1-在镜像仓库查找镜像"><a href="#1-在镜像仓库查找镜像" class="headerlink" title="1 在镜像仓库查找镜像"></a>1 在镜像仓库查找镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure>

<h3 id="2-在镜像仓库拉取镜像"><a href="#2-在镜像仓库拉取镜像" class="headerlink" title="2 在镜像仓库拉取镜像"></a>2 在镜像仓库拉取镜像</h3><blockquote>
<p>不指定版本号时默认下载最新版（latest），版本可在dockerhub(官方仓库)、DaoCloud(私有仓库)等仓库查到</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dockerhub拉取</span></span><br><span class="line">docker pull alpine:3.6</span><br><span class="line"><span class="meta">#</span><span class="bash"> daocloud拉取</span></span><br><span class="line">docker pull daocloud.io/jermine/alpine:latest</span><br></pre></td></tr></table></figure>

<h3 id="3-查看已有镜像"><a href="#3-查看已有镜像" class="headerlink" title="3 查看已有镜像"></a>3 查看已有镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 别名</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="4-导出镜像"><a href="#4-导出镜像" class="headerlink" title="4 导出镜像"></a>4 导出镜像</h3><blockquote>
<p>弃用export，导出的镜像不带版本TAG信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image save alpine -o alpine.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5 删除镜像"></a>5 删除镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除alpine镜像</span></span><br><span class="line">docker image rm d4ff818577bc</span><br></pre></td></tr></table></figure>

<h3 id="6-导入镜像"><a href="#6-导入镜像" class="headerlink" title="6 导入镜像"></a>6 导入镜像</h3><blockquote>
<p>弃用import，导入的镜像不带版本TAG信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image load -i alpine.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="7-查看镜像属性"><a href="#7-查看镜像属性" class="headerlink" title="7 查看镜像属性"></a>7 查看镜像属性</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect 4f380adfc10f</span><br></pre></td></tr></table></figure>

<h3 id="8-镜像批量删除"><a href="#8-镜像批量删除" class="headerlink" title="8 镜像批量删除"></a>8 镜像批量删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure>

<h3 id="9-指定TAG信息"><a href="#9-指定TAG信息" class="headerlink" title="9 指定TAG信息"></a>9 指定TAG信息</h3><blockquote>
<p>docker images查看docker image import的镜像，没有镜像名和TAG，可以使用此方法来修改</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker image tag d4ff818577bc oldbly</span><br></pre></td></tr></table></figure>

<h2 id="二、常用容器管理命令"><a href="#二、常用容器管理命令" class="headerlink" title="二、常用容器管理命令"></a>二、常用容器管理命令</h2><blockquote>
<p>​	镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>​	容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立宿主的系统下操作一样。这种特性使容器封装的应用比直接在宿主运行更加安全。</p>
</blockquote>
<h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1 运行容器"></a>1 运行容器</h3><blockquote>
<p>1、docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>2、业务在容器中运行：前台运行夯住，启动服务</p>
<p>3、如果不指定执行命令，会运行默认的执行命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 放后台运行</span></span><br><span class="line">docker run -d -p 80:80 nginx:latest</span><br><span class="line">run 创建并运行一个容器</span><br><span class="line">-d	放在后台运行</span><br><span class="line">-p 	端口映射</span><br><span class="line">-v 	源地址(宿主机)：目标地址(容器)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 交互式方式进入容器执行</span></span><br><span class="line">docker run -it --name centos6 centos:6.9 /bin/bash</span><br><span class="line">-it 	分配交互式的终端</span><br><span class="line">--name 	制定容器的名称</span><br><span class="line">/bin/sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖</span><br></pre></td></tr></table></figure>

<h3 id="2-查看已有容器"><a href="#2-查看已有容器" class="headerlink" title="2 查看已有容器"></a>2 查看已有容器</h3><blockquote>
<p>-a 显示所有容器（默认只显示running的容器）</p>
<p>-l 显示最新的容器</p>
<p>–no-trunc 显示完整id</p>
<p>-q 静默输出（只显示容器id）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 别名</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h3 id="3-停止容器"><a href="#3-停止容器" class="headerlink" title="3 停止容器"></a>3 停止容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container stop 55e9c7c</span><br></pre></td></tr></table></figure>

<h3 id="4-杀死容器"><a href="#4-杀死容器" class="headerlink" title="4 杀死容器"></a>4 杀死容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container kill 55e9c7c</span><br></pre></td></tr></table></figure>

<blockquote>
<p>kill与stop的区别：</p>
<ul>
<li><p>kill：不管容器同不同意，发送SIGKILL信号，强行终止。</p>
</li>
<li><p>stop：首先给容器发送一个SIGTERM信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再发送SIGKILL信号，强行终止。</p>
</li>
</ul>
</blockquote>
<h3 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5 启动容器"></a>5 启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container start 55e9c7c</span><br></pre></td></tr></table></figure>

<h3 id="6-进入容器（重要！调试、排错）"><a href="#6-进入容器（重要！调试、排错）" class="headerlink" title="6 进入容器（重要！调试、排错）"></a>6 进入容器（重要！调试、排错）</h3><p>使用同一终端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 交互式方式运行容器（开启新终端）</span></span><br><span class="line">docker run -it --name centos6.9 centos:6.9 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂时退出当前终端</span></span><br><span class="line">ctrl + p 再 ctrl + q</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新进入该终端</span></span><br><span class="line">docker attach d4ff818577bc</span><br></pre></td></tr></table></figure>

<p>使用不同终端（常用）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it d4ff818577bc /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="7-删除容器"><a href="#7-删除容器" class="headerlink" title="7 删除容器"></a>7 删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm 55e9c7cb59a6 55e9c7cb59a5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 别名</span></span><br><span class="line">docker rm 55e9c7cb59a6</span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量删除容器</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(十)-Dokcer单机编排docker-compose</title>
    <url>/2021/07/07/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%8D%81-Dokcer%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/</url>
    <content><![CDATA[<blockquote>
<p>docker-compose 单机版的容器编排工具</p>
</blockquote>
<h2 id="一、安装docker-compose"><a href="#一、安装docker-compose" class="headerlink" title="一、安装docker-compose"></a>一、安装docker-compose</h2><p>添加Centos7的epel源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<p>安装pip</p>
<blockquote>
<p>Python 2.7已于2020年1月1日到期，请停止使用。请升级您的Python，因为不再维护Python 2.7。pip 21.0将于2021年1月停止对Python 2.7的支持。pip 21.0将删除对此功能的支持。因此安装&lt;21.0的版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y python2-pip</span><br><span class="line">pip install --upgrade &quot;pip &lt; 21.0&quot;</span><br></pre></td></tr></table></figure>

<p>安装docker-compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure>

<p>创建文件夹用于存放docker-compose脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="一、案例：compose构建wordpress并使用nginx负载均衡"><a href="#一、案例：compose构建wordpress并使用nginx负载均衡" class="headerlink" title="一、案例：compose构建wordpress并使用nginx负载均衡"></a>一、案例：compose构建wordpress并使用nginx负载均衡</h2><p>docker01主机创建docker-compose文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/docker-compose/wordpress/docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web_data:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;80&quot;</span>  <span class="comment"># 随机端口映射到内网80端口</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">     <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">     <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">     <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br><span class="line">  <span class="attr">web_data:</span></span><br></pre></td></tr></table></figure>

<p>构建Docker容器(三个wordpress，一个mysql）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up --scale wordpress=3 -d</span><br><span class="line">-d 后台运行</span><br><span class="line">--scale 生成的实例数</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstaus -lntup可以看到3个连续的端口号</span><br><span class="line">tcp        0      0 0.0.0.0:49156           0.0.0.0:*               LISTEN      2110/docker-proxy</span><br><span class="line">tcp        0      0 0.0.0.0:49157           0.0.0.0:*               LISTEN      2126/docker-proxy</span><br><span class="line">tcp        0      0 0.0.0.0:49158           0.0.0.0:*               LISTEN      2143/docker-proxy</span><br></pre></td></tr></table></figure>

<p>docker02主机安装nginx，用于负载均衡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>

<p>配置nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/</span><br><span class="line">mv nginx.conf nginx.conf.bak</span><br><span class="line">grep -Ev &#x27;^$|#&#x27; nginx.conf.default  &gt; nginx.conf</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    upstream wordpress &#123;</span><br><span class="line">        server 10.0.0.11:49156;</span><br><span class="line">        server 10.0.0.11:49157;</span><br><span class="line">        server 10.0.0.11:49158;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass  http://wordpress;</span><br><span class="line">            proxy_set_header Host $host;  # 不加上网页没有Host信息，显示不全</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>测试访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器访问:10.0.0.12,可以进入wordpress</span><br></pre></td></tr></table></figure>

<p>查看是否负载均衡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个查看信息的页面</span></span><br><span class="line">cd /var/lib/docker/volumes/wordpress_web_data/_data/</span><br><span class="line">vim info.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器访问：10.0.0.12&#x2F;info.php，查看其中IP信息</p>
<h2 id="二、案例：构建zabbix"><a href="#二、案例：构建zabbix" class="headerlink" title="二、案例：构建zabbix"></a>二、案例：构建zabbix</h2>]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(四)-容器的数据卷挂载与小案例练习</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E5%AE%B9%E5%99%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%B8%8E%E5%B0%8F%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一、数据卷挂载"><a href="#一、数据卷挂载" class="headerlink" title="一、数据卷挂载"></a>一、数据卷挂载</h2><h3 id="1-临时挂载"><a href="#1-临时挂载" class="headerlink" title="1 临时挂载"></a>1 临时挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将/opt/xiaoniao目录挂载到容器的html目录</span></span><br><span class="line">docker run -d -p 80:80 -v /opt/xiaoniao:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>

<h3 id="2-使用卷挂载"><a href="#2-使用卷挂载" class="headerlink" title="2 使用卷挂载"></a>2 使用卷挂载</h3><blockquote>
<p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
</blockquote>
<p>创建名为myvol的容器卷并挂载到容器html目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -v myvol:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>

<p>查看当前有哪些容器卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>查看名为myvol的卷的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect myvol</span><br></pre></td></tr></table></figure>

<p>删除容器并删除卷（无效）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> PS：删除容器并删除卷，无法将卷删除</span></span><br><span class="line">docker rm -f -v [容器ID]</span><br><span class="line">    -v --volume</span><br></pre></td></tr></table></figure>

<h2 id="二、小案例：多端口多站点"><a href="#二、小案例：多端口多站点" class="headerlink" title="二、小案例：多端口多站点"></a>二、小案例：多端口多站点</h2><blockquote>
<p>80端口访问nginx首页</p>
<p>81端口访问水果忍者</p>
</blockquote>
<p>获取水果忍者HTML5小游戏源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://7npmedia.w3cschool.cn/1-FruitNinja.7z</span><br></pre></td></tr></table></figure>

<p>创建81端口nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/fruitninjia.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    listen  [::]:81;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /data;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将游戏源码文件解压至&#x2F;opt&#x2F;fruitninjia，并运行nginx容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将/opt/fruitninjia挂载到容器/data中</span></span><br><span class="line">docker run -d -p 80:80 -p 81:81 -v /opt/fruitninjia:/data -v /opt/fruitninjia.conf:/etc/nginx/conf.d/fruitninjia.conf nginx</span><br></pre></td></tr></table></figure>

<p>网页访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://10.0.0.11:80</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(零)-Docker介绍</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E9%9B%B6-Docker%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h1><p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁。</p>
<p>隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
<h2 id="1-1-容器和虚拟化的区别"><a href="#1-1-容器和虚拟化的区别" class="headerlink" title="1.1 容器和虚拟化的区别"></a>1.1 容器和虚拟化的区别</h2><p>KVM虚拟化：</p>
<p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr&#x2F;gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：&#x2F;sbin&#x2F;init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
<p>容器：</p>
<p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
<h2 id="1-2-容器的优缺点："><a href="#1-2-容器的优缺点：" class="headerlink" title="1.2 容器的优缺点："></a>1.2 容器的优缺点：</h2><p>优点：</p>
<p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
<p>缺点：</p>
<p>使用同一内核，存在安全性问题</p>
<h2 id="1-3-容器技术的发展过程"><a href="#1-3-容器技术的发展过程" class="headerlink" title="1.3 容器技术的发展过程"></a>1.3 容器技术的发展过程</h2><p>chroot — lxc —- docker</p>
<h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><p># 添加docker安装源 </p>
<p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a> </p>
<p>查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce) yum list docker-ce –showduplicates | sort -r # 安装docker-ce yum install docker-ce -y</p>
<h1 id="三、Docker镜像的常用命令"><a href="#三、Docker镜像的常用命令" class="headerlink" title="三、Docker镜像的常用命令"></a>三、Docker镜像的常用命令</h1><p># 搜索镜像docker search [镜像名称]# 拉取镜像docker pull [域名镜像名称]:[版本号]例如：docker pull daocloud.io&#x2F;hzc&#x2F;alpine:3.6 # 默认拉取Lastest最新版PS: docker image pull &#x3D; docker pull# 如何查看镜像有那些版本？dockerhub网页搜索 daocloud 国内的dockhub# 镜像加速：（1）阿里云docker镜像加速器服务（2）配置docker镜像加速(推荐) vi &#x2F;etc&#x2F;docker&#x2F;daemon.json {   “registry-mirrors”:[“<a href="https://registry.docker-cn.com”]">https://registry.docker-cn.com”]</a> } systemctl daemon-reload# 上传镜像docker push [镜像名称]# 查看已有镜像docker images &#x3D; docker image ls# 导出镜像docker image save alpine:latest -o docker_alpine.tar.gz # save跟export选哪个？都是导出镜像，但是export没带版本标签，export弃用# 导入镜像docker image load -i docker_alpine.tar.gz # load跟import选哪个？都是导入镜像，load对应save，import不带版本标签，import弃用# 删除镜像docker image rm alpine:3.6# 构建镜像docker image build# 查看构建镜像用到的历史命令docker image histroy# 查看镜像的详细属性docker image inspect# 批量删除镜像docker image prune# 给镜像打标签docker image tag [镜像ID] oldboy:v1 # Docker的容器管理1、查看容器列表 docker container ls -a docker ps # 默认只查看活着的容器 docker ps -a # 查看所有容器 docker ps -a -q # 静默输出，显示所有容器的ID docker ps -a -l docker ps -a -l –no-trunc # 查看完整命令（不隐藏）# 停止容器docker container stop [容器ID] docker container kill [容器ID]# 恢复容器 docker container start 【容器ID】# 启动容器 docker run -d -p 80:80 nginx:latest run 创建并运行一个容器 -d   放在后台运行 -p 端口映射 -v 源地址(宿主机)：目标地址(容器) docker run -it –name centos6 centos:6.9 &#x2F;bin&#x2F;bash -it 分配交互式的终端 –name 制定容器的名称 &#x2F;bin&#x2F;sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖※进入容器（调试、排错）docker exec - it [容器名称&#x2F;ID] &#x2F;bin&#x2F;bash docker attach 【容器名称&#x2F;ID】 (使用同一个终端)临时退出容器：ctrl +p和ctrl + q退出# 删除容器docker container rm [容器ID] docker rm [容器ID]如何批量删除容器：docker rm <code>docker ps -a -q</code></p>
<p><strong>总结：</strong></p>
<p>docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>业务在容器中运行：前台运行夯住，启动服务</p>
<h1 id="四、-Docker的网络访问"><a href="#四、-Docker的网络访问" class="headerlink" title="四、 Docker的网络访问"></a>四、 Docker的网络访问</h1><h2 id="4-1-容器网络访问流程"><a href="#4-1-容器网络访问流程" class="headerlink" title="4.1 容器网络访问流程"></a>4.1 容器网络访问流程</h2><p>实际上是端口映射，docker容器有自己的ip，需要靠宿主机NAT上网 </p>
<p> -p设置自动端口映射，在iptables中有增的Chain Docker, 也可以手动设置NAT</p>
<p>查看当前设置的nat：iptables -t nat -L -n</p>
<h2 id="4-2-容器网络访问注意事项："><a href="#4-2-容器网络访问注意事项：" class="headerlink" title="4.2 容器网络访问注意事项："></a>4.2 容器网络访问注意事项：</h2><p>sysctl -a | grep ipv4 | grep forward </p>
<p>查看</p>
<p>net.ipv4.ip_forward &#x3D; 1 # 为1时，docker容器才能上网，虚拟机挂起将使他变成0</p>
<p>解决方法:</p>
<p>1、sysctl net.ipv4.ip_forward &#x3D; 1 设置为1</p>
<p>2、不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</p>
<h2 id="4-3-指定映射-p-参数详解"><a href="#4-3-指定映射-p-参数详解" class="headerlink" title="4.3 指定映射(-p)参数详解"></a>4.3 指定映射(-p)参数详解</h2><p>-p hostPort:containerPort # 指定端口 -p ip:hostPort:containerPort # 指定ip+端口 -p ip::containerPort # 指定随机端口 -p 10.0.0.100:53:udp # 指定随机端口 + udp -p hostPort:containerPort -p hostPort:containerPort # 指定多个端口</p>
<h1 id="五、容器的数据卷挂载"><a href="#五、容器的数据卷挂载" class="headerlink" title="五、容器的数据卷挂载"></a>五、容器的数据卷挂载</h1><h2 id="5-1-临时挂载"><a href="#5-1-临时挂载" class="headerlink" title="5.1 临时挂载"></a>5.1 临时挂载</h2><p># 将&#x2F;opt&#x2F;xiaoniao目录挂载到容器的html目录 docker run -d -p 80:80 -v &#x2F;opt&#x2F;xiaoniao:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest</p>
<h2 id="5-2-持久化挂载"><a href="#5-2-持久化挂载" class="headerlink" title="5.2 持久化挂载"></a>5.2 持久化挂载</h2><p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
<p># 创建名为oldboy的容器卷并挂载到容器html目录 docker run -d -p 80:80 -v oldboy:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest # 查看当前有哪些容器卷 docker volume ls # 查看名为oldboy的卷的信息 docker volume inspect oldboy # PS：删除容器并删除卷，无法将卷删除 docker rm -f -v [容器ID]   -v –volume</p>
<h1 id="六、小案例练习"><a href="#六、小案例练习" class="headerlink" title="六、小案例练习"></a>六、小案例练习</h1><p>&gt;&gt; 基于Nginx多端点的多站点 基于nginx启动一个容器，监听80和81，访问80，出现nginx默认的欢迎首页，访问81，出现小鸟页面。</p>
<h1 id="七、如何制作Docker镜像"><a href="#七、如何制作Docker镜像" class="headerlink" title="七、如何制作Docker镜像"></a>七、如何制作Docker镜像</h1><h2 id="7-1-启动一个基础的容器"><a href="#7-1-启动一个基础的容器" class="headerlink" title="7.1 启动一个基础的容器"></a>7.1 启动一个基础的容器</h2><p>docker run -it centos:6.9 # yum docker run -it alpine:3.9 # apk</p>
<h2 id="7-2-容器中安装服务"><a href="#7-2-容器中安装服务" class="headerlink" title="7.2 容器中安装服务"></a>7.2 容器中安装服务</h2><p># dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; &#x2F;etc&#x2F;hosts # 替换源为阿里源 curl -o &#x2F;etc&#x2F;yum.repo.d&#x2F;CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/CentOS-6.repo">https://mirrors.aliyun.com/repo/CentOS-6.repo</a> # 安装并启动openssh服务 yum install openssh-server -y service opensshd restart # 修改root密码 echo ‘123456’ | passwd –stdin root 或者 echo 123456:root | chpassw</p>
<p>7.3 把已经安装服务的容器打包成镜像</p>
<p>docker contanier commit 5617e5d123432 centos6.9_ssh:v1</p>
<h2 id="7-4-测试镜像的功能"><a href="#7-4-测试镜像的功能" class="headerlink" title="7.4 测试镜像的功能"></a>7.4 测试镜像的功能</h2><p># 使用镜像启动一个新容器,并开启ssh服务 docker run -d -p 1022:22 centos6.9_ssh:v1 tail -f &#x2F;usr&#x2F;sbin&#x2F;sshd -D</p>
<h2 id="7-5-创建一个ssh-nginx双服务的镜像"><a href="#7-5-创建一个ssh-nginx双服务的镜像" class="headerlink" title="7.5 创建一个ssh + nginx双服务的镜像"></a>7.5 创建一个ssh + nginx双服务的镜像</h2><p>(1) 启动一个基础容器 docker yun -it -p 80:80 -p 1023:22 centos6.9_ssh:v1 &#x2F;bin&#x2F;bash (2) 在容器中安装服务(hosts与repo源在新容器会重新挂载) # dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; &#x2F;etc&#x2F;hosts # 替换源为阿里源 curl -o &#x2F;etc&#x2F;yum.repo.d&#x2F;epel.repo <a href="https://mirrors.aliyun.com/repo/epel.repo">https://mirrors.aliyun.com/repo/epel.repo</a> # 安装nginx服务 yum install nginx -y (3) 把已经安装好服务的容器，提交为镜像 docker commit e6a6dsa6 centos6.9_ssh_nginx:v2 (4) 测试镜像功能 vim init.sh &gt;&gt;&gt;&gt;&gt; #!&#x2F;bin&#x2F;bash service sshd restart nginx -g ‘daemon off;’ &gt;&gt;&gt;&gt;&gt; # 启动镜像，执行脚本：开启服务，并夯住 docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;init.sh</p>
<h3 id="7-6-自定义容器镜像的密码"><a href="#7-6-自定义容器镜像的密码" class="headerlink" title="7.6 自定义容器镜像的密码"></a>7.6 自定义容器镜像的密码</h3><p># 修改脚本，添加密码相关的脚本行，见右图 vim init.sh # 启动容器，并附带环境变量 docker run -d -p 1025:22 -p 80:80 -e “SSH_PWD&#x3D;123456” centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;init.sh</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="7-7-作业"><a href="#7-7-作业" class="headerlink" title="7.7 作业"></a>7.7 作业</h3><p>制作基于centos6的lnmp架构的镜像，discuz论坛</p>
<p>怎么夯住？</p>
<p>启动所有需要的服务</p>
<p>最后tail -F (大F无论文件有没有) </p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="八、Dockfile的使用"><a href="#八、Dockfile的使用" class="headerlink" title="八、Dockfile的使用"></a>八、Dockfile的使用</h1><p>发布镜像太大了，而dockerfile只有几kb，使用dockfile文件可以构建出相同的镜像，</p>
<h2 id="8-1-使用dockfile自动构建镜像"><a href="#8-1-使用dockfile自动构建镜像" class="headerlink" title="8.1 使用dockfile自动构建镜像"></a>8.1 使用dockfile自动构建镜像</h2><p>自动构建镜像的步骤：</p>
<p>1、手动构建一遍</p>
<p>2、参考历史命令，编写dockerfile</p>
<p>3、构建镜像</p>
<p>dockerfile build -t centos6.9_ssh .</p>
<p>4、测试</p>
<h2 id="8-2-Dockerfile常用命令详解"><a href="#8-2-Dockerfile常用命令详解" class="headerlink" title="8.2 Dockerfile常用命令详解"></a>8.2 Dockerfile常用命令详解</h2>]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--01-整体架构规划</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="一-、综合架构规划"><a href="#一-、综合架构规划" class="headerlink" title="一 、综合架构规划"></a>一 、综合架构规划</h2><blockquote>
<p>项目中涵盖了架构，架构中又涵盖了不同的角色（高可用、负载均衡、web集群）<br>五层架构模型–&gt; 负载均衡 web服务 存储服务 缓存服务 数据库服务（通过tcp连接）</p>
</blockquote>
<p><img src="/img/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="综合架构图"></p>
<h3 id="1-架构访问流程"><a href="#1-架构访问流程" class="headerlink" title="1 架构访问流程"></a>1 架构访问流程</h3><h4 id="1-1-用户视角"><a href="#1-1-用户视角" class="headerlink" title="1.1 用户视角"></a>1.1 用户视角</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.用户通过浏览器输入oldboyedu.com-&gt;回车</span><br><span class="line">2.浏览器会发生一次跳转，分析URL-&gt;然后进行DNS解析-&gt;获取真实的公网IP地址</span><br><span class="line">3.用户通过tcp的三次握手发起连接-&gt;真实的公网IP</span><br><span class="line">4.连接会通过公网-&gt;路由器-&gt;交换机-&gt;抵达前端的硬件防火墙</span><br><span class="line">5.防火墙根据自身访问规则，进行匹配-&gt;如果恶意的连接则拒绝-&gt;如果是正常的连接则放行</span><br><span class="line">6.防火墙会将连接转发给负载均衡器-&gt;查看用户请求的内容-&gt;根据内容进行任务下发-&gt;下发给web服务器</span><br><span class="line">7.web服务接收请求后会根据请求进行判断</span><br><span class="line">如果是请求图片或者附件-&gt;查找存储服务器存储的静态资源</span><br><span class="line">如果请求的网站上的内容-&gt;缓存服务器-&gt;如果缓存服务器没有-&gt;数据库</span><br><span class="line">数据库查询完数据之后会返回数据给web服务器-&gt;同时也会返回一份给缓存服务器</span><br><span class="line">8.数据库返回内容-&gt;web服务器-&gt;负载均衡-&gt;用户</span><br></pre></td></tr></table></figure>

<h4 id="1-2-运维视角"><a href="#1-2-运维视角" class="headerlink" title="1.2 运维视角"></a>1.2 运维视角</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.用户通过公网连接（隧道）VPN服务器，这样方便管理内部主机，</span><br><span class="line">2.自动化配置管理，节省人力成本，便于后期维护。统一环境，标准化</span><br><span class="line">3.自动化监控服务，监控系统的运行状态，事前预警，事后追溯。</span><br></pre></td></tr></table></figure>

<h3 id="2-架构环境规划"><a href="#2-架构环境规划" class="headerlink" title="2 架构环境规划"></a>2 架构环境规划</h3><h4 id="2-1-IP分配"><a href="#2-1-IP分配" class="headerlink" title="2.1 IP分配"></a>2.1 IP分配</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> wanip         lanip       hostname</span><br><span class="line">10.0.0.5     172.16.1.5     lb01</span><br><span class="line">10.0.0.6     172.16.1.6     lb02</span><br><span class="line">10.0.0.7     172.16.1.7     web01</span><br><span class="line">10.0.0.8     172.16.1.8     web02</span><br><span class="line">10.0.0.9     172.16.1.9     web03</span><br><span class="line">10.0.0.31    172.16.1.31    nfs</span><br><span class="line">10.0.0.41    172.16.1.41    backup</span><br><span class="line">10.0.0.51    172.16.1.51    db01</span><br><span class="line">10.0.0.61    172.16.1.61    m01</span><br><span class="line">10.0.0.71    172.16.1.71    zabbix</span><br></pre></td></tr></table></figure>

<h4 id="2-2-基础环境准备"><a href="#2-2-基础环境准备" class="headerlink" title="2.2 基础环境准备"></a>2.2 基础环境准备</h4><h5 id="2-2-1-虚拟机系统和网卡准备"><a href="#2-2-1-虚拟机系统和网卡准备" class="headerlink" title="2.2.1 虚拟机系统和网卡准备"></a>2.2.1 虚拟机系统和网卡准备</h5><blockquote>
<p>安装全新Centos7系统，配置网卡为eth0及eth1命名模式<br>1.第一块网卡为NAT模式[公网环境]，配置的网段为10.0.0.0网段<br>2.第二块网卡为LAN模式[私网环境]，配置的网段为172.16.1.0网段<br>3.优化安装好的Centos7虚拟机，安装常用软件、关闭防火墙等等</p>
</blockquote>
<p>优化步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.配置yum仓库</span></span><br><span class="line">rm -f /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.安装基础软件包</span></span><br><span class="line">yum install net-tools vim tree htop iftop \</span><br><span class="line">iotop lrzsz sl wget unzip telnet nmap nc psmisc \</span><br><span class="line">dos2unix bash-completion bash-completion-extra sysstat \</span><br><span class="line">rsync nfs-utils httpd-tools -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.关闭防火墙firewalld</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.关闭selinux</span></span><br><span class="line">sed -i &#x27;/^SELINUX=/c SELINUX=disabled&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.调整单个进程最大能打开文件的数量</span></span><br><span class="line">echo &#x27;* - nofile 65535&#x27; &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure>

<p>基于优化后的虚拟机进行克隆</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.连接克隆（需要依赖于母体）</span><br><span class="line">2.完整克隆（完完全全的复制一份，占用磁盘空间）</span><br></pre></td></tr></table></figure>

<p>对新克隆的主机进行如下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.修改主机名</span>  </span><br><span class="line">hostnamectl set-hostname backup</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.修改IP地址</span>  </span><br><span class="line">sed -i &#x27;s#200#41#g&#x27; /etc/sysconfig/network-scripts/ifcfg-eth[01]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.重启服务器</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--02--Rsync服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/02-Rsync%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="二、Rsync与数据备份"><a href="#二、Rsync与数据备份" class="headerlink" title="二、Rsync与数据备份"></a>二、Rsync与数据备份</h2><h3 id="2-1-备份概念"><a href="#2-1-备份概念" class="headerlink" title="2.1  备份概念"></a>2.1  备份概念</h3><p>为什么要做备份？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">数据非常的重要</span><br><span class="line">保证数据不丢失</span><br><span class="line">便于快速的恢复</span><br></pre></td></tr></table></figure>

<p>备份方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">完全备份，每次都进行全部备份 (效率低下, 占用空间)</span><br><span class="line">增量备份，仅备份客户端与服务端差异的部分 (提高备份效率,节省空间, 适合异地备份 )</span><br></pre></td></tr></table></figure>

<p>用什么工具做备份？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp  	网络之间的拷贝，全量拷贝的方式  （ssh协议）</span><br><span class="line">rsync	远程同步（增量）</span><br></pre></td></tr></table></figure>

<h3 id="2-2-rsync的基本概念"><a href="#2-2-rsync的基本概念" class="headerlink" title="2.2 rsync的基本概念"></a>2.2 rsync的基本概念</h3><blockquote>
<p>rsync是一款开源的备份工具，<br>可以在不同主机之间进行同步（windows和Linux之间   Mac和Linux   Linux和Linux）<br>可实现全量备份与增量备份<br>因此非常适合用于架构集中式备份或异地备份等应用</p>
</blockquote>
<p>rsync数据的同步模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">推送： 本地将数据上传至备份服务器上	 （上传）</span><br><span class="line">拉取： 备份服务器获取本地服务器的数据  （下载）</span><br></pre></td></tr></table></figure>

<p>rsync的数据传输方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">本地传输（类似于使用cp命令）</span><br><span class="line">远程传输（通过网络传输  a--&gt;b）</span><br><span class="line">守护进程（运行一个服务一直在后台）</span><br></pre></td></tr></table></figure>

<p>rsync选项详解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync参数:</span><br><span class="line">-a           #归档模式传输, 等于-tropgDl *</span><br><span class="line">-v           #详细模式输出, 打印速率, 文件数量等 *</span><br><span class="line">-z           #传输时进行压缩以提高效率 *</span><br><span class="line">-r           #递归传输目录及子目录，即目录下得所有目录都同样传输。</span><br><span class="line">-t           #保持文件时间信息</span><br><span class="line">-o           #保持文件属主信息</span><br><span class="line">-p           #保持文件权限</span><br><span class="line">-g           #保持文件属组信息</span><br><span class="line">-l           #保留软连接</span><br><span class="line">-P           #显示同步的过程及传输时的进度等信息</span><br><span class="line">-D           #保持设备文件信息</span><br><span class="line">-L           #保留软连接指向的目标文件</span><br><span class="line">-e           #使用的信道协议,指定替代rsh的shell程序  ssh</span><br><span class="line">--exclude=PATTERN   #指定排除不需要传输的文件模式</span><br><span class="line">--exclude-from=file #文件名所在的目录文件</span><br><span class="line">--bwlimit=100       #限速传输 *</span><br><span class="line">--partial           #断点续传</span><br><span class="line">--delete            #让目标目录和源目录数据保持一致 *</span><br></pre></td></tr></table></figure>

<h3 id="2-3-本地传输"><a href="#2-3-本地传输" class="headerlink" title="2.3 本地传输"></a>2.3 本地传输</h3><p>将&#x2F;boot文件夹拷贝到&#x2F;tmp中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avz /boot /tmp/</span><br></pre></td></tr></table></figure>

<p>将boot文件夹中的内容拷贝到&#x2F;tmp中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avz /boot/ /tmp/</span><br></pre></td></tr></table></figure>

<h3 id="2-3-远程传输"><a href="#2-3-远程传输" class="headerlink" title="2.3 远程传输"></a>2.3 远程传输</h3><p>虚拟机准备</p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>nfs</td>
<td>172.16.1.31&#x2F;24 和 10.0.0.31&#x2F;24</td>
</tr>
<tr>
<td>backup</td>
<td>172.16.1.41&#x2F;24 和 10.0.0.41&#x2F;24</td>
</tr>
</tbody></table>
<p>backup从nfs拉取&#x2F;boo目录到本地&#x2F;tmp文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -avz root@10.0.0.31:/boot /tmp</span><br></pre></td></tr></table></figure>

<p>backup上传&#x2F;root&#x2F;test.txt到nfs主机的&#x2F;tmp文件夹中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync /root/test.txt root@10.0.0.31:/tmp</span><br></pre></td></tr></table></figure>

<h3 id="2-4-守护进程传输（服务搭建）"><a href="#2-4-守护进程传输（服务搭建）" class="headerlink" title="2.4 守护进程传输（服务搭建）"></a>2.4 守护进程传输（服务搭建）</h3><blockquote>
<p>为什么需要使用rsync守护进程传输？</p>
<p>Rsync借助SSH协议同步数据存在的缺陷（临时发送数据）<br>    1.使用系统用户（不安全）<br>    2.使用普通用户（会导致权限不足情况）</p>
</blockquote>
<p>backup充当rsync服务端，nfs充当客户端，配置步骤：</p>
<h4 id="2-4-1-服务端配置"><a href="#2-4-1-服务端配置" class="headerlink" title="2.4.1 服务端配置"></a>2.4.1 服务端配置</h4><p>获取配置文件路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# rpm -qc rsync</span><br><span class="line">	/etc/rsyncd.conf			# 主配置文件</span><br><span class="line">	/etc/sysconfig/rsyncd		# 选项</span><br></pre></td></tr></table></figure>

<p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line">---------------------</span><br><span class="line">uid = rsync</span><br><span class="line">gid = rsync</span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 600</span><br><span class="line">ignore errors</span><br><span class="line">read only = false</span><br><span class="line">list = false</span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################</span></span></span><br><span class="line">[backup]</span><br><span class="line">comment = welcome to oldboyedu backup!</span><br><span class="line">path = /backup</span><br></pre></td></tr></table></figure>

<p>配置详细解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uid = rsync                      # 运行进程的用户</span><br><span class="line">gid = rsync                      # 运行进程的用户组</span><br><span class="line">port = 873                       # 监听端口</span><br><span class="line">fake super = yes                 # 无需让rsync以root身份运行，允许接收文件的完整属性</span><br><span class="line">use chroot = no                  # 禁锢推送的数据至某个目录, 不允许跳出该目录</span><br><span class="line">max connections = 200            # 最大连接数</span><br><span class="line">timeout = 600                    # 超时时间</span><br><span class="line">ignore errors                    # 忽略错误信息</span><br><span class="line">read only = false                # 对备份数据可读写</span><br><span class="line">list = false                     # 不允许查看模块信息</span><br><span class="line">auth users = rsync_backup        # 定义虚拟用户，作为连接认证用户</span><br><span class="line">secrets file = /etc/rsync.passwd # 定义rsync服务用户连接认证密码文件路径</span><br><span class="line">log file = /var/log/rsyncd.log   # 日志文件</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################</span></span></span><br><span class="line">[backup]                # 定义模块信息</span><br><span class="line">comment = commit        # 模块注释信息</span><br><span class="line">path = /backup          # 定义接收备份数据目录</span><br></pre></td></tr></table></figure>

<p>创建rsync进程启动时需要使用的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# useradd rsync -M -s /sbin/nologin </span><br><span class="line">[root@backup ~]# id rsync</span><br><span class="line">uid=1000(rsync) gid=1000(rsync) groups=1000(rsync)</span><br></pre></td></tr></table></figure>

<p>创建密码文件，在密码文件中写入对应的虚拟用户以及虚拟用户的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/rsync.passwd---》rsync虚拟用户以及rsync虚拟用户的密码</span><br><span class="line">[root@backup ~]# echo &quot;rsync_backup:123456&quot; &gt; /etc/rsync.passwd</span><br><span class="line">[root@backup ~]# chmod 600 /etc/rsync.passwd </span><br></pre></td></tr></table></figure>

<p>创建存储备份数据的目录，并进行授权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# mkdir /backup</span><br><span class="line">[root@backup ~]# chown -R rsync.rsync /backup/</span><br></pre></td></tr></table></figure>

<p>启动rsync服务并加入开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# systemctl start rsyncd.service </span><br><span class="line">[root@backup ~]# systemctl enable rsyncd</span><br></pre></td></tr></table></figure>

<p>检查rsync的873端口是否存在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# netstat -lntup</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp6       0      0 :::873                  :::*                    LISTEN      1269/rsync</span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-客户端测试"><a href="#2-4-2-客户端测试" class="headerlink" title="2.4.2 客户端测试"></a>2.4.2 客户端测试</h4><p>推送&#x2F;etc文件夹到服务端&#x2F;backup</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avz /etc/ rsync_backup@172.16.1.41::backup</span><br><span class="line">需要输入密码</span><br></pre></td></tr></table></figure>

<p>从服务端&#x2F;backup拉取文件到&#x2F;tmp</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avz rsync_backup@172.16.1.41::backup /tmp</span><br><span class="line">需要输入密码</span><br></pre></td></tr></table></figure>

<h3 id="2-5-rsync补充"><a href="#2-5-rsync补充" class="headerlink" title="2.5 rsync补充"></a>2.5 rsync补充</h3><h4 id="2-5-1-无差异同步-慎用"><a href="#2-5-1-无差异同步-慎用" class="headerlink" title="2.5.1 无差异同步(慎用)"></a>2.5.1 无差异同步(慎用)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">推送方式实现无差异，以客户端为准，客户端有什么服务端就有什么</span></span><br><span class="line">[root@nfs ~]# rsync -avz --delete /root rsync_backup@172.16.1.41::backup		</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取方式实现无差异，以服务端为准，服务端有什么客户端就有什么</span></span><br><span class="line">[root@nfs ~]# rsync -avz --delete rsync_backup@172.16.1.41::backup /opt/</span><br></pre></td></tr></table></figure>

<h4 id="2-5-2-传输限速"><a href="#2-5-2-传输限速" class="headerlink" title="2.5.2 传输限速"></a>2.5.2 传输限速</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成大文件</span></span><br><span class="line">[root@nfs ~]# dd if=/dev/zero of=./size.disk bs=1M count=500  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制传输的速率为1MB</span> </span><br><span class="line">[root@nfs ~]# rsync -avzP --bwlimit=1 ./size.disk rsync_backup@172.16.1.41::backup</span><br><span class="line">Password: </span><br><span class="line">sending incremental file list</span><br><span class="line">size.disk</span><br><span class="line">    118,358,016  22%    1.01MB/s    0:06:33</span><br></pre></td></tr></table></figure>

<h4 id="2-5-3-取消每次传输需要输密码"><a href="#2-5-3-取消每次传输需要输密码" class="headerlink" title="2.5.3 取消每次传输需要输密码"></a>2.5.3 取消每次传输需要输密码</h4><p>在客户端配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">[root@nfs ~]# echo &quot;123456&quot; &gt; /etc/rsync.pass</span><br><span class="line">[root@nfs ~]# chmod 600 /etc/rsync.pass #上该文件找123456</span><br><span class="line">[root@nfs ~]# rsync -avzP --bwlimit=1 ./size.disk rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.pass</span><br><span class="line"></span><br><span class="line">方式二：写Shell脚本</span><br><span class="line">[root@nfs ~]# export RSYNC_PASSWORD=123456</span><br><span class="line">[root@nfs ~]# rsync -avzP ./size.disk rsync_backup@172.16.1.41::backup</span><br></pre></td></tr></table></figure>

<h2 id="三、Rsync备份案例"><a href="#三、Rsync备份案例" class="headerlink" title="三、Rsync备份案例"></a>三、Rsync备份案例</h2><blockquote>
<p>客户端需求<br>1.客户端提前准备存放的备份的目录，目录规则如下:&#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>2.客户端在本地打包备份(系统配置文件、应用配置等)拷贝至&#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>3.客户端最后将备份的数据进行推送至备份服务器<br>4.客户端每天凌晨1点定时执行该脚本<br>5.客户端本地保留最近7天的数据, 避免浪费磁盘空间</p>
<p>服务端需求<br>1.服务端部署rsync，用于接收客户端推送过来的备份数据<br>2.服务端需要每天校验客户端推送过来的数据是否完整<br>3.服务端需要每天校验的结果通知给管理员<br>4.服务端仅保留6个月的备份数据,其余的全部删除</p>
<p>注意：所有服务器的备份目录必须都为&#x2F;backup</p>
<p>1.客户端将需要备份的文件放入指定的目录中   &#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>2.客户端每天凌晨1点使用rsync命令推送一次nfs_172.16.1.31_2018-09-0<br>3.客户端保留最近7天的数据即可</p>
</blockquote>
<h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><blockquote>
<p>1.我要备份什么？<br>&#x2F;etc&#x2F;fstab &#x2F;var&#x2F;spool&#x2F;cron&#x2F;USERNAME   &#x2F;server&#x2F;scripts</p>
<p>2.我要怎么备份？<br>&#x2F;backup&#x2F;主机名_ip地址_时间  命名的目录中</p>
<p>3.我要备份到哪？<br>rsync备份服务器   172.16.1.41</p>
</blockquote>
<h4 id="3-1-1-服务端配置"><a href="#3-1-1-服务端配置" class="headerlink" title="3.1.1 服务端配置"></a>3.1.1 服务端配置</h4><p>配置邮件服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# yum install mailx -y</span><br><span class="line">[root@backup ~]# vim /etc/mail.rc</span><br><span class="line">set from=12345@qq.com</span><br><span class="line">set smtp=smtps://smtp.qq.com:465</span><br><span class="line">set smtp-auth-user=12345@qq.com</span><br><span class="line">set smtp-auth-password=xxxxxx # 授权码</span><br><span class="line">set smtp-auth=login</span><br><span class="line">set ssl-verify=ignore</span><br><span class="line">set nss-config-dir=/etc/pki/nssdb/</span><br></pre></td></tr></table></figure>

<p>脚本编写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# mkdir /server/scripts -p</span><br><span class="line">[root@backup ~]# cat /server/scripts/check_client_data.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1.定义变量</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">SRC=/backup</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">1.使用md5进行校验，并保存校验的结果</span></span><br><span class="line">md5sum -c $SRC/*_$DATE/flag_$DATE &gt; $SRC/result_$DATE</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.将保存的结果文件发送给管理员</span></span><br><span class="line">mail -s &quot;Rsync Backup $DATE&quot; 572891887@qq.com &lt;$SRC/result_$DATE</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.保留最近180天的数据</span></span><br><span class="line">find $SRC/ -type d -mtime +180|xargs rm -rf </span><br></pre></td></tr></table></figure>

<h4 id="3-1-2-客户端配置"><a href="#3-1-2-客户端配置" class="headerlink" title="3.1.2 客户端配置"></a>3.1.2 客户端配置</h4><p>创建目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /backup</span><br><span class="line">mkdir -p /server/scripts/</span><br></pre></td></tr></table></figure>

<p>编写备份脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# cat /server/scripts/client_push_data.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1.定义变量</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">SRC=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">ADDR=$(ifconfig eth1|awk &#x27;NR==2 &#123;print $2&#125;&#x27;)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=$&#123;HOST&#125;_$&#123;ADDR&#125;_$&#123;DATE&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.创建目录</span></span><br><span class="line">[ -d $SRC/$DEST ] || mkdir -p $SRC/$DEST</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.备份文件</span></span><br><span class="line">cd / &amp;&amp; \</span><br><span class="line">[ -f $SRC/$DEST/sys.tar.gz ] || tar czf $SRC/$DEST/sys.tar.gz etc/fstab etc/passwd &amp;&amp; \</span><br><span class="line">[ -f $SRC/$DEST/other.tar.gz ] || tar czf $SRC/$DEST/other.tar.gz var/spool/cron/ server/scripts &amp;&amp; \</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">4.使用md5打标记</span></span><br><span class="line">[ -f $SRC/$DEST/flag_$DATE ] || md5sum $SRC/$DEST/*.tar.gz  &gt; $SRC/$DEST/flag_$DATE </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">4.本地推送到备份服务器</span></span><br><span class="line">export RSYNC_PASSWORD=123456</span><br><span class="line">rsync -avz $SRC/$DEST rsync_backup@172.16.1.41::backup</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">5.保留本地最近7天的数据</span></span><br><span class="line">find $SRC/ -type d -mtime +7|xargs rm -rf </span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-整体测试-设置定时任务"><a href="#3-1-3-整体测试-设置定时任务" class="headerlink" title="3.1.3 整体测试:设置定时任务"></a>3.1.3 整体测试:设置定时任务</h4><p>客户端每两分钟备份推送一次</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs backup]# crontab -e</span><br><span class="line">*/2 * * * * sh /server/scripts/client_push_data.sh</span><br></pre></td></tr></table></figure>

<p>服务端每3分钟校验一次，并发送确认邮件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup scripts]# crontab -e</span><br><span class="line">*/3 * * * * sh /server/scripts/check_client_data.sh</span><br></pre></td></tr></table></figure>

<h4 id="3-1-5-增加客户端数量"><a href="#3-1-5-增加客户端数量" class="headerlink" title="3.1.5 增加客户端数量"></a>3.1.5 增加客户端数量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">多创建几台客户端服务器，测试</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>OpenStack学习笔记</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/04-%E8%99%9A%E6%8B%9F%E5%8C%96/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="OpenStack笔记"><a href="#OpenStack笔记" class="headerlink" title="OpenStack笔记"></a><strong><font color=green>OpenStack笔记</font></strong></h1><p>​	OpenStack实现的是云计算IAAS</p>
<h2 id="一、服务架构发展"><a href="#一、服务架构发展" class="headerlink" title="一、服务架构发展"></a><font color=blue>一、服务架构发展</font></h2><h3 id="1-1-MVC架构"><a href="#1-1-MVC架构" class="headerlink" title="1.1 MVC架构"></a>1.1 MVC架构</h3><p>​	业务不拆分，一个服务挂，则所有的全挂</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">首页 www.jd.com/index.html</span><br><span class="line">秒杀 www.jd.com/miaosha/index.html</span><br><span class="line">优惠券 www.jd.com/juan/index.html</span><br></pre></td></tr></table></figure>

<h3 id="1-2-SOA架构（千万级）"><a href="#1-2-SOA架构（千万级）" class="headerlink" title="1.2 SOA架构（千万级）"></a>1.2 SOA架构（千万级）</h3><p>​	业务拆分，每一个功能都拆分成一个独立的web服务，每个独立的web服务，都至少拥有一个集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首页 www.jd.com/index.html</span><br><span class="line">秒杀 miaosha.jd.com/index.html</span><br><span class="line">优惠券 juan.jd.com/index.html</span><br></pre></td></tr></table></figure>

<h3 id="1-3-微服务架构（亿级）"><a href="#1-3-微服务架构（亿级）" class="headerlink" title="1.3 微服务架构（亿级）"></a>1.3 微服务架构（亿级）</h3><p>阿里开源dubbo</p>
<p>Spring Boot</p>
<p>自动化代码上线：Jekins + gilab ci</p>
<p>自动化代码质量检查：sonarqube</p>
<h2 id="二、搭建OpenStack"><a href="#二、搭建OpenStack" class="headerlink" title="二、搭建OpenStack"></a><font color=blue>二、搭建OpenStack</font></h2><p>​	本流程为手动安装M版，脚本安装可以参考</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://my.oschina.net/u/4367225/blog/4255750</span><br></pre></td></tr></table></figure>

<p>OpenStack的结构介绍：</p>
<blockquote>
<p>Nova – 提供VM虚拟化支持 8774</p>
<p>Glance – 提供镜像 9292</p>
<p>Clinder – 存储支持 8776</p>
<p>Neutron – 网络支持 9696</p>
<p>Cellometer –  监控计费 </p>
<p>KeyStone – 登录认证</p>
<p>Horizon – 网页UI，dashboard</p>
<p>Heat – 部署编排，批量建虚拟机</p>
<p>Switft – 对象存储（不是传统的文件夹存放，而是用数据库记录已上传的文件信息，当有文件上传，先查询数据库中是否有该文件的md5值，如果有，则不用重新上传，给个链接就是 — 百度云盘）</p>
</blockquote>
<p><img src="C:\Users\fr724\AppData\Roaming\Typora\typora-user-images\image-20210615135957367.png" alt="image-20210615135957367"></p>
<h3 id="2-1-虚拟机准备"><a href="#2-1-虚拟机准备" class="headerlink" title="2.1 虚拟机准备"></a>2.1 虚拟机准备</h3><p>虚拟机规划</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统：CentOS7.4</span></span><br><span class="line">controller: 内存3G, CPU开启虚拟化	10.0.0.11</span><br><span class="line">compute1: 内存1G，CPU开启虚拟化	    10.0.0.31</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改主机名，IP地址，host解析，测试ping百度</span></span><br></pre></td></tr></table></figure>

<p>配置本地M版yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、资源准备</span></span><br><span class="line">mount /dev/cdrom /mnt # 追加到/etc/rc.local,自动挂载</span><br><span class="line">解压openstack_rpm.tar.gz到/opt/repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、编辑repo文件</span></span><br><span class="line">vim /etc/yum.repo.d/local/repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 内容</span></span></span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[openstack]</span><br><span class="line">name=openstack</span><br><span class="line">baseurl=file:///opt/repo</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、更新yum源</span></span><br><span class="line">yum makecache</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>



<h3 id="2-2-基础服务安装"><a href="#2-2-基础服务安装" class="headerlink" title="2.2 基础服务安装"></a>2.2 基础服务安装</h3><h4 id="2-2-1-NTP时间同步"><a href="#2-2-1-NTP时间同步" class="headerlink" title="2.2.1 NTP时间同步"></a>2.2.1 NTP时间同步</h4><p>controller与阿里NTP服务器同步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/chrony.conf</span><br><span class="line">server ntp6.aliyun.com # 3行</span><br><span class="line">allow 10.0.0.0/24 # 24行</span><br><span class="line">systemctl restart chronyd</span><br></pre></td></tr></table></figure>

<p>computer与controller同步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/chrony.conf</span><br><span class="line">server 10.0.0.11 iburst # 3行</span><br><span class="line">systemctl restart chronyd</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"><a href="#2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）" class="headerlink" title="2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"></a>2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum list | grep openstack</span><br><span class="line">yum install centos-release-openstack-ocata.noarch -y # 安装O版</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）"><a href="#2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）" class="headerlink" title="2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）"></a>2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install python-openstackclient openstack-selinux -y</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-安装和配置mariadb-仅控制节点执行"><a href="#2-2-4-安装和配置mariadb-仅控制节点执行" class="headerlink" title="2.2.4 安装和配置mariadb (仅控制节点执行)"></a>2.2.4 安装和配置mariadb (仅控制节点执行)</h4><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mariadb mariadb-server python2-PyMySQL -y</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf.d/openstack.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------</span></span><br><span class="line">[mysqld]	</span><br><span class="line">bind-address = 10.0.0.11	# 监听地址</span><br><span class="line">default-storage-engine = innodb # 默认存储引擎</span><br><span class="line">innodb_file_per_table  # 独立表空间文件</span><br><span class="line">max_connections = 4096	# 最大连接数</span><br><span class="line">collation-server = utf8_general_ci	# 默认字符集utf8</span><br><span class="line">character-set-server = utf8</span><br><span class="line"><span class="meta">#</span><span class="bash">-----------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl enable mariadb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库安全初始化,保障数据库安全性，如果不执行，同步数据库表会报错</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line">回车 n y y y y</span><br></pre></td></tr></table></figure>

<h4 id="2-2-5-消息队列配置-仅控制节点执行"><a href="#2-2-5-消息队列配置-仅控制节点执行" class="headerlink" title="2.2.5 消息队列配置(仅控制节点执行)"></a>2.2.5 消息队列配置(仅控制节点执行)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装rabbitmq</span></span><br><span class="line">yum install rabbitmq-server -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户权限（读、写、执行）</span></span><br><span class="line">rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否开启15672端口</span></span><br><span class="line">netstat -lntup</span><br><span class="line"><span class="meta">#</span><span class="bash"> 浏览器登录rabbitmq</span></span><br><span class="line">http://10.0.0.11:15672</span><br><span class="line">默认用户名和密码：guest</span><br></pre></td></tr></table></figure>

<h4 id="2-2-6-缓存系统配置memcache（仅控制节点执行）"><a href="#2-2-6-缓存系统配置memcache（仅控制节点执行）" class="headerlink" title="2.2.6 缓存系统配置memcache（仅控制节点执行）"></a>2.2.6 缓存系统配置memcache（仅控制节点执行）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">yum install memcached python-memched -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">sed -i &#x27;s#127.0.0.1#10.0.0.11#g&#x27; /etc/sysconfig/memcached</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl restart memcached</span><br><span class="line">systemctl enable memcached</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询端口11211是否已监听，默认使用该端口</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-安装keystone认证服务-仅控制节点执行"><a href="#2-3-安装keystone认证服务-仅控制节点执行" class="headerlink" title="2.3 安装keystone认证服务(仅控制节点执行)"></a>2.3 安装keystone认证服务(仅控制节点执行)</h3><h4 id="2-3-1-Keystone功能介绍"><a href="#2-3-1-Keystone功能介绍" class="headerlink" title="2.3.1 Keystone功能介绍"></a>2.3.1 Keystone功能介绍</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、认证管理：</span><br><span class="line">	账户密码</span><br><span class="line">2、授权管理</span><br><span class="line">3、服务目录：</span><br><span class="line">	跟电话本一样，keystone上可以查询到glance、nova等服务的地址端口等信息，每一个新加的服务都需要在keystone上注册</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-OpenStack服务器安装的通用步骤"><a href="#2-3-2-OpenStack服务器安装的通用步骤" class="headerlink" title="2.3.2 OpenStack服务器安装的通用步骤"></a>2.3.2 OpenStack服务器安装的通用步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、创库授权</span><br><span class="line">2、在Keystone创建用户，关联角色</span><br><span class="line">3、在keystone创建服务，注册api</span><br><span class="line">4、安装服务相关的软件包</span><br><span class="line">5、修改配置</span><br><span class="line">	数据库的连接</span><br><span class="line">	keystone认证授权信息</span><br><span class="line">	rabbitmq连接信息</span><br><span class="line">	其他配置</span><br><span class="line">6、同步数据库，创建表</span><br><span class="line">7、启动服务</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-安装步骤"><a href="#2-3-3-安装步骤" class="headerlink" title="2.3.3 安装步骤"></a>2.3.3 安装步骤</h4><p>1、创库授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 登录mysql</span><br><span class="line">$ mysql -u root -p</span><br><span class="line"># 创建keystone数据库</span><br><span class="line">CREATE DATABASE keystone;</span><br><span class="line"># 对``keystone``数据库授予恰当的权限</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br></pre></td></tr></table></figure>

<p>2、安装keystone相关软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install openstack-keystone httpd mod_wsgi -y</span><br></pre></td></tr></table></figure>

<p>3、修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份原配置文件</span></span><br><span class="line">\cp /etc/keystone/keystone.conf&#123;,.bak&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除配置文件中的空格行和注释行</span></span><br><span class="line">grep -Ev &#x27;^$|#&#x27; /etc/keystone/keystone.conf.bak &gt; /etc/keystone/keystone.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装自动配置工具</span></span><br><span class="line">yum install openstack-utils -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用工具设置（也可以直接修改文件）修改项 参数 = 值</span></span><br><span class="line">openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token ADMIN_TOKEN</span><br><span class="line">openstack-config --set /etc/keystone/keystone.conf database connection  mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone # 注意hostname--controller</span><br><span class="line">openstack-config --set /etc/keystone/keystone.conf token provider fernet</span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验</span></span><br><span class="line">md5sum /etc/keystone/keystone.conf</span><br><span class="line">d5acb3db852fe3f247f4f872b051b7a9 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步数据库</span></span><br><span class="line">su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询是否生成表</span></span><br><span class="line">mysql keystone -e &quot;show tables;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化fernet</span></span><br><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">/etc/keystone/fernet-keys已创建</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置httpd</span></span><br><span class="line">echo &quot;ServerName controller&quot; &gt;&gt; /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建wsgi配置文件</span></span><br><span class="line">vim /etc/httpd/conf.d/wsgi-keystone.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##内容</span></span></span><br><span class="line">Listen 5000</span><br><span class="line">Listen 35357</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:5000&gt;</span><br><span class="line">    WSGIDaemonProcess keystone-public processes=5 threads=1 user=keystone group=keystone display-name=%&#123;GROUP&#125;</span><br><span class="line">    WSGIProcessGroup keystone-public</span><br><span class="line">    WSGIScriptAlias / /usr/bin/keystone-wsgi-public</span><br><span class="line">    WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">    WSGIPassAuthorization On</span><br><span class="line">    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;</span><br><span class="line">    ErrorLog /var/log/httpd/keystone-error.log</span><br><span class="line">    CustomLog /var/log/httpd/keystone-access.log combined</span><br><span class="line"></span><br><span class="line">    &lt;Directory /usr/bin&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:35357&gt;</span><br><span class="line">    WSGIDaemonProcess keystone-admin processes=5 threads=1 user=keystone group=keystone display-name=%&#123;GROUP&#125;</span><br><span class="line">    WSGIProcessGroup keystone-admin</span><br><span class="line">    WSGIScriptAlias / /usr/bin/keystone-wsgi-admin</span><br><span class="line">    WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">    WSGIPassAuthorization On</span><br><span class="line">    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;</span><br><span class="line">    ErrorLog /var/log/httpd/keystone-error.log</span><br><span class="line">    CustomLog /var/log/httpd/keystone-access.log combined</span><br><span class="line"></span><br><span class="line">    &lt;Directory /usr/bin&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验</span></span><br><span class="line">md5sum /etc/httpd/conf.d/wsgi-keystone.conf</span><br><span class="line">8f051eb53577f67356ed03e4550315c2 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动httpd</span></span><br><span class="line">systemctl enable httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建服务和注册api</span></span><br><span class="line">export OS_TOKEN=ADMIN_TOKEN</span><br><span class="line">export OS_URL=http://controller:35357/v3</span><br><span class="line">export OS_IDENTITY_API_VERSION=3</span><br><span class="line">openstack service create --name keystone --description &quot;OpenStack Identity&quot; identity</span><br><span class="line">openstack endpoint create --region RegionOne identity public http://controller:5000/v3</span><br><span class="line">openstack endpoint create --region RegionOne identity internal http://controller:5000/v3</span><br><span class="line">openstack endpoint create --region RegionOne identity admin http://controller:35357/v3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建域、项目（租户）、用户和角色</span></span><br><span class="line">openstack domain create --description &quot;Default Domain&quot; default</span><br><span class="line">openstack project create --domain default --description &quot;Admin Project&quot; admin</span><br><span class="line">openstack user create --domain default --password ADMIN_PASS admin</span><br><span class="line">openstack role create admin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关联项目，用户，角色</span></span><br><span class="line">openstack role add --project admin --user admin admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在admin项目上，给admin用户赋予admin角色</span></span><br><span class="line">openstack project create --domain default --description &quot;Service Project&quot; service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建环境变量脚本</span></span><br><span class="line">export OS_PROJECT_DOMAIN_NAME=default</span><br><span class="line">export OS_USER_DOMAIN_NAME=default</span><br><span class="line">export OS_PROJECT_NAME=admin</span><br><span class="line">export OS_USERNAME=admin</span><br><span class="line">export OS_PASSWORD=ADMIN_PASS</span><br><span class="line">export OS_IMAGE_API_VERSION=2</span><br><span class="line">export OS_IDENTITY_API_VERSION=3</span><br><span class="line">export OS_AUTH_URL=http://controller:35357/v3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 作为admin用户请求认证令牌</span></span><br><span class="line">openstack token issue  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不设置环境变量可以通过传入参数的方式申请</span></span><br><span class="line">openstack --os-auth-url http://controller:35357/v3   --os-project-domain-name default --os-user-domain-name default   --os-project-name admin --os-username admin --os-password ADMIN_PASS token issue</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户列表</span></span><br><span class="line">openstack user list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看endpoint列表</span></span><br><span class="line">openstack endpoint list</span><br></pre></td></tr></table></figure>

<h3 id="2-4-安装glance镜像服务"><a href="#2-4-安装glance镜像服务" class="headerlink" title="2.4 安装glance镜像服务"></a>2.4 安装glance镜像服务</h3><p>​	镜像服务 (glance) 允许用户发现、注册和获取虚拟机镜像。</p>
<h4 id="2-4-1-安装步骤"><a href="#2-4-1-安装步骤" class="headerlink" title="2.4.1 安装步骤"></a>2.4.1 安装步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据库创库授权</span></span><br><span class="line">mysql &gt;&gt;</span><br><span class="line">CREATE DATABASE glance</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span><br><span class="line">  </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 在keystone创建glance用户关联角色</span></span><br><span class="line"> openstack user create --domain default --password GLANCE_PASS glance</span><br><span class="line"> openstack role add --project service --user glance admin</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 在keystone上创建服务和注册api</span></span><br><span class="line">openstack service create --name glance   --description &quot;OpenStack Image&quot; image</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image public http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image internal http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne \</span><br><span class="line">  image admin http://controller:9292</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已创建的信息</span></span><br><span class="line">openstack role assignment list</span><br><span class="line">openstack role list</span><br><span class="line">openstack project list</span><br><span class="line">openstack user list （要有glance用户）</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql中验证表是否已创建</span></span><br><span class="line">[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep user</span><br><span class="line">federated_user</span><br><span class="line">local_user</span><br><span class="line">user</span><br><span class="line">user_group_membership</span><br><span class="line">[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep project</span><br><span class="line">project</span><br><span class="line">project_endpoint</span><br><span class="line">project_endpoint_group</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装服务相应软件包</span></span><br><span class="line">yum install openstack-glance -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改相应的配置文件--api</span></span><br><span class="line">cp /etc/glance/glance-api.conf&#123;,.bak&#125;</span><br><span class="line">grep &#x27;^[a-Z\[]&#x27; /etc/glance/glance-api.conf.bak &gt; /etc/glance/glance-api.conf</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf database connection mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken username glance</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf keystone_authtoken password GLANCE_PASS</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf paste_deploy flavor keystone</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf glance_store stores file,http</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf glance_store default_store file</span><br><span class="line">openstack-config --set /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改相应的配置文件--registry</span></span><br><span class="line">cp /etc/glance/glance-registry.conf&#123;,.bak&#125;</span><br><span class="line">grep &#x27;^[a-Z\[]&#x27; /etc/glance/glance-registry.conf.bak &gt; /etc/glance/glance-registry.conf</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf database connection mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken username glance</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken password GLANCE_PASS</span><br><span class="line">openstack-config --set /etc/glance/glance-registry.conf paste_deploy flavor keystone</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> md5值验证</span></span><br><span class="line">md5sum /etc/glance/glance-api.conf</span><br><span class="line">3e1a4234c133eda11b413788e001cba3  /etc/glance/glance-api.conf</span><br><span class="line">md5sum /etc/glance/glance-registry.conf</span><br><span class="line">46acabd81a65b924256f56fe34d90b8f  /etc/glance/glance-registry.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入镜像服务数据库</span></span><br><span class="line">su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance # 会有Warning不用在意</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">mysql glance -e &quot;show tables;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl enable openstack-glance-api.service   openstack-glance-registry.service</span><br><span class="line">systemctl start openstack-glance-api.service   openstack-glance-registry.service</span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-上传镜像测试"><a href="#2-4-2-上传镜像测试" class="headerlink" title="2.4.2 上传镜像测试"></a>2.4.2 上传镜像测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 错误日志查看</span></span><br><span class="line">/var/log/glance</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保已获取token令牌</span></span><br><span class="line">openstack token issue</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载测试镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传测试镜像</span></span><br><span class="line">openstack image create &quot;cirros&quot; \</span><br><span class="line">--file cirros-0.3.4-x86_64-disk.img \</span><br><span class="line">--disk-format qcow2 --container-format bare \</span><br><span class="line">--public</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件确认</span></span><br><span class="line">ls /var/lib/glance/images/ (在/etc/glance/glance-api.conf中设置)</span><br><span class="line">mysql glance -e &quot;show tables;&quot; | grep image</span><br></pre></td></tr></table></figure>

<h3 id="2-5-安装nova计算服务"><a href="#2-5-安装nova计算服务" class="headerlink" title="2.5 安装nova计算服务"></a>2.5 安装nova计算服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nova-api -- 接受并相应所有的计算服务请求，管理云主机生命周期</span><br><span class="line">nova-compute（多个）-- 真正管理虚拟机(nova-compute调用libvirt)</span><br><span class="line">nova-scheduler -- nova 调度器（挑选最合适的nova-compute）</span><br><span class="line">nova-conductor -- 帮助nova-compute连接数据库</span><br><span class="line">nova-network --  早期版本管理虚拟机的网络（已弃用，改用neutron，留着为了方便兼容早期版本）</span><br><span class="line">nova-consoleauth和nova-novncproxy -- web版的vnc来直接操作云主机</span><br><span class="line">novnproxy -- web版vnc客户端</span><br><span class="line">nova-api-metadata -- 接受来自虚拟机发送的元数据请求（配合neutron-metadata-agent实现虚拟机定制化）</span><br></pre></td></tr></table></figure>

<h4 id="2-5-1-控制节点–安装步骤"><a href="#2-5-1-控制节点–安装步骤" class="headerlink" title="2.5.1 控制节点–安装步骤"></a>2.5.1 控制节点–安装步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创库授权</span></span><br><span class="line">mysql &gt;&gt;</span><br><span class="line">CREATE DATABASE nova_api;</span><br><span class="line">CREATE DATABASE nova;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在keystone创建用户nova</span></span><br><span class="line">openstack user create --domain default   --password NOVA_PASS nova</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给Nova用户添加admin角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在keystone上创建服务和注册api</span></span><br><span class="line">openstack service create --name nova   --description &quot;OpenStack Compute&quot; compute</span><br><span class="line">openstack endpoint create --region RegionOne   compute public http://controller:8774/v2.1/%\(tenant_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne   compute internal http://controller:8774/v2.1/%\(tenant_id\)s</span><br><span class="line">openstack endpoint create --region RegionOne   compute admin http://controller:8774/v2.1/%\(tenant_id\)s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装相应软件包</span></span><br><span class="line">yum install -y openstack-nova-api openstack-nova-conductor \</span><br><span class="line">  openstack-nova-console openstack-nova-novncproxy \</span><br><span class="line">  openstack-nova-scheduler</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">cp /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line">grep -Ev &#x27;^$|#&#x27; /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend rabbit</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT my_ip 10.0.0.11</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">openstack-config --set /etc/nova/nova.conf api_database connection mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line">openstack-config --set /etc/nova/nova.conf database connection mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">openstack-config --set /etc/nova/nova.conf glance api_servers http://controller:9292</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken password NOVA_PASS</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_host controller</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_userid openstack</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc vncserver_listen &#x27;$my_ip&#x27;</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address &#x27;$my_ip&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验</span></span><br><span class="line">md5sum /etc/nova/nova.conf</span><br><span class="line">47ded61fdd1a79ab91bdb37ce59ef192  /etc/nova/nova.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步数据库</span></span><br><span class="line">su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova</span><br><span class="line">su -s /bin/sh -c &quot;nova-manage db sync&quot; nova</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">mysql nova_api -e &quot;show tables;&quot;</span><br><span class="line">mysql nova -e &quot;show tables;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl enable openstack-nova-api.service \</span><br><span class="line">openstack-nova-consoleauth.service openstack-nova-scheduler.service \</span><br><span class="line">openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br><span class="line">systemctl restart openstack-nova-api.service \</span><br><span class="line">openstack-nova-consoleauth.service openstack-nova-scheduler.service \</span><br><span class="line">openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">[root@controller ~]# nova service-list</span><br><span class="line">+----+------------------+------------+----------+---------+-------+------------+-----------------+</span><br><span class="line">| Id | Binary           | Host       | Zone     | Status  | State | Updated_at | Disabled Reason |</span><br><span class="line">+----+------------------+------------+----------+---------+-------+------------+-----------------+</span><br><span class="line">| 1  | nova-conductor   | controller | internal | enabled | down  | -          | -               |</span><br><span class="line">| 4  | nova-scheduler   | controller | internal | enabled | down  | -          | -               |</span><br><span class="line">| 5  | nova-consoleauth | controller | internal | enabled | down  | -          | -               |</span><br><span class="line">+----+------------------+------------+----------+---------+-------+------------+-----------------+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> novncproxy 怎么检测起来没有？</span></span><br><span class="line">[root@controller ~]# netstat -lntup | grep 6080</span><br><span class="line">tcp        0      0 0.0.0.0:6080            0.0.0.0:*               LISTEN      8719/python2</span><br><span class="line">[root@controller ~]# ps -ef | grep 8719</span><br><span class="line">nova       8719      1  0 21:53 ?        00:00:01 /usr/bin/python2 /usr/bin/nova-novncproxy --web /usr/share/novnc/</span><br></pre></td></tr></table></figure>

<h4 id="2-5-1-计算节点–安装步骤"><a href="#2-5-1-计算节点–安装步骤" class="headerlink" title="2.5.1 计算节点–安装步骤"></a>2.5.1 计算节点–安装步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装软件包</span></span><br><span class="line">yum install -y openstack-nova-compute openstack-utils</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">cp /etc/nova/nova.conf&#123;,.bak&#125;</span><br><span class="line">grep -Ev &#x27;^$|#&#x27; /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend rabbit</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT my_ip 10.0.0.31 # 注意ip</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True</span><br><span class="line">openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">openstack-config --set /etc/nova/nova.conf glance api_servers http://controller:9292</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova</span><br><span class="line">openstack-config --set /etc/nova/nova.conf keystone_authtoken password NOVA_PASS</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_host controller</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_userid openstack</span><br><span class="line">openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc enabled  True</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc vncserver_listen 0.0.0.0</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address &#x27;$my_ip&#x27;</span><br><span class="line">openstack-config --set /etc/nova/nova.conf vnc novncproxy_base_url http://controller:6080/vnc_auto.html</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验</span></span><br><span class="line">md5sum /etc/nova/nova.conf</span><br><span class="line">45cab6030a9ab82761e9f697d6d79e14  /etc/nova/nova.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class="line">systemctl restart libvirtd.service openstack-nova-compute.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务启动错误排查</span></span><br><span class="line">参考博客：https://www.codeleading.com/article/89785382846/</span><br><span class="line">cat /etc/nova/nova.conf # compute1日志查看</span><br><span class="line">报错 nova AccessRefused: (0, 0): (403) ACCESS_REFUSED</span><br><span class="line">处理步骤：</span><br><span class="line">在controller</span><br><span class="line">cat /var/log/rabbitmq/rabbit@controller.log # 发现报错AMQPLAIN login refused: user &#x27;openstack&#x27; - invalid credentials 无效凭证</span><br><span class="line">rabbitmqctl list_users # 确认是否还有openstack用户</span><br><span class="line">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line">rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">systemctl restart rabbitmq-server.service # 重新创用户，并重启服务</span><br></pre></td></tr></table></figure>

<h3 id="2-6-安装neutron网络服务"><a href="#2-6-安装neutron网络服务" class="headerlink" title="2.6 安装neutron网络服务"></a>2.6 安装neutron网络服务</h3><p>neutron-server – 端口9696，api接受和响应外部的网络管理请求</p>
<p>neutron-linuxbridge-agent –  负责创建桥接网卡</p>
<p>neutron-dhcp-agent – 负责分配ip</p>
<p>neutron-metadata-agent –  配合nova-metadata-api实现虚拟机的定制化操作</p>
<p>L3-agent – 实现三层网络vxlan（网络层）</p>
<h4 id="2-6-1-控制节点–安装步骤"><a href="#2-6-1-控制节点–安装步骤" class="headerlink" title="2.6.1 控制节点–安装步骤"></a>2.6.1 控制节点–安装步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创库授权</span></span><br><span class="line">Mysql &gt;&gt;</span><br><span class="line">CREATE DATABASE neutron;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;localhost&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;%&#x27; \</span><br><span class="line">  IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在keystone创建用户neutron</span></span><br><span class="line">openstack user create --domain default   --password NEUTRON_PASS neutron</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给neutron用户添加admin角色</span></span><br><span class="line">openstack role add --project service --user neutron admin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在keystone上创建服务和注册api</span></span><br><span class="line">openstack service create --name neutron   --description &quot;OpenStack Networking&quot; network</span><br><span class="line">openstack endpoint create --region RegionOne   network public http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne   network internal http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne   network admin http://controller:9696</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网络配置--公共网络</span></span><br><span class="line">cp /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/neutron.conf.bak  &gt; /etc/neutron/neutron.conf</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT core_plugin ml2</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT rpc_backend rabbit</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes True</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes True</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_host controller</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_userid openstack</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password NEUTRON_PASS</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova auth_type password</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova project_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova user_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova region_name RegionOne</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova project_name service</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova username nova</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf nova password NOVA_PASS</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">cp /etc/neutron/plugins/ml2/ml2_conf.ini&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/plugins/ml2/ml2_conf.ini.bak &gt; /etc/neutron/plugins/ml2/ml2_conf.ini</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers linuxbridge</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">cp /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan False</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group True</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">cp /etc/neutron/dhcp_agent.ini&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/dhcp_agent.ini.bak &gt; /etc/neutron/dhcp_agent.ini</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver</span><br><span class="line">openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT  dhcp_driver neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT  enable_isolated_metadata True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">cp /etc/neutron/metadata_agent.ini&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/metadata_agent.ini.bak &gt; /etc/neutron/metadata_agent.ini</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_ip controller</span><br><span class="line">openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret METADATA_SECRET</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次修改nova配置文件，添加neutron服务</span></span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron url http://controller:9696</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron auth_type password</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron project_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron user_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron project_name service</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron username neutron</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron password NEUTRON_PASS</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron service_metadata_proxy True</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron metadata_proxy_shared_secret METADATA_SECRET</span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验文件</span></span><br><span class="line">[root@controller ~]# md5sum /etc/nova/nova.conf</span><br><span class="line">6334f359655efdbcf083b812ab94efc1  /etc/nova/nova.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网络服务初始化脚本需要一个超链接</span></span><br><span class="line">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步数据库</span></span><br><span class="line">su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \</span><br><span class="line">  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查数据库</span></span><br><span class="line">mysql neutron -e &quot;show tables;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Nova服务</span></span><br><span class="line">systemctl restart openstack-nova-api.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Neutron服务</span></span><br><span class="line">systemctl enable neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service</span><br><span class="line">systemctl start neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务有没有起来</span></span><br><span class="line">neutron agent-list</span><br><span class="line">+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+</span><br><span class="line">| id                                   | agent_type         | host       | availability_zone | alive | admin_state_up | binary                    |</span><br><span class="line">+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+</span><br><span class="line">| 0d68dc27-f2b8-4cae-9c30-cddd126076b4 | Linux bridge agent | controller |                   | :-)   | True           | neutron-linuxbridge-agent |</span><br><span class="line">| 688cc47d-424d-4243-ae2b-b1c4b298a2a8 | Metadata agent     | controller |                   | :-)   | True           | neutron-metadata-agent    |</span><br><span class="line">| c4c5e360-ee02-4b9b-a1a5-59a0d0d088b0 | DHCP agent         | controller | nova              | :-)   | True           | neutron-dhcp-agent        |</span><br><span class="line">+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+</span><br></pre></td></tr></table></figure>

<h4 id="2-6-2-计算节点–安装步骤"><a href="#2-6-2-计算节点–安装步骤" class="headerlink" title="2.6.2 计算节点–安装步骤"></a>2.6.2 计算节点–安装步骤</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装组件</span></span><br><span class="line">yum install -y openstack-neutron-linuxbridge ebtables ipset</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网络配置--公共网络</span></span><br><span class="line">cp /etc/neutron/neutron.conf&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/neutron.conf.bak  &gt; /etc/neutron/neutron.conf</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT rpc_backend rabbit</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_host controller</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_userid openstack</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password NEUTRON_PASS</span><br><span class="line">openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> md5校验</span></span><br><span class="line">md5sum /etc/nova/nova.conf</span><br><span class="line">328cd5f0745e26a420e828b0dfc2934e  /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line">cp /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;</span><br><span class="line">grep -Ev &quot;^$|#&quot; /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan False</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group True</span><br><span class="line">openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次修改nova配置文件，添加neutron配置</span></span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron url http://controller:9696</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron auth_url http://controller:35357</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron auth_type password</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron project_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron user_domain_name default</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron project_name service</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron username neutron</span><br><span class="line">openstack-config --set /etc/nova/nova.conf neutron password NEUTRON_PASS</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启nova服务</span></span><br><span class="line">systemctl restart openstack-nova-compute.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动linuxbridge代理服务</span></span><br><span class="line">systemctl enable neutron-linuxbridge-agent.service</span><br><span class="line">systemctl restart neutron-linuxbridge-agent.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否配置成功</span></span><br><span class="line">controller执行 &gt;&gt; neutron agent-list</span><br><span class="line">配置正确会多出来一个</span><br><span class="line">Linux bridge agent | compute1   |                   | :-)   | True </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看计算资源</span></span><br><span class="line">openstack compute service list</span><br></pre></td></tr></table></figure>

<h3 id="2-7-安装horizon-（Dashboard）web界面"><a href="#2-7-安装horizon-（Dashboard）web界面" class="headerlink" title="2.7 安装horizon （Dashboard）web界面"></a>2.7 安装horizon （Dashboard）web界面</h3><h4 id="2-7-1-安装步骤（控制节点"><a href="#2-7-1-安装步骤（控制节点" class="headerlink" title="2.7.1 安装步骤（控制节点)"></a>2.7.1 安装步骤（控制节点)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装组件包</span></span><br><span class="line">yum install -y openstack-dashboard</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim /etc/openstack-dashboard/local_settings</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;</span></span><br><span class="line">OPENSTACK_HOST = &quot;controller&quot;</span><br><span class="line">ALLOWED_HOSTS = [&#x27;*&#x27;, ]</span><br><span class="line">SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">         &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class="line">         &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; % OPENSTACK_HOST</span><br><span class="line">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True</span><br><span class="line">OPENSTACK_API_VERSIONS = &#123;</span><br><span class="line">    &quot;identity&quot;: 3,</span><br><span class="line">    &quot;image&quot;: 2,</span><br><span class="line">    &quot;volume&quot;: 2,</span><br><span class="line">&#125;</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &quot;default&quot;</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;user&quot;</span><br><span class="line">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x27;enable_router&#x27;: False,</span><br><span class="line">    &#x27;enable_quotas&#x27;: False,</span><br><span class="line">    &#x27;enable_distributed_router&#x27;: False,</span><br><span class="line">    &#x27;enable_ha_router&#x27;: False,</span><br><span class="line">    &#x27;enable_lb&#x27;: False,</span><br><span class="line">    &#x27;enable_firewall&#x27;: False,</span><br><span class="line">    &#x27;enable_vpn&#x27;: False,</span><br><span class="line">    &#x27;enable_fip_topology_check&#x27;: False,</span><br><span class="line">&#125;</span><br><span class="line">TIME_ZONE = &quot;Asia/Shanghai&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决不能进入页面的BUG</span></span><br><span class="line">vim /etc/httpd/conf.d/openstack-dashboard.conf</span><br><span class="line">添加一行 &gt;&gt; WSGIAppicationGroup %&#123;GLOBAL&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">systemctl restart httpd.service memcached.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录界面</span></span><br><span class="line">https://10.0.0.11/dashboard</span><br><span class="line">域:default</span><br><span class="line">用户名:admin</span><br><span class="line">密码:ADMIN_PASS</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 扩展：查看文件输入那个rpm包</span></span><br><span class="line">rpm -qf /etc/openstack-dashboard/local_settings</span><br></pre></td></tr></table></figure>

<h4 id="2-7-2-Dashboard报错解决"><a href="#2-7-2-Dashboard报错解决" class="headerlink" title="2.7.2 Dashboard报错解决"></a>2.7.2 Dashboard报错解决</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 问题1--Invalid service catalog service: image</span></span><br><span class="line">发生原因：</span><br><span class="line">	openstack service list 存在两个 glance</span><br><span class="line">解决方法：</span><br><span class="line">    openstack service delete c12c125edc2041e3aaf2f250442162c6</span><br><span class="line">    openstack service delete 6a11431b95bc44d1bd1e9371c0faa16b # 两个glance都删掉</span><br><span class="line">    重复2.4.1在keystone上创建glance服务和注册api</span><br><span class="line">    再重启服务systemctl restart httpd.service memcached.service</span><br></pre></td></tr></table></figure>

<h3 id="2-8-启动一个云主机"><a href="#2-8-启动一个云主机" class="headerlink" title="2.8 启动一个云主机"></a>2.8 启动一个云主机</h3><h3 id="2-8-1-创建步骤"><a href="#2-8-1-创建步骤" class="headerlink" title="2.8.1 创建步骤"></a>2.8.1 创建步骤</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网络</span></span><br><span class="line">neutron net-create --shared --provider:physical_network provider \</span><br><span class="line">  --provider:network_type flat gs</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在网络中创建一个子网</span></span><br><span class="line">neutron subnet-create --name gs2 \</span><br><span class="line">  --allocation-pool start=10.0.0.101,end=10.0.0.250 \</span><br><span class="line">  --dns-nameserver 223.5.5.5 --gateway 10.0.0.2 \</span><br><span class="line">  gs 10.0.0.0/24</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建云主机硬件配置方案（规格）</span></span><br><span class="line">openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建密钥键值对</span></span><br><span class="line">ssh-keygen -q -N &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class="line">openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证公钥的添加</span></span><br><span class="line">openstack keypair list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加安全组规则</span></span><br><span class="line">openstack security group rule create --proto icmp default</span><br><span class="line">openstack security group rule create --proto tcp --dst-port 22 default</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在公有网络启动一个实例</span></span><br><span class="line">openstack flavor list # 查看可用的配置规格</span><br><span class="line">openstack image list # 查看可用镜像</span><br><span class="line">openstack network list # 查看可用网络</span><br><span class="line">openstack security group list # 查看已设置的安全组</span><br><span class="line"></span><br><span class="line">openstack server create --flavor 规格名/ID --image 镜像名/ID \</span><br><span class="line">  --nic net-id=网络ID --security-group default \</span><br><span class="line">  --key-name mykey 实例名称</span><br><span class="line">示例：</span><br><span class="line">openstack server create --flavor m1.tiny --image cirros \</span><br><span class="line">--nic net-id=cb032582-893b-414d-b78d-c89c6548612d --security-group default \</span><br><span class="line">--key-name mykey my-instance</span><br></pre></td></tr></table></figure>

<h3 id="2-8-2-创建云主机问题解决"><a href="#2-8-2-创建云主机问题解决" class="headerlink" title="2.8.2 创建云主机问题解决"></a>2.8.2 创建云主机问题解决</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、启动云主机时，No valid host was found</span></span><br><span class="line">【计算节点中】</span><br><span class="line">查看云主机创建日志：/var/log/nova/nova-compute.log，里面有记录问题原因是CPU feature spec-ctrl not found</span><br><span class="line">修改/usr/share/libvirt/cpu_map.xml，将和spec-ctrl相关的特性删除</span><br><span class="line">然后重启服务</span><br><span class="line">systemctl restart libvirtd openstack-nova-compute</span><br><span class="line">参考博客：https://www.cnblogs.com/laolieren/p/solve_openstack_create_instance_error.html</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、云主机控制台seabios -- Booting from Hard Disk错误</span></span><br><span class="line">【计算节点中】</span><br><span class="line">vim /etc/nova/nova.conf</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;</span></span><br><span class="line">[libvirt]</span><br><span class="line">virt_type = qemu</span><br><span class="line">cpu_mode = none</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;</span></span><br><span class="line">systemctl restart libvirtd openstack-nova-compute</span><br><span class="line">重启云主机</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>运维</category>
        <category>（四）虚拟化之OpenStack</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--06--HTTP协议介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/06-HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="一、HTTP的发展历程"><a href="#一、HTTP的发展历程" class="headerlink" title="一、HTTP的发展历程"></a>一、HTTP的发展历程</h2><p>HTTP协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文</p>
<p>HTTP&#x2F;0.9 (是个简单的文本协议，只能获取文本资源；)</p>
<p>HTTP&#x2F;1.0 - 1996年 （确立了大部分现在使用的技术，参考文档，不具备实际约束力）</p>
<p>HTTP&#x2F;1.1 - 1999年 （正式标准严格遵守，功能也非常完善，互联网爆发式增长，目前互联网上使用最广泛的协议） </p>
<p>HTTP&#x2F;2 - 2015年 （基于 Google 的 SPDY 协议，注重性能改善，但还未普及）</p>
<p>HTTP&#x2F;3 - 2018年 （基于 Google 的 QUIC 协议，是将来的发展方向）</p>
<hr>
<p>课下作业</p>
<ol>
<li>你认为推动 HTTP 发展的原动力是什么？</li>
<li>你是怎么理解 HTTP（超文本传输协议）的？</li>
</ol>
<h2 id="二、HTTP简介"><a href="#二、HTTP简介" class="headerlink" title="二、HTTP简介"></a>二、HTTP简介</h2><p>HyperText transfer protocol （超文本传输协议）</p>
<ul>
<li>HTTP 是一个用在计算机世界里的协议，它确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</li>
<li>HTTP 专门用来在两点之间传输数据，不能用于广播、寻址或路由。</li>
<li>HTTP 传输的是文字、图片、音频、视频等超文本数据。</li>
<li>HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。</li>
</ul>
<hr>
<p>课下作业：</p>
<ol>
<li>有一种流行的说法：“HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议”，你认为这种说法对吗？对在哪里，又错在哪里？</li>
<li>你能再说出几个“HTTP 不是什么”吗？</li>
</ol>
<p><img src="/img/http%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="http思维导图"></p>
<h3 id="三、HTTP的应用领域"><a href="#三、HTTP的应用领域" class="headerlink" title="三、HTTP的应用领域"></a>三、HTTP的应用领域</h3><ol>
<li>互联网上绝大部分资源都使用 HTTP 协议传输；</li>
<li>浏览器是 HTTP 协议里的请求方，即 User Agent；</li>
<li>服务器是 HTTP 协议里的应答方，常用的有 Apache 和 Nginx；</li>
<li>CDN 位于浏览器和服务器之间，主要起到缓存加速的作用；</li>
<li>爬虫是另一类 User Agent，是自动访问网络资源的程序。</li>
</ol>
<hr>
<p>课后作业：</p>
<ol>
<li>你觉得 CDN 在对待浏览器和爬虫时会有差异吗？为什么？</li>
<li>你怎么理解 WebService 与 Web Server 这两个非常相似的词？</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--05--SSH服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/05-ssh%E6%9C%8D%E5%8A%A1%E8%B7%B3%E6%9D%BF%E6%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="一、SSH服务器介绍"><a href="#一、SSH服务器介绍" class="headerlink" title="一、SSH服务器介绍"></a>一、SSH服务器介绍</h2><blockquote>
<p>SSH是一个安全协议，在进行数据传输时，会对数据包进行加密处理，加密后在进行数据传输。确保了数据传输安全。</p>
</blockquote>
<p><img src="/img/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.png" alt="ssh免密登录"></p>
<h3 id="1-ssh的功能"><a href="#1-ssh的功能" class="headerlink" title="1 ssh的功能"></a>1 ssh的功能</h3><ol>
<li>提供远程连接服务器的服务</li>
<li>对传输的数据进行加密</li>
</ol>
<h3 id="2-常用服务的端口"><a href="#2-常用服务的端口" class="headerlink" title="2 常用服务的端口"></a>2 常用服务的端口</h3><ul>
<li>ftp – tcp&#x2F;20  tcp&#x2F;21</li>
<li>dns – tcp&#x2F;53  udp&#x2F;53</li>
<li>ssh  –  tcp&#x2F;22</li>
<li>telnet – tcp&#x2F;23 </li>
<li>mysql – tcp&#x2F;3306</li>
<li>http – tcp&#x2F;80</li>
<li>https – tcp&#x2F;443</li>
</ul>
<h3 id="3-telnet服务搭建"><a href="#3-telnet服务搭建" class="headerlink" title="3 telnet服务搭建"></a>3 telnet服务搭建</h3><p>安装并启动telnet服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@backup ~]# yum install telnet-server -y</span><br><span class="line">[root@backup ~]# systemctl start telnet.socket </span><br><span class="line">[root@backup ~]# useradd gs</span><br><span class="line">[root@backup ~]# echo &quot;1&quot; | passwd --stdin gs</span><br></pre></td></tr></table></figure>

<p>使用终端软件通过telnet使用gs用户登录连接</p>
<h3 id="4-telnet与ssh的对比"><a href="#4-telnet与ssh的对比" class="headerlink" title="4 telnet与ssh的对比"></a>4 telnet与ssh的对比</h3><table>
<thead>
<tr>
<th>服务连接方式</th>
<th>服务数据传输</th>
<th>服务监听端口</th>
<th>服务登陆用户</th>
</tr>
</thead>
<tbody><tr>
<td>ssh</td>
<td>加密</td>
<td>tcp&#x2F;22</td>
<td>默认支持root登录</td>
</tr>
<tr>
<td>telnet</td>
<td>明文</td>
<td>tcp&#x2F;23</td>
<td>不支持root登录</td>
</tr>
</tbody></table>
<h2 id="二、ssh与scp的使用"><a href="#二、ssh与scp的使用" class="headerlink" title="二、ssh与scp的使用"></a>二、ssh与scp的使用</h2><h3 id="1-使用ssh"><a href="#1-使用ssh" class="headerlink" title="1 使用ssh"></a>1 使用ssh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh命令</span><br><span class="line">	ssh 172.16.1.31					#取决当前执行此命令的用户</span><br><span class="line">	ssh root@172.16.1.31			#标准的写法</span><br><span class="line">	ssh -p22 root@172.16.1.31		#带端口</span><br></pre></td></tr></table></figure>

<h3 id="2-使用scp"><a href="#2-使用scp" class="headerlink" title="2 使用scp"></a>2 使用scp</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp </span><br><span class="line"><span class="meta">#</span><span class="bash"> -P 指定端口，默认22端口可不写</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r 表示递归拷贝目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 表示在拷贝文件前后保持文件或目录属性不变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l 限制传输使用带宽(默认kb) /8 -&gt;KB  /1024  -&gt;MB</span> </span><br></pre></td></tr></table></figure>

<h2 id="三、使用ssh密钥登录"><a href="#三、使用ssh密钥登录" class="headerlink" title="三、使用ssh密钥登录"></a>三、使用ssh密钥登录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.生成密钥对    公钥  私钥</span><br><span class="line">[root@m01 ~]# ssh-keygen -C 7242xxxxx@qq.com</span><br><span class="line">	</span><br><span class="line">2.将公钥推送到你需要连接的主机，第一次需要输入对端主机的密码</span><br><span class="line">[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.31</span><br><span class="line">root@172.16.1.31&#x27;s password:</span><br><span class="line">	</span><br><span class="line">3.通过ssh命令测试连接是否需要密码</span><br><span class="line">[root@m01 ~]# ssh 172.16.1.31</span><br><span class="line">Last login: Wed Jan  9 10:39:16 2019 from 172.16.1.61</span><br></pre></td></tr></table></figure>

<h2 id="四、ssh安全"><a href="#四、ssh安全" class="headerlink" title="四、ssh安全"></a>四、ssh安全</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jumpserver ~]# vim /etc/ssh/sshd_config</span><br><span class="line">[root@jumpserver ~]# systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>SSH作为远程连接服务，通常我们需要考虑到该服务的安全，所以需要对该服务进行安全方面的配置。<br>1.更改远程连接登陆的端口		6666<br>2.禁止ROOT管理员直接登录		<br>3.密码认证方式改为密钥认证<br>4.重要服务不使用公网IP地址<br>5.使用防火墙限制来源IP地址</p>
<p>Port 6666                       # 变更SSH服务远程连接端口√<br>PermitRootLogin         no      # 禁止root用户直接远程登录√<br>PasswordAuthentication  no      # 禁止使用密码直接远程登录√<br>UseDNS                  no      # 禁止ssh进行dns反向解析，影响ssh连接效率参数√<br>GSSAPIAuthentication    no      # 禁止GSS认证，减少连接时产生的延迟√</p>
<h2 id="五、防ssh暴力破解工具fail2ban"><a href="#五、防ssh暴力破解工具fail2ban" class="headerlink" title="五、防ssh暴力破解工具fail2ban"></a>五、防ssh暴力破解工具fail2ban</h2><blockquote>
<p>fail2ban可以监控系统日志，并且根据一定规则匹配异常IP后使用Firewalld将其屏蔽，尤其是针对一些爆破&#x2F;扫描等非常有效。</p>
</blockquote>
<p>部署流程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.开启Firewalld防火墙</span><br><span class="line">[root@bgx ~]# systemctl start firewalld</span><br><span class="line">[root@bgx ~]# systemctl enable firewalld</span><br><span class="line">[root@bgx ~]# firewall-cmd --state</span><br><span class="line">running</span><br><span class="line"></span><br><span class="line">2.修改firewalld规则，启用Firewalld后会禁止一些服务的传输，但默认会放行常用的22端口, 如果想添加更多，以下是放行SSH端口（22）示例，供参考：</span><br><span class="line"><span class="meta">#</span><span class="bash">放行SSHD服务端口</span></span><br><span class="line">[root@bgx ~]# firewall-cmd --permanent --add-service=ssh --add-service=http </span><br><span class="line"><span class="meta">#</span><span class="bash">重载配</span></span><br><span class="line">[root@bgx ~]# firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash">查看已放行端口</span></span><br><span class="line">[root@bgx ~]# firewall-cmd  --list-service</span><br><span class="line"></span><br><span class="line">3.安装fail2ban,需要有epel</span><br><span class="line">[root@bgx ~]# yum install fail2ban fail2ban-firewalld mailx -y</span><br><span class="line"></span><br><span class="line">4.配置fail2ban规则.local会覆盖.conf文件</span><br><span class="line">[root@bgx fail2ban]# cat /etc/fail2ban/jail.local</span><br><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8</span><br><span class="line">bantime  = 86400</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line">banaction = firewallcmd-ipset</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = sshd</span><br><span class="line">port    = 22</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line">logpath = /var/log/secure</span><br><span class="line"></span><br><span class="line">5.启动服务，并检查状态</span><br><span class="line">[root@bgx ~]# systemctl start fail2ban.service</span><br><span class="line">[root@bgx ~]# fail2ban-client status sshd</span><br><span class="line"></span><br><span class="line">6.清除被封掉的IP地址</span><br><span class="line">[root@bgx ~]# fail2ban-client set sshd unbanip 10.0.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--04--Sersync实时备份</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/04-sersync%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="一、Sersync服务介绍"><a href="#一、Sersync服务介绍" class="headerlink" title="一、Sersync服务介绍"></a>一、Sersync服务介绍</h2><blockquote>
</blockquote>
<h3 id="1-为什么要用sersync"><a href="#1-为什么要用sersync" class="headerlink" title="1 为什么要用sersync"></a>1 为什么要用sersync</h3><ul>
<li>sersync是基于inotify开发的，类似于inotify-tools的工具</li>
<li>sersync可以记录下被监听目录中发生变化的（包括增加、删除、修改）具体某一个文件或者某一个目录的名字，然后使用rsync同步的时候，只同步发生变化的文件或者目录</li>
<li>因为服务异常导致的同步失败有记录，便于恢复，确保高可用！</li>
</ul>
<h3 id="2-rsync-inotify-tools与rsync-sersync架构的区别？"><a href="#2-rsync-inotify-tools与rsync-sersync架构的区别？" class="headerlink" title="2 rsync+inotify-tools与rsync+sersync架构的区别？"></a>2 rsync+inotify-tools与rsync+sersync架构的区别？</h3><ul>
<li><p>rsync+inotify-tools</p>
<p>a、inotify只能记录下被监听的目录发生了变化（增，删，改）并没有把具体是哪个文件或者哪个目录发生了变化记录下来；</p>
<p>b、rsync在同步的时候，并不知道具体是哪个文件或目录发生了变化，每次都是对整个目录进行同步，当数据量很大时，整个目录同步非常耗时（rsync要对整个目录遍历查找对比文件），因此效率很低</p>
</li>
<li><p>rsync+sersync</p>
<p>a、sersync可以记录被监听目录中发生变化的（增，删，改）具体某个文件或目录的名字；</p>
<p>b、rsync在同步时，只同步发生变化的文件或目录（每次发生变化的数据相对整个同步目录数据来说很小，rsync在遍历查找对比文件时，速度很快），因此效率很高。</p>
</li>
</ul>
<h2 id="二、同步过程和原理"><a href="#二、同步过程和原理" class="headerlink" title="二、同步过程和原理"></a>二、同步过程和原理</h2><h3 id="1-同步过程"><a href="#1-同步过程" class="headerlink" title="1 同步过程"></a>1 同步过程</h3><ol>
<li>在同步服务器上开启sersync服务，sersync负责监控配置路径中的文件系统事件变化</li>
<li>调用rsync命令把更新的文件同步到目标服务器；</li>
<li>需要在主服务器配置sersync，在同步目标服务器配置rsync server（注意：是rsync服务</li>
</ol>
<h3 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2 同步原理"></a>2 同步原理</h3><ol>
<li>用户实时的往sersync服务器上写入更新文件数据；</li>
<li>此时需要在同步主服务器上配置sersync服务；</li>
<li>在另一台服务器开启rsync守护进程服务，以同步拉取来自sersync服务器上的数据；</li>
</ol>
<blockquote>
<p>通过rsync的守护进程服务后可以发现，实际上sersync就是监控本地的数据写入或更新事件；然后，再调用rsync客户端的命令，将写入或更新事件对应的文件通过rsync推送到目标服务器。</p>
</blockquote>
<h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote>
<p>案例: 实现web上传视频文件，实则是写入NFS至存储，当NFS存在新的数据则会实时的复制到备份服务器</p>
</blockquote>
<table>
<thead>
<tr>
<th>角色</th>
<th>内网IP(LAN)</th>
<th>外网IP(NAT)</th>
<th>安装工具</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>eth1:172.16.1.7</td>
<td>eth0:10.0.0.7</td>
<td>httpd php</td>
</tr>
<tr>
<td>nfs-server</td>
<td>eth1:172.16.1.31</td>
<td>eth0:10.0.0.31</td>
<td>nfsServer、rsync+inotify+sersync</td>
</tr>
<tr>
<td>backup</td>
<td>eth1:172.16.1.41</td>
<td>eth0:10.0.0.41</td>
<td>rsync-server</td>
</tr>
</tbody></table>
<p><img src="/img/sersync%E6%B5%81%E7%A8%8B-1628145534424.png" alt="sersync流程"></p>
<h3 id="1-web上传视频至nfs存储"><a href="#1-web上传视频至nfs存储" class="headerlink" title="1 web上传视频至nfs存储"></a>1 web上传视频至nfs存储</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nfs存储服务  172.16.1.31</span><br><span class="line">	1.安装</span><br><span class="line">		[root@nfs ~]# yum install nfs-utils -y</span><br><span class="line">	2.配置</span><br><span class="line">		[root@nfs ~]# cat /etc/exports</span><br><span class="line">		/data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">		</span><br><span class="line">		[root@nfs ~]# groupadd -g666 www</span><br><span class="line">		[root@nfs ~]# useradd -u666 -g666 www</span><br><span class="line">		</span><br><span class="line">		[root@nfs ~]# mkdir /data</span><br><span class="line">		[root@nfs ~]# chown -R www.www /data</span><br><span class="line">		</span><br><span class="line">	3.启动</span><br><span class="line">		[root@nfs ~]# systemctl restart nfs-server</span><br><span class="line">		[root@nfs ~]# sysytemctl enable nfs-server</span><br><span class="line">		</span><br><span class="line">web服务器操作：172.16.1.7</span><br><span class="line">	1.安装</span><br><span class="line">		[root@web01 ~]# yum install httpd php -y</span><br><span class="line">	2.配置</span><br><span class="line">		进程运行的身份（最好是和nfs的匿名用户保持一致）</span><br><span class="line"><span class="meta">			#</span><span class="bash"> sed c 匹配到User开头的字段，替换为User www</span></span><br><span class="line">			[root@web01 html]# sed -i &#x27;/^User/c User www&#x27; /etc/httpd/conf/httpd.conf 	</span><br><span class="line">			[root@web01 html]# sed -i &#x27;/^Group/c Group www&#x27; /etc/httpd/conf/httpd.conf</span><br><span class="line">		挂载</span><br><span class="line">			[root@web01 ~]# mount -t nfs 172.16.1.31:/data /var/www/html		#核心</span><br><span class="line">		上传代码</span><br><span class="line">			[root@web01 ~]# cd /var/www/html/</span><br><span class="line">			[root@web01 html]# rz kaoshi.zip</span><br><span class="line">			[root@web01 html]# unzip kaoshi.zip</span><br><span class="line">	3.启动</span><br><span class="line">		[root@web01 ~]# systemctl start httpd</span><br><span class="line"></span><br><span class="line">	4.修改上传大小</span><br><span class="line">		[root@web01 ~]# vim /etc/php.ini中设置：</span><br><span class="line">		upload_max_filesize = 200M;</span><br><span class="line">		post_max_size = 200M;</span><br><span class="line">	</span><br><span class="line">	5.注意: 修改完配置记得重启服务</span><br><span class="line">	[root@web01 ~]#  systemctl restart httpd</span><br></pre></td></tr></table></figure>

<h3 id="2-web和nfs的数据都备份在备份服务器的-x2F-backup"><a href="#2-web和nfs的数据都备份在备份服务器的-x2F-backup" class="headerlink" title="2 web和nfs的数据都备份在备份服务器的&#x2F;backup"></a>2 web和nfs的数据都备份在备份服务器的&#x2F;backup</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">备份服务器操作如下：172.16.1.41</span><br><span class="line">	1.安装</span><br><span class="line">		[root@backup ~]# yum install rsync -y</span><br><span class="line">	2.配置</span><br><span class="line">		[root@backup ~]# cat /etc/rsyncd.conf</span><br><span class="line">		uid = www</span><br><span class="line">		gid = www</span><br><span class="line">		port = 873</span><br><span class="line">		fake super = yes</span><br><span class="line">		use chroot = no</span><br><span class="line">		max connections = 200</span><br><span class="line">		timeout = 600</span><br><span class="line">		ignore errors</span><br><span class="line">		read only = false</span><br><span class="line">		list = true</span><br><span class="line">		auth users = rsync_backup</span><br><span class="line">		secrets file = /etc/rsync.passwd</span><br><span class="line">		log file = /var/log/rsyncd.log</span><br><span class="line"><span class="meta">		#</span><span class="bash"><span class="comment">####################################</span></span></span><br><span class="line">		[backup]</span><br><span class="line">		path = /backup</span><br><span class="line">		</span><br><span class="line">		[data]</span><br><span class="line">		path = /data</span><br><span class="line">		</span><br><span class="line">		创建用户</span><br><span class="line">			[root@backup ~]# groupadd -g666 www</span><br><span class="line">			[root@backup ~]# useradd -u666 -g666 www</span><br><span class="line">		</span><br><span class="line">		准备虚拟连接用户账号和密码</span><br><span class="line">		[root@backup ~]# cat /etc/rsync.passwd </span><br><span class="line">		rsync_backup:123456</span><br><span class="line">		[root@backup ~]# chmod 600 /etc/rsync.passwd</span><br><span class="line">		</span><br><span class="line">		创建数据存放的目录</span><br><span class="line">		[root@backup ~]# mkdir -p /data /backup</span><br><span class="line">		[root@backup ~]# chown -R www.www /data/ /backup/</span><br><span class="line"></span><br><span class="line">	3.启动</span><br><span class="line">		[root@backup ~]# systemctl restart rsyncd</span><br><span class="line"></span><br><span class="line">	4.客户端执行脚本。测试rsync的备份是否ok   （客户端的数据都写入到/backup目录中） 172.16.1.7 172.16.1.31</span><br><span class="line">	[root@web01 ~]# sh /server/scripts/client_push_data.sh </span><br><span class="line">	sending incremental file list</span><br><span class="line">	web01_172.16.1.7_2019-01-08/</span><br><span class="line">	web01_172.16.1.7_2019-01-08/flag_2019-01-08</span><br><span class="line">	web01_172.16.1.7_2019-01-08/other.tar.gz</span><br><span class="line">	web01_172.16.1.7_2019-01-08/sys.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-如何将nfs的数据实时的同步到备份服务器的-x2F-data目录"><a href="#3-如何将nfs的数据实时的同步到备份服务器的-x2F-data目录" class="headerlink" title="3 如何将nfs的数据实时的同步到备份服务器的&#x2F;data目录"></a>3 如何将nfs的数据实时的同步到备份服务器的&#x2F;data目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">监控nfs服务器上面的/data目录，如果发生变化则触发动作，动作可以是执行一次同步。</span><br><span class="line">1.安装</span><br><span class="line">	[root@nfs ~]# yum install inotify-tools		监控工具</span><br><span class="line">	</span><br><span class="line">	[root@nfs ~]# rz -E sersync2.5.4_64bit_binary_stable_final.tar.gz	</span><br><span class="line">	[root@nfs ~]# tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line">	[root@nfs ~]# mv GNU-Linux-x86/ /usr/local/sersync</span><br><span class="line">2.配置</span><br><span class="line">	[root@nfs sersync]# diff confxml.xml confxml.xml.bak</span><br><span class="line">       5c5</span><br><span class="line">       &lt;     &lt;fileSystem xfs=&quot;true&quot;/&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;     &lt;fileSystem xfs=&quot;false&quot;/&gt;</span><br><span class="line">       15c15</span><br><span class="line">       &lt;       &lt;createFile start=&quot;true&quot;/&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;       &lt;createFile start=&quot;false&quot;/&gt;</span><br><span class="line">       19,20c19,20</span><br><span class="line">       &lt;       &lt;attrib start=&quot;true&quot;/&gt;</span><br><span class="line">       &lt;       &lt;modify start=&quot;true&quot;/&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;       &lt;attrib start=&quot;false&quot;/&gt;</span><br><span class="line">       &gt;       &lt;modify start=&quot;false&quot;/&gt;</span><br><span class="line">       24,25c24,25</span><br><span class="line">       &lt;       &lt;localpath watch=&quot;/data&quot;&gt;</span><br><span class="line">       &lt;           &lt;remote ip=&quot;172.16.1.41&quot; name=&quot;data&quot;/&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;       &lt;localpath watch=&quot;/opt/tongbu&quot;&gt;</span><br><span class="line">       &gt;           &lt;remote ip=&quot;127.0.0.1&quot; name=&quot;tongbu1&quot;/&gt;</span><br><span class="line">       30,31c30,31</span><br><span class="line">       &lt;           &lt;commonParams params=&quot;-az&quot;/&gt;</span><br><span class="line">       &lt;           &lt;auth start=&quot;true&quot; users=&quot;rsync_backup&quot; passwordfile=&quot;/etc/rsync.pass&quot;/&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;           &lt;commonParams params=&quot;-artuz&quot;/&gt;</span><br><span class="line">       &gt;           &lt;auth start=&quot;false&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.pas&quot;/&gt;</span><br><span class="line">       33c33</span><br><span class="line">       &lt;           &lt;timeout start=&quot;true&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">       ---</span><br><span class="line">       &gt;           &lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line"></span><br><span class="line">	创建客户端密码文件</span><br><span class="line">	[root@nfs ~]# cat /etc/rsync.pass</span><br><span class="line">	123456</span><br><span class="line">	[root@nfs ~]# chmod 600 /etc/rsync.pass</span><br><span class="line"></span><br><span class="line">3.启动</span><br><span class="line">[root@nfs ~]# /usr/local/sersync/sersync2  -h</span><br><span class="line">set the system param</span><br><span class="line">execute：echo 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：echo 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the command param</span><br><span class="line">_______________________________________________________</span><br><span class="line">参数-d:启用守护进程模式</span><br><span class="line">参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</span><br><span class="line">参数-n: 指定开启守护线程的数量，默认为10个</span><br><span class="line">参数-o:指定配置文件，默认使用confxml.xml文件</span><br><span class="line">参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m socket 开启socket模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m http 开启http模块</span><br><span class="line">不加-m参数，则默认执行同步程序</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">[root@nfs ~]#  /usr/local/sersync/sersync2 -dro /usr/local/sersync/confxml.xml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动sersync后一定要提取同步的命令，手动运行一次，检查是否存在错误</span></span><br><span class="line">[root@nfs ~]#  cd /data &amp;&amp; rsync -az -R --delete ./  --timeout=100 rsync_backup@172.16.1.41::data --password-file=/etc/rsync.pass</span><br><span class="line"></span><br><span class="line">停止</span><br><span class="line">[root@nfs data]# pkill sersync</span><br></pre></td></tr></table></figure>

<h3 id="4-如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup-（不能出现业务中断）"><a href="#4-如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup-（不能出现业务中断）" class="headerlink" title="4 如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup   （不能出现业务中断）"></a>4 如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup   （不能出现业务中断）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.backup服务器上需要运行和nfs服务器上一样的业务环境 </span><br><span class="line">	创建用户</span><br><span class="line">	[root@backup ~]# groupadd -g 666 www</span><br><span class="line">	[root@backup ~]# useradd -u666 -g666 www</span><br><span class="line">	配置</span><br><span class="line">	[root@backup ~]# yum install -y nfs-utils -y</span><br><span class="line">	[root@backup ~]# cat /etc/exports</span><br><span class="line">	/data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">	启动</span><br><span class="line">	[root@backup ~]# systemctl restart nfs-server</span><br><span class="line">	</span><br><span class="line">2.先实现实时的同步 √</span><br><span class="line"></span><br><span class="line">3.在web上实现切换，卸载nfs的/data目录，重新挂载backup服务的/data目录</span><br><span class="line">	[root@web01 ~]# umount -lf /var/www/html/ &amp;&amp; mount -t nfs 172.16.1.41:/data /var/www/html/</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--03-NFS服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/03-NFS%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ul>
<li>学习笔记</li>
</ul>
<hr>
<h2 id="一、NFS简介"><a href="#一、NFS简介" class="headerlink" title="一、NFS简介"></a>一、NFS简介</h2><blockquote>
<p>NFS是Network File System的缩写及网络文件系统。NFS主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。<br>NFS系统和Windows网络共享、网络驱动器类似, 只不过windows用于局域网, NFS用于企业集群架构中<br>如果是大型网站, 会用到更复杂的分布式文件系统FastDFS（音频、小说、视频）,glusterfs（iso镜像）,HDFS<br>NFS（图片、）解决共享前端web共享</p>
</blockquote>
<h3 id="1-1-NFS有什么用？"><a href="#1-1-NFS有什么用？" class="headerlink" title="1.1 NFS有什么用？"></a>1.1 NFS有什么用？</h3><p>解决前端web静态资源的共享<br>解决前端web静态资源一致性<br>解决前端web磁盘空间的浪费</p>
<h3 id="1-2-NFS的文件操作方式"><a href="#1-2-NFS的文件操作方式" class="headerlink" title="1.2 NFS的文件操作方式"></a>1.2 NFS的文件操作方式</h3><p>1.当用户执行mkdir命令, 该命令会调用shell解释器翻译给内核。<br>2.内核解析完成后会驱动对应的硬件设备，完成相应的操作。</p>
<h3 id="1-3-NFS的实现原理"><a href="#1-3-NFS的实现原理" class="headerlink" title="1.3 NFS的实现原理"></a>1.3 NFS的实现原理</h3><p>1.用户进程访问NFS客户端，使用不同的函数对数据进行处理<br>2.NFS客户端通过TCP&#x2F;IP的方式传递给NFS服务端。<br>3.NFS服务端接收到请求后，会先调用portmap进程进行端口映射。<br>4.nfsd进程用于判断NFS客户端是否拥有权限连接NFS服务端。<br>5.Rpc.mount进程判断客户端是否有对应的权限进行验证。<br>6.idmap进程实现用户映射和压缩<br>7.最后NFS服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件。<br>注意: rpc是一个远程过程调用，那么使用nfs必须有rpc服务</p>
<h3 id="1-4-NFS的优缺点"><a href="#1-4-NFS的优缺点" class="headerlink" title="1.4 NFS的优缺点"></a>1.4 NFS的优缺点</h3><p>优点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.NFS文件系统简单易用、方便部署、数据可靠、服务稳定、满足中小企业需求。</span><br><span class="line">2.NFS文件系统内存放的数据都在文件系统之上，所有数据都是能看得见。</span><br></pre></td></tr></table></figure>

<p>缺点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.存在单点故障, 如果构建高可用维护麻烦</span><br><span class="line"><span class="meta">web-&gt;</span><span class="bash">nfs(sersync)-&gt;backup</span></span><br><span class="line">2.NFS数据明文, 并不对数据做任何校验。</span><br><span class="line">3.客户端挂载NFS服务没有密码验证, 安全性一般(内网使用)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.NFS应用建议<br>1.生产场景应将静态数据尽可能往前端推, 减少后端存储压力<br>2.必须将存储里的静态资源通过CDN缓存jpg\png\mp4\avi\css\js<br>3.如果没有缓存或架构本身历史遗留问题太大, 在多存储也无用</p>
</blockquote>
<h2 id="二、NFS部署"><a href="#二、NFS部署" class="headerlink" title="二、NFS部署"></a>二、NFS部署</h2><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# yum install nfs-utils -y</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# cat /etc/exports</span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash)</span><br></pre></td></tr></table></figure>

<p>授权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# mkdir /data</span><br><span class="line">[root@nfs ~]# chown -R nfsnobody.nfsnobody /data/</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# systemctl start nfs-server</span><br><span class="line">[root@nfs ~]# systemctl enable nfs-server</span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# cat /var/lib/nfs/etab </span><br><span class="line">/data	172.16.1.0/24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,all_squash)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# yum install nfs-utils -y</span><br></pre></td></tr></table></figure>

<p>检查nfs是否有共享内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# showmount -e 172.16.1.31</span><br><span class="line">Export list for 172.16.1.31:	</span><br><span class="line">/data 172.16.1.0/24</span><br></pre></td></tr></table></figure>

<p>挂载nfs目录（临时）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# mount -t nfs 172.16.1.31:/data /opt</span><br><span class="line">[root@web01 ~]# df -h</span><br><span class="line">Filesystem         Size  Used Avail Use% Mounted on</span><br><span class="line">172.16.1.31:/data   99G  1.8G   98G   2% /opt</span><br></pre></td></tr></table></figure>

<p>挂载nfs目录（永久）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# vim /etc/fstab </span><br><span class="line">172.16.1.31:/data  /opt  nfs  defaults  0  0</span><br><span class="line">[root@web01 ~]# mount -a   #验证fstab开机启动是否填写错误。</span><br></pre></td></tr></table></figure>

<h3 id="2-3-NFS配置参数说明"><a href="#2-3-NFS配置参数说明" class="headerlink" title="2.3 NFS配置参数说明"></a>2.3 NFS配置参数说明</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ro				只读权限</span><br><span class="line">root_squash		当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户(不常用)</span><br><span class="line">no_root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员(不常用)</span><br><span class="line">no_all_squash	无论NFS客户端使用什么账户访问，都不进行压缩</span><br><span class="line">async			优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</span><br><span class="line"></span><br><span class="line">rw*				读写权限</span><br><span class="line">sync*			同时将数据写入到内存与硬盘中，保证不丢失数据</span><br><span class="line">all_squash*		无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户(常用)</span><br><span class="line">anonuid*		配置all_squash使用,指定NFS的用户UID,必须存在系统</span><br><span class="line">anongid*		配置all_squash使用,指定NFS的用户UID,必须存在系统</span><br></pre></td></tr></table></figure>

<h3 id="2-4-验证ro权限"><a href="#2-4-验证ro权限" class="headerlink" title="2.4 验证ro权限"></a>2.4 验证ro权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# cat /etc/exports</span><br><span class="line">/data 172.16.1.0/24(ro,sync,all_squash)</span><br><span class="line">[root@nfs ~]# systemctl restart nfs-server</span><br><span class="line"></span><br><span class="line">[root@web01 ~]# touch /opt/ttt</span><br><span class="line">touch: cannot touch ‘/opt/ttt’: Read-only file system		#通常这样的错误都是设定的ro权限导致</span><br></pre></td></tr></table></figure>

<h3 id="2-5-验证all-squash、anonuid、anongid权限"><a href="#2-5-验证all-squash、anonuid、anongid权限" class="headerlink" title="2.5 验证all_squash、anonuid、anongid权限"></a>2.5 验证all_squash、anonuid、anongid权限</h3><p>服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]# cat /etc/exports</span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">创建用户</span><br><span class="line">[root@nfs ~]# groupadd -g 666 www</span><br><span class="line">[root@nfs ~]# useradd -u666 -g666 www</span><br><span class="line">[root@nfs ~]# id www</span><br><span class="line">uid=666(www) gid=666(www) groups=666(www)</span><br><span class="line">授权</span><br><span class="line">[root@nfs ~]# chown -R www.www /data/</span><br><span class="line">重启</span><br><span class="line">[root@nfs ~]# systemctl restart nfs-server</span><br></pre></td></tr></table></figure>

<p>客户端重新挂载验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 opt]# touch file</span><br><span class="line">[root@web01 opt]# touch test</span><br><span class="line">[root@web01 opt]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 666 666 0 Jan  7 11:29 file</span><br><span class="line">-rw-r--r-- 1 666 666 0 Jan  7 11:29 test</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS:由于客户端没有创建id为666的www用户，因此看到的属组和属主都是666</p>
</blockquote>
<p>客户端如果觉得666不好看，建议在客户端上创建同名的用户以及uid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# groupadd -g 666 www</span><br><span class="line">[root@web01 ~]# useradd -u 666 -g 666 www</span><br><span class="line">[root@web01 ~]# id www</span><br><span class="line">uid=666(www) gid=666(www) groups=666(www)</span><br><span class="line">[root@web01 ~]# ll /opt/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 www www 0 Jan  7 11:29 file</span><br><span class="line">-rw-r--r-- 1 www www 0 Jan  7 11:29 test</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(四)LNMP架构拆分</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/10-Nginx(%E5%9B%9B)LNMP%E6%9E%B6%E6%9E%84%E6%8B%86%E5%88%86/</url>
    <content><![CDATA[<h2 id="一、拆分数据库"><a href="#一、拆分数据库" class="headerlink" title="一、拆分数据库"></a>一、拆分数据库</h2><blockquote>
<p>为什么要拆分数据库?</p>
<p>mysql内存占用大，容易引起网页访问速度变慢，甚至oom(out of memory)被系统自动kill掉，不安全</p>
</blockquote>
<h3 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2 环境准备"></a>1.2 环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx+php</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td></td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="1-2-拆分过程"><a href="#1-2-拆分过程" class="headerlink" title="1.2 拆分过程"></a>1.2 拆分过程</h3><p>1、备份172.16.1.7服务器上mysql的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# mysqldump -uroot -p&#x27;Bgx123.com&#x27; --all-databases --single-transaction &gt; mysql-all.sql</span><br></pre></td></tr></table></figure>

<p>2、传输172.16.1.7的备份数据至172.16.1.51的服务器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# scp mysql-all.sql root@172.16.1.51:/tmp</span><br></pre></td></tr></table></figure>

<p>3、需要先在172.16.1.51服务器上安装mysql服务，然后使用mysql命令进行还原。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# yum install mariadb-server mariadb -y</span><br><span class="line">[root@db01 ~]# systemctl enable mariadb</span><br><span class="line">[root@db01 ~]# systemctl start mariadb</span><br><span class="line">[root@db01 ~]# mysql &lt;/tmp/mysql-all.sql</span><br><span class="line">[root@db01 ~]# systemctl restart mariadb</span><br><span class="line">[root@db01 ~]# mysql -uroot -pBgx123.com</span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| edusoho            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">| wordpress          |</span><br><span class="line">| zh                 |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4、将web程序连接的本地数据库修改到远程数据库上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1）先在本地172.16.1.7服务器上停止本地的数据库</span><br><span class="line">[root@web01 ~]# systemctl disable mariadb</span><br><span class="line">[root@web01 ~]# systemctl stop mariadb</span><br><span class="line"></span><br><span class="line">2）在172.16.1.51的服务器上授权远程主机能够能连接mysql数据库</span><br><span class="line">[root@db01 ~]# mysql -uroot -pBgx123.com</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to oldboy@&#x27;%&#x27; identified by &#x27;Bgx123.com&#x27;;</span><br><span class="line">解释：</span><br><span class="line">*.*: 所有数据库下的所有表</span><br><span class="line">oldboy@&#x27;%&#x27;: 允许所有网段的oldboy用户访问</span><br><span class="line">identify: 设置密码</span><br><span class="line"></span><br><span class="line">3）在172.16.1.7服务器上测试远程账户能否连接172.16.1.51的数据库</span><br><span class="line">[root@web01 wordpress]# yum install mariadb -y</span><br><span class="line">[root@web01 wordpress]# mysql -h 172.16.1.51 -uoldboy -pBgx123.com</span><br><span class="line">MariaDB [(none)]&gt; </span><br><span class="line"></span><br><span class="line">4）在172.16.1.7服务器上修改web程序连接数据库的配置文件</span><br><span class="line">[root@web01 wordpress]# vim /code/wordpress/wp-config.php</span><br><span class="line">// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** //</span><br><span class="line">/** WordPress数据库的名称 */</span><br><span class="line">define(&#x27;DB_NAME&#x27;, &#x27;wordpress&#x27;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(&#x27;DB_USER&#x27;, &#x27;oldboy&#x27;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(&#x27;DB_PASSWORD&#x27;, &#x27;Bgx123.com&#x27;);</span><br><span class="line"></span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(&#x27;DB_HOST&#x27;, &#x27;172.16.1.51&#x27;);</span><br></pre></td></tr></table></figure>

<p>5、拆分172.16.1.7wecenter连接远程172.16.1.51数据库信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 zh]# grep -R &quot;Bgx123.com&quot; *</span><br><span class="line">	system/config/database.php:  &#x27;password&#x27; =&gt; &#x27;Bgx123.com&#x27;,</span><br><span class="line">[root@web01 zh]# vim /code/zh/system/config/database.php </span><br><span class="line"><span class="meta">	$</span><span class="bash">config[<span class="string">&#x27;driver&#x27;</span>] = <span class="string">&#x27;MySQLi&#x27;</span>;^M</span></span><br><span class="line"><span class="meta">	$</span><span class="bash">config[<span class="string">&#x27;master&#x27;</span>] = array (</span></span><br><span class="line">	  &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="line">	  &#x27;host&#x27; =&gt; &#x27;172.16.1.51&#x27;,</span><br><span class="line">	  &#x27;username&#x27; =&gt; &#x27;oldboy&#x27;,</span><br><span class="line">	  &#x27;password&#x27; =&gt; &#x27;Bgx123.com&#x27;,</span><br><span class="line">	  &#x27;dbname&#x27; =&gt; &#x27;zh&#x27;,</span><br><span class="line">	);^M</span><br></pre></td></tr></table></figure>

<p>6、拆分172.16.1.7 edusoho连接远程172.16.1.51数据库信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 edusoho]# vim /code/edusoho/app/config/parameters.yml</span><br><span class="line">database_driver: pdo_mysql</span><br><span class="line">database_host: 172.16.1.51</span><br><span class="line">database_port: 3306</span><br><span class="line">database_name: edusoho</span><br><span class="line">database_user: oldboy</span><br><span class="line">database_password: &#x27;Bgx123.com&#x27;</span><br><span class="line"></span><br><span class="line">必须清理缓存</span><br><span class="line">[root@web01 edusoho]# rm -rf /code/edusoho/app/cache/*</span><br></pre></td></tr></table></figure>

<h2 id="二、扩展多台web服务器"><a href="#二、扩展多台web服务器" class="headerlink" title="二、扩展多台web服务器"></a>二、扩展多台web服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.统一环境</span><br><span class="line">    0）准备对应的www用户</span><br><span class="line">    [root@web02 ~]# groupadd -g666 www</span><br><span class="line">    [root@web02 ~]# useradd -u666 -g666 www</span><br><span class="line"></span><br><span class="line">    1）拷贝web01上面的yum仓库</span><br><span class="line">    [root@web02 ~]# scp root@172.16.1.7:/etc/yum.repos.d/*.repo /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">    2）安装nginx和php</span><br><span class="line">    [root@web02 ~]# yum -y install nginx php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb</span><br><span class="line"></span><br><span class="line">2.统一配置（同步web01上面的配置到web02）</span><br><span class="line">    1）同步nginx</span><br><span class="line">    [root@web02 ~]# rsync  -avz --delete root@172.16.1.7:/etc/nginx/ /etc/nginx/</span><br><span class="line">    [root@web02 ~]# nginx -t</span><br><span class="line">    [root@web02 ~]# systemctl enable nginx</span><br><span class="line">    [root@web02 ~]# systemctl start nginx</span><br><span class="line"></span><br><span class="line">    2）同步php（/etc/php-fpm.conf /etc/php-fpm.d  /etc/php.ini）</span><br><span class="line">    [root@web02 ~]# rsync  -avz --delete root@172.16.1.7:/etc/php* /etc/</span><br><span class="line">    [root@web02 ~]# systemctl enable php-fpm</span><br><span class="line">    [root@web02 ~]# systemctl start php-fpm</span><br><span class="line"></span><br><span class="line">3.统一代码</span><br><span class="line">    [root@web01 ~]# tar czf code.tar.gz /code				#在web01上打包站点</span><br><span class="line">    [root@web01 ~]# scp code.tar.gz root@172.16.1.8:/tmp	#在web01上将打包好的代码发送给web02</span><br><span class="line">    [root@web02 ~]# tar xf /tmp/code.tar.gz -C /			#在web02上进行解压，并解压到/目录下</span><br><span class="line"></span><br><span class="line">4.配置解析，进行访问</span><br></pre></td></tr></table></figure>

<h2 id="三、NFS共享多台web的静态资源"><a href="#三、NFS共享多台web的静态资源" class="headerlink" title="三、NFS共享多台web的静态资源"></a>三、NFS共享多台web的静态资源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.准备172.16.1.31共享存储服务器，规划目录，配置好权限</span><br><span class="line">    0）创建用户</span><br><span class="line">    [root@nfs ~]# groupadd -g666 www</span><br><span class="line">    [root@nfs ~]# useradd -u666 -g666 www	</span><br><span class="line"></span><br><span class="line">    1）安装</span><br><span class="line">    [root@nfs ~]# yum install nfs-utils -y</span><br><span class="line"></span><br><span class="line">    2）配置</span><br><span class="line">    [root@nfs ~]# cat /etc/exports</span><br><span class="line">    /data/blog 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">    /data/zh 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line">    /data/edu 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</span><br><span class="line"></span><br><span class="line">    3）根据配置，创建目录，准备用户，授权等等</span><br><span class="line">    [root@nfs ~]# rm -rf /data/</span><br><span class="line">    [root@nfs ~]# mkdir /data/&#123;blog,zh,edu&#125; -p</span><br><span class="line">    [root@nfs ~]# chown -R www.www /data/</span><br><span class="line"></span><br><span class="line">    4）启动</span><br><span class="line">    [root@nfs ~]# systemctl enable nfs-utils </span><br><span class="line">    [root@nfs ~]# systemctl restart nfs-utils</span><br><span class="line"></span><br><span class="line">2.将图片较多的web02服务器，推送到nfs共享存储上</span><br><span class="line">    http://blog.oldboy.com/wp-content/uploads/2019/01/timg.jpg</span><br><span class="line"></span><br><span class="line">    [root@web02 ~]# cd /code/wordpress/wp-content</span><br><span class="line">    [root@web02 wp-content]# scp -r uploads/* root@172.16.1.31:/data/blog/</span><br><span class="line"></span><br><span class="line">    注意：需要上nfs服务器上进行重新的递归授权，否则会出现无法上传文件的错误</span><br><span class="line">    [root@nfs ~]# chown -R www.www /data/</span><br><span class="line"></span><br><span class="line">3.web01和web02分别都进行挂载，此时图片进行实现了共享</span><br><span class="line">    mount -t nfs 172.16.1.31:/data/blog  /code/wordpress/wp-content/uploads/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(三)LNMP介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/09-Nginx(%E4%B8%89)LNMP%E6%9E%B6%E6%9E%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、LNMP简介-需补充"><a href="#一、LNMP简介-需补充" class="headerlink" title="一、LNMP简介(需补充)"></a>一、LNMP简介(需补充)</h2><h3 id="1-1-什么是LNMP"><a href="#1-1-什么是LNMP" class="headerlink" title="1.1 什么是LNMP"></a>1.1 什么是LNMP</h3><h3 id="1-2-LNMP架构是如何工作的"><a href="#1-2-LNMP架构是如何工作的" class="headerlink" title="1.2 LNMP架构是如何工作的"></a>1.2 LNMP架构是如何工作的</h3><p>浏览器 –http–&gt; Nginx(fastcgi_pass) –fastcgi–&gt;php(fastcgi_fpm调动wrapper再调动php解析再调用mysql)</p>
<p>大致流程：</p>
<p>用户在浏览器发起请求，如果请求的是静态资源，Nginx则直接返回，如果请求的是动态资源，Nginx会通过fastcgi协议，将请求交给PHP服务器，再返回动态资源。</p>
<h3 id="1-3-LNMP和LAMP的区别是什么"><a href="#1-3-LNMP和LAMP的区别是什么" class="headerlink" title="1.3 LNMP和LAMP的区别是什么"></a>1.3 LNMP和LAMP的区别是什么</h3><p>nginx 是以fastcgi协议调用的php<br>apache是以模块的方式加载的php</p>
<h2 id="二、LNMP架构简单搭建"><a href="#二、LNMP架构简单搭建" class="headerlink" title="二、LNMP架构简单搭建"></a>二、LNMP架构简单搭建</h2><p>1、准备一台名为nginx的服务器</p>
<p>2、使用官方仓库安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加安装源</span></span><br><span class="line">[root@nginx ~]# cat /etc/yum.repos.d/nginx.repo </span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装Nginx</span></span><br><span class="line">[root@nginx ~]# yum install nginx -y</span><br></pre></td></tr></table></figure>

<p>3、安装php7.1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nginx ~]# yum remove php-mysql-5.4 php php-fpm php-common # 卸载默认5.4版本的php</span><br><span class="line">[root@nginx ~]# cat /etc/yum.repos.d/php.repo</span><br><span class="line">[php]</span><br><span class="line">name = php Repository</span><br><span class="line">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/</span><br><span class="line">gpgcheck = 0</span><br><span class="line"></span><br><span class="line">[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb</span><br></pre></td></tr></table></figure>

<p>4、安装maria数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nginx ~]# yum install mariadb-server mariadb -y</span><br></pre></td></tr></table></figure>

<p>5、配置nginx和php集成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cd /etc/nginx/conf.d/</span><br><span class="line">[root@web01 conf.d]# cat php.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name php.oldboy.com;</span><br><span class="line">	root /code;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.php index.html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">		include fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、重载nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>7、启动php-fpm，并加入开机自启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# systemctl start php-fpm</span><br><span class="line">[root@web01 conf.d]# systemctl enable  php-fpm</span><br></pre></td></tr></table></figure>

<p>8、准备一个php文件，测试nginx和php是否继承成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat /code/page.php</span><br><span class="line">&lt;?php</span><br><span class="line">	phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：网页访问:http://php.oldboy.com/page.php</span></span><br></pre></td></tr></table></figure>

<p>9、启动数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# systemctl start mariadb</span><br><span class="line">[root@web01 conf.d]# systemctl enable mariadb</span><br><span class="line">[root@web01 conf.d]# mysqladmin password &#x27;Bgx123.com&#x27;		#配置密码（默认mysql是空密码）</span><br><span class="line">[root@web01 conf.d]# mysql -uroot -pBgx123.com				#使用账号和密码登录mysql</span><br></pre></td></tr></table></figure>

<p>10、准备一个php文件，测试是否可以正常连接数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  $servername = &quot;localhost&quot;;</span><br><span class="line">  $username = &quot;root&quot;;</span><br><span class="line">  $password = &quot;Bgx123.com&quot;;</span><br><span class="line"></span><br><span class="line">  // 创建连接</span><br><span class="line">  $conn = mysqli_connect($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">  // 检测连接</span><br><span class="line">  if (!$conn) &#123;</span><br><span class="line">      die(&quot;Connection failed: &quot; . mysqli_connect_error()); // 注意格式</span><br><span class="line">  &#125;</span><br><span class="line">  echo &quot;php连接MySQL数据库成功&quot;;</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、案例-搭建wordpress博客"><a href="#三、案例-搭建wordpress博客" class="headerlink" title="三、案例-搭建wordpress博客"></a>三、案例-搭建wordpress博客</h2><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><table>
<thead>
<tr>
<th>用途</th>
<th>公网IP地址</th>
<th>内网IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>web服务器01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
</tbody></table>
<h3 id="3-2-部署安装"><a href="#3-2-部署安装" class="headerlink" title="3.2 部署安装"></a>3.2 部署安装</h3><p>1、添加nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat blog.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name blog.oldboy.com;</span><br><span class="line">	root /code/wordpress;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.php index.html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">		include fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、根据nginx中定义的内容，创建站点目录并进行授权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# mkdir /code</span><br><span class="line">[root@web01 conf.d]# cd /code</span><br><span class="line">[root@web01 code]# wget https://cn.wordpress.org/wordpress-5.0.3-zh_CN.tar.gz</span><br><span class="line">[root@web01 code]# tar xf wordpress-5.0.3-zh_CN.tar.gz</span><br></pre></td></tr></table></figure>

<p>3、修改nginx与php-fpm的运行用户为www，并授权代码属主和属组都为www</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：如果没有该用户，启动一定会报错</span></span><br><span class="line">[root@web01 code]# groupadd -g 666 www</span><br><span class="line">[root@web01 code]# useradd -u666 -g666 www</span><br><span class="line"></span><br><span class="line">修改nginx与php-fpm管理进程，的运行身份为www</span><br><span class="line">[root@web01 code]# sed -i &#x27;/^user /c user  www;&#x27; /etc/nginx/nginx.conf</span><br><span class="line">[root@web01 code]# sed -i &#x27;/^user/c user = www&#x27; /etc/php-fpm.d/www.conf </span><br><span class="line">[root@web01 code]# sed -i &#x27;/^group/c group = www&#x27; /etc/php-fpm.d/www.conf </span><br><span class="line"></span><br><span class="line">一定要重启才生效</span><br><span class="line">[root@web01 code]# systemctl restart nginx</span><br><span class="line">[root@web01 code]# systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line">最后授权代码为www</span><br><span class="line">[root@web01 code]# chown -R www.www /code/wordpress	</span><br></pre></td></tr></table></figure>

<p>4、创建数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database wordpress;			#创建一个库，名称叫wordpress</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;						#查询该台数据库服务有多少个库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">| wordpress          |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5、解决nginx上传文件大小限制（默认1M，超过大小会报413）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在wordpress的nginx配置文件中添加：client_max_body_size 100m;</span><br><span class="line">[root@web01 code]# cat /etc/nginx/conf.d/blog.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name blog.oldboy.com;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        client_max_body_size 100m;  # 默认1M，超过大小会报413</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                index index.php index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">重启nginx：systemctl restart nginx	</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试在wordpress页面上传主题或者写文章上传图片，均出现500报错<br>查看日志文件&#x2F;var&#x2F;log&#x2F;nginx&#x2F;err.log<br>2021&#x2F;08&#x2F;16 18:59:31 [crit] 1228#1228: *2 open() “&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body&#x2F;0000000001” failed (13: Permission denied), client: 10.0.0.1, server: php.gs.com, request: “POST &#x2F;wp-admin&#x2F;update.php?action&#x3D;upload-theme HTTP&#x2F;1.1”, host: “php.gs.com”, referrer: “<a href="http://php.gs.com/wp-admin/theme-install.php?browse=popular&quot;">http://php.gs.com/wp-admin/theme-install.php?browse=popular&quot;</a><br>解决方法，参考<a href="https://blog.csdn.net/qq_15941409/article/details/114640122">https://blog.csdn.net/qq_15941409/article/details/114640122</a><br>chown www:www -R &#x2F;var&#x2F;lib&#x2F;nginx&#x2F;</p>
</blockquote>
<h2 id="四、案例-搭建wecenter知乎"><a href="#四、案例-搭建wecenter知乎" class="headerlink" title="四、案例-搭建wecenter知乎"></a>四、案例-搭建wecenter知乎</h2><h3 id="4-1-部署安装"><a href="#4-1-部署安装" class="headerlink" title="4.1 部署安装"></a>4.1 部署安装</h3><p>1、添加nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name zh.oldboy.com;</span><br><span class="line">	root /code/zh;</span><br><span class="line">	client_max_body_size 100m;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.php index.html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">		include fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@web01 code]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>2、wencenter部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# rz -E WeCenter_3-2-1.zip</span><br><span class="line">[root@web01 code]# unzip WeCenter_3-2-1.zip</span><br><span class="line">[root@web01 code]# mv WeCenter_3-2-1 zh</span><br><span class="line">[root@web01 code]# chown -R www.www zh/</span><br></pre></td></tr></table></figure>

<p>3、配置数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# mysql -uroot -pBgx123.com</span><br><span class="line">MariaDB [(none)]&gt; create database zh;</span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">| wordpress          |</span><br><span class="line">| zh                 |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="五、案例-搭建edusoho在线视频教育"><a href="#五、案例-搭建edusoho在线视频教育" class="headerlink" title="五、案例-搭建edusoho在线视频教育"></a>五、案例-搭建edusoho在线视频教育</h2><h3 id="5-1-部署安装"><a href="#5-1-部署安装" class="headerlink" title="5.1 部署安装"></a>5.1 部署安装</h3><p>1、添加nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# cat /etc/nginx/conf.d/edu.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name edu.oldboy.com;</span><br><span class="line">    root /code/edusoho/web;</span><br><span class="line">    client_max_body_size 200m;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index app.php;</span><br><span class="line">        try_files $uri @rewriteapp;</span><br><span class="line">    &#125;</span><br><span class="line">    location @rewriteapp &#123;</span><br><span class="line">        rewrite ^(.*)$ /app.php/$1 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/udisk &#123;</span><br><span class="line">        internal;</span><br><span class="line">        root /code/edusoho/app/data/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/(app|app_dev)\.php(/|$) &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">        fastcgi_param HTTP_X-Sendfile-Type X-Accel-Redirect;</span><br><span class="line">        fastcgi_param HTTP_X-Accel-Mapping /udisk=/code/edusoho/app/data/udisk;</span><br><span class="line">        fastcgi_buffer_size 128k;</span><br><span class="line">        fastcgi_buffers 8 128k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置设置图片格式文件</span><br><span class="line">    location ~* \.(jpg|jpeg|gif|png|ico|swf)$ &#123;</span><br><span class="line">        # 过期时间为3年</span><br><span class="line">        expires 3y;</span><br><span class="line">        # 关闭日志记录</span><br><span class="line">        access_log off;</span><br><span class="line">        # 关闭gzip压缩，减少CPU消耗，因为图片的压缩率不高。</span><br><span class="line">        gzip off;</span><br><span class="line">    &#125;</span><br><span class="line">    # 配置css/js文件</span><br><span class="line">    location ~* \.(css|js)$ &#123;</span><br><span class="line">        access_log off;</span><br><span class="line">        expires 3y;</span><br><span class="line">    &#125;</span><br><span class="line">    # 禁止用户上传目录下所有.php文件的访问，提高安全性</span><br><span class="line">    location ~ ^/files/.*\.(php|php5)$ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 以下配置允许运行.php的程序，方便于其他第三方系统的集成。</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、下载edusoho,并授权文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.edusoho.com/edusoho-8.2.17.tar.gz</span><br><span class="line">tar xf edusoho-8.2.17.tar.gz</span><br><span class="line">chown -R www.www edusoho</span><br></pre></td></tr></table></figure>

<p>3、调整php的上传大小(上传文件默认有限制大小)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# vim /etc/php.ini</span><br><span class="line">post_max_size = 200M</span><br><span class="line">upload_max_filesize = 200M</span><br><span class="line">[root@web01 code]# systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<h2 id="六、各开源项目网站"><a href="#六、各开源项目网站" class="headerlink" title="六、各开源项目网站"></a>六、各开源项目网站</h2><p>phpmyadmin	<a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a><br>zblog	<a href="https://www.zblogcn.com/">https://www.zblogcn.com/</a><br>wordpress	<a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a><br>wecenter	<a href="http://www.wecenter.com/downloads/">http://www.wecenter.com/downloads/</a><br>edusohu	<a href="http://www.edusoho.com/open/show">http://www.edusoho.com/open/show</a></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(二)常用官方模块</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/08-Nginx(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E5%AE%98%E6%96%B9%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>本篇主要介绍Nginx的常用官方模块</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="一、目录索引-autoindex"><a href="#一、目录索引-autoindex" class="headerlink" title="一、目录索引-autoindex"></a>一、目录索引-autoindex</h2><h3 id="1-1-使用方法1"><a href="#1-1-使用方法1" class="headerlink" title="1.1 使用方法1"></a>1.1 使用方法1</h3><p>按此方法设置后，访问网页<a href="http://module.test.com将显示文件目录/">http://module.test.com将显示文件目录</a></p>
<p>实际目录位于: &#x2F;module</p>
<p>a.准备配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 module]# cat /etc/nginx/conf.d/autoindex.conf</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name module.test.com;</span><br><span class="line">	charset utf-8,gbk; # 解决中文乱码</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /module;</span><br><span class="line">		autoindex on;	# 开启目录索引</span><br><span class="line">		autoindex_exact_size off;	# 显示文件大小，默认为on显示字节，off显示大概单位</span><br><span class="line">		autoindex_localtime on;	# 默认off显示UTC时间，on显示本地时间</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b.准备对应的目录，并往目录中添加文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /module/&#123;centos,ubuntu,redhat&#125;/ -p</span><br></pre></td></tr></table></figure>

<p>c.检查语法并重新加载nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -t </span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h3 id="1-2-使用方法2（推荐）"><a href="#1-2-使用方法2（推荐）" class="headerlink" title="1.2 使用方法2（推荐）"></a>1.2 使用方法2（推荐）</h3><p>按此方法设置后，访问网页<a href="http://www.module.test.com/download%E5%B0%86%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95,%E4%B8%BB%E9%A1%B5%E5%8F%AF%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE">http://www.module.test.com/download将显示文件目录,主页可正常访问</a></p>
<p>实际目录位于：&#x2F;module&#x2F;download</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 module]# cat /etc/nginx/conf.d/autoindex.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name module.oldboy.com;</span><br><span class="line">	charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">	location / &#123;	# 主页可以正常访问</span><br><span class="line">		root /code;</span><br><span class="line">		index index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location /download &#123;	# 当访问http://xxxx/download则访问/module/download文件夹，显示目录索引</span><br><span class="line">		root /module; # 此时，访问的文件夹是/module/download</span><br><span class="line">		autoindex on;</span><br><span class="line">		autoindex_exact_size off;</span><br><span class="line">		autoindex_localtime on;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、-状态监控页面-stub-status"><a href="#二、-状态监控页面-stub-status" class="headerlink" title="二、 状态监控页面-stub_status"></a>二、 状态监控页面-stub_status</h2><blockquote>
<p>需要nginx附带–with-http_stub_status_module模块才能使用</p>
</blockquote>
<h3 id="2-1-使用方法"><a href="#2-1-使用方法" class="headerlink" title="2.1 使用方法"></a>2.1 使用方法</h3><p>a.设置配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在/etc/nginx/conf.d/autoindex.conf里面附加内容</span><br><span class="line">location /nginx_status &#123;</span><br><span class="line">	stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b.重启Nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重启nginx服务</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p>c.网页访问测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">访问:</span><br><span class="line">http://module.test.com/nginx_status</span><br><span class="line">网页显示：</span><br><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line">		3 			3 	33 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br></pre></td></tr></table></figure>

<p>d.通过选项关闭长连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意, 一次TCP的连接，可以发起多次http的请求, 如下参数可配置进行验证</span></span><br><span class="line">keepalive_timeout  0;   # 类似于关闭长连接</span><br><span class="line">keepalive_timeout  65;  # 65s没有活动则断开连接</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在/etc/nginx/conf.d/autoindex.conf里面的附加内容修改为</span><br><span class="line">location /nginx_status &#123;</span><br><span class="line">	stub_status;</span><br><span class="line">	keepalive_timeout  0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e.再次测试网页访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关闭长连接后的显示：</span><br><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 21 21 20 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 可见每次HTTP请求都要重新发起TCP连接</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-监控页面内容解释"><a href="#2-2-监控页面内容解释" class="headerlink" title="2.2 监控页面内容解释"></a>2.2 监控页面内容解释</h3><table>
<thead>
<tr>
<th>参数项</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Active connections</td>
<td>当前活动客户端连接数，包括Waiting等待连接数</td>
</tr>
<tr>
<td>accepts</td>
<td>已接受总的TCP连接数</td>
</tr>
<tr>
<td>handled</td>
<td>已处理总的TCP连接数</td>
</tr>
<tr>
<td>requests</td>
<td>客户端总的http请求数</td>
</tr>
<tr>
<td>Reading</td>
<td>当前nginx读取请求头的连接数</td>
</tr>
<tr>
<td>Writing</td>
<td>当前nginx将响应写回客户端的连接数</td>
</tr>
<tr>
<td>Waiting</td>
<td>当前等待请求的空闲客户端连接数</td>
</tr>
</tbody></table>
<h2 id="三、基于IP的访问控制"><a href="#三、基于IP的访问控制" class="headerlink" title="三、基于IP的访问控制"></a>三、基于IP的访问控制</h2><blockquote>
<p>某网页内的数据比较重要，怎么控制那些人可以访问，那些人不能访问呢？</p>
</blockquote>
<p>可以来源的IP地址做限制，常用的三种控制方法：</p>
<ul>
<li><p>拒绝10.0.0.1来源IP访问，其他人允许</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /nginx_status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    deny 10.0.0.1/32;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>允许10.0.0.1来源IP访问，其他人全部拒绝</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /nginx_status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 10.0.0.1/32;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实际配置监控Nginx状态时，仅允许该服务器的回环地址访问127.0.0.1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 最安全</span></span><br><span class="line">location /nginx_status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 127.0.0.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四、基于密码的身份验证"><a href="#四、基于密码的身份验证" class="headerlink" title="四、基于密码的身份验证"></a>四、基于密码的身份验证</h2><blockquote>
<p>重要数据网站，要实现需要用户名密码认证，怎么做呢？</p>
</blockquote>
<ol>
<li><p>生成一个密码文件，密码文件的格式  name:password(加密)  （建议使用htpasswd）  openssl password</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# yum install httpd-tools -y</span><br><span class="line">[root@web01 conf.d]# htpasswd -c -b /etc/nginx/auth_conf oldboy oldboy</span><br><span class="line">[root@web01 conf.d]# cat /etc/nginx/auth_conf</span><br><span class="line">oldboy:$apr1$Kp87VSae$658Nt5bm4iiblQkUvP7u61</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Nginx，限制对应的资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">	root /module;</span><br><span class="line">	autoindex on;</span><br><span class="line">	autoindex_exact_size off;</span><br><span class="line">	autoindex_localtime on;</span><br><span class="line">	</span><br><span class="line">	auth_basic &quot;Please Password!!!&quot;;</span><br><span class="line">	auth_basic_user_file /etc/nginx/auth_conf; </span><br><span class="line"><span class="meta">	#</span><span class="bash"> 注意认证文件路径，否则网页认证后会403，可是为什么放其他目录就不行？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="五、Nginx连接限制"><a href="#五、Nginx连接限制" class="headerlink" title="五、Nginx连接限制"></a>五、Nginx连接限制</h2><blockquote>
<p>网站请求数太多，不堪重负了，怎么保障部分用户能够正常访问</p>
</blockquote>
<h3 id="5-1-限制连接数"><a href="#5-1-限制连接数" class="headerlink" title="5.1 限制连接数"></a>5.1 限制连接数</h3><p><code>设置共享内存区域和给定键值的最大允许连接数。超过此限制时，服务器将返回错误以回复请求</code></p>
<ul>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> http标签段定义连接限制</span></span><br><span class="line">http&#123;</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=conn_zone:10m;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    # 同一时刻只允许一个客户端连接</span><br><span class="line">    limit_conn conn_zone 1; </span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ab工具进行压力测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用ab工具进行压力测试</span></span><br><span class="line">[root@xuliangwei ~]# yum install -y httpd-tools</span><br><span class="line">[root@xuliangwei ~]# ab -n 500 -c 2  http://127.0.0.1/index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可见500次中有失败的请求</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看拦截日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/nginx/error.log</span><br><span class="line">类似于</span><br><span class="line">2019/01/14 11:11:22 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.xuliangwei.com&quot;</span><br><span class="line">2019/01/14 11:11:23 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.xuliangwei.com&quot;</span><br><span class="line">2019/01/14 11:11:25 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.xuliangwei.com&quot;</span><br><span class="line">2019/01/14 11:11:25 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.xuliangwei.com&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2-限制请求数（更精准）"><a href="#5-2-限制请求数（更精准）" class="headerlink" title="5.2 限制请求数（更精准）"></a>5.2 限制请求数（更精准）</h3><p><code>设置共享内存区域和请求的最大突发大小。过多的请求被延迟，直到它们的数量超过最大突发大小，在这种情况下请求以错误终止。默认情况下，最大突发大小等于零。</code></p>
<ul>
<li><p>定义限制的Key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat test1.oldboy.com.conf </span><br><span class="line">limit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name test1.oldboy.com;</span><br><span class="line">	</span><br><span class="line">	limit_req zone=req_zone burst=5 nodelay;</span><br><span class="line">	limit_req_status 412;</span><br><span class="line">	error_page 412 /err.html;    #这个文件必须存在/code/test1/err.html</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /code/test1;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>填写hosts域名解析 （测试：域名访问才有效果，直接访问没效果）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;10.0.0.7 test1.oldboy.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>
</li>
<li><p>压力测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -n 50 -c 20 http://test1.oldboy.com/index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看错误日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2019/01/14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.737 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;test1.oldboy.com&quot;</span><br><span class="line">2019/01/14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.611 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;test1.oldboy.com&quot;</span><br><span class="line">2019/01/14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.450 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET / HTTP/1.1&quot;, host: &quot;test1.oldboy.com&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="六、Nginx匹配符和优先级"><a href="#六、Nginx匹配符和优先级" class="headerlink" title="六、Nginx匹配符和优先级"></a>六、Nginx匹配符和优先级</h2><p>Location语法示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location [=|^~|~|~*|!~|!~*|/] /uri/ &#123; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配优先级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">匹配符	匹配规则						优先级</span><br><span class="line">=		精确匹配						1 	用到</span><br><span class="line">^~		以某个字符串开头				2</span><br><span class="line">~		区分大小写的正则匹配			3	常用</span><br><span class="line">~*		不区分大小写的正则匹配			4</span><br><span class="line">!~		区分大小写不匹配的正则			5</span><br><span class="line">!~*		不区分大小写不匹配的正则		6</span><br><span class="line">/		通用匹配，任何请求都会匹配到	7	常用</span><br></pre></td></tr></table></figure>

<h3 id="6-1-匹配案例"><a href="#6-1-匹配案例" class="headerlink" title="6.1 匹配案例"></a>6.1 匹配案例</h3><blockquote>
<p>参考网站：<a href="https://blog.csdn.net/qq_41980405/article/details/111402208">https://blog.csdn.net/qq_41980405/article/details/111402208</a></p>
</blockquote>
<ul>
<li><p>通用匹配，任何请求都会匹配到</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>严格区分大小写，匹配以.php结尾的都走这个location    </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>严格区分大小写，匹配以.jsp结尾的都走这个location </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不区分大小写匹配，只要用户访问.jpg,gif,png,js,css 都走这条location</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* .*\.(jpg|gif|png|js|css|mp4)$</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不区分大小写匹配</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* &quot;\.(sql|bak|tgz|tar.gz|.git)$&quot;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(一)安装与配置</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/07-Nginx(%E4%B8%80)%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h2><p>参考网站：<a href="https://zhuanlan.zhihu.com/p/266153320">https://zhuanlan.zhihu.com/p/266153320</a></p>
<h2 id="二、Nginx安装"><a href="#二、Nginx安装" class="headerlink" title="二、Nginx安装"></a>二、Nginx安装</h2><p>​	nginx有两种安装方式，yum安装和源码编译安装</p>
<h3 id="2-1-yum安装（epel源）"><a href="#2-1-yum安装（epel源）" class="headerlink" title="2.1 yum安装（epel源）"></a>2.1 yum安装（epel源）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure>

<h3 id="2-2-编译安装"><a href="#2-2-编译安装" class="headerlink" title="2.2 编译安装"></a>2.2 编译安装</h3><p>查看yum安装的nginx的编译参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# nginx -V</span><br><span class="line">nginx version: nginx/1.20.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.1.1g FIPS  21 Apr 2020</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --with-cc-opt=&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27; --with-ld-opt=&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span><br></pre></td></tr></table></figure>

<p>源码获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>构建与编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压源码文件并进入文件夹内</span></span><br><span class="line">tar -vxf nginx-1.20.1.tar.gz &amp;&amp; cd nginx-1.20.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configure构建</span></span><br><span class="line">./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --with-cc-opt=&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27; --with-ld-opt=&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译并安装</span></span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>错误解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 错误1：</span></span><br><span class="line">./configure: error: the invalid value in --with-ld-opt=&quot;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&quot;</span><br><span class="line">解决方法：</span><br><span class="line">yum -y install redhat-rpm-config.noarch</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误2：</span></span><br><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br><span class="line">解决方法：</span><br><span class="line">yum install pcre-devel -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误3：</span></span><br><span class="line">./configure: error: SSL modules require the OpenSSL library.</span><br><span class="line">You can either do not enable the modules, or install the OpenSSL library</span><br><span class="line">into the system, or build the OpenSSL library statically from the source</span><br><span class="line">with nginx by using --with-openssl=&lt;path&gt; option.</span><br><span class="line">解决方法：</span><br><span class="line">yum install openssl openssl-devel -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误4：</span></span><br><span class="line">./configure: error: the HTTP XSLT module requires the libxml2/libxslt</span><br><span class="line">libraries. You can either do not enable the module or install the libraries.</span><br><span class="line">解决方法：</span><br><span class="line">yum install libxml2 libxml2-devel libxslt  libxslt-devel -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误5：</span></span><br><span class="line">./configure: error: the HTTP image filter module requires the GD library.</span><br><span class="line">You can either do not enable the module or install the libraries.</span><br><span class="line">解决方法：</span><br><span class="line">yum -y install gd-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误6：</span></span><br><span class="line">./configure: error: perl module ExtUtils::Embed is required</span><br><span class="line"></span><br><span class="line">解决方法： </span><br><span class="line">yum -y install perl-devel perl-ExtUtils-Embed</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误7：</span></span><br><span class="line">./configure: error: the Google perftools module requires the Google perftools library</span><br><span class="line">解决方法：</span><br><span class="line">yum install gperftools-devel.x86_64 gperftools-libs.x86_64 gperftools.x86_64 -y</span><br></pre></td></tr></table></figure>

<h3 id="2-3-启动和停止服务"><a href="#2-3-启动和停止服务" class="headerlink" title="2.3 启动和停止服务"></a>2.3 启动和停止服务</h3><p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先关闭httpd服务，防止冲突</span></span><br><span class="line">[root@web01 ~]# systemctl stop httpd</span><br><span class="line">[root@web01 ~]# systemctl disable httpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再启动nginx服务</span></span><br><span class="line">[root@web01 ~]# systemctl enable nginx</span><br><span class="line">[root@web01 html]# systemctl start nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 另一种启动方式</span></span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<p>停止服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">nginx -s stop </span><br></pre></td></tr></table></figure>

<p>重启&#x2F;重载服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart/reload nginx</span><br><span class="line">nginx -s restart/reload </span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：重载reload和重启restart的差别</p>
<p>reload将会等服务进程执行完再重启，而restart则是强制重启</p>
</blockquote>
<h2 id="三、Nginx目录结构说明"><a href="#三、Nginx目录结构说明" class="headerlink" title="三、Nginx目录结构说明"></a>三、Nginx目录结构说明</h2><p>查看nginx的目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 html]# rpm -ql nginx</span><br></pre></td></tr></table></figure>

<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/137262519">https://zhuanlan.zhihu.com/p/137262519</a></p>
<h2 id="四、Nginx配置文件说明"><a href="#四、Nginx配置文件说明" class="headerlink" title="四、Nginx配置文件说明"></a>四、Nginx配置文件说明</h2><blockquote>
<p>http server location扩展了解项<br>http{}层下允许有多个Server{}层，一个Server{}层下又允许有多个Location<br>http{} 标签主要用来解决用户的请求与响应。<br>server{} 标签主要用来响应具体的某一个网站。<br>location{} 标签主要用于匹配网站具体URL路径。</p>
</blockquote>
<p>主配置文件说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 html]# cat /etc/nginx/nginx.conf</span><br><span class="line">---核心模块---</span><br><span class="line">user nginx;	#nginx进程运行的用户</span><br><span class="line">worker_processes auto;	#nginx工作的进程数量</span><br><span class="line">error_log /var/log/nginx/error.log;	#nginx的错误日志【警告及其警告以上的都记录】</span><br><span class="line">pid /run/nginx.pid;	#nginx进程运行后的进程id</span><br><span class="line">---核心模块---</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">---事件模块---</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024; # 一个work进程的最大连接数</span><br><span class="line">    use epool;				 #使用epool网络模型</span><br><span class="line">&#125;</span><br><span class="line">---事件模块---</span><br><span class="line"></span><br><span class="line">---http核心层模块---</span><br><span class="line">http &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 日志格式定义</span></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;	# 访问日志</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;	# 长连接超时时间</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line">    #gzip on;			#是否开启压缩功能			</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;	# 包含哪个目录下面的*.conf文件，用于写server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;	# 监听端口</span><br><span class="line">        listen       [::]:80;</span><br><span class="line">        server_name  _;		# 域名</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">		#</span><span class="bash">charset koi8-r;			<span class="comment">#字符集</span></span></span><br><span class="line"></span><br><span class="line">		location / &#123;	 			#位置</span><br><span class="line">			root   /usr/share/nginx/html;	#代码的主文件位置</span><br><span class="line">			index  index.html index.htm;	#服务端默认返回给用户的文件</span><br><span class="line">		&#125;</span><br><span class="line">		location /test &#123;	 			#位置</span><br><span class="line">			root   /code/test/123/;	#代码的主文件位置</span><br><span class="line">			index  index.html index.htm;	#服务端默认返回给用户的文件</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---http核心层模块---</span><br></pre></td></tr></table></figure>

<h2 id="五、案例：搭建web网站"><a href="#五、案例：搭建web网站" class="headerlink" title="五、案例：搭建web网站"></a>五、案例：搭建web网站</h2><p>准备配置文件ds</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# cat /etc/nginx/conf.d/game.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name game.oldboy.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /code;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照配置文件创建文件夹并放入html项目文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /code</span><br><span class="line">cp html5.zip /code</span><br><span class="line">cd /code</span><br><span class="line">unzip html5.zip</span><br><span class="line"></span><br><span class="line">[root@web01 code]# ls</span><br><span class="line">ceshi  game  html5.zip  img  index.html  __MACOSX  readme.txt</span><br></pre></td></tr></table></figure>

<p>重启nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p>通过物理机浏览器浏览</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改hosts文件</span></span><br><span class="line">10.0.0.7 game.oldboy.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 网页访问</span></span><br><span class="line">game.oldboy.com</span><br></pre></td></tr></table></figure>

<h2 id="六、Nginx虚拟主机"><a href="#六、Nginx虚拟主机" class="headerlink" title="六、Nginx虚拟主机"></a>六、Nginx虚拟主机</h2><p>Nginx配置虚拟主机有如下三种方式：</p>
<ul>
<li>单主机多IP</li>
<li>单主机多端口</li>
<li>单主机多域名</li>
</ul>
<h3 id="6-1-基于主机多IP方式-不常用"><a href="#6-1-基于主机多IP方式-不常用" class="headerlink" title="6.1 基于主机多IP方式(不常用)"></a>6.1 基于主机多IP方式(不常用)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat ip.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 10.0.0.7:80;</span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /code_ip_eth0;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 172.16.1.7:80;</span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /code_ip_eth1;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.根据配置创建目录</span><br><span class="line">[root@web01 conf.d]# mkdir /code_ip_eth0</span><br><span class="line">[root@web01 conf.d]# echo &quot;Eth0&quot; &gt; /code_ip_eth0/index.html</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]# mkdir /code_ip_eth1</span><br><span class="line">[root@web01 conf.d]# echo &quot;Eth1&quot; &gt; /code_ip_eth1/index.html</span><br><span class="line"></span><br><span class="line">3.重启nginx服务</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br><span class="line"></span><br><span class="line">4.使用curl命令测试</span><br><span class="line">[root@web01 ~]# curl 172.16.1.7</span><br><span class="line">Eth1</span><br><span class="line">[root@web01 ~]# curl 10.0.0.7</span><br><span class="line">Eth0</span><br></pre></td></tr></table></figure>

<h3 id="6-2-基于主机多端口方式（多用于内部测试）"><a href="#6-2-基于主机多端口方式（多用于内部测试）" class="headerlink" title="6.2 基于主机多端口方式（多用于内部测试）"></a>6.2 基于主机多端口方式（多用于内部测试）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.配置多端口的虚拟主机</span><br><span class="line">[root@web01 conf.d]# vim port.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 81;</span><br><span class="line">        </span><br><span class="line">        location / &#123; </span><br><span class="line">                root /code_81;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 82;</span><br><span class="line">        </span><br><span class="line">        location / &#123; </span><br><span class="line">                root /code_82;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;		</span><br><span class="line"></span><br><span class="line">2.根据配置文件创建所需的目录</span><br><span class="line">[root@web01 conf.d]# mkdir /code_8&#123;1..2&#125;</span><br><span class="line">[root@web01 conf.d]# echo &quot;81&quot; &gt; /code_81/index.html</span><br><span class="line">[root@web01 conf.d]# echo &quot;82&quot; &gt; /code_82/index.html</span><br><span class="line"></span><br><span class="line">3.检查语法并重启服务</span><br><span class="line">[root@web01 conf.d]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.如何去访问</span><br><span class="line">	http://10.0.0.7:82/</span><br></pre></td></tr></table></figure>

<h3 id="6-3-基于主机多域名方式（常用）"><a href="#6-3-基于主机多域名方式（常用）" class="headerlink" title="6.3 基于主机多域名方式（常用）"></a>6.3 基于主机多域名方式（常用）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.准备多虚拟主机配置文件</span><br><span class="line">[root@web01 conf.d]# cat test1.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name test1.oldboy.com;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /code/test1;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]# cat test2.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name test2.oldboy.com;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /code/test2;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.根据配置文件创建对应的目录</span><br><span class="line">[root@web01 conf.d]# mkdir /code/test&#123;1..2&#125; -p</span><br><span class="line">[root@web01 conf.d]# echo &quot;test1_server&quot; &gt; /code/test1/index.html</span><br><span class="line">[root@web01 conf.d]# echo &quot;test2_server&quot; &gt; /code/test2/index.html</span><br><span class="line">[root@web01 conf.d]# nginx -t</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br><span class="line"></span><br><span class="line">3.配置域名解析</span><br><span class="line">10.0.0.7      test1.oldboy.com</span><br><span class="line">10.0.0.7      test2.oldboy.com</span><br><span class="line"></span><br><span class="line">4.通过浏览器访问该网站</span><br></pre></td></tr></table></figure>

<h2 id="七、日志与错误排查"><a href="#七、日志与错误排查" class="headerlink" title="七、日志与错误排查"></a>七、日志与错误排查</h2><h3 id="7-1-nginx配置文件自查"><a href="#7-1-nginx配置文件自查" class="headerlink" title="7.1 nginx配置文件自查"></a>7.1 nginx配置文件自查</h3><p>1.修改完配置记得检查语法</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span></span><br></pre></td></tr></table></figure>

<p>2.如果没有检查语法，直接重载导致报错，可查看错误信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status nginx -l </span><br></pre></td></tr></table></figure>

<h3 id="7-2-访问日志"><a href="#7-2-访问日志" class="headerlink" title="7.2 访问日志"></a>7.2 访问日志</h3><p>可以为server和location单独设置访问日志（<em><strong>涉及日志作用域</strong></em>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name code.oldboy.com;</span><br><span class="line">    </span><br><span class="line">    # 将当前的server网站的访问日志记录至对应的目录，使用main格式</span><br><span class="line">    access_log /var/log/nginx/code.oldboy.com.log main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    # 当有人请求改favicon.ico时，不记录日志</span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        access_log off;  # off 关闭</span><br><span class="line">        return 200;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问日志参数详解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>变量名称</strong></th>
<th><strong>变量描述</strong></th>
<th><strong>举例说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>客户端地址</td>
<td>113.140.15.90</td>
</tr>
<tr>
<td>$remote_user</td>
<td>客户端用户名称</td>
<td>–</td>
</tr>
<tr>
<td>$time_local</td>
<td>访问时间和时区</td>
<td>18&#x2F;Jul&#x2F;2012:17:00:01 +0800</td>
</tr>
<tr>
<td>$request</td>
<td>请求的URI和HTTP协议</td>
<td>“GET &#x2F;pa&#x2F;img&#x2F;home&#x2F;logo-alipay-t.png HTTP&#x2F;1.1″</td>
</tr>
<tr>
<td>$http_host</td>
<td>请求地址，即浏览器中你输入的地址（IP或域名）</td>
<td>img.alipay.com10.253.70.103</td>
</tr>
<tr>
<td>$status</td>
<td>HTTP请求状态</td>
<td>200</td>
</tr>
<tr>
<td>$upstream_status</td>
<td>upstream状态</td>
<td>200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>发送给客户端文件内容大小</td>
<td>547</td>
</tr>
<tr>
<td>$http_referer</td>
<td>跳转来源</td>
<td>“<a href="https://cashier.alip/">https://cashier.alip</a>ay.com…&#x2F;”</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>用户终端代理</td>
<td>“Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; SV1; GTB7.0; .NET4.0C;</td>
</tr>
<tr>
<td>$ssl_protocol</td>
<td>SSL协议版本</td>
<td>TLSv1</td>
</tr>
<tr>
<td>$ssl_cipher</td>
<td>交换数据中的算法</td>
<td>RC4-SHA</td>
</tr>
<tr>
<td>$upstream_addr</td>
<td>后台upstream的地址，即真正提供服务的主机地址</td>
<td>10.228.35.247:80</td>
</tr>
<tr>
<td>$request_time</td>
<td>整个请求的总时间</td>
<td>0.205</td>
</tr>
<tr>
<td>$upstream_response_time</td>
<td>请求过程中，upstream响应时间</td>
<td>0.002</td>
</tr>
</tbody></table>
<h3 id="7-3-错误日志"><a href="#7-3-错误日志" class="headerlink" title="7.3 错误日志"></a>7.3 错误日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>

<h3 id="7-4-日志切割logrotate"><a href="#7-4-日志切割logrotate" class="headerlink" title="7.4 日志切割logrotate"></a>7.4 日志切割logrotate</h3><p>配置文件，一般不需要修改，默认就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 logrotate.d]# cat /etc/logrotate.d/nginx</span><br><span class="line">/var/log/nginx/*.log &#123;</span><br><span class="line">    create 0640 nginx root	 	</span><br><span class="line">    daily	# 每天切割日志</span><br><span class="line">    rotate 10</span><br><span class="line">    missingok	# 日志丢失忽略</span><br><span class="line">    notifempty</span><br><span class="line">    compress	# 日志文件压缩</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        /bin/kill -USR1 `cat /run/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(五)代理介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/11-Nginx(%E4%BA%94)Nginx%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、什么是代理"><a href="#一、什么是代理" class="headerlink" title="一、什么是代理"></a>一、什么是代理</h2><h3 id="1-1-正向代理和反向代理的区别"><a href="#1-1-正向代理和反向代理的区别" class="headerlink" title="1.1 正向代理和反向代理的区别"></a>1.1 正向代理和反向代理的区别</h3><p>区别在于形式上服务的”对象”不一样<br>    正向代理代理的对象是客户端，为客户端服务   PC电脑<br>    反向代理代理的对象是服务端，为服务端服务	服务器</p>
<h3 id="1-2-Nginx反向代理模式配置模块"><a href="#1-2-Nginx反向代理模式配置模块" class="headerlink" title="1.2 Nginx反向代理模式配置模块"></a>1.2 Nginx反向代理模式配置模块</h3><p>反向代理模式				Nginx配置模块<br>http、websocket、https		ngx_http_proxy_module<br>fastcgi						ngx_http_fastcgi_module<br>uwsgi						ngx_http_uwsgi_module<br>grpc						ngx_http_v2_module</p>
<h2 id="二、Nginx代理配置"><a href="#二、Nginx代理配置" class="headerlink" title="二、Nginx代理配置"></a>二、Nginx代理配置</h2><h3 id="2-1-测试环境准备"><a href="#2-1-测试环境准备" class="headerlink" title="2.1 测试环境准备"></a>2.1 测试环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>lb01</td>
<td>nginx（提供代理服务）</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td>10.0.0.51</td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="2-2-Nginx代理配置步骤"><a href="#2-2-Nginx代理配置步骤" class="headerlink" title="2.2 Nginx代理配置步骤"></a>2.2 Nginx代理配置步骤</h3><p>1、<code>web01</code>-配置后端的web</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat web.oldboy.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name web.oldboy.com;</span><br><span class="line">	root /web;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.php index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建文件夹和网页文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# mkdir /web</span><br><span class="line">[root@web01 conf.d]# echo &quot;Web01.....&quot; &gt; /web/index.html</span><br></pre></td></tr></table></figure>

<p>3、重启nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# nginx -t</span><br><span class="line">sysnginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">t[root@web01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>4、<code>lb01</code>-nginx代理配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# cat proxy_web.conf</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name web.oldboy.com;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://10.0.0.7:80;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 设置header将域名传过去</span></span><br><span class="line">		proxy_set_header Host $http_host; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、重启Nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>6、客户机设置hosts，并测试访问网页，可以正常显示web01页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10.0.0.5 web.oldboy.com</span><br></pre></td></tr></table></figure>

<p><img src="/img/image-20210820101740471.png" alt="image-20210820101740471"></p>
<h2 id="三、代理流程分析"><a href="#三、代理流程分析" class="headerlink" title="三、代理流程分析"></a>三、代理流程分析</h2><p>1、走10网关，wireshark的抓包截图如下</p>
<p><img src="/img/image-20210820102735419.png" alt="image-20210820102735419"></p>
<p>2、流程图</p>
<p><img src="/img/image-20210820103041679.png" alt="image-20210820103041679"></p>
<p>3、测试，关掉web01的公网ip网口(10.0.0.7)，再尝试访问，也可以正常访问到web01的网页</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# cat /etc/nginx/conf.d/proxy_web.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  web.oldboy.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://172.16.1.7:80;</span><br><span class="line">                include /etc/nginx/proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、抓包分析</p>
<p>因为172网段走的虚拟机内部网络，抓不到</p>
<p><img src="/img/image-20210820111454152.png" alt="image-20210820111454152"></p>
<h2 id="三、Nginx代理常用参数"><a href="#三、Nginx代理常用参数" class="headerlink" title="三、Nginx代理常用参数"></a>三、Nginx代理常用参数</h2><h3 id="3-1-常用参数解释"><a href="#3-1-常用参数解释" class="headerlink" title="3.1 常用参数解释"></a>3.1 常用参数解释</h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>proxy_pass <a href="http://10.0.0.7/">http://10.0.0.7:80</a>;</td>
<td></td>
</tr>
<tr>
<td>proxy_http_version 1.1;</td>
<td>代理向后端请求使用的版本</td>
</tr>
<tr>
<td>proxy_set_header Host $http_host;</td>
<td>代理向后端请求携带的域名</td>
</tr>
<tr>
<td>proxy_set_header X-Real-IP $remote_addr;</td>
<td><font color="blue">用于获取客户端真实IP（不如x-forward）</font></td>
</tr>
<tr>
<td>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</td>
<td><font color="blue">获取客户端真实IP及全链路IP</font></td>
</tr>
<tr>
<td>proxy_connect_timeout 30;</td>
<td>代理接连后端超时时间</td>
</tr>
<tr>
<td>proxy_send_timeout 60;</td>
<td>后端传递数据至代理的超时时间</td>
</tr>
<tr>
<td>proxy_read_timeout 60;</td>
<td>后端相应代理的超时时间</td>
</tr>
<tr>
<td>proxy_buffering on;</td>
<td>是否开启proxy的buffer功能</td>
</tr>
<tr>
<td>proxy_buffer_size 32k;</td>
<td>设置buffer大小</td>
</tr>
<tr>
<td>proxy_buffers 4 128k;</td>
<td>设置存储被代理服务器上的数据所占用的buffer的个数和每个buffer的大小</td>
</tr>
</tbody></table>
<p>X-Forwarded-For可以nginx的日志查看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<h3 id="3-2-参数多的时候如何配置"><a href="#3-2-参数多的时候如何配置" class="headerlink" title="3.2 参数多的时候如何配置"></a>3.2 参数多的时候如何配置</h3><blockquote>
<p>可将参数写到一个文件中，然后在nginx配置文件里include包含进去</p>
</blockquote>
<p>1、创建包含参数的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# cat /etc/nginx/proxy_params</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line"></span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 128k;</span><br></pre></td></tr></table></figure>

<p>2、在配置文件中导入，方便后续多个location使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    include proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(六)七层负载均衡</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/12-Nginx(%E5%85%AD)Nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="一、七层负载均衡简介-需补充"><a href="#一、七层负载均衡简介-需补充" class="headerlink" title="一、七层负载均衡简介(需补充)"></a>一、七层负载均衡简介(需补充)</h2><h3 id="1-1-nginx代理的局限性"><a href="#1-1-nginx代理的局限性" class="headerlink" title="1.1 nginx代理的局限性"></a>1.1 nginx代理的局限性</h3><p>​	一个location仅能代理后端一台主机</p>
<h3 id="1-2-七层负载均衡"><a href="#1-2-七层负载均衡" class="headerlink" title="1.2 七层负载均衡"></a>1.2 七层负载均衡</h3><p>Nginx负载均衡<br>    负载<br>    负载均衡<br>    调度<br>    load balance<br>    LB<br>公有云<br>    SLB		阿里云负载均衡<br>    QLB		青云负载均衡<br>    CLB		腾讯负载均衡<br>    ULB		ucloud的负载均衡</p>
<h3 id="1-3-四层负载均衡和七层负载均衡的区别"><a href="#1-3-四层负载均衡和七层负载均衡的区别" class="headerlink" title="1.3 四层负载均衡和七层负载均衡的区别"></a>1.3 四层负载均衡和七层负载均衡的区别</h3><p>四层负载均衡数据包在底层就进行了分发，而七层负载均衡数据包则是在最顶层进行分发、由此可以看出，七层负载均衡效率没有四负载均衡高。<br>但七层负载均衡更贴近于服务，如:http协议就是七层协议，我们可以用Nginx可以作会话保持，URL路径规则匹配、head头改写等等，这些是四层负载均衡无法实现的。</p>
<h2 id="二、配置实例"><a href="#二、配置实例" class="headerlink" title="二、配置实例"></a>二、配置实例</h2><h3 id="2-1-测试环境准备"><a href="#2-1-测试环境准备" class="headerlink" title="2.1 测试环境准备"></a>2.1 测试环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
</tr>
<tr>
<td>lb01</td>
<td>nginx（提供代理服务）</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td>10.0.0.51</td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="2-2-配置步骤"><a href="#2-2-配置步骤" class="headerlink" title="2.2 配置步骤"></a>2.2 配置步骤</h3><p>1、web01&#x2F;02的网页服务搭建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# cd /etc/nginx/conf.d/</span><br><span class="line">[root@web01 conf.d]# cat node.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name node.oldboy.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /node;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@web01 conf.d]# mkdir /node</span><br><span class="line">[root@web01 conf.d]# echo &quot;Web01...&quot; &gt; /node/index.html</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>2、配置nginx负载均衡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# cd /etc/nginx/conf.d/</span><br><span class="line">[root@lb01 conf.d]# cat node_proxy.conf </span><br><span class="line">upstream node &#123;</span><br><span class="line">    server 172.16.1.7:80;</span><br><span class="line">    server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name node.oldboy.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://node;</span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@lb01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>3、客户端网页测试访问，F5刷新，可见web01&#x2F;web02在循环</p>
<p><img src="/img/image-20210820132420586.png" alt="image-20210820132420586"></p>
<p><img src="/img/image-20210820132431971.png" alt="image-20210820132431971"></p>
<h3 id="2-3-负载均衡也可以使用代理参数"><a href="#2-3-负载均衡也可以使用代理参数" class="headerlink" title="2.3 负载均衡也可以使用代理参数"></a>2.3 负载均衡也可以使用代理参数</h3><blockquote>
<p>与之前部署的知乎wencenter、博客mywordpress结合</p>
</blockquote>
<p>1、准备Nginx负载均衡调度使用的proxy_params</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Nginx ~]# vim /etc/nginx/proxy_params</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line"></span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 128k;</span><br></pre></td></tr></table></figure>

<p>2、负载均衡配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# vim proxy_oldboy.com.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name blog.oldboy.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://node;</span><br><span class="line">                include proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name zh.oldboy.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://node;</span><br><span class="line">                include proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-负载均衡测试"><a href="#2-4-负载均衡测试" class="headerlink" title="2.4 负载均衡测试"></a>2.4 负载均衡测试</h3><p>正常情况下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、两台web服务器的nginx服务均打开（模拟流量分摊）</span><br><span class="line">	可以负载均衡，轮流访问</span><br><span class="line">2、关掉一台web服务器的nginx服务（模拟容灾）</span><br><span class="line">	网页仍可以正常打开</span><br><span class="line">3、两台web服务器的Nginx服务均关闭</span><br><span class="line">	网页无法打开，502</span><br></pre></td></tr></table></figure>

<p>存在一种情况，两个web的nginx服务都没挂，但是其中一台的php-fpm服务挂了，模拟这种场景</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web02 ~]# systemctl stop php-fpm</span><br></pre></td></tr></table></figure>

<p>此时F5刷新wordpress的页面，将一会502，一会正常，体验不好，可通过添加nginx代理参数解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# cat /etc/nginx/proxy_params</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_next_upstream error timeout http_500 http_502 http_503 http_504; # 解决问题</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line"></span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 128k;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：问题原因</p>
<p>使用nginx负载均衡时，如何将后端请求超时的服务器流量平滑的切换到另一台上。<br>Nginx是本身是有机制的，如果出现一个节点down掉的时候，Nginx会更据你具体负载均衡的设置，将请求转移到其他的节点上，但是，如果后台服务连接没有down掉，并且返回错误异常码了如：504、502、500，Nginx就会直接返回从后端获取的异常代码。</p>
</blockquote>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(八)四层负载均衡</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/14-Nginx(%E5%85%AB)Nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="一、Nginx四层负载均衡介绍"><a href="#一、Nginx四层负载均衡介绍" class="headerlink" title="一、Nginx四层负载均衡介绍"></a>一、Nginx四层负载均衡介绍</h2><p>四层负载均衡：（OSI传输层   ip:port）<br>    nginx1.9 版本加入<br>硬件：F5<br>软件：LVS、Haproxy、Nginx</p>
<p>1.四层+七层来作负载均衡，4层可以保证7层的负载均衡的高可用性。如:nginx就无法保证自己的服务高可用，需要依赖lvs或者keepalive来作。</p>
<p>2.如:tcp协议的负载均衡，有些请求是TCP协议的(mysql、ssh)，或者说这些请求只需要使用4层进行端口的转发就可以了，所以使用4层负载均衡。<br>    比如做：mysql读的负载均衡（轮询）<br>    比如做：端口映射、端口转发         tcp&#x2F;udp</p>
<p>四层负载均衡总结<br>1.四层负载均衡仅能转发TCP&#x2F;IP协议、UDP协议，通常用来转发端口，如: tcp&#x2F;3306，tcp&#x2F;22，udp&#x2F;53。<br>2.四层负载均衡可以用来解决七层负载均衡的端口限制问题。（七层负载均衡最大使用65535个端口号）<br>3.可以用来解决七层负载均衡的高可用问题。（多台后端七层负载均衡能同时的使用）<br>4.四层的转发效率比七层的高的多，但仅支持tcp&#x2F;ip协议，不支持http或者https协议</p>
<p><img src="/img/image-20210823230415237.png" alt="image-20210823230415237"></p>
<h2 id="二、四层负载均衡配置"><a href="#二、四层负载均衡配置" class="headerlink" title="二、四层负载均衡配置"></a>二、四层负载均衡配置</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><table>
<thead>
<tr>
<th>服务器名</th>
<th>公网IP</th>
<th>内网IP</th>
</tr>
</thead>
<tbody><tr>
<td>lb4-01</td>
<td>10.0.0.3</td>
<td></td>
</tr>
<tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>lb02</td>
<td>10.0.0.6</td>
<td>172.16.1.6</td>
</tr>
<tr>
<td>web、nfs、mysql服务器若干</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="2-2-新增lb02负载均衡服务器"><a href="#2-2-新增lb02负载均衡服务器" class="headerlink" title="2.2 新增lb02负载均衡服务器"></a>2.2 新增lb02负载均衡服务器</h3><p>1、准备<code>lb02</code>，安装Nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]# cat /etc/yum.repos.d/nginx.repo </span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@lb02 ~]#  yum install nginx -y</span><br></pre></td></tr></table></figure>

<p>2、拷贝<code>lb01</code>的 Nginx配置到<code>lb02</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]# scp -rp root@172.16.1.5:/etc/nginx /etc/</span><br></pre></td></tr></table></figure>

<p>3、启动Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb02 conf.d]# nginx -t</span><br><span class="line">[root@lb02 conf.d]# systemctl start nginx</span><br><span class="line">[root@lb02 conf.d]# systemctl enable nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错：</p>
<p>[root@lb02 ~]# nginx -t<br>nginx: [emerg] unknown directive “check” in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf:4<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed<br>[root@lb02 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf<br>[root@lb02 ~]# nginx -t<br>nginx: [emerg] unknown directive “check_status” in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf:17<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed</p>
<p>解决方法：</p>
<p>因为lb01安装过第三方健康检查工具，而lb02上没有，先将这些报错点注释掉</p>
</blockquote>
<p>4、测试lb02是否正常</p>
<p>将hosts中的10.0.0.5换成10.0.0.6，phpadmin、wordpress网页可以正常访问,<br>但是wecenter异常502 Bad Gateway<br>解决方法: 将web01、02上的的php.ini中的session.auto_start改为0,不然会502</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 php]# vim /etc/php.ini</span><br><span class="line">session.auto_start = 0</span><br><span class="line">[root@web01 php]# systemctl restart php-fpm.service</span><br></pre></td></tr></table></figure>

<blockquote>
<p>网上搜索的解释：<br>日常开发中，php.ini配置session.auto_start&#x3D;0默认关闭会话时如果想开启会话需要调用session_start：<br>session.auto_start 开启就自动完成了session_start()<br>区别就在于在用SESSION前是否需要session_start();<br>当session.auto_start &#x3D; on时，执行 session_start() 将产生新的 session_id<br>session.auto_start &#x3D; on 的优点在于，任何时候都不会因忘记执行 session_start() 或 session_start() 在程序里的位置不对，而导致错误<br>缺点在于，如果你使用的是第三方代码，则必须删去其中的全部 session_start() 。否则将不能得到正确的结果</p>
</blockquote>
<h3 id="2-3-配置四层负载均衡"><a href="#2-3-配置四层负载均衡" class="headerlink" title="2.3 配置四层负载均衡"></a>2.3 配置四层负载均衡</h3><p>1、新增<code>lb4-01</code>服务器，安装nginx</p>
<blockquote>
<p>nginx需要带–with-stream模块</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 ~]# cat /etc/yum.repos.d/nginx.repo </span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">[root@lb4-01 ~]#  yum install nginx -y	</span><br><span class="line">[root@lb4-01 ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">events &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.c/*.conf;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建四层负载均衡配置的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 conf.c]# rm -f /etc/nginx/conf.d/default.conf   #删除http的80端口</span><br><span class="line">[root@lb4-01 ~]# mkdir /etc/nginx/conf.c</span><br><span class="line">[root@lb4-01 ~]# cd /etc/nginx/conf.c</span><br><span class="line">[root@lb4-01 conf.c]# cat lb_domain.conf </span><br><span class="line">stream &#123;</span><br><span class="line">    upstream lb &#123;</span><br><span class="line">        server 172.16.1.5:80 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">        server 172.16.1.6:80 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        proxy_connect_timeout 3s;</span><br><span class="line">        proxy_timeout 3s;</span><br><span class="line">        proxy_pass lb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、重载服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 conf.c]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@lb4-01 conf.c]# systemctl restart nginx</span><br><span class="line">[root@lb4-01 conf.c]# systemctl enable nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错：<br>[root@lb4-01 nginx]# nginx  -t<br>nginx: [emerg] unknown directive “stream” in &#x2F;etc&#x2F;nginx&#x2F;conf.c&#x2F;lb_domain.conf:1<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed<br>解决方法：<br>yum install nginx-mod-stream.x86_64 -y</p>
</blockquote>
<blockquote>
<p>报错：<br>[root@lb4-01 nginx]# systemctl status nginx<br>nginx.service - The nginx HTTP and reverse proxy server<br>Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service; enabled; vendor preset: disabled)<br>Active: failed (Result: exit-code) since Tue 2021-08-24 07:48:42 CST; 13s ago<br>Process: 2969 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx (code&#x3D;exited, status&#x3D;1&#x2F;FAILURE)<br>Process: 2967 ExecStartPre&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -t (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br>Process: 2965 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;rm -f &#x2F;run&#x2F;nginx.pid (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br>Main PID: 1959 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</p>
<p>Aug 24 07:48:40 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:40 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:41 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:41 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:42 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:42 lb4-01 nginx[2969]: nginx: [emerg] still could not bind()<br>解决方法：<br>需要将[root@lb4-01 nginx]# vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br>中默认的80端口改掉，比如改成81,这样才不冲突（奇怪。。）</p>
</blockquote>
<p>4、访问测试</p>
<p>将Hosts中的对应网站地址的IP改成10.0.0.3，尝试访问，可以正常通过四层负载均衡来调度10.0.0.5和10.0.0.6七层负载均衡</p>
<p><img src="/img/image-20210824001613717.png" alt="image-20210824001613717"></p>
<p><img src="/img/image-20210824001638506.png" alt="image-20210824001638506"></p>
<h2 id="三、四层负载均衡日志"><a href="#三、四层负载均衡日志" class="headerlink" title="三、四层负载均衡日志"></a>三、四层负载均衡日志</h2><h3 id="3-1-配置过程"><a href="#3-1-配置过程" class="headerlink" title="3.1 配置过程"></a>3.1 配置过程</h3><p>在四层负载均衡中配置Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 ~]# cat /etc/nginx/conf.c/lb_domain.conf</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format  proxy &#x27;$remote_addr $remote_port - [$time_local] $status $protocol &#x27;</span><br><span class="line">                  &#x27;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#x27; ;</span><br><span class="line">    access_log /var/log/nginx/proxy.log proxy;</span><br><span class="line"></span><br><span class="line">    upstream lb &#123;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="3-2-查看日志"><a href="#3-2-查看日志" class="headerlink" title="3.2 查看日志"></a>3.2 查看日志</h3><p>网页访问后，可见产生的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 ~]# tail -f /var/log/nginx/proxy.log</span><br><span class="line">10.0.0.1 56396 - [25/Aug/2021:19:25:33 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;15150&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 59800 - [25/Aug/2021:19:25:34 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;8327&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 63468 - [25/Aug/2021:19:25:34 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;17882&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 50394 - [25/Aug/2021:19:25:35 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;24490&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 55549 - [25/Aug/2021:19:25:35 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;13201&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 64324 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;70995&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 64566 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;72650&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 65216 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;68171&quot; &quot;0.000&quot;</span><br><span class="line">10.0.0.1 49668 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;82071&quot; &quot;0.004&quot;</span><br><span class="line">10.0.0.1 49745 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;63941&quot; &quot;0.001&quot;</span><br><span class="line">10.0.0.1 50574 - [25/Aug/2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;103581&quot; &quot;0.000&quot;</span><br></pre></td></tr></table></figure>

<h2 id="三、使用nginx四层负载均衡实现tcp的转发（跳板）"><a href="#三、使用nginx四层负载均衡实现tcp的转发（跳板）" class="headerlink" title="三、使用nginx四层负载均衡实现tcp的转发（跳板）"></a>三、使用nginx四层负载均衡实现tcp的转发（跳板）</h2><p>实现跳板机的功能，比如：</p>
<pre><code>请求负载均衡 5555    ---&gt;     172.16.1.7:22;
请求负载均衡 6666    ---&gt;     172.16.1.51:3306;
</code></pre>
<h3 id="3-1-配置过程-1"><a href="#3-1-配置过程-1" class="headerlink" title="3.1 配置过程"></a>3.1 配置过程</h3><p>配置Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb4-01 ~]# cat /etc/nginx/conf.c/lb_domain.conf </span><br><span class="line">stream &#123;</span><br><span class="line">log_format  proxy &#x27;$remote_addr $remote_port - [$time_local] $status $protocol &#x27;</span><br><span class="line">                  &#x27;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#x27; ;</span><br><span class="line">    access_log /var/log/nginx/proxy.log proxy;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">定义转发ssh的22端口</span></span><br><span class="line">	upstream ssh_7 &#123;</span><br><span class="line">		server 10.0.0.7:22;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">定义转发mysql的3306端口</span></span><br><span class="line">	upstream mysql_51 &#123;</span><br><span class="line">		server 10.0.0.51:3306;</span><br><span class="line">	&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 5555;</span><br><span class="line">        proxy_connect_timeout 3s;</span><br><span class="line">        proxy_timeout 300s;</span><br><span class="line">        proxy_pass ssh_7;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 6666;</span><br><span class="line">        proxy_connect_timeout 3s;</span><br><span class="line">        proxy_timeout 3s;</span><br><span class="line">        proxy_pass mysql_51;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接web01</span></span><br><span class="line">ssh root@10.0.0.3 -p 5555</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接db01</span></span><br><span class="line">ssh root@10.0.0.3 -p 6666</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(七)均衡调度</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/13-Nginx(%E4%B8%83)Nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%B0%83%E5%BA%A6%E4%B8%8E%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="一、Nginx均衡调度算法"><a href="#一、Nginx均衡调度算法" class="headerlink" title="一、Nginx均衡调度算法"></a>一、Nginx均衡调度算法</h2><p>Nginx七层负载均衡分为5种调度算法</p>
<table>
<thead>
<tr>
<th>调度算法</th>
<th>概述</th>
</tr>
</thead>
<tbody><tr>
<td>轮询（常用）</td>
<td>按时间顺序逐一分配到不同的后端服务器(默认)</td>
</tr>
<tr>
<td>weight（面试点）</td>
<td>加权轮询,weight值越大,分配到的访问几率越高</td>
</tr>
<tr>
<td>ip_hash（面试点）</td>
<td>每个请求按访问IP的hash结果分配,这样来自同一IP的固定访问一个后端服务器</td>
</tr>
<tr>
<td>url_hash</td>
<td>按照访问URL的hash结果来分配请求,是每个URL定向到同一个后端服务器</td>
</tr>
<tr>
<td>least_hash</td>
<td>最少链接数,那个机器链接数少就分发</td>
</tr>
</tbody></table>
<h3 id="1-1-加权轮询"><a href="#1-1-加权轮询" class="headerlink" title="1.1 加权轮询"></a>1.1 加权轮询</h3><p>比如实现访问5次web01，1次web02</p>
<p>当web服务器配置不相同，有差距时，可以用此方法</p>
<p>在<code>lb01</code>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80 weight=5;</span><br><span class="line">        server 172.16.1.8:80 weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="1-2-ip-hash"><a href="#1-2-ip-hash" class="headerlink" title="1.2 ip_hash"></a>1.2 ip_hash</h3><blockquote>
<p>PS：不能与weight一起使用</p>
</blockquote>
<p>根据请求的IP地址，固定访问到某一后端，除非已选择的后端down了，有点浪费资源</p>
<p>在<code>lb01</code>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123; </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="二、Nginx负载均衡后端状态"><a href="#二、Nginx负载均衡后端状态" class="headerlink" title="二、Nginx负载均衡后端状态"></a>二、Nginx负载均衡后端状态</h2><table>
<thead>
<tr>
<th>状态</th>
<th>概述</th>
</tr>
</thead>
<tbody><tr>
<td>down</td>
<td>当前的server暂时不参与负载均衡</td>
</tr>
<tr>
<td>backup</td>
<td>预留的备份服务器</td>
</tr>
<tr>
<td>max_conns</td>
<td>限制最大的接收连接数</td>
</tr>
<tr>
<td>max_fails（健康检查）</td>
<td>允许请求失败的次数（不够精准，作用不大，得知道，面试会问）</td>
</tr>
<tr>
<td>fail_timeout（健康检查）</td>
<td>经过max_fails失败后, 服务暂停时间</td>
</tr>
</tbody></table>
<h3 id="2-1-down状态"><a href="#2-1-down状态" class="headerlink" title="2.1 down状态"></a>2.1 down状态</h3><blockquote>
<p>一般用于停机维护</p>
</blockquote>
<p>在<code>lb01</code>配置，可见当两台web的Nginx服务都正常时，只能访问web02，当web02的Nginx服务挂了，返回502</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80 down;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="2-2-backup状态"><a href="#2-2-backup状态" class="headerlink" title="2.2 backup状态"></a>2.2 backup状态</h3><p>在<code>lb01</code>配置，可见当两台web都正常时，只能访问web02，如果web02的服务挂了，会访问web01，当web02恢复后，再次访问到的是web02</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80 backup;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="2-3-健康检查"><a href="#2-3-健康检查" class="headerlink" title="2.3 健康检查"></a>2.3 健康检查</h3><blockquote>
<p>自带的健康检查不够精准，且看不到信息，面试会问</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">        server 172.16.1.8:80 max_fails=2 fail_timeout=10s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="三、第三方健康检查模块check-upstream"><a href="#三、第三方健康检查模块check-upstream" class="headerlink" title="三、第三方健康检查模块check_upstream"></a>三、第三方健康检查模块check_upstream</h2><blockquote>
<p>检测更精准，且有页面可以展示服务端的状态，需要编译安装</p>
</blockquote>
<h3 id="3-1-编译安装Nginx"><a href="#3-1-编译安装Nginx" class="headerlink" title="3.1 编译安装Nginx"></a>3.1 编译安装Nginx</h3><p>1、安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]# yum install -y gcc glibc gcc-c++ pcre-devel openssl-devel  patch libxml2 -libxml2-devel libxslt libxslt-devel gd-devel perl-ExtUtils-Embed gperftools-devel.x86_64 gperftools-libs.x86_64 gperftools.x86_64</span><br></pre></td></tr></table></figure>

<p>2、下载Nginx源码及第三方模块源码</p>
<blockquote>
<p>PS：为保持一致，先通过yum源安装nginx，这是当前实验环境的Nginx版本</p>
<p>[root@lb01 nginx]# nginx -version<br>nginx version: nginx&#x2F;1.20.1</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb02 ~]# wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">[root@lb02 ~]# wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/master.zip</span><br></pre></td></tr></table></figure>

<p>3、解压nginx源码包以及第三方模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# unzip master.zip</span><br><span class="line">[root@lb01 ~]# tar -vxf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>4、打补丁</p>
<blockquote>
<p>打补丁(nginx的版本是1.20.1补丁就选择1.20.1的,p1代表在nginx目录，p0是不在nginx目录)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx-1.20.1]# cd nginx-1.20.1/</span><br><span class="line">[root@lb01 nginx-1.20.1]# patch -p1 &lt; ../nginx_upstream_check_module-master/check_1.20.1+.patch</span><br></pre></td></tr></table></figure>

<p>5、编译Nginx，附带模块参数</p>
<blockquote>
<p>通过nginx -V获取configure参数，尽量保持一致</p>
</blockquote>
<p>–add-module&#x3D;&#x2F;root&#x2F;nginx_upstream_check_module-master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx-1.20.1]# ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-compat --with-debug --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --add-module=/root/nginx_upstream_check_module-master</span><br></pre></td></tr></table></figure>

<p>6、在已有的负载均衡上增加健康检查的功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx-1.20.1]# cat /etc/nginx/conf.d/proxy_node.conf</span><br><span class="line">upstream node &#123;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">        check interval=3000 rise=2 fall=3 timeout=1000 type=tcp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-功能测试"><a href="#3-2-功能测试" class="headerlink" title="3.2 功能测试"></a>3.2 功能测试</h3><p>1、正常情况下的检测数据</p>
<p><img src="/img/image-20210821113447825.png" alt="image-20210821113447825"></p>
<p>2、测试将web01的nginx服务关掉</p>
<p><img src="/img/image-20210821114011230.png" alt="image-20210821114011230"></p>
<p>3、日志分析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 nginx-1.20.1]# tail -f /var/log/nginx/error.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 两web服务正常，能获取peer</span></span><br><span class="line">2021/08/21 02:42:11 [error] 50522#50522: enable check peer: 172.16.1.8:80</span><br><span class="line">2021/08/21 02:42:12 [error] 50522#50522: enable check peer: 172.16.1.7:80</span><br><span class="line">2021/08/21 02:46:17 [error] 50522#50522: *13 connect() failed (111: Connection refused) while connecting to upstream, client: 10.0.0.1, server: node.oldboy.com, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;http://172.16.1.7:80/&quot;, host: &quot;node.oldboy.com&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止web01的nginx服务</span></span><br><span class="line">2021/08/21 02:46:20 [error] 50522#50522: disable check peer: 172.16.1.7:80</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动web01的nginx服务</span></span><br><span class="line">2021/08/21 02:47:59 [error] 50522#50522: enable check peer: 172.16.1.7:80</span><br></pre></td></tr></table></figure>

<h2 id="四、如何解决网站重复登录的问题"><a href="#四、如何解决网站重复登录的问题" class="headerlink" title="四、如何解决网站重复登录的问题"></a>四、如何解决网站重复登录的问题</h2><p>有三种方法解决：</p>
<ol>
<li>ip_hash – 会造成某一台主机的压力过大</li>
<li>session复制</li>
<li>session共享<ol>
<li>本地文件 –&gt; nfs共享</li>
<li>通过程序，写入redis数据库（常用）</li>
<li>通过程序，写入mysql数据库</li>
</ol>
</li>
</ol>
<p>本案例，选用3.2配置，session共享，写入redis数据库</p>
<h3 id="4-1-安装phpmyadmin重现问题"><a href="#4-1-安装phpmyadmin重现问题" class="headerlink" title="4.1 安装phpmyadmin重现问题"></a>4.1 安装phpmyadmin重现问题</h3><p><code>web01</code>和<code>web02</code>都需要安装</p>
<p>1、配置Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cat php.conf</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name php.oldboy.com;</span><br><span class="line">	root /code/phpMyAdmin-4.8.4-all-languages;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.php index.html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">		include fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@web01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>2、安装phpmyadmin</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# cd /code</span><br><span class="line">[root@web01 code]# wget https://files.phpmyadmin.net/phpMyAdmin/4.8.4/phpMyAdmin-4.8.4-all-languages.zip</span><br><span class="line">[root@web01 code]# unzip phpMyAdmin-4.8.4-all-languages.zip</span><br></pre></td></tr></table></figure>

<p>3、配置phpmyadmin连接远程数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# cd phpMyAdmin-4.8.4-all-languages/</span><br><span class="line">[root@web01 phpMyAdmin-4.8.4-all-languages]# cp config.sample.inc.php config.inc.php</span><br><span class="line">[root@web01 phpMyAdmin-4.8.4-all-languages]# vim config.inc.php</span><br><span class="line">/* Server parameters */</span><br><span class="line"><span class="meta">$</span><span class="bash">cfg[<span class="string">&#x27;Servers&#x27;</span>][<span class="variable">$i</span>][<span class="string">&#x27;host&#x27;</span>] = <span class="string">&#x27;172.16.1.51&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<p>4、配置授权</p>
<blockquote>
<p>这个文件夹中会记录session，需要权限</p>
<p>session_start(): Failed to read session data: files (path: &#x2F;var&#x2F;lib&#x2F;php&#x2F;session)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]# chown -R www.www /var/lib/php/</span><br></pre></td></tr></table></figure>

<p>5、将web01上配置好的phpmyadmin以及nginx的配置文件推送到web02主机上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# scp -rp  phpMyAdmin-4.8.4-all-languages root@172.16.1.8:/code/</span><br><span class="line">[root@web01 code]# scp /etc/nginx/conf.d/php.conf  root@172.16.1.8:/etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>6、重载Nginx服务，授权访问权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web02 code]# systemctl restart nginx</span><br><span class="line">[root@web02 code]# chown -R www.www /var/lib/php/</span><br></pre></td></tr></table></figure>

<p>7、接入负载均衡，并重启nginx服务，<code>lb01</code>操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 conf.d]# vim proxy_php.com.conf </span><br><span class="line">upstream php &#123;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">        server 172.16.1.8:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name php.oldboy.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://php;</span><br><span class="line">                include proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@lb01 conf.d]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@lb01 conf.d]# systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>9、测试访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">网页访问：</span><br><span class="line">	http://php.oldboy.com</span><br><span class="line">登录账户:</span><br><span class="line">	采用db01（172.16.1.51）的mysql远程账户oldboy/Bgx123.com</span><br><span class="line">此时访问phpmyadmin登录将一直失败，因为轮询访问，session一直变：</span><br><span class="line">报错：</span><br><span class="line">Failed to set session cookie. Maybe you are using HTTP instead of HTTPS to access phpMyAdmin.</span><br></pre></td></tr></table></figure>

<h3 id="4-2-解决问题"><a href="#4-2-解决问题" class="headerlink" title="4.2 解决问题"></a>4.2 解决问题</h3><p>1、在<code>db01</code>安装redis数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# yum install redis -y</span><br></pre></td></tr></table></figure>

<p>2、配置并启动redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# sed  -i &#x27;/^bind/c bind 127.0.0.1 172.16.1.51&#x27; /etc/redis.conf</span><br><span class="line">[root@db01 ~]# systemctl start redis</span><br><span class="line">[root@db01 ~]# systemctl enable redis</span><br></pre></td></tr></table></figure>

<p>3、<code>web01</code>的php配置session连接redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.修改/etc/php.ini文件</span></span><br><span class="line">[root@web01 ~]# vim /etc/php.ini</span><br><span class="line">session.save_handler = redis</span><br><span class="line">session.save_path = &quot;tcp://172.16.1.51:6379&quot;</span><br><span class="line">;session.save_path = &quot;tcp://172.16.1.51:6379?auth=123&quot; #如果redis存在密码，则使用该方式</span><br><span class="line">session.auto_start = 1</span><br></pre></td></tr></table></figure>

<p>4、注释php-fpm.d&#x2F;<a href="http://www.conf里面的两条内容,否则session内容会一直写入/var/lib/php/session%E7%9B%AE%E5%BD%95%E4%B8%AD">www.conf里面的两条内容，否则session内容会一直写入/var/lib/php/session目录中</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;php_value[session.save_handler] = files</span><br><span class="line">;php_value[session.save_path]    = /var/lib/php/session</span><br></pre></td></tr></table></figure>

<p>5、重启php-fpm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web02 code]# systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<p>6、将<code>web01</code>的配置文件推送到<code>web02</code>上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@web01 code]# scp /etc/php.ini root@172.16.1.8:/etc/php.ini  </span><br><span class="line">[root@web01 code]# scp /etc/php-fpm.d/www.conf root@172.16.1.8:/etc/php-fpm.d/www.conf </span><br></pre></td></tr></table></figure>

<p>7、重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@web02 code]# systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<p>8、再次测试访问网站</p>
<p>可以登录，并且session的值将记录到redis数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@db01 ~]# redis-cli -h 172.16.1.51</span><br><span class="line">172.16.1.51:6379&gt; KEYS *</span><br><span class="line">1) &quot;PHPREDIS_SESSION:716e61cabeb40f974fcbcdcac65f8607&quot;</span><br><span class="line">2) &quot;PHPREDIS_SESSION:42ca5a8ea9375a93a7974427b77b3dd7&quot;</span><br><span class="line">172.16.1.51:6379&gt;</span><br></pre></td></tr></table></figure>

<p>9、刷新页面的负载均衡效果展示</p>
<p><img src="/img/image-20210823225246243.png" alt="image-20210823225246243"></p>
<p><img src="/img/image-20210823225305632.png" alt="image-20210823225305632"></p>
<p>10、cookie保存到redis展示</p>
<p><img src="/img/image-20210823225412626.png" alt="image-20210823225412626"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>01-HTML</title>
    <url>/2022/07/28/03_Python/02_%E5%89%8D%E7%AB%AF/01_HTML/</url>
    <content><![CDATA[<p>“Python的进阶方向之一：Web开发，在这之前需要了解常用的前端知识，这篇文章主要介绍HTML的简单使用”</p>
<h1 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1 创建表格"></a>1 创建表格</h1><blockquote>
<p>作用：<code>table</code>标签用于展示数据</p>
</blockquote>
<h2 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h2><p>一组数据需要以表格方式展示，例如：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
<th>Height</th>
</tr>
</thead>
<tbody><tr>
<td>Tank</td>
<td>18</td>
<td>172</td>
</tr>
<tr>
<td>Jodan</td>
<td>20</td>
<td>190</td>
</tr>
<tr>
<td>Timi</td>
<td>8</td>
<td>200</td>
</tr>
</tbody></table>
<h2 id="1-2-数据表格化"><a href="#1-2-数据表格化" class="headerlink" title="1.2 数据表格化"></a>1.2 数据表格化</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span>	# 表格头</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>	# 一个tr表示一行</span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span>	# th加粗文本</span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Height<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>	# 表格内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tank<span class="tag">&lt;/<span class="name">td</span>&gt;</span>	# td正常文本</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>172<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图:</p>
<p><img src="/../../../img/image-20220727140746808.png" alt="image-20220727140746808"></p>
<p>给表格添加外边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="/../../../img/image-20220727141229882.png" alt="image-20220727141229882"></p>
<h2 id="1-3-单元格-行-合并"><a href="#1-3-单元格-行-合并" class="headerlink" title="1.3 单元格(行)合并"></a>1.3 单元格<code>(行)</code>合并</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Tank<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="/../../../img/image-20220727160233609.png" alt="image-20220727160233609"></p>
<h2 id="1-4-单元格-列-合并"><a href="#1-4-单元格-列-合并" class="headerlink" title="1.4 单元格(列)合并"></a>1.4 单元格<code>(列)</code>合并</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图:</p>
<p><img src="/../../../img/image-20220727160337780.png" alt="image-20220727160337780"></p>
<h1 id="2-创建表单"><a href="#2-创建表单" class="headerlink" title="2 创建表单"></a>2 创建表单</h1><blockquote>
<p>作用：</p>
<p>获取前端用户输入的数据（用户输入的，用户选择的，用户上传的等）</p>
<p>基于网络发送给后端服务器</p>
</blockquote>
<p>2.1 创建表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>action</code>的作用与参数：</p>
<p>作用：</p>
<p>​	控制数据提交的后端路径(给哪个服务端提交数据)</p>
<p>参数：</p>
<ul>
<li>什么都不写：默认就是朝当前页面所在的url提交数据</li>
<li>写全路径：<a href="https://www.baidu.com/">https://www.baidu.com</a>  朝百度服务端提交</li>
<li>只写路径后缀<code>action=&quot;/index/&quot;</code>：<br>自动识别出当前服务端的ip和port拼接到前面，即：<code>host:port/index/</code></li>
</ul>
<h2 id="2-2-input标签"><a href="#2-2-input标签" class="headerlink" title="2.2 input标签"></a>2.2 input标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&lt;/input</span><br></pre></td></tr></table></figure>

<p><strong>input标签的常用<code>type</code></strong></p>
<ul>
<li><p>text:普通文本</p>
</li>
<li><p>password:密文</p>
</li>
<li><p>date:日期	</p>
</li>
<li><p>submit:用来触发form表单提交数据的动作，点击后表单清空，内容被提交</p>
</li>
<li><p>button:就是一个普普通通的按钮 本身没有任何的功能 但是它是最有用的，学完js之后可以给它自定义各种功能</p>
</li>
<li><p>reset:重置内容，表单内容清空，内容不提交</p>
</li>
<li><p>radio:单选</p>
<p>默认选中要加checked&#x3D;’checked’</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>=<span class="string">&#x27;checked&#x27;</span>&gt;</span>男</span><br></pre></td></tr></table></figure>

<p>当标签的属性名和属性值一样的时候可以简写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br></pre></td></tr></table></figure>
</li>
<li><p>checkbox:多选</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span>DBJ</span><br></pre></td></tr></table></figure>
</li>
<li><p>file:获取文件  也可以使用<code>multiple</code>一次性获取多个文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hidden:隐藏当前input框</p>
</li>
</ul>
<p><strong>input标签常用<code>属性</code>：</strong></p>
<ul>
<li><p>value: 添加默认值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>disable：禁用控件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span> <span class="attr">disable</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>readonly：控件只读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-3-label标签"><a href="#2-3-label标签" class="headerlink" title="2.3 label标签"></a>2.3 label标签</h2><p>实现<code>点击输入框的名称</code>就能<code>将光标定位到输入框</code></p>
<p>使用案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span>Password:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-select标签"><a href="#2-4-select标签" class="headerlink" title="2.4 select标签"></a>2.4 select标签</h2><p>select标签 默认是单选 可以加mutiple参数变多选 默认选中selected</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>新垣结衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>斯佳丽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>明老师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用<code>optgroup</code>标签给选项分组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;上海&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>浦东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>黄埔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>青埔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>朝阳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>昌平<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>沙河<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-案例"><a href="#2-5-案例" class="headerlink" title="2.5 案例"></a>2.5 案例</h2><p>整合2.1-2.4的案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    学习表单标签的使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        创建输入框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        label标签的两种用法 &amp;#45;&amp;#45; 不包住的方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        label标签的两种用法 &amp;#45;&amp;#45; 包住的方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span>Password:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span>Birthday:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Gender</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>boy</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>girl</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hobby</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>video games</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>football</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>basketball</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>偶像 <span class="comment">&lt;!--选项--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>新垣结衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>住址 <span class="comment">&lt;!--选项分组--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;上海&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>浦东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>黄埔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>青埔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>朝阳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>昌平<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>沙河<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入框</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>文件上传</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220728165553604.png" alt="image-20220728165553604"></p>
<h1 id="3-Flask框架的基本使用"><a href="#3-Flask框架的基本使用" class="headerlink" title="3 Flask框架的基本使用"></a>3 Flask框架的基本使用</h1><h2 id="3-1-第一个flask框架后端"><a href="#3-1-第一个flask框架后端" class="headerlink" title="3.1 第一个flask框架后端"></a>3.1 第一个flask框架后端</h2><p>使用Flask框架编写一个后端程序，首先需要安装Flask</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install FLASK</span><br></pre></td></tr></table></figure>

<p>编写后端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<p>查看运行效果：</p>
<p><img src="/../../../img/image-20220729110925144.png" alt="image-20220729110925144"></p>
<h2 id="3-2-Form表单提交数据"><a href="#3-2-Form表单提交数据" class="headerlink" title="3.2 Form表单提交数据"></a>3.2 Form表单提交数据</h2><p>修改2.5的前端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--    学习表单标签的使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:5000/index&quot;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>打开html页面，点击提交，将显示”OK”</p>
<blockquote>
<p>补充:</p>
<p>method方法的<code>post</code>和<code>get</code>有什么不同？</p>
<ul>
<li><p>post：提交数据隐藏</p>
</li>
<li><p>get：form表单默认提交数据的方式 是get请求  数据是直接放在url后面的，如下图：</p>
</li>
</ul>
<p><img src="/../../../img/image-20220729111744825.png" alt="image-20220729111744825"></p>
<p>其中<code>gender=on</code>中的<code>gender</code>由<code>name</code>属性定义，而<code>on</code>是其值</p>
</blockquote>
<h2 id="3-3-Form表单提交”选择标签”的数据"><a href="#3-3-Form表单提交”选择标签”的数据" class="headerlink" title="3.3 Form表单提交”选择标签”的数据"></a>3.3 Form表单提交”选择标签”的数据</h2><p>“”针对用户选择的标签（如select、radio、checkbox等），光有<code>name</code>属性是不够的，还需要提前给这些标签添加内容<code>value</code>值“</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Gender</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>boy</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>girl</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hobby</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;videogames&quot;</span>&gt;</span>video games</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>football</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span>basketball</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后端代码修改，添加输出前端数据的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span>, methods=[<span class="string">&#x27;Get&#x27;</span>, <span class="string">&#x27;Post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(request.form)	<span class="comment"># 输出从前端获取的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ImmutableMultiDict([(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;dsa&#x27;</span>), (<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;321432&#x27;</span>), (<span class="string">&#x27;birthday&#x27;</span>, <span class="string">&#x27;2022-07-14&#x27;</span>), (<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>), (<span class="string">&#x27;hobby&#x27;</span>, <span class="string">&#x27;videogames&#x27;</span>), (<span class="string">&#x27;hobby&#x27;</span>, <span class="string">&#x27;football&#x27;</span>), (<span class="string">&#x27;偶像&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>), (<span class="string">&#x27;偶像&#x27;</span>, <span class="string">&#x27;小花&#x27;</span>), (<span class="string">&#x27;dsa&#x27;</span>, <span class="string">&#x27;黄埔&#x27;</span>), (<span class="string">&#x27;textarea&#x27;</span>, <span class="string">&#x27;       4443243t     &#x27;</span>)])</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> - - [<span class="number">29</span>/Jul/<span class="number">2022</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">22</span>] <span class="string">&quot;POST /index HTTP/1.1&quot;</span> <span class="number">308</span> -</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> - - [<span class="number">29</span>/Jul/<span class="number">2022</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">22</span>] <span class="string">&quot;POST /index/ HTTP/1.1&quot;</span> <span class="number">200</span> -</span><br></pre></td></tr></table></figure>



<h2 id="3-4-Form表单提交文件"><a href="#3-4-Form表单提交文件" class="headerlink" title="3.4 Form表单提交文件"></a>3.4 Form表单提交文件</h2><p>form表单提交文件需要注意</p>
<ol>
<li><p><code>method</code>必须是<code>post</code></p>
</li>
<li><p><code>enctype=&quot;multipart/form-data&quot;</code></p>
<p>enctype类似于数据提交的编码格式</p>
<p>​			默认是urlencoded 只能够提交普通的文本数据</p>
<p>​			formdata 就可以支持提交文件数据</p>
</li>
</ol>
<p>因此需要修改前端代码，添加<code>entype</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--    学习表单标签的使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:5000/index&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>并给<code>input</code>标签添加<code>name</code>属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文件上传</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myfile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后端获取文件，保存到本地：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 获取表单提交过来的非文件数据</span></span><br><span class="line">    <span class="built_in">print</span>(request.form)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件数据</span></span><br><span class="line">    <span class="built_in">print</span>(request.files)</span><br><span class="line">    file_obj = request.files.get(<span class="string">&#x27;myfile&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(file_obj.name)</span><br><span class="line">    file_obj.save(file_obj.name)    <span class="comment"># 保存文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day51-CSS-01</title>
    <url>/2022/08/02/03_Python/02_%E5%89%8D%E7%AB%AF/day51%E7%AC%94%E8%AE%B0-CSS-01/</url>
    <content><![CDATA[<p>“第51天CSS01学习笔记”</p>
<h1 id="1-引入CSS的三种方式"><a href="#1-引入CSS的三种方式" class="headerlink" title="1 引入CSS的三种方式"></a>1 引入CSS的三种方式</h1><p>引入CSS共有三种方式，分别是</p>
<ul>
<li>style标签内部直接书写（用于演示效果）</li>
<li>link标签引入外部css文件（最正规、多用的方式）</li>
<li>行内式(一般不用)</li>
</ul>
<p>使用方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学习css引入CSS的三种方法--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    方式一：通过style引入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    方式三：通过link引入外部文件(使用最多)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;03_被引入的CSS.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是H1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    方式二：行内式引入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>这是H2标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是H3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中文件<code>03_被引入的CSS.css</code>的内容如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是被引用的CSS文件</span></span><br><span class="line"><span class="comment">这是注释的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引用CSS后的效果：</p>
<p><img src="/../../../img/image-20220801141907551.png" alt="image-20220801141907551"></p>
<h1 id="2-CSS选择器"><a href="#2-CSS选择器" class="headerlink" title="2 CSS选择器"></a>2 CSS选择器</h1><p>选择器共分为三种，分别是</p>
<ul>
<li>基础选择器</li>
<li>组合选择器</li>
<li>属性选择器</li>
</ul>
<p>接下来将一一介绍它们的使用方法</p>
<h2 id="2-1-基础选择器"><a href="#2-1-基础选择器" class="headerlink" title="2.1 基础选择器"></a>2.1 基础选择器</h2><p>基础选择器具分为：</p>
<ul>
<li>ID选择器</li>
<li>类选择器</li>
<li>元素&#x2F;标签选择器</li>
<li>通用选择器</li>
</ul>
<p>使用方法如下代码所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学习CSS选择器的用法--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引入CSS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*ID选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#id01</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*找到id值是&quot;id01&quot;的标签，改变文字颜色*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.class01</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*找到class值是&quot;class01&quot;的标签，改变文字颜色*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: deeppink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*找到所有span标签，改变文字颜色*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*将html页面所有的标签全部找到，并修改字体类型和大小*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;id01&quot;</span>&gt;</span>这是演示文字01<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class01&quot;</span>&gt;</span>这是演示文字02<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class01&quot;</span>&gt;</span>这是演示文字03<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是演示文字03<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是演示文字04<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>选择器效果：</p>
<p><img src="/../../../img/image-20220801143520201.png" alt="image-20220801143520201"></p>
<h2 id="2-2-组合选择器"><a href="#2-2-组合选择器" class="headerlink" title="2.2 组合选择器"></a>2.2 组合选择器</h2><p>组合选择器分为四种：</p>
<ul>
<li>后代选择器（所有后代）</li>
<li>子元素选择器（儿子）</li>
<li>相邻兄弟选择器</li>
<li>后续兄弟选择器</li>
</ul>
<h3 id="2-2-1-后代选择器："><a href="#2-2-1-后代选择器：" class="headerlink" title="2.2.1 后代选择器："></a>2.2.1 后代选择器：</h3><blockquote>
<p>选取某元素的后代元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">后代选择器：</span></span></span><br><span class="line"><span class="comment"><span class="css">修改&lt;div&gt;所有后代&lt;p&gt;的背景色  </span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> <span class="selector-tag">p</span></span></span><br><span class="line"><span class="css">&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 1。 在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 2。 在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220801163330446.png" alt="image-20220801163330446"></p>
<h3 id="2-2-2-子元素选择器"><a href="#2-2-2-子元素选择器" class="headerlink" title="2.2.2 子元素选择器"></a>2.2.2 子元素选择器</h3><blockquote>
<p>选取某元素的（直接&#x2F;一级）子元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*子元素选择器：*/</span></span></span><br><span class="line"><span class="css"><span class="comment">/*给&lt;div&gt;的儿子&lt;p&gt;设置背景色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span></span></span><br><span class="line"><span class="css">&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to My Homepage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>My name is Donald<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>I live in Duckburg.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I will not be styled.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My best friend is Mickey.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220801163723386.png" alt="image-20220801163723386"></p>
<h3 id="2-2-3-相邻兄弟选择器"><a href="#2-2-3-相邻兄弟选择器" class="headerlink" title="2.2.3 相邻兄弟选择器"></a>2.2.3 相邻兄弟选择器</h3><blockquote>
<p>选择<code>紧接</code>在<code>指定元素</code>后的元素，且二者有相同父元素。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*选择紧接在&lt;div&gt;后的&lt;p&gt;，修改背景色*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>+<span class="selector-tag">p</span></span></span><br><span class="line"><span class="css">&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>DIV 内部标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>DIV 内部段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>DIV 之后的第一个 P 元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>DIV 之后的第二个 P 元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220801164015184.png" alt="image-20220801164015184"></p>
<h3 id="2-2-4-后续兄弟选择器"><a href="#2-2-4-后续兄弟选择器" class="headerlink" title="2.2.4 后续兄弟选择器"></a>2.2.4 后续兄弟选择器</h3><blockquote>
<p>选择<code>指定元素</code>后的元素，且二者有相同父元素。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*选择&lt;div&gt;后，跟&lt;div&gt;有相同父亲的&lt;p&gt;*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>~<span class="selector-tag">p</span></span></span><br><span class="line"><span class="css">&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>之前段落，不会添加背景颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 1。 在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 2。 在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220801164412943.png" alt="image-20220801164412943"></p>
<h2 id="2-3-属性选择器"><a href="#2-3-属性选择器" class="headerlink" title="2.3 属性选择器"></a>2.3 属性选择器</h2><p>分为三种：</p>
<ul>
<li>使用【属性】选择</li>
<li>使用【属性 + 值】选择</li>
<li>使用【属性 + 值 + 标签】选择</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学习CSS属性选择器的使用--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*选择有name=”username“属性的标签，设置背景色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;username&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*选择有name属性的标签，设置背景色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-attr">[name]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*选择有name=”date“属性的&lt;input&gt;标签，设置背景色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;date&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: cornflowerblue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>日期</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;data&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220801165549457.png" alt="image-20220801165549457"></p>
<h1 id="3-id-x2F-name-x2F-class区别"><a href="#3-id-x2F-name-x2F-class区别" class="headerlink" title="3 id&#x2F;name&#x2F;class区别"></a>3 id&#x2F;name&#x2F;class区别</h1><blockquote>
<p>“知己知彼，百战不殆”</p>
</blockquote>
<p>他们的区别：</p>
<ul>
<li>id：标签唯一标识，好比我们身份证号码，具有唯一性。JS常用document,getGlementBy(id).</li>
<li>class：标签的类别，可重复使用，CSS常用。</li>
<li>name：标签的名称，与from表单配合使用提交数据后台</li>
</ul>
<p>id，class一般是页面使用，name一般是后台交互使用</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day52-CSS-02</title>
    <url>/2022/08/03/03_Python/02_%E5%89%8D%E7%AB%AF/day52%E7%AC%94%E8%AE%B0-CSS-02/</url>
    <content><![CDATA[<p>“第52天CSS02学习笔记”</p>
<h1 id="1-分组与嵌套"><a href="#1-分组与嵌套" class="headerlink" title="1 分组与嵌套"></a>1 分组与嵌套</h1><h2 id="1-1-分组选择器"><a href="#1-1-分组选择器" class="headerlink" title="1.1 分组选择器"></a>1.1 分组选择器</h2><p>在样式表中有很多具有相同样式的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为减少代码， 可以使用分组选择器，多个选择器之间使用<code>逗号</code>分隔</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!doctype <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/*使用分组选择器*/</span></span><br><span class="line">        <span class="selector-tag">div</span>, <span class="selector-tag">p</span>, <span class="selector-tag">span</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: darkorange;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">DIV</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;PPP&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;<span class="selector-tag">SPAN</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-嵌套选择器"><a href="#1-2-嵌套选择器" class="headerlink" title="1.2 嵌套选择器"></a>1.2 嵌套选择器</h2><p>它可能适用于选择器内部的选择器的样式。</p>
<p>在下面的例子设置了四个样式：</p>
<ul>
<li><strong>p{ }</strong>: 为所有 <strong>p</strong> 元素指定一个样式。</li>
<li><strong>.marked{ }</strong>: 为所有 <strong>class&#x3D;”marked”</strong> 的元素指定一个样式。</li>
<li><strong>.marked p{ }</strong>: 为所有 <strong>class&#x3D;”marked”</strong> 元素内的 <strong>p</strong> 元素指定一个样式。</li>
<li><strong>p.marked{ }</strong>: 为所有 <strong>class&#x3D;”marked”</strong> 的 <strong>p</strong> 元素指定一个样式。</li>
</ul>
<p>案例代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.marked</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.marked</span> <span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.marked</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-伪类选择器"><a href="#2-伪类选择器" class="headerlink" title="2 伪类选择器"></a>2 伪类选择器</h1><p>伪类选择器以<code>标签:状态</code>的方式使用</p>
<p>案例代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: darkseagreen;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*链接未点击的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标放在链接上的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标按住不放的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标点击松开后的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标放在标签上的样式*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*鼠标聚焦到输入框的样式（鼠标点了input框）*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://gsproj.github.io&quot;</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://gsproj.github.io&quot;</span>&gt;</span>JUMP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>点我进去康康<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="3-伪元素选择器"><a href="#3-伪元素选择器" class="headerlink" title="3 伪元素选择器"></a>3 伪元素选择器</h1><p>伪元素通常用来实现””首字母大写””和清除浮动带来的“父标签塌陷”的的问题</p>
<p>案例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*伪元素实现首字母大写*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-letter &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*段前添加文字*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>:before &#123;</span></span><br><span class="line"><span class="css">            content: <span class="string">&#x27;加在前面&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palevioletred;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*段后添加文字*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>:after &#123;</span></span><br><span class="line"><span class="css">            content: <span class="string">&#x27;加在后面&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palevioletred;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段不起眼的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>before和after加的文字是不能被鼠标选择的，效果如下：</p>
<p><img src="/../../../img/image-20220803163319946.png" alt="image-20220803163319946"></p>
<h1 id="4-选择器的优先级"><a href="#4-选择器的优先级" class="headerlink" title="4 选择器的优先级"></a>4 选择器的优先级</h1><p>选择器相同，书写顺序不同：</p>
<p>​	就近原则：谁离标签<strong>更近</strong>，谁的优先级<strong>越高</strong></p>
<p>选择器不同：</p>
<p>​	行内 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器</p>
<p>组合选择器通过计算权值对比：</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权值</th>
</tr>
</thead>
<tbody><tr>
<td>! important</td>
<td>&gt;1000</td>
</tr>
<tr>
<td>内联样式</td>
<td>&gt;1000</td>
</tr>
<tr>
<td>id选择器 #</td>
<td>100</td>
</tr>
<tr>
<td>类选择器 .</td>
<td>10</td>
</tr>
<tr>
<td>伪类选择器</td>
<td>10</td>
</tr>
<tr>
<td>标签选择器</td>
<td>1</td>
</tr>
<tr>
<td>通用选择器 *</td>
<td>0</td>
</tr>
<tr>
<td>继承的样式</td>
<td>0</td>
</tr>
</tbody></table>
<h1 id="5-块标签与行内标签"><a href="#5-块标签与行内标签" class="headerlink" title="5 块标签与行内标签"></a>5 块标签与行内标签</h1><p>特点：</p>
<p><strong>块标签(block)</strong></p>
<p>​	独占一行，可以设置长宽</p>
<p><strong>行内标签(inline)</strong></p>
<p>​	多个标签在一行，设置长宽无效</p>
<p>案例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*块标签设置高宽有效*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: deeppink;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*行内标签设置高宽无效*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>块标签01<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>块标签02<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内标签01<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内标签02<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220803164759050.png" alt="image-20220803164759050"></p>
<h1 id="6-字体属性"><a href="#6-字体属性" class="headerlink" title="6 字体属性"></a>6 字体属性</h1><p>修改字体样式，案例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*font-family: &quot;Arial Black&quot;,&quot;微软雅黑&quot;,&quot;...&quot;;  !*第一个不生效就用后面的 写多个备用*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-size: 24px;  !*字体大小*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-weight: inherit;  !*bolder lighter 100~900 inherit继承父元素的粗细值*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*color: red;  !*直接写颜色英文*!*/</span></span><br><span class="line">    <span class="comment">/*color: #ee762e;  !*颜色编号*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgb(128,23,45);  !*三基色 数字  范围0-255*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgba(23, 128, 91, 0.9);  !*第四个参数是颜色的透明度 范围是0-1*!*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-文字属性"><a href="#7-文字属性" class="headerlink" title="7 文字属性"></a>7 文字属性</h1><p>修改文字居中、下划线等显示样式，案例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="comment">/*text-align: center;  !*居中*!*/</span></span><br><span class="line">            <span class="comment">/*text-align: right;*/</span></span><br><span class="line">            <span class="comment">/*text-align: left;*/</span></span><br><span class="line">            <span class="comment">/*text-align: justify;  !*两端对齐*!*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*text-decoration: underline;*/</span></span><br><span class="line">            <span class="comment">/*text-decoration: overline;*/</span></span><br><span class="line">            <span class="comment">/*text-decoration: line-through;*/</span></span><br><span class="line">            <span class="comment">/*text-decoration: none;*/</span></span><br><span class="line">            <span class="comment">/*在html中 有很多标签渲染出来的样式效果是一样的*/</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">text-indent</span>: <span class="number">32px</span>;   <span class="comment">/*缩进32px*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;  <span class="comment">/*主要用于给a标签去掉自带的下划线  需要掌握*/</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-背景图片"><a href="#8-背景图片" class="headerlink" title="8 背景图片"></a>8 背景图片</h1><p>给标签添加背景色&#x2F;背景图片, 案例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, <span class="attribute">initial</span>-scale=<span class="number">1</span>&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-id">#d1</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d2</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d3</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;222.png&quot;</span>);	<span class="comment">/*添加背景图片*/</span></span><br><span class="line">            <span class="attribute">background-attachment</span>: fixed;	<span class="comment">/*背景保持不动*/</span></span><br><span class="line">            <span class="attribute">background-repeat</span>: no-repeat;   <span class="comment">/*背景图不平铺*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d4</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d3&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d4&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="9-边框"><a href="#9-边框" class="headerlink" title="9 边框"></a>9 边框</h1><p>设置元素的边框样式，案例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-color</span>: green;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-width: 5px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-color: red;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-style: dotted;*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-color: greenyellow;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-style: solid;*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-width: 15px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-color: deeppink;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-style: dashed;*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-color: tomato;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-style: solid;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;  <span class="comment">/*三者位置可以随意写*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;  <span class="comment">/*设置边框椭圆：直接写50%即可 长宽一样就是圆 不一样就是椭圆*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个有趣的故事<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>乌拉阿拉蕾<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="10-display属性"><a href="#10-display属性" class="headerlink" title="10 display属性"></a>10 display属性</h1><p>display属性常用方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>:none	隐藏元素，位置不占用</span><br><span class="line">display:block	转换为块元素（独占一行，可调节高宽）</span><br><span class="line">display:inline	转换为行内元素（非独占一行，不可调节高宽）</span><br><span class="line">display:inline-block	转换为行内块元素（非独占一行，可调节高宽）</span><br></pre></td></tr></table></figure>

<p>另一个隐藏属性的方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: hidden</span><br></pre></td></tr></table></figure>

<p>与<code>display:none</code>的区别：隐藏的属性**<font color='red'>仍然占用位置</font>**</p>
<p>案例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    !*display: none;  !*隐藏标签不展示到前端页面并且原来的位置也不再占有了 但是还存在于文档上*!*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;  !*将标签设置为行内标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;  !*将标签设置成块儿级标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;  !*标签即可以在一行显示又可以设置长宽*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden&quot;</span>&gt;</span>单纯的隐藏 位置还在<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-盒子模型"><a href="#11-盒子模型" class="headerlink" title="11 盒子模型"></a>11 盒子模型</h1><p>什么是盒子模型？</p>
<ul>
<li>就以快递盒为例</li>
<li>快递盒与快递盒之间的距离(标签与标签之间的距离 margin外边距)</li>
<li>盒子的厚度(标签的边框 border)</li>
<li>盒子里面的物体到盒子的距离(内容到边框的距离  padding内边距)</li>
<li>物体的大小(内容 content)</li>
</ul>
<p>如果你想要调整标签与标签之间的距离 你就可以调整margin</p>
<blockquote>
<p>补充：浏览器会自带8px的margin，一般情况下我们在写页面的时候，上来就会先将body的margin去除</p>
</blockquote>
<p><img src="/../../../img/image-20220804084912153.png" alt="image-20220804084912153"></p>
<p>案例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;  <span class="comment">/*上下左右全是0</span></span></span><br><span class="line"><span class="comment"><span class="css">            /*margin: 10px 20px;  !* 第一个上下 第二个左右*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin: 10px 20px 30px;  !*第一个上  第二个左右  第三个下*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin: 10px 20px 30px 40px;  !*上 右 下 左*!*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*p &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    margin-left: 0;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    margin-top: 0;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    margin-right: 0;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    margin-bottom: 0;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;  <span class="comment">/*不叠加 只取大的*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#dd</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;  <span class="comment">/*只能做到标签的水平居中*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-left: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-top: 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-right: 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-bottom: 50px;*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px 30px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px 30px 40px;*/</span>  <span class="comment">/*规律和margin一模一样*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;p style=&quot;border: 1px solid red;&quot; id=&quot;d1&quot;&gt;ppp&lt;/p&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;p style=&quot;border: 1px solid orange;&quot; id=&quot;d2&quot;&gt;ppp&lt;/p&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;border: 3px solid red;height: 400px;width: 400px&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id=&#x27;dd&#x27; style=&quot;border: 1px solid orange;height: 50px;width: 50px;background-color: blue;&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="12-浮动"><a href="#12-浮动" class="headerlink" title="12 浮动"></a>12 浮动</h1><p>浮动的元素，没有块级和行内一说，本身多大浮起来之后就占多大</p>
<p>案例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">只要是设计到页面的布局一般都是用浮动来提前规划好</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;  <span class="comment">/*浮动  浮到空中往左飘*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;   <span class="comment">/*浮动 浮到空中往右飘*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>overflow:hidden</code>超出部分隐藏，用来解决外边距塌陷问题：</p>
<p>父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷。</p>
<h1 id="13-浮动带来的影响"><a href="#13-浮动带来的影响" class="headerlink" title="13 浮动带来的影响"></a>13 浮动带来的影响</h1>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day53-CSS-03</title>
    <url>/2022/08/08/03_Python/02_%E5%89%8D%E7%AB%AF/day53%E7%AC%94%E8%AE%B0-CSS-03/</url>
    <content><![CDATA[<p>“第53天CSS03学习笔记”</p>
<h1 id="1-解决浮动带来的影响"><a href="#1-解决浮动带来的影响" class="headerlink" title="1 解决浮动带来的影响"></a>1 解决浮动带来的影响</h1><p>浮动会带来<code>父标签塌陷</code>的问题，什么是<code>父标签塌陷</code>？</p>
<p>案例代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">STYle</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">5px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.P1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: coral;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="comment">/*左浮动*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;	</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">STYle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建父标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建子标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;P1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在理想情况下，应该是一个黑框包住两个色块，如下图所示：</p>
<p><img src="/../../../img/image-20220808092801800.png" alt="image-20220808092801800"></p>
<p>但是实际情况是这样的, 元素浮动后脱离文档流, 父DIV塌陷了：</p>
<p><img src="/../../../img/image-20220808092912191.png" alt="image-20220808092912191"></p>
<p>有3种方法处理这个问题：</p>
<h2 id="1-1-指定父标签的高度"><a href="#1-1-指定父标签的高度" class="headerlink" title="1.1 指定父标签的高度"></a>1.1 指定父标签的高度</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/* 父标签添加高度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-利用clear属性"><a href="#1-2-利用clear属性" class="headerlink" title="1.2 利用clear属性"></a>1.2 利用clear属性</h2><p>该标签的左边不能有浮动的元素, </p>
<p>原理: P4标签左边不能有浮动, 实际上是新起了一行, 把父标签撑起来了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">STYle</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">5px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.P1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: coral;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="comment">/*左浮动*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;	</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">		</span></span><br><span class="line"><span class="css">        <span class="comment">/*P4标签clear*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.P4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">STYle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建父标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建子标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;P1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建P4标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;P4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-使用clearfix-推荐"><a href="#1-3-使用clearfix-推荐" class="headerlink" title="1.3 使用clearfix(推荐)"></a>1.3 使用clearfix(推荐)</h2><p>在写html页面之前 先提前写好处理浮动带来的影响的 css代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>谁塌陷就给谁用, 这里用到div元素上面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建父标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 创建子标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;P1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="2-溢出属性"><a href="#2-溢出属性" class="headerlink" title="2 溢出属性"></a>2 溢出属性</h1><p>见名知意, 溢出属性用来控制溢出的部分, 案例代码如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        童趣</span><br><span class="line">【作者】沈复 【朝代】清译文对照</span><br><span class="line">余忆童稚时，能张目对日，明察秋毫，见藐小之物必细察其纹理，故时有物外之趣。</span><br><span class="line"></span><br><span class="line">夏蚊成雷，私拟作群鹤舞于空中，心之所向，则或千或百，果然鹤也；昂首观之，项为之强。又留蚊于素帐中，徐喷以烟，使之冲烟而飞鸣，作青云白鹤观，果如鹤唳云端，为之怡然称快。</span><br><span class="line"></span><br><span class="line">余常于土墙凹凸处，花台小草丛杂处，蹲其身，使与台齐；定神细视，以丛草为林，以虫蚁为兽，以土砾凸者为丘，凹者为壑，神游其中，怡然自得。</span><br><span class="line"></span><br><span class="line">一日，见二虫斗草间，观之，兴正浓，忽有庞然大物，拔山倒树而来，盖一癞虾蟆，舌一吐而二虫尽为所吞。余年幼，方出神，不觉呀然一惊。神定，捉虾蟆，鞭数十，驱之别院。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可见文字溢出了</p>
<p><img src="/../../../img/image-20220808101749039.png" alt="image-20220808101749039"></p>
<p>通过溢出属性控制:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* overflow: visible;  默认就是可见 溢出还是展示  */</span></span><br><span class="line">    <span class="comment">/* overflow: hidden;  溢出部分直接隐藏 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: scroll;  <span class="comment">/* 设置成上下滚动条的形式 */</span></span><br><span class="line">    <span class="comment">/* overflow: auto; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如使用scroll就是如下图样式:</p>
<p><img src="/../../../img/image-20220808102150792.png" alt="image-20220808102150792"></p>
<h1 id="3-定位"><a href="#3-定位" class="headerlink" title="3 定位"></a>3 定位</h1><ul>
<li><p>静态</p>
<p>所有的标签默认都是静态的static，无法改变位置</p>
</li>
<li><p>相对定位(了解)</p>
<p>相对于标签原来的位置做移动relative</p>
</li>
<li><p>绝对定位(常用)</p>
<p>相对于已经定位过的父标签做移动(如果没有父标签那么就以body为参照)</p>
<p>eg:小米网站购物车</p>
<p>当你不知道页面其他标签的位置和参数，只给了你一个父标签的参数，让你基于该标签左定位</p>
</li>
<li><p>固定定位(常用)</p>
<p>相对于浏览器窗口固定在某个位置</p>
<p>eg:右侧小广告</p>
</li>
</ul>
<h2 id="3-1-案例1–子绝父相"><a href="#3-1-案例1–子绝父相" class="headerlink" title="3.1 案例1–子绝父相"></a>3.1 案例1–子绝父相</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="comment">/* d1相对定位：相对于原来的位置，往下移动50px，往右移动50px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50px</span>;  <span class="comment">/*从左往右   如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50px</span>;  <span class="comment">/*从上往下    如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position: static;  !*默认是static无法修改位置*!*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="comment">/*相对定位</span></span></span><br><span class="line"><span class="comment"><span class="css">            标签由static变为relative它的性质就从原来没有定位的标签变成了已经定位过的标签</span></span></span><br><span class="line"><span class="comment"><span class="css">            虽然你哪怕没有动 但是你的性质也已经改变了</span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* d2属性改为相对定位 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;  <span class="comment">/*已经定位过了*/</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* d3相对于父标签d2，往右移动200px, 往下移动100px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/../../../img/image-20220808104234138.png" alt="image-20220808104234138"></p>
<h2 id="3-2-案例2–固定定位"><a href="#3-2-案例2–固定定位" class="headerlink" title="3.2 案例2–固定定位"></a>3.2 案例2–固定定位</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="comment">/* d4设置为固定定位，定在右下角 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;  <span class="comment">/*写了fixed之后 定位就是依据浏览器窗口*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: greenyellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/../../../img/image-20220808103941331.png" alt="image-20220808103941331"></p>
<h1 id="4-浮动和定位是否脱离文档流"><a href="#4-浮动和定位是否脱离文档流" class="headerlink" title="4 浮动和定位是否脱离文档流"></a>4 浮动和定位是否脱离文档流</h1><p>浮动&#x2F;定位后的元素, <code>原来的位置</code>是否还保留呢?</p>
<ul>
<li>不脱离文档流<ul>
<li>相对定位</li>
</ul>
</li>
<li>脱离文档流<ul>
<li>绝对定位</li>
<li>固定定位</li>
<li>浮动</li>
</ul>
</li>
</ul>
<h1 id="5-z-index模态框"><a href="#5-z-index模态框" class="headerlink" title="5 z-index模态框"></a>5 z-index模态框</h1><p>什么是z-index模态框? 以百度登录界面为例:</p>
<p>百度登陆页面 其实是三层结构</p>
<ul>
<li>最底部是正常内容(z&#x3D;0)  	最远的</li>
<li>黑色的透明区(z&#x3D;99)  		 中间层</li>
<li>白色的注册区域(z&#x3D;100) 	 离用户最近</li>
</ul>
<p>z-index其实就是一种<code>堆叠显示</code>的的方法,控制<code>谁在上层,谁在下层</code></p>
<p><strong><font color="red">数值越大, 越上层</font></strong></p>
<p>案例代码如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:deepskyblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;    <span class="comment">/* 固定定位，脱离文档流 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: -<span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">99</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将元素左上角定位到页面中心 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 通过margin将元素的内容挪到中间 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置显示在最上层 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">100</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span>最底层的页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>账号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;是兄弟就来点我&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/../../../img/image-20220808111427871.png" alt="image-20220808111427871"></p>
<h1 id="6-透明度"><a href="#6-透明度" class="headerlink" title="6 透明度"></a>6 透明度</h1><p>使用<code>opacity</code>设置透明度,案例代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; <span class="attribute">content</span>=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, <span class="attribute">initial</span>-scale=<span class="number">1.0</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: cornflowerblue;</span><br><span class="line">            <span class="comment">/* color: rgba(0, 0, 0, 0.5); */</span></span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;测试字体TEST&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>

<p>补充知识: opcity和rgba的区别?</p>
<p>在<code>没有设置透明</code>的情况下, 效果如下图:</p>
<p><img src="/../../../img/image-20220808142123596.png" alt="image-20220808142123596"></p>
<p>单独设置<code>opcity: 0.5</code>后如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>



<p><img src="/../../../img/image-20220808142213251.png" alt="image-20220808142213251"></p>
<p>单独设置<code>rgba透明度0.5</code>后,如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>



<p><img src="/../../../img/image-20220808142251359.png" alt="image-20220808142251359"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day54-JavaScript-01</title>
    <url>/2022/08/08/03_Python/02_%E5%89%8D%E7%AB%AF/day54%E7%AC%94%E8%AE%B0-JS-01/</url>
    <content><![CDATA[<p>“第54天JavaScript（01）学习笔记”</p>
<h1 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1 JavaScript简介"></a>1 JavaScript简介</h1><p><strong><font color=blue>JavaScript(简称JS)</font></strong> 听起来是不是感觉跟Java的关系很大?</p>
<p>其实跟Java什么关系都没有, 只是为了<font color="red"><strong>蹭Java的热度</strong></font>,才起的这么个名字!</p>
<p>JS到底是什么?</p>
<ul>
<li>JavaScript 是脚本语言</li>
<li>JavaScript 是一种轻量级的编程语言。</li>
<li>JavaScript 是可插入 HTML 页面的编程代码。</li>
<li>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</li>
<li>JavaScript 很容易学习</li>
</ul>
<p>第一个js程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 单行注释</span><br><span class="line">        </span><br><span class="line">        /*</span><br><span class="line">        多行注释</span><br><span class="line">        */</span><br><span class="line">        </span><br><span class="line">        document.write(&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="2-JS变量"><a href="#2-JS变量" class="headerlink" title="2 JS变量"></a>2 JS变量</h1><h2 id="2-1-定义变量的两种方法"><a href="#2-1-定义变量的两种方法" class="headerlink" title="2.1 定义变量的两种方法"></a>2.1 定义变量的两种方法</h2><ul>
<li>var </li>
<li>let  (es6推出的新语法, 如果你的编辑器支持的版本是5.1那么无法使用let)</li>
</ul>
<p>案例代码如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var定义变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num1 = <span class="number">100</span></span></span><br><span class="line"><span class="javascript">        alert(num1)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// let定义变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> num2 = <span class="number">300</span></span></span><br><span class="line"><span class="javascript">        alert(num2)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>let和var的区别是什么?  </p>
<ul>
<li><p>var是函数作用域，let是块作用域\</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> num = <span class="number">0</span>; num &lt; <span class="number">100</span>; num++)&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 输出100	(说明函数内有效)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num2 = <span class="number">0</span>; num &lt; <span class="number">100</span>; num++)&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num2) <span class="comment">// 输出错误, num2未定义	(说明离开for循环块,就无效了)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>let不能在定义之前访问该变量, 但是var可以\</p>
<p>var正常</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num1)</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">300</span>  <span class="comment">// 无报错，不输出东西</span></span><br></pre></td></tr></table></figure>

<p>let报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num1)</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">300</span>  <span class="comment">// 无报错，不输出东西</span></span><br><span class="line"><span class="comment">// 报错:02-变量.html:14 Uncaught ReferenceError: Cannot access &#x27;num1&#x27; before initialization</span></span><br><span class="line">    at <span class="number">02</span>-变量.html:<span class="number">14</span>:<span class="number">21</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>let不能被重新定义, 但是var可以</p>
<p>var正常</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(num1)    <span class="comment">// 正常输出100</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(num1)    <span class="comment">// 正常输出200</span></span><br></pre></td></tr></table></figure>

<p>let报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line"><span class="comment">// 报错: Uncaught SyntaxError: Identifier &#x27;num1&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-2-变量的命名规范"><a href="#2-2-变量的命名规范" class="headerlink" title="2.2 变量的命名规范"></a>2.2 变量的命名规范</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">js变量的命名规范</span><br><span class="line">	1.变量名只能是 </span><br><span class="line">		数字 字母 下划线 $</span><br><span class="line">	2.变量名命名规范(不遵循也可以)</span><br><span class="line">		1.js中推荐使用驼峰式命名</span><br><span class="line">			userName</span><br><span class="line">			dataOfDb</span><br><span class="line">		2.python推荐使用下划线的方式</span><br><span class="line">			user_name</span><br><span class="line">			data_of_db</span><br><span class="line">	3.不能用关键字作为变量名</span><br><span class="line">			不需要记忆 </span><br></pre></td></tr></table></figure>



<h2 id="2-3-代码的书写位置"><a href="#2-3-代码的书写位置" class="headerlink" title="2.3 代码的书写位置"></a>2.3 代码的书写位置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.可以单独开设js文件书写</span><br><span class="line">2.还可以直接在浏览器提供的console界面书写</span><br><span class="line">	在用浏览器书写js的时候 左上方的清空按钮只是清空当前页面 代码其实还在</span><br><span class="line">	如果你想要重新来 最好重新开设一个 页面</span><br></pre></td></tr></table></figure>



<h1 id="3-JS常量"><a href="#3-JS常量" class="headerlink" title="3 JS常量"></a>3 JS常量</h1><p>js中使用<code>const</code>定义常量, 不可被修改的变量</p>
<blockquote>
<p>补充: Python中没有真正意义上的常量,默认全大小代表常量,而JS中有真正意义上的常量</p>
</blockquote>
<p>案例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(pi)</span><br><span class="line">pi = <span class="number">80</span> <span class="comment">// 报错：Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h1><p>js也是一门面向对象 的编程语言 即一切皆对象!!!</p>
<p>js&#x2F;python是一门拥有动态类型</p>
<p>案例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">name = <span class="number">123</span></span><br><span class="line">name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"># name可以指向任意的数据类型 </span><br></pre></td></tr></table></figure>



<h2 id="4-1-数值类型（Number）"><a href="#4-1-数值类型（Number）" class="headerlink" title="4.1 数值类型（Number）"></a>4.1 数值类型（Number）</h2><p>常用方法：<br>    parseInt()		转换为Int类型	<br>    parseFloat()	转换为Float类型</p>
<p>案例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">11.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何查看当前数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看参数的类型</span></span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"><span class="keyword">typeof</span> b;</span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的 NaN:数值类型 表示的意思是“不是一个数字” NOT A NUMBER</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12312312&#x27;</span>)	<span class="comment">// 正常将字符串转为Int类型</span></span><br><span class="line"><span class="number">12312312</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;11.11&#x27;</span>)		<span class="comment">// 正常将字符串转为浮点类型</span></span><br><span class="line"><span class="number">11.11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;11.11&#x27;</span>)	<span class="comment">// 正常将字符串转为Int类型，将去掉小数点后面的数</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123sdasdajs2312dasd&#x27;</span>)	<span class="comment">// 只取前面的数</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;asdasdad123sdasdajs2312dasd&#x27;</span>)	<span class="comment">// 完全无法识别的转换为NaN</span></span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure>



<h2 id="4-2-字符类型（String）"><a href="#4-2-字符类型（String）" class="headerlink" title="4.2 字符类型（String）"></a>4.2 字符类型（String）</h2><p>定义字符串的案例代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用【单引号】定义变量</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动识别成了字符类型</span></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用【双引号】定义字符串</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;jason&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动识别成了字符类型</span></span><br><span class="line"><span class="keyword">typeof</span> s2</span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能使用python的三引号方式定义多行文本的字符串</span></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;jason&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">VM894</span>:<span class="number">1</span> Uncaught <span class="built_in">SyntaxError</span>: Unexpected string</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript中使用【反引号】定义多行文本的字符串</span></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">`</span></span><br><span class="line"><span class="string">这是多行文字</span></span><br><span class="line"><span class="string">的演示</span></span><br><span class="line"><span class="string">这是多行文字</span></span><br><span class="line"><span class="string">的演示</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 输出s3</span></span><br><span class="line">s3</span><br><span class="line"><span class="string">&#x27;\n这是多行文字\n的演示\n这是多行文字\n的演示\n&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输出字符串的案例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过$&#123;&#125;的方式输出字符串</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;GLF&quot;</span></span><br><span class="line"><span class="keyword">var</span> sss = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and my age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">sss</span><br><span class="line"><span class="string">&#x27;My name is GLF and my age is 18&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中推荐使用【+】号拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> year = <span class="string">&#x27;2022&#x27;</span></span><br><span class="line"><span class="keyword">var</span> day = <span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="keyword">var</span> month = <span class="string">&#x27;08&#x27;</span></span><br><span class="line">date = <span class="string">`Today is <span class="subst">$&#123;year + <span class="string">&#x27;-&#x27;</span> + month + day&#125;</span>`</span></span><br><span class="line"><span class="string">&#x27;Today is 2022-0812&#x27;</span></span><br><span class="line">date</span><br><span class="line"><span class="string">&#x27;Today is 2022-0812&#x27;</span></span><br></pre></td></tr></table></figure>

<p>字符类型常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>返回字符串长度</td>
</tr>
<tr>
<td>trim()</td>
<td>移除空白</td>
</tr>
<tr>
<td>trimLeft()</td>
<td>移除左边的空白</td>
</tr>
<tr>
<td>trimRight()</td>
<td>移除右边的空白</td>
</tr>
<tr>
<td>charAt(n)</td>
<td>返回第n个字符</td>
</tr>
<tr>
<td>concat(value, ….)</td>
<td>拼接字符串</td>
</tr>
<tr>
<td>indexof(substring, start)</td>
<td>子序列位置</td>
</tr>
<tr>
<td>substring(from, to)</td>
<td>根据索引获取子序列</td>
</tr>
<tr>
<td>slice(start, end)</td>
<td>切片</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>小写</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>大写</td>
</tr>
<tr>
<td>split(delimiter, limit)</td>
<td>分割</td>
</tr>
</tbody></table>
<p><code>length</code>方法案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;you are beautiful&#x27;</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>

<p>trim()方法案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot; my left and right have blank &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &quot;my left and right have blank&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.trim())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &quot; my left and right have blank&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.trimRight())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &quot;my left and right have blank &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.trimLeft())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能像Python一样指定去除的内容</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;$$Test string$$&quot;</span></span><br><span class="line">str.trim(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;$$Test string$$&#x27;</span> <span class="comment">// 去除$失败了</span></span><br></pre></td></tr></table></figure>

<p><code>charAt()</code>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;$$Test string$$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取位置0和8的字符</span></span><br><span class="line">str.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;$&#x27;</span></span><br><span class="line">str.charAt(<span class="number">8</span>)</span><br><span class="line"><span class="string">&#x27;t&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>indexOf()</code>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;$$Test string$$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取&#x27;st&#x27;和&#x27;str&#x27;第一次出现的位置</span></span><br><span class="line">str.indexOf(<span class="string">&#x27;st&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">str.indexOf(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<p><code>substring()</code>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;$$Test string$$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取位置1-5的字串</span></span><br><span class="line">str.substr(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;$Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用负数，表示倒数</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">str.substr(-<span class="number">3</span>, <span class="number">20</span>)	<span class="comment">// 20超出范围，选到最后的位置</span></span><br><span class="line"><span class="string">&#x27;678&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>slice()</code>案例（功能跟<code>substring()</code>类似，推荐使用这个）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;12345678&quot;</span></span><br><span class="line"><span class="comment">// 切片(1，5)</span></span><br><span class="line">str.substr(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;23456&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>toLowerCase()</code>和<code>toUpperCase()</code>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ToDay is MONDAY&#x27;</span></span><br><span class="line">str.toLowerCase()</span><br><span class="line"><span class="string">&#x27;today is monday&#x27;</span></span><br><span class="line">str.toUpperCase()</span><br><span class="line"><span class="string">&#x27;TODAY IS MONDAY&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>split()</code>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Jerry | Tom | Jemmy | Marry&quot;</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定分割符分割</span></span><br><span class="line">name.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;Jerry &#x27;</span>, <span class="string">&#x27; Tom &#x27;</span>, <span class="string">&#x27; Jemmy &#x27;</span>, <span class="string">&#x27; Marry&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数可以指定获取的元素个数</span></span><br><span class="line">name.split(<span class="string">&#x27;|&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">&#x27;Jerry &#x27;</span>, <span class="string">&#x27; Tom &#x27;</span>]</span><br><span class="line">name.split(<span class="string">&#x27;|&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;Jerry &#x27;</span>, <span class="string">&#x27; Tom &#x27;</span>, <span class="string">&#x27; Jemmy &#x27;</span>, <span class="string">&#x27; Marry&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>concat()</code>案例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;Hello everyone!&quot;</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;My name is Tom!&quot;</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接str1和str2</span></span><br><span class="line">str1.concat(str2)</span><br><span class="line"><span class="string">&#x27;Hello everyone!My name is Tom!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非字符串类型会自动转换后拼接</span></span><br><span class="line"><span class="keyword">var</span> phoneNumber = <span class="number">12345678</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">str1.concat(phoneNumber)</span><br><span class="line"><span class="string">&#x27;Hello everyone!12345678&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-3-布尔值-boolean"><a href="#4-3-布尔值-boolean" class="headerlink" title="4.3 布尔值(boolean)"></a>4.3 布尔值(boolean)</h2><p>JS布尔值的定义：</p>
<ul>
<li>在python中布尔值是首字母大写的<ul>
<li>True &#x2F; False</li>
</ul>
</li>
<li>但是在js中布尔值是全小写的<ul>
<li>true &#x2F; false</li>
</ul>
</li>
<li>布尔值是false的有哪些<ul>
<li>空字符串</li>
<li>0</li>
<li>null</li>
<li>undefined</li>
<li>NaN</li>
</ul>
</li>
</ul>
<p>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isFalse = <span class="literal">false</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">true</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>



<h2 id="4-4-null与undefined的区别"><a href="#4-4-null与undefined的区别" class="headerlink" title="4.4 null与undefined的区别"></a>4.4 null与undefined的区别</h2><p>null</p>
<p>​	表示值为空 一般都是指定或者清空一个变量时使用</p>
<p>如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">name = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>undefined</p>
<p>​	表示声明了一个变量 但是没有做初始化操作(没有给值)</p>
<p>​	函数没有指定返回值的时候 返回的也是undefined</p>
<h2 id="4-5-对象-数组"><a href="#4-5-对象-数组" class="headerlink" title="4.5 对象(数组)"></a>4.5 对象(数组)</h2><p>JS数组类似于Python中的列表<code>[]</code>，在JS中<code>一切皆为对象</code></p>
<h3 id="4-5-1-数组的定义"><a href="#4-5-1-数组的定义" class="headerlink" title="4.5.1 数组的定义"></a>4.5.1 数组的定义</h3><p>见案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">11</span>, <span class="string">&quot;abc&quot;</span>, <span class="number">33.44</span>, <span class="literal">false</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line">list[<span class="number">3</span>]</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型是`对象`</span></span><br><span class="line"><span class="keyword">typeof</span>(list)</span><br><span class="line"><span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-2-数组的常用方法"><a href="#4-5-2-数组的常用方法" class="headerlink" title="4.5.2 数组的常用方法"></a>4.5.2 数组的常用方法</h3><p><code>length</code>获取数组长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">11</span>, <span class="string">&quot;abc&quot;</span>, <span class="number">33.44</span>, <span class="literal">false</span>]</span><br><span class="line">list.length</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><code>push()</code>追加元素到尾部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 追加元素，返回追加后的数组长度</span></span><br><span class="line">list.push(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">5</span>) [<span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">33.44</span>, <span class="literal">false</span>, <span class="string">&#x27;Hello&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>pop()</code>弹出尾部元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list</span><br><span class="line">(<span class="number">5</span>) [<span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">33.44</span>, <span class="literal">false</span>, <span class="string">&#x27;Hello&#x27;</span>]</span><br><span class="line"><span class="comment">// 弹出元素（从最后一个开始）</span></span><br><span class="line">list.pop()</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">list.pop()</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">list.pop()</span><br><span class="line"><span class="number">33.44</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">2</span>) [<span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>unshift()</code>数组头部插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">3</span>) [<span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部插入元素</span></span><br><span class="line">list.unshift(<span class="string">&quot;Good&quot;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次查看</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;Good&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>shift()</code>数组弹出头部元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;Good&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除头部元素</span></span><br><span class="line">list.shift()</span><br><span class="line"><span class="string">&#x27;Good&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看头部元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">3</span>) [<span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>slice()</code>数组切割</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">555</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切割</span></span><br><span class="line">list.slice(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><code>reverse()</code>数组反转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">555</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组反转</span></span><br><span class="line">list.reverse()</span><br><span class="line">(<span class="number">4</span>) [<span class="number">555</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<p><code>join()</code>将<code>数组元素</code>转换为<code>字符串</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="number">555</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为字符串（参数为`拼接符号`）</span></span><br><span class="line">list.join(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;555$abc$11$11&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>concat()</code>拼接数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">list</span><br><span class="line">(<span class="number">4</span>) [<span class="number">555</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接另一个数组</span></span><br><span class="line">list.concat([<span class="string">&#x27;Duo&#x27;</span>, <span class="number">888</span>, <span class="string">&quot;hello&quot;</span>])</span><br><span class="line">(<span class="number">7</span>) [<span class="number">555</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;Duo&#x27;</span>, <span class="number">888</span>, <span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以拼接多个数组</span></span><br><span class="line">list.concat([<span class="string">&#x27;Duo&#x27;</span>, <span class="number">888</span>, <span class="string">&quot;hello&quot;</span>], [<span class="number">666</span>, <span class="number">888</span>])</span><br><span class="line">(<span class="number">9</span>) [<span class="number">555</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="string">&#x27;Duo&#x27;</span>, <span class="number">888</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">666</span>, <span class="number">888</span>]</span><br></pre></td></tr></table></figure>

<p><code>sort()</code>数组排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list2 = [<span class="number">666</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">888</span>, <span class="number">999</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line">list2.sort()</span><br><span class="line">(<span class="number">5</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">666</span>, <span class="number">888</span>, <span class="number">999</span>]</span><br></pre></td></tr></table></figure>



<h3 id="4-5-3-三个比较重要的方法"><a href="#4-5-3-三个比较重要的方法" class="headerlink" title="4.5.3 三个比较重要的方法"></a>4.5.3 三个比较重要的方法</h3><p>1） <code>foreach()</code>遍历数组元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> list1 = [<span class="string">&quot;Changsha&quot;</span>, <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组（一个参数：显示值）</span></span><br><span class="line"><span class="keyword">var</span> list1 = [<span class="string">&quot;Changsha&quot;</span>, <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">list1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;)</span><br><span class="line"><span class="attr">VM942</span>:<span class="number">1</span> Changsha</span><br><span class="line"><span class="attr">VM942</span>:<span class="number">1</span> Beijing</span><br><span class="line"><span class="attr">VM942</span>:<span class="number">1</span> Shanghai</span><br><span class="line"><span class="attr">VM942</span>:<span class="number">1</span> Taiwan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组（两个参数：显示值和下标）</span></span><br><span class="line">list1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;<span class="built_in">console</span>.log(value, index)&#125;, list1)</span><br><span class="line"><span class="attr">VM541</span>:<span class="number">1</span> Changsha <span class="number">0</span></span><br><span class="line"><span class="attr">VM541</span>:<span class="number">1</span> Beijing <span class="number">1</span></span><br><span class="line"><span class="attr">VM541</span>:<span class="number">1</span> Shanghai <span class="number">2</span></span><br><span class="line"><span class="attr">VM541</span>:<span class="number">1</span> Taiwan <span class="number">3</span></span><br><span class="line">undefine</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组（三个参数：显示值、下标、数据来源）</span></span><br><span class="line">list1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;<span class="built_in">console</span>.log(value, index, arr)&#125;)</span><br><span class="line"><span class="attr">VM1237</span>:<span class="number">1</span> Changsha <span class="number">0</span> (<span class="number">4</span>) [<span class="string">&#x27;Changsha&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Taiwan&#x27;</span>]</span><br><span class="line"><span class="attr">VM1237</span>:<span class="number">1</span> Beijing <span class="number">1</span> (<span class="number">4</span>) [<span class="string">&#x27;Changsha&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Taiwan&#x27;</span>]</span><br><span class="line"><span class="attr">VM1237</span>:<span class="number">1</span> Shanghai <span class="number">2</span> (<span class="number">4</span>) [<span class="string">&#x27;Changsha&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Taiwan&#x27;</span>]</span><br><span class="line"><span class="attr">VM1237</span>:<span class="number">1</span> Taiwan <span class="number">3</span> (<span class="number">4</span>) [<span class="string">&#x27;Changsha&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;Taiwan&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>2） <code>splice()</code>替换数组元素（<code>先删除后添加</code>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> ll = [<span class="string">&quot;11&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;33&quot;</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标0开始，删除2个元素</span></span><br><span class="line">ll.splice(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看效果</span></span><br><span class="line">ll</span><br><span class="line">[<span class="string">&#x27;33&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">ll.push(<span class="string">&#x27;66&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">ll.push(<span class="string">&#x27;88&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">ll.push(<span class="string">&#x27;99&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看数组元素</span></span><br><span class="line">ll</span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;66&#x27;</span>, <span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;99&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标1开始，删除2个元素，替换为&#x27;9090&#x27;插入</span></span><br><span class="line">ll.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="number">9090</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">&#x27;66&#x27;</span>, <span class="string">&#x27;88&#x27;</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="string">&#x27;33&#x27;</span>, <span class="number">9090</span>, <span class="string">&#x27;99&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续追加参数为替换后新增的元素</span></span><br><span class="line"><span class="keyword">var</span> ll2 = [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;44&#x27;</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ll2.splice(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Man&#x27;</span>, <span class="string">&#x27;HAHA&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见删除的两个元素被替换了</span></span><br><span class="line">ll2</span><br><span class="line">(<span class="number">5</span>) [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Man&#x27;</span>, <span class="string">&#x27;HAHA&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;44&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3）<code>map()</code>遍历数组元素</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> ll = [<span class="string">&quot;11&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;33&quot;</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组元素（方法和forEach类似，也可以最多三个参数）</span></span><br><span class="line">ll.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;, ll)</span><br><span class="line"><span class="attr">VM2621</span>:<span class="number">1</span> <span class="number">11</span></span><br><span class="line"><span class="attr">VM2621</span>:<span class="number">1</span> <span class="number">22</span></span><br><span class="line"><span class="attr">VM2621</span>:<span class="number">1</span> <span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数输出数组</span></span><br><span class="line">ll.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, aaa</span>)</span>&#123;<span class="built_in">console</span>.log(value, index, aaa)&#125;, ll)</span><br><span class="line"><span class="attr">VM3143</span>:<span class="number">1</span> <span class="number">11</span> <span class="number">0</span> (<span class="number">3</span>) [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>]</span><br><span class="line"><span class="attr">VM3143</span>:<span class="number">1</span> <span class="number">22</span> <span class="number">1</span> (<span class="number">3</span>) [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>]</span><br><span class="line"><span class="attr">VM3143</span>:<span class="number">1</span> <span class="number">33</span> <span class="number">2</span> (<span class="number">3</span>) [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理数组数据</span></span><br><span class="line">ll.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="keyword">return</span> value * <span class="number">2</span>&#125;, ll)</span><br><span class="line">(<span class="number">3</span>) [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>]</span><br></pre></td></tr></table></figure>



<h1 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5 运算符"></a>5 运算符</h1><h2 id="5-1-算术运算符"><a href="#5-1-算术运算符" class="headerlink" title="5.1 算术运算符"></a>5.1 算术运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> res1 = x++;</span><br><span class="line"><span class="keyword">var</span> res2 = ++x;</span><br><span class="line">res1 <span class="number">10</span></span><br><span class="line">res2 <span class="number">12</span></span><br><span class="line">++表示自增<span class="number">1</span> 类似于 +=<span class="number">1</span></span><br><span class="line">加号在前先加后赋值 加号在后先赋值后加</span><br></pre></td></tr></table></figure>

<h2 id="5-2-比较运算符"><a href="#5-2-比较运算符" class="headerlink" title="5.2 比较运算符"></a>5.2 比较运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>  # 弱等于  内部自动转换成相同的数据类型比较了</span><br><span class="line"><span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>  # 强等于  内部不做类型转换</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> != <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">1</span> !== <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-逻辑运算符"><a href="#5-3-逻辑运算符" class="headerlink" title="5.3 逻辑运算符"></a>5.3 逻辑运算符</h2><p>”一定要注意到底什么时候返回的是布尔值 什么是返回的是数据“</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个都为真，返回最后一个真的值</span></span><br><span class="line"><span class="number">5</span> &amp;&amp; <span class="string">&#x27;5&#x27;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左边为假，继续往后查找为真的值，并返回</span></span><br><span class="line"><span class="number">0</span> || <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遇到假直接返回假的值，!5 = false</span></span><br><span class="line">!<span class="number">5</span> &amp;&amp; <span class="string">&#x27;5&#x27;</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>逻辑运算符的返回值问题</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># &amp;&amp; 且[运算符](https:<span class="comment">//so.csdn.net/so/search?q=运算符&amp;spm=1001.2101.3001.7020)(从左到右只要找到无法通过的值[false]就结束，不再检查后面的值，可以通过的值[true]就继续向右检查直到最后一个)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> &amp;&amp; <span class="number">4</span>);<span class="comment">//当结果为真时，返回最后一个为真的值4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp;&amp; <span class="number">5</span>);<span class="comment">//当结果为真时，返回最后一个为真的值5 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="number">6</span>);<span class="comment">//当结果为真时，多个值时返回最后一个为真的值6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp;&amp; <span class="number">0</span>);<span class="comment">//当结果为假时，返回第一个为假的值0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">4</span>);<span class="comment">//当结果为假时，返回第一个为假的值0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="literal">false</span>);<span class="comment">//当结果为假时，多个值时返回第一个为假的值0 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="number">0</span>);<span class="comment">//当结果为假时，返回第一个为假的值false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="literal">false</span>);<span class="comment">//当结果为假时，返回第一个为假的值0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="literal">false</span>);<span class="comment">//当结果为假时，多个值时返回第一个为假的值false</span></span><br><span class="line"></span><br><span class="line"># || 或运算符(从左到右只要找到可以通过的值[<span class="literal">true</span>]就结束，不再检查后面的值)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="literal">false</span>);<span class="comment">//当结果为假时，返回最后一个为假的值false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="number">0</span>);<span class="comment">//当结果为假时，返回最后一个为假的值0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="number">0</span> || <span class="literal">false</span>);<span class="comment">//当结果为假时，返回最后一个为假的值false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> || <span class="number">0</span>);<span class="comment">//当结果为真时，返回真的值2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">2</span>);<span class="comment">//当结果为真时，返回真的值2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">4</span> || <span class="number">3</span>);<span class="comment">//当结果为真时，多个值时返回第一个为真的值4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> || <span class="number">7</span>);<span class="comment">//当结果为真时，返回第一个为真的值6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> || <span class="number">6</span>);<span class="comment">//当结果为真时，返回第一个为真的值7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> || <span class="number">4</span> || <span class="number">3</span>);<span class="comment">//当结果为真时，多个值时返回第一个为真的值2</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-赋值运算符"><a href="#5-4-赋值运算符" class="headerlink" title="5.4 赋值运算符"></a>5.4 赋值运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">= += -= *= ....</span><br></pre></td></tr></table></figure>



<h1 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6 流程控制"></a>6 流程控制</h1><h2 id="6-1-if判断"><a href="#6-1-if判断" class="headerlink" title="6.1 if判断"></a>6.1 if判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">if</span>判断</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line"># <span class="keyword">if</span>(条件)&#123;条件成立之后指向的代码块&#125;</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;来啊 来啊&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">if</span>-<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;来啊 来啊&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;没钱 滚蛋&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;培养一下&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">24</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;小姐姐你好 我是你的粉丝&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;你是个好人&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-switch-语句"><a href="#6-2-switch-语句" class="headerlink" title="6.2 switch 语句"></a>6.2 switch 语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;喝酒&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;  # 不加<span class="keyword">break</span> 匹配到一个之后 就一直往下执行</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;唱歌&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;洗脚&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;按摩&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;营养快线&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;老板慢走 欢迎下次光临&#x27;</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;条件都没有匹配上 默认走的流程&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-for循环"><a href="#6-3-for循环" class="headerlink" title="6.3 for循环"></a>6.3 for循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 打印<span class="number">0</span>-<span class="number">9</span>数字</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"># 题目<span class="number">1</span>  循环打印出数组里面的每一个元素</span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;l1.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(l1[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-while循环"><a href="#6-4-while循环" class="headerlink" title="6.4 while循环"></a>6.4 while循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-三元运算符"><a href="#6-5-三元运算符" class="headerlink" title="6.5 三元运算符"></a>6.5 三元运算符</h2><p>三元运算符不要写的过于复杂 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># python中三元运算符 res = <span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>&gt;<span class="number">2</span> <span class="keyword">else</span> <span class="number">3</span></span><br><span class="line"># JS中三元运算  res = <span class="number">1</span> &gt; <span class="number">2</span> ? <span class="number">1</span> : <span class="number">3</span> </span><br><span class="line">条件成立取问好后面的<span class="number">1</span> 不成立取冒号后面的<span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="number">2</span> &gt; <span class="number">5</span> ? <span class="number">8</span> : <span class="number">10</span> # <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="number">2</span> &gt; <span class="number">5</span> ? <span class="number">8</span> : ( <span class="number">8</span> &gt; <span class="number">5</span> ? <span class="number">666</span> : <span class="number">444</span> )  # <span class="number">666</span></span><br></pre></td></tr></table></figure>

<h2 id="6-6-函数"><a href="#6-6-函数" class="headerlink" title="6.6 函数"></a>6.6 函数</h2><h3 id="6-6-1-函数定义"><a href="#6-6-1-函数定义" class="headerlink" title="6.6.1 函数定义"></a>6.6.1 函数定义</h3><p>无参函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">func1()</span><br><span class="line"><span class="comment">// 输出 -- Hello</span></span><br></pre></td></tr></table></figure>

<p>有参函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fcun2</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fcun2(<span class="number">8</span>, <span class="number">99</span>)</span><br><span class="line"><span class="comment">// 输出 -- 107</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 少了参数不会报错，第二个参数自动识别为&quot;undefined&quot;</span></span><br><span class="line">fcun2(<span class="number">8</span>)</span><br><span class="line"><span class="comment">// 输出 -- NaN  // 识别为 8 + undefined 所以是 &quot;Not A Number&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多了参数也不报错，会自动按需求取</span></span><br><span class="line">fcun2(<span class="number">1</span>, <span class="number">3</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>)</span><br><span class="line"><span class="comment">// 输出 -- 4</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-关键字arguments"><a href="#6-6-2-关键字arguments" class="headerlink" title="6.6.2 关键字arguments"></a>6.6.2 关键字<code>arguments</code></h3><p>用于获取函数接收到的所有参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="attr">VM758</span>:<span class="number">2</span> Arguments(<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="attr">callee</span>: ƒ, <span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.iterator): ƒ]</span><br></pre></td></tr></table></figure>

<p>可以用于判断参数的数量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;传少了&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;传多了&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;正常执行&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-3-函数返回值"><a href="#6-6-3-函数返回值" class="headerlink" title="6.6.3 函数返回值"></a>6.6.3 函数返回值</h3><p>函数中使用<code>return</code>返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">res = func4(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出值</span></span><br><span class="line">res</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>JS能不能像Python一样返回多个值？ — <strong><font color=red>不能</font></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a,b,c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当返回多个值的时候，**只能拿到最后一个返回值**</span></span><br><span class="line">res = func3(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"><span class="number">333</span></span><br><span class="line"></span><br><span class="line">res</span><br><span class="line"><span class="number">333</span></span><br></pre></td></tr></table></figure>

<p>如何返回多个值呢？ —- 可以使用<code>数组</code>的方式返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [a,b,c]</span><br><span class="line">&#125;</span><br><span class="line">res = func3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">res</span><br><span class="line">(<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="6-6-4-匿名函数"><a href="#6-6-4-匿名函数" class="headerlink" title="6.6.4 匿名函数"></a>6.6.4 匿名函数</h3><p>没有名字的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是匿名函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名函数</span></span><br><span class="line"><span class="keyword">var</span> res= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是匿名函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带括号输出</span></span><br><span class="line">res</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是匿名函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带括号输出</span></span><br><span class="line">res()</span><br><span class="line"><span class="attr">VM1565</span>:<span class="number">2</span> 我是匿名函数</span><br></pre></td></tr></table></figure>

<h3 id="6-6-5-箭头函数（了解）"><a href="#6-6-5-箭头函数（了解）" class="headerlink" title="6.6.5 箭头函数（了解）"></a>6.6.5 箭头函数（了解）</h3><p>主要用来处理简单的业务逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建箭头函数</span></span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> arg1 + arg2;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">res = func1(<span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>箭头函数是什么意思？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func1 = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> arg1 + arg2;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-7-函数的全局变量和局部变量"><a href="#6-6-7-函数的全局变量和局部变量" class="headerlink" title="6.6.7 函数的全局变量和局部变量"></a>6.6.7 函数的全局变量和局部变量</h3><p>局部变量在函数内生效，优先使用局部变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跟python查找变量的顺序一致</span></span><br><span class="line"><span class="keyword">var</span> city = <span class="string">&quot;BeiJing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">&quot;ShangHai&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">&quot;ShenZhen&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(city);</span><br><span class="line">  &#125;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();  <span class="comment">//输出&quot;ShenZhen&quot;</span></span><br></pre></td></tr></table></figure>

<p>离开函数，局部变量将失效，优先使用全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">&quot;BeiJing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">&quot;ShangHai&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> Bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();  <span class="comment">// 打印结果是？ Beijing</span></span><br></pre></td></tr></table></figure>

<p>如果是函数内部返回函数呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">&quot;BeiJing&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">&quot;ShangHai&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();	<span class="comment">// 输出&quot;ShangHai&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-7-自定义对象"><a href="#6-7-自定义对象" class="headerlink" title="6.7 自定义对象"></a>6.7 自定义对象</h2><h3 id="6-7-1-花括号的方式创建"><a href="#6-7-1-花括号的方式创建" class="headerlink" title="6.7.1 花括号的方式创建"></a>6.7.1 花括号的方式创建</h3><p>创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Goosh&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d1)	<span class="comment">// 输出 object</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d1[<span class="string">&#x27;name&#x27;</span>])	<span class="comment">// 输出 Goosh</span></span><br><span class="line"><span class="built_in">console</span>.log(d1[<span class="string">&#x27;age&#x27;</span>]) <span class="comment">// 输出 18</span></span><br></pre></td></tr></table></figure>

<p>循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> d1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, d1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">name Goosh</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure>

<h3 id="6-7-2-关键字new方式创建"><a href="#6-7-2-关键字new方式创建" class="headerlink" title="6.7.2 关键字new方式创建"></a>6.7.2 关键字<code>new</code>方式创建</h3><p>创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">d2.name = <span class="string">&#x27;Goosh&#x27;</span></span><br><span class="line">d2.age = <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> d2) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, d2[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">name Goosh</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure>



<h2 id="6-8-Date对象"><a href="#6-8-Date对象" class="headerlink" title="6.8 Date对象"></a>6.8 Date对象</h2><p>创建Date对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mydate = <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(mydate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Tue Aug <span class="number">16</span> <span class="number">2022</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">40</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>

<p>自定义Date的方式一</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mydate2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2200/1/1 11:11:11&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mydate2.toLocaleString())</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">2200</span>/<span class="number">1</span>/<span class="number">1</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">11</span></span><br></pre></td></tr></table></figure>

<p>自定义Date的方式二</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mydate3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2211</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mydate3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Wed Dec <span class="number">11</span> <span class="number">2211</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">22</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>

<h3 id="6-8-1-时间对象的具体方法"><a href="#6-8-1-时间对象的具体方法" class="headerlink" title="6.8.1 时间对象的具体方法"></a>6.8.1 时间对象的具体方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d6 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d6.getDate()  获取日</span><br><span class="line">d6.getDay()		获取星期</span><br><span class="line">d6.getMonth()		获取月份(<span class="number">0</span>-<span class="number">11</span>)</span><br><span class="line">d6.getFullYear()		获取完整的年份</span><br><span class="line">d6.getHours()			获取小时</span><br><span class="line">d6.getMinutes()		获取分钟</span><br><span class="line">d6.getSeconds()		获取秒</span><br><span class="line">d6.getMilliseconds()  获取毫秒</span><br><span class="line">d6.getTime()					时间戳</span><br></pre></td></tr></table></figure>

<h2 id="6-9-JSON对象"><a href="#6-9-JSON对象" class="headerlink" title="6.9 JSON对象"></a>6.9 JSON对象</h2><p>用于<code>序列化</code>和<code>反序列化</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">let</span> d7 = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Goosh&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">let</span> res7 = <span class="built_in">JSON</span>.stringify(d7)</span><br><span class="line"><span class="built_in">console</span>.log(res7)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">let</span> d8 = <span class="built_in">JSON</span>.parse(res7)</span><br><span class="line"><span class="built_in">console</span>.log(d8)</span><br></pre></td></tr></table></figure>

<h2 id="6-10-RegExp对象（正则表达式）"><a href="#6-10-RegExp对象（正则表达式）" class="headerlink" title="6.10 RegExp对象（正则表达式）"></a>6.10 RegExp对象（正则表达式）</h2><h3 id="6-10-1-使用正则的两种方式"><a href="#6-10-1-使用正则的两种方式" class="headerlink" title="6.10.1 使用正则的两种方式"></a>6.10.1 使用正则的两种方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^[a-zA-Z][d-zD-Z0-9]&#123;5,11&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式（推荐）</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^[a-zA-Z][d-zD-Z0-9]&#123;5,11&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配内容</span></span><br><span class="line">res1 = reg1.test(<span class="string">&#x27;abcc123321&#x27;</span>)</span><br><span class="line">res2 = reg2.test(<span class="string">&#x27;76ehk88&#x27;</span>)</span><br><span class="line">res3 = reg1.test(<span class="string">&#x27;a76ehk88&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3) <span class="comment">// 输出 false false true</span></span><br></pre></td></tr></table></figure>

<h3 id="6-10-2match单项匹配"><a href="#6-10-2match单项匹配" class="headerlink" title="6.10.2match单项匹配"></a>6.10.2<code>match</code>单项匹配</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ss = <span class="string">&#x27;ds222 fdsgfd dsb dsb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非全局匹配</span></span><br><span class="line">res1 = ss.match(<span class="regexp">/s/</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res1)</span><br><span class="line"><span class="comment">// 输出内容</span></span><br><span class="line">(<span class="number">1</span>) [<span class="string">&#x27;s&#x27;</span>, <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">input</span>: <span class="string">&#x27;ds222 fdsgfd dsb dsb&#x27;</span>, <span class="attr">groups</span>: <span class="literal">undefined</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line">res1 = ss.match(<span class="regexp">/s/g</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res1)</span><br><span class="line"><span class="comment">// 输出内容</span></span><br><span class="line">(<span class="number">4</span>) [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="6-10-3-全局匹配的吐槽点"><a href="#6-10-3-全局匹配的吐槽点" class="headerlink" title="6.10.3 全局匹配的吐槽点"></a>6.10.3 全局匹配的吐槽点</h3><p>吐槽点一：LastIndex导致匹配异常</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg3 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/g</span></span><br><span class="line">reg2.test(<span class="string">&#x27;egondsb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)  # 全局模式有一个lastIndex属性</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么会有这个现象？</span></span><br><span class="line">reg3.lastIndex	<span class="comment">// 当前下标在0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)	<span class="comment">// 正常匹配</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">reg3.lastIndex	<span class="comment">// 匹配完下标挪到了7的位置</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">reg3.test(<span class="string">&#x27;egondsb&#x27;</span>)	<span class="comment">// 再次匹配异常</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>吐槽点二：什么都不传也能匹配成功</p>
<p>​	什么都不传 默认传的是undefined, 而且是字符串！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg4 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/</span></span><br><span class="line">reg4.test()</span><br><span class="line"></span><br><span class="line">reg4.test()  <span class="comment">// 什么都不传 默认传的是undefined, 居然能匹配成功。。。</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">reg4.test()</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证是Undefined</span></span><br><span class="line"><span class="keyword">let</span> reg5 = <span class="regexp">/undefined/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;Goosh&#x27;</span>))	<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test())	<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;undefined&#x27;</span>))	<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="6-11-Math对象"><a href="#6-11-Math对象" class="headerlink" title="6.11 Math对象"></a>6.11 Math对象</h2><p>常用数学处理对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(x)      返回数的绝对值。</span><br><span class="line">exp(x)      返回 e 的指数。</span><br><span class="line">floor(x)    对数进行下舍入。</span><br><span class="line">log(x)      返回数的自然对数（底为e）。</span><br><span class="line">max(x,y)    返回 x 和 y 中的最高值。</span><br><span class="line">min(x,y)    返回 x 和 y 中的最低值。</span><br><span class="line">pow(x,y)    返回 x 的 y 次幂。</span><br><span class="line">random()    返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数。</span><br><span class="line">round(x)    把数四舍五入为最接近的整数。</span><br><span class="line">sin(x)      返回数的正弦。</span><br><span class="line">sqrt(x)     返回数的平方根。</span><br><span class="line">tan(x)      返回角的正切。</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day55-JavaScript-02</title>
    <url>/2022/08/17/03_Python/02_%E5%89%8D%E7%AB%AF/day55%E7%AC%94%E8%AE%B0-JS-02/</url>
    <content><![CDATA[<p>“第54天JavaScript（02）学习笔记”</p>
<h1 id="1-BOM操作"><a href="#1-BOM操作" class="headerlink" title="1 BOM操作"></a>1 BOM操作</h1><p>BOM全称<strong>Browser Object Model</strong>，译为<strong>浏览器对象模型</strong>，主要用于操作浏览器，比如：</p>
<ul>
<li>操作浏览器开打指定网页</li>
<li>浏览器跳转下一页&#x2F;返回上一页</li>
<li>设置浏览器窗口大小</li>
</ul>
<h2 id="1-1-window对象"><a href="#1-1-window对象" class="headerlink" title="1.1 window对象"></a>1.1 window对象</h2><p>window对象指代的就是浏览器窗口</p>
<p>案例 – 打开网页，并指定窗口大小</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://www.baidu.com&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;height=400px,width=400px,top=400px,left=400px&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建窗口打开页面 第二个参数写空即可 第三个参数写新建的窗口的大小和位置</span></span><br><span class="line"><span class="comment">// 扩展父子页面通信window.opener()  了解</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/../../../img/image-20220817112220408.png" alt="image-20220817112220408"></p>
<p>案例 – 关闭网页</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.close()</span><br></pre></td></tr></table></figure>

<h2 id="1-2-navigator对象"><a href="#1-2-navigator对象" class="headerlink" title="1.2 navigator对象"></a>1.2 navigator对象</h2><p>获取浏览器信息</p>
<p>案例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.appName</span><br><span class="line"><span class="string">&#x27;Netscape&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.navigator.appVersion</span><br><span class="line"><span class="string">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/5....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">window.navigator.userAgent</span></span><br><span class="line"><span class="string">&#x27;</span>Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">104.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 如果是window的子对象，那么window可以省略不写，如</span></span><br><span class="line"><span class="string">navigator.platform</span></span><br><span class="line"><span class="string">&#x27;</span>Win32<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-history对象"><a href="#1-3-history对象" class="headerlink" title="1.3 history对象"></a>1.3 history对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.back()  <span class="comment">// 回退到上一页</span></span><br><span class="line"><span class="built_in">window</span>.history.forward()  <span class="comment">// 前进到下一页</span></span><br><span class="line"># 对应的就是你浏览器左上方的两个的箭头</span><br></pre></td></tr></table></figure>

<h2 id="1-4-localtion对象"><a href="#1-4-localtion对象" class="headerlink" title="1.4 localtion对象"></a>1.4 localtion对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前页面的url </span></span><br><span class="line"><span class="built_in">window</span>.location.href</span><br><span class="line"><span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到指定的url</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">&#x27;https://www.qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载刷新页面</span></span><br><span class="line"><span class="built_in">window</span>.location.reload()</span><br></pre></td></tr></table></figure>

<h2 id="1-5-弹出框"><a href="#1-5-弹出框" class="headerlink" title="1.5 弹出框"></a>1.5 弹出框</h2><p>弹出框分为：警告框、确认框、提示框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 警告框</span></span><br><span class="line">alert(<span class="string">&#x27;你不要过来啊！！！&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确认框</span></span><br><span class="line">confirm(<span class="string">&#x27;你确定真的要这么做吗?能不能有其他方式能够满足你...&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">confirm(<span class="string">&#x27;你确定真的要这么做吗?能不能有其他方式能够满足你...&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示框 -- 输入后点击确认，内容将返回</span></span><br><span class="line">prompt(<span class="string">&#x27;这是输入框的名称&#x27;</span>, <span class="string">&#x27;这是输入框的默认内容&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;你过来啊！&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="1-6-计时器相关"><a href="#1-6-计时器相关" class="headerlink" title="1.6 计时器相关"></a>1.6 计时器相关</h2><p>创建定时任务–隔多久执行<code>Timeout</code></p>
<p>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建定时任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 毫秒为单位，3秒后自动执行</span></span><br><span class="line"><span class="keyword">let</span> t = <span class="built_in">setTimeout</span>(func1, <span class="number">3000</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时任务</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(t) </span><br></pre></td></tr></table></figure>

<p>创建循环定时任务–每隔多久执行一次<code>Interval</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建定时任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">456</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每3秒执行一次</span></span><br><span class="line">    <span class="keyword">let</span> t = <span class="built_in">setInterval</span>(func2, <span class="number">3000</span>) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 清除定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(t) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9秒之后停止循环</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(inner, <span class="number">9000</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法执行</span></span><br><span class="line">show()</span><br></pre></td></tr></table></figure>



<h1 id="2-DOM操作"><a href="#2-DOM操作" class="headerlink" title="2 DOM操作"></a>2 DOM操作</h1><p>DOM全称<strong>Document Object Model</strong>，译为<strong>文档对象模型</strong>，主要用于操作网页内容，比如：</p>
<ul>
<li>操作HTML添加标签</li>
<li>操作CSS添加&#x2F;移除效果</li>
</ul>
<h2 id="2-1-查找标签"><a href="#2-1-查找标签" class="headerlink" title="2.1 查找标签"></a>2.1 查找标签</h2><h3 id="2-1-1-直接查找"><a href="#2-1-1-直接查找" class="headerlink" title="2.1.1 直接查找"></a>2.1.1 直接查找</h3><p>通过ID、Class、标签名直接查找标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>DIV-DIV</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>DIV-DIV-DIV</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>不做大哥好多年<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过ID获得标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> d1Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(d1Ele)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过Class获得标签</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;c1&#x27;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过标签名获得标签</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果有多个结果，需要指定下标</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">2</span>])</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-间接查找"><a href="#2-1-2-间接查找" class="headerlink" title="2.1.2 间接查找"></a>2.1.2 间接查找</h3><p>通过已找到的标签，间接查找标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过直接查找先找到一个标签</span></span><br><span class="line"><span class="keyword">let</span> d1Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签的父标签</span></span><br><span class="line">d1Ele.parentElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签的爷爷标签</span></span><br><span class="line">d1Ele.parentElement.parentElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签的所有子标签</span></span><br><span class="line">d1Ele.children</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定子标签</span></span><br><span class="line">d1Ele.childern[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签的第一个子标签</span></span><br><span class="line">d1Ele.firstChild</span><br><span class="line"><span class="string">&quot;DIV-DIV &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签的最后一个子标签</span></span><br><span class="line">d1Ele.lastChild</span><br><span class="line"><span class="string">&quot;DIV-DIV-DIV &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签同级别下面第一个</span></span><br><span class="line">d1Ele.nextElementSibling</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签同级别上面第一个</span></span><br><span class="line">d1Ele.previousElementSibling</span><br></pre></td></tr></table></figure>

<h2 id="2-2-节点操作"><a href="#2-2-节点操作" class="headerlink" title="2.2 节点操作"></a>2.2 节点操作</h2><h3 id="2-2-1-案例一"><a href="#2-2-1-案例一" class="headerlink" title="2.2.1 案例一"></a>2.2.1 案例一</h3><p>通过DOM动态创建img标签，并且给img标签添加属性，最后将标签添加到文本中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>DIV-DIV</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>DIV-DIV-DIV</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>不做大哥好多年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建img标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置img标签属性</span></span></span><br><span class="line"><span class="javascript">        imgEle.src = <span class="string">&quot;111.png&quot;</span></span></span><br><span class="line"><span class="javascript">        imgEle.title = <span class="string">&quot;飞跃黄河第一人&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置自定义属性de方式一</span></span></span><br><span class="line"><span class="javascript">        imgEle.username = <span class="string">&#x27;Goosh&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置自定义属性de方式二</span></span></span><br><span class="line"><span class="javascript">        imgEle.setAttribute(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;Goosh&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将img标签添加到d2中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> d2Ele = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d2&quot;</span>)</span></span><br><span class="line"><span class="javascript">        d2Ele.appendChild(imgEle)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220817161226379.png" alt="image-20220817161226379"></p>
<h3 id="2-2-2-案例二"><a href="#2-2-2-案例二" class="headerlink" title="2.2.2 案例二"></a>2.2.2 案例二</h3><p>创建<code>a</code>标签，设置属性，设置文本，</p>
<p>添加到<font color=red><strong>指定[子标签]之前</strong></font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>第一层</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>第二层<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 创建a标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> aEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        aEle.href = <span class="string">&quot;https://www.baidu.com&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        aEle.innerText = <span class="string">&#x27;点我有你好看，嘿嘿嘿&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 插到d1的里面，d2之前</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> d1Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> d2Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        d1Ele.insertBefore(aEle, d2Ele)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="/../../../img/image-20220817164119646.png" alt="image-20220817164119646"></p>
<h3 id="2-2-3-额外补充"><a href="#2-2-3-额外补充" class="headerlink" title="2.2.3 额外补充"></a>2.2.3 额外补充</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">额外补充</span></span><br><span class="line"><span class="string">	appendChild()</span></span><br><span class="line"><span class="string">		removeChild()</span></span><br><span class="line"><span class="string">		replaceChild()</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	setAttribute()  设置属性</span></span><br><span class="line"><span class="string">		getAttribute()  获取属性</span></span><br><span class="line"><span class="string">		removeAttribute()  移除属性</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>InnerText和InnerHtml的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">divEle.innerText  # 获取标签内部所有的文本</span><br><span class="line"><span class="string">&quot;div 点我有你好看!</span></span><br><span class="line"><span class="string">div&gt;p</span></span><br><span class="line"><span class="string">div&gt;span&quot;</span></span><br><span class="line"></span><br><span class="line">divEle.innerHTML  # 内部文本和标签都拿到</span><br><span class="line"><span class="string">&quot;div</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;</span>https:<span class="comment">//www.mzitu.com/&quot;&gt;点我有你好看!&lt;/a&gt;&lt;p id=&quot;d2&quot;&gt;div&amp;gt;p&lt;/p&gt;</span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>div<span class="symbol">&amp;gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="string">&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">divEle.innerText = &#x27;heiheihei&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>heiheihei<span class="string">&quot;</span></span><br><span class="line"><span class="string">divEle.innerHTML = &#x27;hahahaha&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>hahahaha<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">divEle.innerText = &#x27;&lt;h1&gt;heiheihei&lt;/h1&gt;&#x27;  # 不识别html标签</span></span><br><span class="line"><span class="string">&quot;</span>&lt;h1&gt;heiheihei&lt;/h1&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">divEle.innerHTML = &#x27;&lt;h1&gt;hahahaha&lt;/h1&gt;&#x27;  # 识别html标签</span></span><br><span class="line"><span class="string">&quot;</span>&lt;h1&gt;hahahaha&lt;/h1&gt;<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-获取值的操作"><a href="#3-获取值的操作" class="headerlink" title="3 获取值的操作"></a>3 获取值的操作</h1><p>获取标签内部属性的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是D1&quot;</span>&gt;</span>第一层</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是D2&quot;</span> <span class="attr">desc</span>=<span class="string">&quot;今年18岁&quot;</span>&gt;</span>第二层<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 获取标签d1的序号1属性的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> d1Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(d1Ele.attributes[<span class="number">1</span>].value)	<span class="comment">// 输出 -- 我是01</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">// 获取标签d2的序号2属性的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> d2Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(d2Ele.attributes[<span class="number">2</span>].value)	<span class="comment">// 输出 -- 今年18岁</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>获取输入框中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;账号：&lt;input type=&quot;text&quot; id=&quot;input01&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;文件：&lt;input type=&quot;file&quot; id=&quot;input02&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let input01Ele = document.getElementById(&#x27;input01&#x27;)</span><br><span class="line">        let input02Ele = document.getElementById(&#x27;input02&#x27;)</span><br><span class="line">        </span><br><span class="line">        // 获取数据</span><br><span class="line">        input01Ele.value</span><br><span class="line">		input02Ele.value</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/../../../img/image-20220818095441409.png" alt="image-20220818095441409"></p>
<h1 id="4-操作Class和CSS"><a href="#4-操作Class和CSS" class="headerlink" title="4 操作Class和CSS"></a>4 操作Class和CSS</h1><p>案例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg_red</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg_green</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg_orange</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: darkorange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1 bg_red bg_green&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c2 bg_red bg_orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面效果：</p>
<p><img src="/../../../img/image-20220818101241668.png" alt="image-20220818101241668"></p>
<h2 id="4-1-Class操作"><a href="#4-1-Class操作" class="headerlink" title="4.1 Class操作"></a>4.1 Class操作</h2><p><strong>获取</strong>标签的class属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取d1标签（底层绿色标签）</span></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取d1标签的所有class</span></span><br><span class="line">divEle.classList</span><br><span class="line">DOMTokenList(<span class="number">3</span>) [<span class="string">&#x27;c1&#x27;</span>, <span class="string">&#x27;bg_red&#x27;</span>, <span class="string">&#x27;bg_green&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;c1 bg_red bg_green&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>添加&#x2F;移除</strong>标签的class属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除&quot;bg_red&quot;class</span></span><br><span class="line">divEle.classList.remove(<span class="string">&#x27;bg_red&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加&quot;bg_red&quot;class</span></span><br><span class="line">divEle.classList.add(<span class="string">&#x27;bg_red&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除&quot;bg_green&quot;class</span></span><br><span class="line">divEle.classList.remove(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再添加&quot;bg_green&quot;class</span></span><br><span class="line">divEle.classList.add(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p><strong>查询</strong>标签是否包含指定的class属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">divEle.classList.contains(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.remove(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.classList.contains(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>toggle</strong>有则删除，无则添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-CSS操作"><a href="#4-2-CSS操作" class="headerlink" title="4.2 CSS操作"></a>4.2 CSS操作</h2><p>以4.1的页面为案例，操作div(d1)的css</p>
<p>通过<code>style</code>可以直接对应的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 背景色改为蓝色</span></span><br><span class="line">divEle.style.backgroundColor=<span class="string">&#x27;blue&#x27;</span></span><br><span class="line"><span class="string">&#x27;blue&#x27;</span></span><br><span class="line"><span class="comment">// 圆角20px</span></span><br><span class="line">divEle.style.borderRadius=<span class="string">&#x27;20px&#x27;</span></span><br><span class="line"><span class="string">&#x27;20px&#x27;</span></span><br><span class="line"><span class="comment">// 边框设置</span></span><br><span class="line">divEle.style.border=<span class="string">&#x27;3px solid red&#x27;</span></span><br><span class="line"><span class="string">&#x27;3px solid red&#x27;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/../../../img/image-20220818102533004.png" alt="image-20220818102533004"></p>
<h1 id="5-事件"><a href="#5-事件" class="headerlink" title="5 事件(*)"></a>5 事件(*)</h1><p>别听着这名字就跑路了，实际上就是按钮的点击事件</p>
<p>我们的案例html页面代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我有你好康&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color=red><strong>在JS中绑定事件有两种方式</strong></font></p>
<p>第一种方式–行内绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我有你好康&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func1()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;嘎子偷狗！&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种方式–通过ID绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我有你好康&quot;</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>)</span></span><br><span class="line"><span class="javascript">        btnEle.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;潘嘎之交&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/../../../img/image-20220818104606375.png" alt="image-20220818104606375"></p>
<h1 id="6-JS代码位置"><a href="#6-JS代码位置" class="headerlink" title="6 JS代码位置"></a>6 JS代码位置</h1><p>JS代码一般放在body的最下方，如果在前面，将出现“XXX未定义”的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>HTML优先写<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 放这里！</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以使用onload</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 等待浏览器窗口加载完毕之后再执行代码</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 第一种绑定事件的方式</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">111</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第二种</span></span><br><span class="line">            <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>);</span><br><span class="line">            btnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">222</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-原生JS事件绑定"><a href="#7-原生JS事件绑定" class="headerlink" title="7 原生JS事件绑定"></a>7 原生JS事件绑定</h1><p>通过几个案例学习</p>
<h2 id="7-1-开关灯案例"><a href="#7-1-开关灯案例" class="headerlink" title="7.1 开关灯案例"></a>7.1 开关灯案例</h2><p>点击按钮，div方块在“红色”和绿色之间切换</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg_red</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bg_green</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1 bg_red bg_green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d2&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>)</span></span><br><span class="line"><span class="javascript">        btnEle.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 动态修改div类的属性</span></span></span><br><span class="line"><span class="javascript">            divEle.classList.toggle(<span class="string">&#x27;bg_green&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220822161548595.png" alt="image-20220822161548595"></p>
<p>点击变色按钮后：</p>
<p><img src="/../../../img/image-20220822161608377.png" alt="image-20220822161608377"></p>
<h2 id="7-2-input框获取焦点-x2F-失去焦点"><a href="#7-2-input框获取焦点-x2F-失去焦点" class="headerlink" title="7.2 input框获取焦点&#x2F;失去焦点"></a>7.2 input框获取焦点&#x2F;失去焦点</h2><p>新事件<code>onfocus</code>和<code>onblur</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;来看看嘛~&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> iEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取焦点事件</span></span></span><br><span class="line"><span class="javascript">        iEle.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 将input框中的值去掉</span></span></span><br><span class="line"><span class="javascript">            iEle.value = <span class="string">&#x27;哎呀~鼠标点到我了&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 失去焦点事件</span></span></span><br><span class="line"><span class="javascript">        iEle.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            iEle.value = <span class="string">&#x27;完事走人&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220822163319837.png" alt="image-20220822163319837"></p>
<p>鼠标点击上去：</p>
<p><img src="/../../../img/image-20220822163338421.png" alt="image-20220822163338421"></p>
<p>鼠标移开：</p>
<p><img src="/../../../img/image-20220822163352708.png" alt="image-20220822163352708"></p>
<h2 id="7-3-实时展示当前时间"><a href="#7-3-实时展示当前时间" class="headerlink" title="7.3 实时展示当前时间"></a>7.3 实时展示当前时间</h2><p>点击“Start”按钮，实时刷新显示当前时间（1s一次），点击”End”按钮停止</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我这显示当前时间&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>End<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> iEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btnStartEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btnEndEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d3&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义标识，用于标示开始和停止</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = <span class="literal">null</span> </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 显示时间的时间</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showtime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建时间对象，获取当前时间</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 将当前时间显示到input框中</span></span></span><br><span class="line"><span class="javascript">            iEle.value = currentTime.toLocaleString()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Start按钮绑定事件</span></span></span><br><span class="line"><span class="javascript">        btnStartEle.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(showtime())</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!flag) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1秒显示一次当前时间</span></span></span><br><span class="line"><span class="javascript">                t = <span class="built_in">setInterval</span>(showtime, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// End按钮绑定事件</span></span></span><br><span class="line"><span class="javascript">        btnEndEle.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 停止循环</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">clearInterval</span>(t)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 将标志设为null</span></span></span><br><span class="line"><span class="javascript">            flag = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">            iEle.value = <span class="string">&quot;计时停止&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/../../../img/image-20220822165219698.png" alt="image-20220822165219698"></p>
<p>点击“Start”后，显示时间，一秒刷新一次</p>
<p><img src="/../../../img/image-20220822165240697.png" alt="image-20220822165240697"></p>
<p>点击“End”按钮后：</p>
<p><img src="/../../../img/image-20220822165308453.png" alt="image-20220822165308453"></p>
<h2 id="7-4-省市联动"><a href="#7-4-省市联动" class="headerlink" title="7.4 省市联动"></a>7.4 省市联动</h2><p>下拉框选择“省”，展示相应的“市区”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 创建两个选择框 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 添加默认选项 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">seleted</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 获取标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> d1Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> d2Ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d2&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 添加模拟数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        data = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&quot;河北&quot;</span>:[<span class="string">&quot;廊坊&quot;</span>, <span class="string">&quot;邯郸&quot;</span>, <span class="string">&quot;唐山&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&quot;北京&quot;</span>:[<span class="string">&quot;朝阳区&quot;</span>, <span class="string">&quot;海淀区&quot;</span>, <span class="string">&quot;昌平区&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&quot;湖南&quot;</span>:[<span class="string">&quot;长沙市&quot;</span>, <span class="string">&quot;益阳市&quot;</span>, <span class="string">&quot;常德市&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&quot;广东&quot;</span>:[<span class="string">&quot;深圳市&quot;</span>, <span class="string">&quot;广州市&quot;</span>, <span class="string">&quot;佛山市&quot;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 标签添加数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 将省信息作为一个option标签,插到d1中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 创建标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> opEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;option&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置标签的innerText</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            opEle.innerText = key</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置标签的value</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            opEle.value = key</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 将option标签追加到d1中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            d1Ele.appendChild(opEle)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 选择框文本域变化事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        d1Ele.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 获取选择的省</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> curPro = d1Ele.value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 获取对应的市区信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> curCityList = data[curPro]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 清空d2中的所有option</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            d2Ele.innerHTML = <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 自己加一个请选择</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> ss = <span class="string">&quot;&lt;option disabled selected&gt;请选择&lt;/option&gt;&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            d2Ele.innerHTML = ss</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// for 循环所有的市,渲染到第二个select(d2)中</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; curCityList.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">let</span> curCity = curCityList[i]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 创建option标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">let</span> cityEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;option&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 标签添加value</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                cityEle.value = curCity</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 标签添加内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                cityEle.innerText = curCity</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// d2追加标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                d2Ele.appendChild(cityEle)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>可以选择设定的省</p>
<p><img src="/../../../img/image-20220823142032372.png" alt="image-20220823142032372"></p>
<p>通过省，显示对应的市区</p>
<p><img src="/../../../img/image-20220823142041796.png" alt="image-20220823142041796"></p>
<p>换一个，也显示正常</p>
<p><img src="/../../../img/image-20220823142051735.png" alt="image-20220823142051735"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>Day56-JQuery-01</title>
    <url>/2022/08/22/03_Python/02_%E5%89%8D%E7%AB%AF/day56%E7%AC%94%E8%AE%B0-JQuery-01/</url>
    <content><![CDATA[<p>“第56天JQuery（01）学习笔记”</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(九)动静分离</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/15-Nginx(%E4%B9%9D)%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E5%92%8Crewrite/</url>
    <content><![CDATA[<h2 id="一、动静分离介绍"><a href="#一、动静分离介绍" class="headerlink" title="一、动静分离介绍"></a>一、动静分离介绍</h2><p>动静分离，通过中间件将动静分离和静态请求进⾏分离；<br>通过中间件将动态请求和静态请求分离，可以建上不必要的请求消耗，同时能减少请求的延时。<br>通过中间件将动态请求和静态请求分离，逻辑图如下:  </p>
<h2 id="二、单台服务器动静分离配置"><a href="#二、单台服务器动静分离配置" class="headerlink" title="二、单台服务器动静分离配置"></a>二、单台服务器动静分离配置</h2><p>逻辑图如下：</p>
<p><img src="/img/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="单台服务器动静分离"></p>
<p>编辑Nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]vim blog.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.linux.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    root /code/wordpress;</span><br><span class="line">    index index.php;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果请求的是以.jpg结尾的静态⽂件 就去/code/images⽬录下访问</span></span><br><span class="line">location ~* \.jpg$ &#123;</span><br><span class="line">    root /code/images;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.php$ &#123;</span><br><span class="line">    root /code/wordpress;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建⽬录</span></span><br><span class="line">[root@web01 conf.d]# mkdir /code/images/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实现动静分离</span></span><br><span class="line">⽅式⼀：把⽂件挪到/code/images/</span><br><span class="line">cp -r /code/wordpress/wp-content /code/images/</span><br><span class="line"></span><br><span class="line">⽅式⼆：做软连接</span><br><span class="line">cd /code</span><br><span class="line">ln -s wordpress images</span><br></pre></td></tr></table></figure>

<h2 id="三、多台服务器动静分离配置"><a href="#三、多台服务器动静分离配置" class="headerlink" title="三、多台服务器动静分离配置"></a>三、多台服务器动静分离配置</h2><p>参考：<a href="https://www.cnblogs.com/backups/p/nginx10.html">https://www.cnblogs.com/backups/p/nginx10.html</a></p>
<h3 id="3-1-原理图"><a href="#3-1-原理图" class="headerlink" title="3.1 原理图"></a>3.1 原理图</h3><p><img src="/img/%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="多台服务器动静分离"></p>
<h3 id="3-2-实验环境准备"><a href="#3-2-实验环境准备" class="headerlink" title="3.2 实验环境准备"></a>3.2 实验环境准备</h3><table>
<thead>
<tr>
<th>主机</th>
<th>外网</th>
<th>内网</th>
<th>作用服务</th>
</tr>
</thead>
<tbody><tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
<td>负载均衡 nginx proxy</td>
</tr>
<tr>
<td>web01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
<td>静态资源 nginx static</td>
</tr>
<tr>
<td>web02</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
<td>动态资源 tomcat server</td>
</tr>
</tbody></table>
<h3 id="3-3-配置web01提供静态资源"><a href="#3-3-配置web01提供静态资源" class="headerlink" title="3.3 配置web01提供静态资源"></a>3.3 配置web01提供静态资源</h3><p>1、配置Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 images]# cat /etc/nginx/conf.d/jt.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 动静分离，web01提供静态文件服务</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name dongjing.gs.com;</span><br><span class="line">        </span><br><span class="line">        # 提供临时测试的域名</span><br><span class="line">        root /code/dongjing;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        location ~* ^.*\.(jpg|png|gif)$ &#123;</span><br><span class="line">                root /code/dongjing/images;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、上传静态资源，测试访问静态页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]# echo &quot;web01...jingtai&quot; &gt; /code/index.html</span><br><span class="line">[root@web01 ~]# mkdir /code/dongjing/images/ &amp;&amp; cd /code/dongjing/images/</span><br><span class="line">[root@web01 images]# rz 1.jpg</span><br><span class="line">[root@web01 images]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@web01 images]# systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p><code>在客户端配置hosts，10.0.0.7 dongjing.gs.com</code></p>
<p>打开浏览器访问<a href="http://dongjing.gs.com/">http://dongjing.gs.com</a></p>
<p><img src="/img/image-20210825141423629.png" alt="image-20210825141423629"></p>
<p>打开浏览器访问<a href="http://dongjing.gs.com/1.png">http://dongjing.gs.com/1.png</a></p>
<p><img src="/img/image-20210825142256349.png" alt="image-20210825142256349"></p>
<h3 id="3-4-配置web02提供动态资源（tomcat-java模拟"><a href="#3-4-配置web02提供动态资源（tomcat-java模拟" class="headerlink" title="3.4 配置web02提供动态资源（tomcat + java模拟)"></a>3.4 配置web02提供动态资源（tomcat + java模拟)</h3><p>1、安装Tomcat并添加jsp文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web02 ~]# yum install -y tomcat</span><br><span class="line">[root@web02 ~]# mkdir /usr/share/tomcat/webapps/ROOT</span><br><span class="line">[root@web02 ~]# cat &gt;/usr/share/tomcat/webapps/ROOT/java_test.jsp &lt;&lt;EOF</span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">    &lt;HEAD&gt;</span><br><span class="line">        &lt;TITLE&gt;oldboy JSP Page&lt;/TITLE&gt;</span><br><span class="line">    &lt;/HEAD&gt;</span><br><span class="line">    &lt;BODY&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            Random rand = new Random();</span><br><span class="line">            out.println(&quot;&lt;h1&gt;随机数:&lt;h1&gt;&quot;);</span><br><span class="line">            out.println(rand.nextInt(99)+100);</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/BODY&gt;</span><br><span class="line">&lt;/HTML&gt;</span><br><span class="line">EOF</span><br><span class="line">[root@web02 ~]# systemctl start tomcat</span><br></pre></td></tr></table></figure>

<p>2、测试访问</p>
<p>访问<a href="http://10.0.0.8:8080/java_test.jsp">http://10.0.0.8:8080/java_test.jsp</a></p>
<p><img src="/img/image-20210825162829977.png" alt="image-20210825162829977"></p>
<h3 id="3-4-增加负载均衡，实现动静分离"><a href="#3-4-增加负载均衡，实现动静分离" class="headerlink" title="3.4 增加负载均衡，实现动静分离"></a>3.4 增加负载均衡，实现动静分离</h3><p>1、配置Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 dongtai]# cat /etc/nginx/conf.d/proxy_dj.conf</span><br><span class="line">upstream jt &#123;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream dt &#123;</span><br><span class="line">        server 172.16.1.8:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name dongjing.gs.com;</span><br><span class="line"></span><br><span class="line">        location ~* ^.*\.(jpg|png|gif)$ &#123;</span><br><span class="line">                proxy_pass http://jt;</span><br><span class="line">                proxy_set_header HOST $http_host;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.jsp$ &#123;</span><br><span class="line">                proxy_pass http://dt;</span><br><span class="line">                proxy_set_header HOST $http_host;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、测试访问</p>
<p><code>客户端配置hosts，10.0.0.3 dongjing.gs.com</code></p>
<p>在浏览器访问</p>
<p><a href="http://dongjing.gs.com/1.png">http://dongjing.gs.com/1.png</a></p>
<p><a href="http://10.0.0.8:8080/java_test.jsp">http://10.0.0.8:8080/java_test.jsp</a></p>
<p>的效果是一样的，但是访问<a href="http://dongjing.gs.com显示的是nginx默认的主页,因为lb01中暂时没有对应文件夹的index.html/">http://dongjing.gs.com显示的是Nginx默认的主页，因为lb01中暂时没有对应文件夹的index.html</a></p>
<h3 id="3-5-在负载均衡上创建同时调用动态和静态资源的index-html"><a href="#3-5-在负载均衡上创建同时调用动态和静态资源的index-html" class="headerlink" title="3.5 在负载均衡上创建同时调用动态和静态资源的index.html"></a>3.5 在负载均衡上创建同时调用动态和静态资源的index.html</h3><p>1、修改Nginx配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 dongtai]# cat /etc/nginx/conf.d/proxy_dj.conf</span><br><span class="line">upstream jt &#123;</span><br><span class="line">        server 172.16.1.7:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream dt &#123;</span><br><span class="line">        server 172.16.1.8:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name dongjing.gs.com;</span><br><span class="line">		</span><br><span class="line"><span class="meta">		#</span><span class="bash"> 新增</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /code/dongjing;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* ^.*\.(jpg|png|gif)$ &#123;</span><br><span class="line">                proxy_pass http://jt;</span><br><span class="line">                proxy_set_header HOST $http_host;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.jsp$ &#123;</span><br><span class="line">                proxy_pass http://dt;</span><br><span class="line">                proxy_set_header HOST $http_host;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建对应的目录和页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 /]# mkdir /code/dongjing</span><br><span class="line">[root@lb01 /]# cat /code/dongjing/index.html</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;测试ajax和跨域访问&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;http://libs.baidu.com/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"><span class="meta">$</span><span class="bash">(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">        type: &quot;GET&quot;,</span><br><span class="line">        url: &quot;http://dongjing.gs.com/java_test.jsp&quot;,</span><br><span class="line">        success: function(data)&#123;</span><br><span class="line">                $(&quot;#get_data&quot;).html(data)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function() &#123;</span><br><span class="line">                alert(&quot;哎呦喂,失败了,回去检查你服务去~&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;h1&gt;测试动静分离&lt;/h1&gt;</span><br><span class="line">        &lt;div id=&quot;get_data&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;img src=&quot;http://dongjing.gs.com/1.png&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>3、测试访问</p>
<p>浏览器访问：<a href="http://dongjing.gs.com/">http://dongjing.gs.com</a></p>
<p><img src="/img/image-20210825143746986.png" alt="image-20210825143746986"></p>
<p>正常负载均衡的现象：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关掉web02的Tomcat服务，web01服务正常</span><br><span class="line"></span><br><span class="line">​	http://dongjing.gs.com可以正常打开，图片正常显示，随机数将显示异常</span><br><span class="line"></span><br><span class="line">web02的Tomcat服务正常，关掉web01的nginx服务</span><br><span class="line"></span><br><span class="line">​	http://dongjing.gs.com可以正常打开，图片显示异常，随机正常显示</span><br></pre></td></tr></table></figure>

<h2 id="四、综合案例-Nginx资源分离"><a href="#四、综合案例-Nginx资源分离" class="headerlink" title="四、综合案例-Nginx资源分离"></a>四、综合案例-Nginx资源分离</h2><h3 id="4-1-什么是资源分离？"><a href="#4-1-什么是资源分离？" class="headerlink" title="4.1 什么是资源分离？"></a>4.1 什么是资源分离？</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">根据浏览器Agent标识可以访问到不同的页面资源：</span><br><span class="line">比如：</span><br><span class="line">    Android访问到的是Android的页面</span><br><span class="line">    PC访问到的是PC的页面</span><br><span class="line">    iphone访问放到的是iphone的页面</span><br></pre></td></tr></table></figure>

<h3 id="4-2-实验环境准备"><a href="#4-2-实验环境准备" class="headerlink" title="4.2 实验环境准备"></a>4.2 实验环境准备</h3><table>
<thead>
<tr>
<th>主机</th>
<th>外网</th>
<th>内网</th>
<th>作用服务</th>
</tr>
</thead>
<tbody><tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
<td>负载均衡 nginx proxy</td>
</tr>
<tr>
<td>web01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
<td>提供Android手机页面</td>
</tr>
<tr>
<td>web02</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
<td>提供PC访问页面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>01-计算机核心基础</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1 引子:"></a>1 引子:</h2><p>接下来一段时间，我们的目标的是：学会使用python这门编程语言来编写ATM+购物车程序，那么问题来了:</p>
<h3 id="1-1-什么是语言？什么是编程语言？为何要有编程语言？"><a href="#1-1-什么是语言？什么是编程语言？为何要有编程语言？" class="headerlink" title="1.1 什么是语言？什么是编程语言？为何要有编程语言？"></a>1.1 什么是语言？什么是编程语言？为何要有编程语言？</h3><p><img src="/../../../img/image-20220715110229082.png" alt="image-20220715110229082"></p>
<p>语言其实就是人与人之间沟通的介质，如英语，汉语，俄语等。</p>
<p>而编程语言则是人与计算机之间沟通的介质。</p>
<p>那么为何要有编程语言，或者说人为何要与计算机沟通呢？这是因为在编程的世界里，计算机就好比是人的奴隶，人与计算机沟通的目的就是为了奴役计算机，让计算机按照人类的思维逻辑自发地去工作从而把人力解放出来。</p>
<p>此处我们可以提炼出如下两个重要的概念</p>
<h3 id="1-2-什么是编程？为什么要编程？"><a href="#1-2-什么是编程？为什么要编程？" class="headerlink" title="1.2 什么是编程？为什么要编程？"></a>1.2 什么是编程？为什么要编程？</h3><p>编程就是人把自己想命令计算机干的事用编程语言翻译出来并写到文件里（这一系列的文件就是程序），那么为什么要编程？</p>
<p>人类编程的目的就是为了让计算机按照人类的思维逻辑(程序)自发地去工作从而把人力解放出来。</p>
<p>综上，我们接下来的学习应该分为两个层面</p>
<p>1、为了更好地控制人类的奴隶（即计算机），我们需要学习计算机是由什么组成的、它能做什么事、它是怎样工作的（详见计算机组成原理、操作系统概述）</p>
<p>2、我们需要学习编程语言，从而把原来需要人力来完成的业务（比如ATM和购物）交给计算机去做</p>
<h2 id="2-计算机组成原理"><a href="#2-计算机组成原理" class="headerlink" title="2 计算机组成原理"></a>2 计算机组成原理</h2><h3 id="2-1、什么是计算机？"><a href="#2-1、什么是计算机？" class="headerlink" title="2.1、什么是计算机？"></a>2.1、什么是计算机？</h3><p>俗称电脑，即通电的大脑，电脑二字蕴含了人类对计算机的终极期望，希望它能真的像人脑一样去工作，从而解放人力。</p>
<h3 id="2-2、为什么要用计算机？"><a href="#2-2、为什么要用计算机？" class="headerlink" title="2.2、为什么要用计算机？"></a>2.2、为什么要用计算机？</h3><p>世界是由聪明的懒人统治的，任何时期，总有一群聪明的懒人想要奴隶别人。在奴隶制社会，聪明的懒人奴役的是真正的人，而人是无法不吃、不喝、不睡觉一直工作的，但是计算机作为一台机器是可以做到的，所以把计算机当奴隶是上上之选。</p>
<h3 id="2-3、计算机的五大组成部分"><a href="#2-3、计算机的五大组成部分" class="headerlink" title="2.3、计算机的五大组成部分"></a>2.3、计算机的五大组成部分</h3><p>计算机有五大组成部分，既然计算机是人的奴隶，那么计算机设计核心肯定也是在模仿真正的人，所以我们完全可以把计算机的五大组件比喻成人类的各种器官</p>
<h4 id="2-3-1、控制器"><a href="#2-3-1、控制器" class="headerlink" title="2.3.1、控制器"></a>2.3.1、控制器</h4><p>控制器是计算机的指挥系统，用来控制计算机其他组件的运行，相当于人类的大脑</p>
<h4 id="2-3-2、运算器"><a href="#2-3-2、运算器" class="headerlink" title="2.3.2、运算器"></a>2.3.2、运算器</h4><p>运算器是计算机的运算功能，用来做算术运算和逻辑运算，相当于人脑。</p>
<p>ps：控制器+运算器&#x3D;CPU，cpu相当于人的大脑</p>
<p>cpu详解见：</p>
<p><a href="https://www.cnblogs.com/xiaoyuanqujing/articles/11640866.html">https://www.cnblogs.com/xiaoyuanqujing/articles/11640866.html</a></p>
<h4 id="2-3-3、存储器"><a href="#2-3-3、存储器" class="headerlink" title="2.3.3、存储器"></a>2.3.3、存储器</h4><p>存储器是计算机的记忆功能，用来存取数据。</p>
<p>存储器主要分为内存与外存：</p>
<p> 内存相当于人的短期记忆。断电数据丢失</p>
<p> 外存(如磁盘),相当于记事的本子，断电数据不会丢失，是用来永久保存数据的</p>
<p> ps：内存的存取速度要远远高于外存</p>
<h4 id="2-3-4、输入设备input"><a href="#2-3-4、输入设备input" class="headerlink" title="2.3.4、输入设备input"></a>2.3.4、输入设备input</h4><p>输入设备是计算接收外界输入数据的工具，如键盘、鼠标，相当于人的眼睛或耳朵。</p>
<h4 id="2-3-5、输出设备output"><a href="#2-3-5、输出设备output" class="headerlink" title="2.3.5、输出设备output"></a>2.3.5、输出设备output</h4><p>输出设备是计算机向外输出数据的工具，如显示器、打印机，相当于人说的话，写出的文章。</p>
<p>ps：存储器如内存、磁盘等既是输入设备又是输出设备，统称为IO设备</p>
<h4 id="一个非常重要的基础知识-与运行程序相关的三大核心硬件"><a href="#一个非常重要的基础知识-与运行程序相关的三大核心硬件" class="headerlink" title="一个非常重要的基础知识:与运行程序相关的三大核心硬件"></a>一个非常重要的基础知识:与运行程序相关的三大核心硬件</h4><p>我们编写的程序一定是要运行于计算机硬件之上，而站在硬件的角度，与运行程序有关的三大核心硬件为CPU、内存、硬盘。</p>
<p>程序最先是存放于硬盘中的，程序的运行是先从硬盘把代码加载到内存中，然后cpu是从内存中读取指令运行。</p>
<p><strong>ps：了解其他计算机硬件知识</strong></p>
<p><a href="https://www.cnblogs.com/linhaifeng/p/6523843.html#4462371">https://www.cnblogs.com/linhaifeng/p/6523843.html#4462371</a></p>
<h2 id="3-操作系统概述"><a href="#3-操作系统概述" class="headerlink" title="3 操作系统概述"></a>3 操作系统概述</h2><h3 id="3-1、操作系统的由来"><a href="#3-1、操作系统的由来" class="headerlink" title="3.1、操作系统的由来"></a>3.1、操作系统的由来</h3><p> 大前提：我们编程目的就是为了奴役计算机，让计算机硬件自发地运行起来，然而硬件毕竟是”死的“，硬件的运行都是由软件支配。</p>
<p> 倘若我们要开发一个应用程序，比如暴风音影，该软件的一个核心业务就是播放视频，开发者若要编写程序完成播放视频这个业务逻辑，必先涉及到底层硬件硬盘的基本运作（视频文件都是先存放于硬盘中），这意味着开发者在编写业务逻辑代码之前，必须先编写一个控制硬盘基本运行的控制程序，然而这仅仅只是一个开始，事实上，在编写应用程序的业务逻辑前，需要开发者编写出一套完整的控制程序用来控制所有硬件的基本运行（这要求开发者需要详细了解计算机硬件的各种控制细节，例如我们必须把CPU里面所有指令集都掌握一遍），如此，所有的开发者在开发程序时都必须依次开发两种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、编写一套完整的的控制程序，用来控制硬件的基本运行，以及把复杂的硬件的操作封装成简单的接口</span></span><br><span class="line"><span class="comment">#2、基于控制程序的接口开发包含一系列业务逻辑的程序，为了与控制程序区分，可以称为应用程序，以ATM这款应用程序为例，业务逻辑有提款、转账、查询余额等</span></span><br></pre></td></tr></table></figure>

<p> 综上，对于不同公司的开发者来说，应用程序的业务逻辑各不相同，但硬件的控制程序都大致相同，为了避免所有程序员做重复劳动，以及不用再耗费精力去了解所有硬件的运行细节，有公司专门跳出来承担起控制程序的开发任务，这里所说的控制程序指的就是操作系统。</p>
<p> 操作系统的功能就是帮我们把复杂的硬件的控制封装成简单的接口，对于开发应用程序来说只需要调用操作系统提供给我们的接口即可</p>
<h3 id="3-2、系统软件与应用软件"><a href="#3-2、系统软件与应用软件" class="headerlink" title="3.2、系统软件与应用软件"></a>3.2、系统软件与应用软件</h3><p>硬件以上运行的都是软件，而软件分为两类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一、应用软件（例如qq、word、暴风影音，我们学习python就是为了开发应用软件的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二、操作系统，操作系统应用软件与硬件之间的一个桥梁，是协调、管理、控制计算机硬件与应用软件资源的控制程序。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3、计算机系统三层结构"><a href="#3-3、计算机系统三层结构" class="headerlink" title="3.3、计算机系统三层结构"></a>3.3、计算机系统三层结构</h3><p>综上，我们开发应用程序本质是在控制硬件，但是我们直接打交道的是操作系统，应用程序都是通过操作系统来间接地操作硬件的，所以一套完整的计算机系统分为三层，如下</p>
<p><img src="/../../../img/image-20220715110139880.png" alt="image-20220715110139880"></p>
<h3 id="一个非常重要的基础概念：平台"><a href="#一个非常重要的基础概念：平台" class="headerlink" title="一个非常重要的基础概念：平台"></a>一个非常重要的基础概念：平台</h3><p>应用程序都是运行于操作系统之上，而操作系统则是运行于硬件之上的，所以承载应用程序的是一台运行有操作系统的计算机，称之为应用程序的运行平台，即：硬件 + 操作系统 &#x3D;&#x3D; 平台</p>
<p><img src="/../../../img/image-20220715110156372.png" alt="image-20220715110156372"></p>
<p>常见的平台有：windows系统+某款硬件、linux系统+某款硬件、ubuntu+某款硬件等，我们在开发应用程序时就需要考虑到应用程序的跨平台性，如果能开发出一款可以在任意平台运行的应用程序，那对于开发者来说真是极大的福音。而决定应用软件的跨平台性的关键因素往往是编程语言的选择，python恰好是一款跨平台性语言，这也是我们学习它的原因之一。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>03-变量</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/03_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>“我们知道学习 <strong>Python</strong> 语言的目的是为了与计算机进行沟通&#x2F;交流，从而控制计算机帮助我们做一些事情，所以，在 <strong>Python</strong> 语言的所有语法中，每个语法存在的意义都是为了让计算机能够像人类一样，直白地讲，就是让计算机具备我们人类的某一项技能。这是我们理解后续所有 <strong>Python</strong> 语法的根本，一定要熟记。”</p>
<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h2><h3 id="1-1-什么是变量？"><a href="#1-1-什么是变量？" class="headerlink" title="1.1 什么是变量？"></a>1.1 什么是变量？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量就是可以变化的量，量指的是事物的状态，比如人的年龄、性别，游戏角色的等级、金钱等等</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-为什么要有变量？"><a href="#1-2-为什么要有变量？" class="headerlink" title="1.2 为什么要有变量？"></a>1.2 为什么要有变量？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的</span></span><br><span class="line"><span class="comment"># 详细地说：</span></span><br><span class="line"><span class="comment"># 程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态，以及状态的变化。</span></span><br></pre></td></tr></table></figure>



<h2 id="2-使用变量"><a href="#2-使用变量" class="headerlink" title="2 使用变量"></a>2 使用变量</h2><h3 id="2-1-变量的定义与使用"><a href="#2-1-变量的定义与使用" class="headerlink" title="2.1 变量的定义与使用"></a>2.1 变量的定义与使用</h3><p>变量的定义由三部分组成，如下图</p>
<p><img src="/../../../img/image-20220718091017221.png" alt="image-20220718091017221"></p>
<p>定义变量示范如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Jason&#x27;</span> <span class="comment"># 记下人的名字为&#x27;Jason&#x27;</span></span><br><span class="line">sex = <span class="string">&#x27;男&#x27;</span>    <span class="comment"># 记下人的性别为男性</span></span><br><span class="line">age = <span class="number">18</span>      <span class="comment"># 记下人的年龄为18岁</span></span><br><span class="line">salary = <span class="number">30000.1</span>  <span class="comment"># 记下人的薪资为30000.1元</span></span><br></pre></td></tr></table></figure>

<p>解释器执行到变量定义的代码时会申请内存空间存放变量值，然后将变量值的内存地址绑定给变量名，以变量的定义age&#x3D;18为例，如下图</p>
<p>插图：定义变量申请内存</p>
<p>通过变量名即可引用到对应的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过变量名即可引用到值，我们可以结合print()功能将其打印出来</span></span><br><span class="line"><span class="built_in">print</span>(age) <span class="comment"># 通过变量名age找到值18，然后执行print(18),输出：18</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-变量名的命名规范"><a href="#2-2-变量名的命名规范" class="headerlink" title="2.2 变量名的命名规范"></a>2.2 变量名的命名规范</h3><p>变量名的命名应该见名知意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果我们要存储的数据18代表的是一个人的年龄，那么变量名推荐命名为age</span></span><br><span class="line">age = <span class="number">18</span> </span><br><span class="line"><span class="comment"># 如果我们要存储的数据18代表的是一个人的等级，那么变量名推荐命名为level</span></span><br><span class="line">level = <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>其他详细规范如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名规范</span></span><br><span class="line"><span class="number">1.</span> 变量名只能是 字母、数字或下划线的任意组合</span><br><span class="line"><span class="number">2.</span> 变量名的第一个字符不能是数字</span><br><span class="line"><span class="number">3.</span> 关键字不能声明为变量名，常用关键字如下</span><br><span class="line">[<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>,<span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示范如下：</span></span><br><span class="line">*a=<span class="number">123</span></span><br><span class="line">$b=<span class="number">456</span></span><br><span class="line">c$=<span class="number">789</span></span><br><span class="line">2_name=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line"><span class="number">123</span>=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line"><span class="keyword">and</span>=<span class="number">123</span></span><br><span class="line">年龄=<span class="number">18</span> <span class="comment"># 强烈建议不要使用中文命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确示范如下</span></span><br><span class="line">age_of_jason=<span class="number">31</span></span><br><span class="line">page1=<span class="string">&#x27;首页&#x27;</span></span><br><span class="line">_<span class="keyword">class</span>=<span class="string">&#x27;终极一班&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-变量名的命名风格"><a href="#2-3-变量名的命名风格" class="headerlink" title="2.3 变量名的命名风格"></a>2.3 变量名的命名风格</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 风格一：驼峰体</span></span><br><span class="line">AgeOfTony = <span class="number">56</span> </span><br><span class="line">NumberOfStudents = <span class="number">80</span></span><br><span class="line"><span class="comment"># 风格二：纯小写下划线(在python中，变量名的命名推荐使用该风格)</span></span><br><span class="line">age_of_tony = <span class="number">56</span> </span><br><span class="line">number_of_students = <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-变量值的三大特性"><a href="#2-4-变量值的三大特性" class="headerlink" title="2.4 变量值的三大特性"></a>2.4 变量值的三大特性</h3><p>变量的值具备三大特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、id</span></span><br><span class="line">反应的是变量在内存中的唯一编号，内存地址不同<span class="built_in">id</span>肯定不同</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、type</span></span><br><span class="line">变量值的类型</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、value</span></span><br><span class="line">变量值</span><br></pre></td></tr></table></figure>

<p>查看变量值三大特性的方式如下，我们将会在运算符中用到变量值的三大特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&#x27;Info Tony:18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x),<span class="built_in">type</span>(x),x</span><br><span class="line"><span class="number">4376607152</span>，&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;,&#x27;<span class="title">Info</span> <span class="title">Tony</span>:</span><span class="number">18</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>了解：<a href="https://zhuanlan.zhihu.com/p/113408690">Python是一门解释型的强类型动态语言</a></p>
<h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3 常量"></a>3 常量</h2><h3 id="3-1-什么是常量？"><a href="#3-1-什么是常量？" class="headerlink" title="3.1 什么是常量？"></a>3.1 什么是常量？</h3><p>常量指在程序运行过程中不会改变的量</p>
<h3 id="3-2-为什么要有常量？"><a href="#3-2-为什么要有常量？" class="headerlink" title="3.2 为什么要有常量？"></a>3.2 为什么要有常量？</h3><p>在程序运行过程中，有些值是固定的、不应该被改变，比如圆周率 3.141592653…</p>
<h3 id="3-3-怎么使用常量？"><a href="#3-3-怎么使用常量？" class="headerlink" title="3.3 怎么使用常量？"></a>3.3 怎么使用常量？</h3><p>在Python中没有一个专门的语法定义常量，约定俗成是用全部大写的变量名表示常量。如：PI&#x3D;3.14159。所以单从语法层面去讲，常量的使用与变量完全一致。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>02-编程语言与Python介绍</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/02_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8EPython%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>“基于上一章所学，有了计算机硬件，再在硬件之上安装好操作系统，我们就有了一个应用程‘序的运行平台，我们接下来的任务就是学习如何使用某款编程语言来开发应用程序。本章的主题是先带大家了解下编程语言，然后重点介绍python这门编程语言”</p>
<h2 id="1-编程语言分类："><a href="#1-编程语言分类：" class="headerlink" title="1 编程语言分类："></a>1 编程语言分类：</h2><h2 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h2><h3 id="1-1-1-机器语言介绍"><a href="#1-1-1-机器语言介绍" class="headerlink" title="1.1.1 机器语言介绍"></a>1.1.1 机器语言介绍</h3><p><code>机器语言</code>是站在计算机(奴隶)的角度，说计算机<code>能听懂/理解</code>的语言，而计算机能直接理解的就是二进制指令，所以机器语言就是直接用<code>二进制编程</code>，这意味着机器语言是<code>直接操作硬件</code>的，因此机器语言属于<code>低级语言</code></p>
<blockquote>
<p>此处的低级指的是底层、贴近计算机硬件（贴近代指需要详细了解计算机硬件细节、直接控制硬件）</p>
</blockquote>
<ul>
<li><p>什么是机器语言？</p>
<p>用二进制代码0和1描述的指令称为机器指令，由于计算机内部是基于二进制指令工作的，所以机器语言是直接控制计算机硬件。</p>
</li>
<li><p>机器语言的缺点是什么？</p>
<p>用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码以及代码的含义，然后在编写程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些0和1的指令代码，直观性差，不便阅读和书写，还容易出错，且依赖于具体的计算机硬件型号，局限性很大。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</p>
</li>
<li><p>机器语言的分类？</p>
<p>机器语言是被微处理器理解和使用的，存在有多至100000种机器语言的指令，下述是一些简单示例</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指令部份的示例</span></span><br><span class="line"><span class="number">0000</span> 代表 加载（LOAD）</span><br><span class="line">0001 代表 存储（STORE）</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂存器部份的示例</span></span><br><span class="line"><span class="number">0000</span> 代表暂存器 A</span><br><span class="line">0001 代表暂存器 B</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储器部份的示例</span></span><br><span class="line"><span class="number">000000000000</span> 代表地址为 <span class="number">0</span> 的存储器</span><br><span class="line">000000000001 代表地址为 <span class="number">1</span> 的存储器</span><br><span class="line">000000010000 代表地址为 <span class="number">16</span> 的存储器</span><br><span class="line"><span class="number">100000000000</span> 代表地址为 <span class="number">2</span>^<span class="number">11</span> 的存储器</span><br><span class="line"></span><br><span class="line"><span class="comment">#集成示例</span></span><br><span class="line"><span class="number">0000</span>,<span class="number">0000</span>,000000010000 代表 LOAD A, <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>,0001,000000000001 代表 LOAD B, <span class="number">1</span></span><br><span class="line">0001,0001,000000010000 代表 STORE B, <span class="number">16</span></span><br><span class="line">0001,0001,000000000001 代表 STORE B, <span class="number">1</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<h3 id="1-1-2-机器语言总结"><a href="#1-1-2-机器语言总结" class="headerlink" title="1.1.2 机器语言总结"></a>1.1.2 机器语言总结</h3><ol>
<li><p>执行效率最高</p>
<p>编写的程序可以被计算机无障碍理解、直接运行，执行效率高 。</p>
</li>
<li><p>开发效率最低</p>
<p>复杂，开发效率低</p>
</li>
<li><p>跨平台性差</p>
<p>贴近\依赖具体的硬件，跨平台性差</p>
</li>
</ol>
<h2 id="2-2-汇编语言"><a href="#2-2-汇编语言" class="headerlink" title="2.2 汇编语言"></a>2.2 汇编语言</h2><h3 id="2-2-1-汇编语言介绍"><a href="#2-2-1-汇编语言介绍" class="headerlink" title="2.2.1 汇编语言介绍"></a>2.2.1 汇编语言介绍</h3><p>汇编语言仅仅是用一个英文标签代表一组二进制指令，毫无疑问，比起机器语言，汇编语言是一种进步，但汇编语言的本质仍然是直接操作硬件，因此汇编语言仍是比较低级&#x2F;底层的语言、贴近计算机硬件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#汇编语言</span></span><br><span class="line">汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</span><br><span class="line"></span><br><span class="line">汇编的hello world，打印一句hello world, 需要写十多行，如下</span><br><span class="line"></span><br><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db <span class="string">&quot;Hello, world!&quot;</span>, <span class="number">0xA</span>     ; 要输出的字符串</span><br><span class="line">        <span class="built_in">len</span> equ $ - msg                 ; 字串长度</span><br><span class="line">        section .text            ; 代码段声明</span><br><span class="line">        <span class="keyword">global</span> _start            ; 指定入口函数</span><br><span class="line">        _start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, <span class="built_in">len</span>     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, <span class="number">1</span>       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, <span class="number">4</span>       ; 系统调用号(sys_write) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, <span class="number">0</span>       ; 参数一：退出代码</span><br><span class="line">        mov eax, <span class="number">1</span>       ; 系统调用号(sys_exit) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-总结汇编语言"><a href="#2-2-2-总结汇编语言" class="headerlink" title="2.2.2 总结汇编语言"></a>2.2.2 总结汇编语言</h3><ol>
<li><p>执行效率高</p>
<p>相对于机器语言，使用英文标签编写程序相对简单，执行效率高，但较之机器语言稍低，</p>
</li>
<li><p>开发效率低：</p>
<p>仍然是直接操作硬件，比起机器语言来说，复杂度稍低，但依旧居高不下，所以开发效率依旧较低</p>
</li>
<li><p>跨平台性差</p>
<p>同样依赖具体的硬件，跨平台性差</p>
</li>
</ol>
<h2 id="2-3-高级语言"><a href="#2-3-高级语言" class="headerlink" title="2.3 高级语言"></a>2.3 高级语言</h2><p>高级语言是站在人(奴隶主)的角度，说人话，即用人类的字符去编写程序，而人类的字符是在向操作系统发送指令，而非直接操作硬件，所以高级语言是与操作系统打交道的，此处的高级指的是高层、开发者无需考虑硬件细节，因而开发效率可以得到极大的提升，但正因为高级语言离硬件较远，更贴近人类语言，人类可以理解，而计算机则需要通过翻译才能理解，所以执行效率会低于低级语言。</p>
<p>按照翻译的方式的不同，高级语言又分为两种：</p>
<h3 id="2-3-1-编译型（如C语言）"><a href="#2-3-1-编译型（如C语言）" class="headerlink" title="2.3.1 编译型（如C语言）:"></a>2.3.1 编译型（如C语言）:</h3><p><img src="/../../../img/image-20220715110934572.png" alt="image-20220715110934572"></p>
<p>类似谷歌翻译，是把程序所有代码编译成计算机能识别的二进制指令，之后操作系统会拿着编译好的二进制指令直接操作硬件，详细如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（即机器语言），</span><br><span class="line">因此其目标程序可以脱离其语言环境独立执行，使用比较方便，执行效率较高。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">应用程序一旦需要修改，必须先修改源代码，然后重新编译、生成新的目标文件才能执行，</span><br><span class="line">而在只有目标文件而没有源代码，修改会很不方便。所以开发效率低于解释型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">编译型代码是针对某一个平台翻译的，当前平台翻译的结果无法拿到不同的平台使用，针对不同的平台必须重新编译，即跨平台性差</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">现在大多数的编程语言都是编译型的。</span><br><span class="line">编译程序将源程序翻译成目标程序后保存在另一个文件中，该目标程序可脱离编译程序直接在计算机上多次运行。</span><br><span class="line">大多数软件产品都是以目标程序形式发行给用户的，不仅便于直接运行，同时又使他人难于盗用其中的技术。</span><br><span class="line">C、C++、Ada、Pascal都是编译实现的</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-解释型（如python）"><a href="#2-3-2-解释型（如python）" class="headerlink" title="2.3.2 解释型（如python）:"></a>2.3.2 解释型（如python）:</h3><p><img src="/../../../img/image-20220715111047082.png" alt="image-20220715111047082"></p>
<p>类似同声翻译，需要有一个解释器，解释器会读取程序代码，一边翻译一边执行，详细如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、执行效率低</span><br><span class="line">解释型语言的实现中，翻译器并不产生目标机器代码，而是产生易于执行的中间代码。</span><br><span class="line">这种中间代码与机器代码是不同的，中间代码的解释是由软件支持的，不能直接使用硬件，</span><br><span class="line">软件解释器通常会导致执行效率较低。</span><br><span class="line"></span><br><span class="line"># 2、开发效率高</span><br><span class="line">用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的，与编译程序不同的是，</span><br><span class="line">解释程序的任务是逐一将源程序的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。</span><br><span class="line">解释程序的优点是当语句出现语法错误时，可以立即引起程序员的注意，而程序员在程序开发期间就能进行校正。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3、跨平台性强</span><br><span class="line">代码运行是依赖于解释器，不同平台有对应版本的解释器，所以解释型的跨平台性强</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line">对于解释型Basic语言，需要一个专门的解释器解释执行Basic程序，每条语句只有在执行时才被翻译，</span><br><span class="line">这种解释型语言每执行一次就翻译一次，因而效率低下。一般地，动态语言都是解释型的，</span><br><span class="line">例如：Tcl、Perl、Ruby、VBScript、JavaScript等</span><br></pre></td></tr></table></figure>

<p>ps：混合型语言</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java是一类特殊的编程语言，Java程序也需要编译，但是却没有直接编译为机器语言，而是编译为字节码，</span><br><span class="line">然后在Java虚拟机上以解释方式执行字节码。</span><br></pre></td></tr></table></figure>

<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p> 综上选择不同编程语言来开发应用程序对比</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、执行效率：机器语言&gt;汇编语言&gt;高级语言（编译型&gt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、开发效率：机器语言&lt;汇编语言&lt;高级语言（编译型&lt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、跨平台性：解释型具有极强的跨平台型</span></span><br></pre></td></tr></table></figure>

<p> 由于我们开发是应用程序，而应用程序必须运行于某一个平台之上，应用程序的快慢受限于平台（就好比F1赛车与宝马车同时跑在北京五环高速，都受限于道路环境，车速是差不多的）的快慢，并不是单从语言层面就可以提升整体执行效率的，于是开发效率、跨平台性才是我们需要优先考虑的问题，这就是我们首选python的原因</p>
<p><img src="/../../../img/image-20220715111100262.png" alt="image-20220715111100262"></p>
<h2 id="2-python介绍"><a href="#2-python介绍" class="headerlink" title="2 python介绍"></a>2 python介绍</h2><p> 谈及python，涉及两层意思，一层代表的是python这门语言的语法风格，另外一层代表的则是专门用来解释该语法风格的应用程序：python解释器。</p>
<ul>
<li><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus，他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，语法能够像shell一样简洁，易学易用、可拓展性强，同时兼顾C的强大功能。于是Guido在1989年的圣诞节期间，开始编写能够解释Python语言语法的解释器。</p>
</li>
<li><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。最新的TIOBE排行榜<a href="https://link.zhihu.com/?target=https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>，Python已飙升至世界第三。</p>
</li>
<li><p>Python可以应用于众多领域，如：人工智能、数据分析、爬虫、金融量化、云计算、WEB开发、自动化运维&#x2F;测试、游戏开发、网络服务、图像处理等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。</p>
</li>
</ul>
<h2 id="2-1-Python解释器的发展史"><a href="#2-1-Python解释器的发展史" class="headerlink" title="2.1 Python解释器的发展史"></a>2.1 Python解释器的发展史</h2><ul>
<li><p>1989年，Guido开始写Python语言的编译器。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p>
</li>
<li><p>Granddaddy of Python web frameworks, Zope 1 was released in 1999</p>
</li>
<li><p>Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</p>
</li>
<li><p>Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</p>
</li>
<li><p>Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</p>
</li>
<li><p>Python 2.5 - September 19, 2006</p>
</li>
<li><p>Python 2.6 - October 1, 2008</p>
</li>
<li><p>Python 2.7 - July 3, 2010</p>
</li>
<li><p>In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</p>
</li>
<li><p>Python 3.0 - December 3, 2008 (细心的读者会发现，08年时就推出了3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，而很多公司已经基于2.0版本开发出了大量程序，公司已然投入了大量的人财物力，这就导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本，之后我们都应该采用3.0解释器开发程序，但为了方便读者维护2.0版本的软件，我们在遇到两种版本的差异时会专门指出来)</p>
</li>
<li><p>Python 3.1 - June 27, 2009</p>
</li>
<li><p>Python 3.2 - February 20, 2011</p>
</li>
<li><p>Python 3.3 - September 29, 2012</p>
</li>
<li><p>Python 3.4 - March 16, 2014</p>
</li>
<li><p>Python 3.5 - September 13, 2015</p>
</li>
<li><p>Python 3.6 - 2016-12-23 发布python3.6.0版</p>
</li>
</ul>
<h2 id="2-2-Python解释器有哪些种类"><a href="#2-2-Python解释器有哪些种类" class="headerlink" title="2.2 Python解释器有哪些种类?"></a>2.2 Python解释器有哪些种类?</h2><p>官方的Python解释器本质就是基于C语言开发的一个软件，该软件的功能就是读取以<code>.py</code>结尾的文件内容，然后按照Guido定义好的语法和规则去翻译并执行相应的代码。这种用C实现的解释器称为<code>CPython</code>，它是python领域性能最好，应用最广泛的一款解释器，我们在后面提到的解释器指的都是Cpython解释器。但其实解释器作为一款应用软件，完全可以采用其他语言来开发，只要能解释python这门语言的语法即可。Python解释器的一些种类如下，简单了解即可</p>
<ul>
<li><p><strong>Jython</strong></p>
<p>JPython解释器是用JAVA编写的python解释器，可以直接把Python代码编译成Java字节码并执行，它不但使基于java的项目之上嵌入python脚本成为可能，同时也可以将java程序引入到python程序之中。</p>
</li>
<li><p><strong>IPython</strong></p>
<p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。这就好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。<br>CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</p>
</li>
<li><p><strong>PyPy</strong></p>
<p>PyPy是Python开发者为了更好地Hack Python而用Python语言实现的Python解释器。PyPy提供了JIT编译器和沙盒功能，对Python代码进行动态编译（注意不是解释），因此运行速度比CPython还要快。</p>
</li>
<li><p><strong>IronPython</strong></p>
<p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p>
</li>
</ul>
<h2 id="3-第一个Python程序"><a href="#3-第一个Python程序" class="headerlink" title="3 第一个Python程序"></a>3 第一个Python程序</h2><h2 id="3-1-运行python程序有两种方式"><a href="#3-1-运行python程序有两种方式" class="headerlink" title="3.1 运行python程序有两种方式"></a>3.1 运行python程序有两种方式</h2><p>方式一： 交互式模式</p>
<p><img src="/../../../img/image-20220715111232260.png" alt="image-20220715111232260"></p>
<p>方式二：脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、打开一个文本编辑工具，写入下述代码，并保存文件，此处文件的路径为D:\test.py。强调：python解释器执行程序是解释执行，解释的根本就是打开文件读内容，因此文件的后缀名没有硬性限制，但通常定义为.py结尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、打开cmd，运行命令，如下图</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../../img/image-20220715111243920.png" alt="image-20220715111243920"></p>
<p>总结：</p>
<p>1、交互式模式下可以即时得到代码执行结果，调试程序十分方便<br>2、若想将代码永久保存下来，则必须将代码写入文件中<br>3、我们以后主要就是在代码写入文件中，偶尔需要打开交互式模式调试某段代码、验证结果</p>
<h2 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h2><ol>
<li><p>什么是注释</p>
<p>注释就是就是对代码的解释说明，注释的内容不会被当作代码运行</p>
</li>
<li><p>为什么要注释</p>
<p>增强代码的可读性</p>
</li>
<li><p>怎么用注释?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是单行注释，下面是测试代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码注释的原则：</p>
<p>1、不用全部加注释，只需要为自己觉得重要或不好理解的部分加注释即可</p>
<p>2、注释可以用中文或英文，但不要用拼音</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>04-基本数据类型</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/04_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>“我们学习变量是为了让计算机能够像人一样去记忆事物的某种状态，而变量的值就是用来存储事物状态的，很明显事物的状态分成不同种类的（比如人的年龄，身高，职位，工资等等），所以变量值也应该有不同的类型”</p>
<h2 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1 数字类型"></a>1 数字类型</h2><h3 id="1-1-int整型"><a href="#1-1-int整型" class="headerlink" title="1.1 int整型"></a>1.1 int整型</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>用来记录人的年龄，出生年份，学生人数等整数相关的状态</p>
<h4 id="1-1-2-定义"><a href="#1-1-2-定义" class="headerlink" title="1.1.2 定义"></a>1.1.2 定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line"></span><br><span class="line">birthday=<span class="number">1990</span></span><br><span class="line"></span><br><span class="line">student_count=<span class="number">48</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-float浮点型"><a href="#1-2-float浮点型" class="headerlink" title="1.2 float浮点型"></a>1.2 float浮点型</h3><h4 id="1-2-1-作用"><a href="#1-2-1-作用" class="headerlink" title="1.2.1 作用"></a>1.2.1 作用</h4><p>用来记录人的身高，体重，薪资等小数相关的状态</p>
<h4 id="1-2-2-定义"><a href="#1-2-2-定义" class="headerlink" title="1.2.2 定义"></a>1.2.2 定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">height=<span class="number">172.3</span></span><br><span class="line"></span><br><span class="line">weight=<span class="number">103.5</span></span><br><span class="line"></span><br><span class="line">salary=<span class="number">15000.89</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-数字类型的使用"><a href="#1-3-数字类型的使用" class="headerlink" title="1.3 数字类型的使用"></a>1.3 数字类型的使用</h3><p>1 、数学运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a + b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>2、比较大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &gt; y</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="2-字符串类型str"><a href="#2-字符串类型str" class="headerlink" title="2 字符串类型str"></a>2 字符串类型str</h2><h3 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h3><p>用来记录人的名字，家庭住址，性别等描述性质的状态</p>
<h3 id="2-2-定义"><a href="#2-2-定义" class="headerlink" title="2.2 定义"></a>2.2 定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Tony&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;上海市浦东新区&#x27;</span></span><br><span class="line">sex = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure>

<p>用单引号、双引号、多引号，都可以定义字符串，本质上是没有区别的，但是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、需要考虑引号嵌套的配对问题</span></span><br><span class="line">msg = <span class="string">&quot;My name is Tony , I&#x27;m 18 years old!&quot;</span> <span class="comment">#内层有单引号，外层就需要用双引号</span></span><br><span class="line"><span class="comment">#2、多引号可以写多行字符串</span></span><br><span class="line">msg = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。</span></span><br><span class="line"><span class="string">        照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。</span></span><br><span class="line"><span class="string">        不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。</span></span><br><span class="line"><span class="string">      &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数字可以进行加减乘除等运算，字符串呢？也可以，但只能进行<span class="string">&quot;相加&quot;</span>和<span class="string">&quot;相乘&quot;</span>运算。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="string">&#x27;18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name + age <span class="comment">#相加其实就是简单的字符串拼接</span></span><br><span class="line"><span class="string">&#x27;tony18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name * <span class="number">5</span> <span class="comment">#相乘就相当于将字符串相加了5次</span></span><br><span class="line"><span class="string">&#x27;tonytonytonytonytony&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-列表list"><a href="#3-列表list" class="headerlink" title="3 列表list"></a>3 列表list</h2><h2 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h2><p>如果我们需要用一个变量记录多个学生的姓名，用数字类型是无法实现，字符串类型确实可以记录下来，比如</p>
<p>stu_names&#x3D;’张三 李四 王五’，但存的目的是为了取，此时若想取出第二个学生的姓名实现起来相当麻烦，而列表类型就是专门用来记录多个同种属性的值（比如同一个班级多个学生的姓名、同一个人的多个爱好等），并且存取都十分方便</p>
<h2 id="3-2-定义"><a href="#3-2-定义" class="headerlink" title="3.2 定义"></a>3.2 定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_names=[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、列表类型是用索引来对应值，索引代表的是数据的位置，从0开始计数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_names=[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_names[<span class="number">0</span>] </span><br><span class="line"><span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_names[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_names[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;王五&#x27;</span></span><br><span class="line"><span class="comment"># 2、列表可以嵌套，嵌套取值如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students_info=[[<span class="string">&#x27;tony&#x27;</span>,<span class="number">18</span>,[<span class="string">&#x27;jack&#x27;</span>,]],[<span class="string">&#x27;jason&#x27;</span>,<span class="number">18</span>,[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students_info[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>] <span class="comment">#取出第一个学生的第一个爱好</span></span><br><span class="line"><span class="string">&#x27;play&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-字典dict"><a href="#4-字典dict" class="headerlink" title="4 字典dict"></a>4 字典dict</h2><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4.1 作用"></a>4.1 作用</h3><p>如果我们需要用一个变量记录多个值，但多个值是不同属性的，比如人的姓名、年龄、身高，用列表可以存，但列表是用索引对应值的，而索引不能明确地表示值的含义，这就用到字典类型，字典类型是用key：value形式来存储数据，其中key可以对value有描述性的功能</p>
<h3 id="4-2-定义"><a href="#4-2-定义" class="headerlink" title="4.2 定义"></a>4.2 定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person_info=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">185.3</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、字典类型是用key来对应值，key可以对值有描述性的功能，通常为字符串类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person_info=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">185.3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person_info[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person_info[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person_info[<span class="string">&#x27;height&#x27;</span>]</span><br><span class="line"><span class="number">185.3</span></span><br><span class="line"><span class="comment"># 2、字典可以嵌套，嵌套取值如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students=[</span><br><span class="line"><span class="meta">... </span>&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">38</span>,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line"><span class="meta">... </span>&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line"><span class="meta">... </span>&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">58</span>,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students[<span class="number">1</span>][<span class="string">&#x27;hobbies&#x27;</span>][<span class="number">1</span>] <span class="comment">#取第二个学生的第二个爱好</span></span><br><span class="line"><span class="string">&#x27;sleep&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-布尔bool"><a href="#5-布尔bool" class="headerlink" title="5 布尔bool"></a>5 布尔bool</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><p>用来记录真假这两种状态</p>
<h3 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2 定义"></a>5.2 定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_ok = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_ok = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-使用"><a href="#5-3-使用" class="headerlink" title="5.3 使用"></a>5.3 使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通常用来当作判断的条件，我们将在<span class="keyword">if</span>判断中用到它</span><br></pre></td></tr></table></figure>



<h2 id="6-集合"><a href="#6-集合" class="headerlink" title="6 集合"></a>6 集合</h2><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h3><p>在Python中，集合（set）是无序的、元素不重复的集合</p>
<h3 id="6-2-定义"><a href="#6-2-定义" class="headerlink" title="6.2 定义"></a>6.2 定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set01 = &#123;<span class="string">&#x27;num1&#x27;</span>, <span class="string">&#x27;num2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-使用"><a href="#6-3-使用" class="headerlink" title="6.3 使用"></a>6.3 使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins = &#123;<span class="string">&#x27;Justin&#x27;</span>, <span class="string">&#x27;caterpillar&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>users = &#123;<span class="string">&#x27;momor&#x27;</span>, <span class="string">&#x27;hamini&#x27;</span>, <span class="string">&#x27;Justin&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Justin&#x27;</span> <span class="keyword">in</span> admins	<span class="comment"># 使用in判断元素在集合</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins &amp; users</span><br><span class="line">&#123;<span class="string">&#x27;Justin&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins | users</span><br><span class="line">&#123;<span class="string">&#x27;hamini&#x27;</span>, <span class="string">&#x27;caterpillar&#x27;</span>, <span class="string">&#x27;Justin&#x27;</span>, <span class="string">&#x27;momor&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins - users</span><br><span class="line">&#123;<span class="string">&#x27;caterpillar&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins ^ users</span><br><span class="line">&#123;<span class="string">&#x27;hamini&#x27;</span>, <span class="string">&#x27;caterpillar&#x27;</span>, <span class="string">&#x27;momor&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins &gt; users</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>admins &lt; users</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>



<h2 id="7-元组"><a href="#7-元组" class="headerlink" title="7 元组"></a>7 元组</h2><h3 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7.1 作用"></a>7.1 作用</h3><p><code>tuple</code> 可以做什麼呢？有時想要傳回一組相關的值，又不想特地定義一個型態，就會使用 <code>tuple</code>，像是 <code>(1, &#39;Justin&#39;, True)</code>，也許就代表了從資料庫中臨時撈出來的一筆資料。</p>
<h3 id="7-2-定义"><a href="#7-2-定义" class="headerlink" title="7.2 定义"></a>7.2 定义</h3><p><code>tuple</code> 就立后就无法变动，想要建立 <code>tuple</code>，只要在某个值后面加上「,」就可以。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>,</span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>,</span><br><span class="line">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>acct = <span class="number">1</span>, <span class="string">&#x27;Justin&#x27;</span>, <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>acct</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Justin&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(acct)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-使用"><a href="#7-3-使用" class="headerlink" title="7.3 使用"></a>7.3 使用</h3>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>05-垃圾回收机制</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/05_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 解释器在执行到定义变量的语法时，会申请内存空间来存放变量的值，而内存的容量是有限的，这就涉及到变量值所占用内存空间的回收问题，当一个变量值没有用了（简称垃圾）就应该将其占用的内存给回收掉，那什么样的变量值是没有用的呢？</p>
<p>单从逻辑层面分析，我们定义变量将变量值存起来的目的是为了以后取出来使用，而取得变量值需要通过其绑定的直接引用（如x&#x3D;10，10被x直接引用）或间接引用（如l&#x3D;[x,]，x&#x3D;10，10被x直接引用，而被容器类型l间接引用），所以当一个变量值不再绑定任何引用时，我们就无法再访问到该变量值了，该变量值自然就是没有用的，就应该被当成一个垃圾回收。</p>
<p>毫无疑问，内存空间的申请与回收都是非常耗费精力的事情，而且存在很大的危险性，稍有不慎就有可能引发内存溢出问题，好在Cpython解释器提供了自动的垃圾回收机制来帮我们解决了这件事。</p>
<p><img src="https://pic4.zhimg.com/80/v2-fdd6ee1176778e295514ae8f3d0d6053_720w.jpg" alt="img"></p>
<h2 id="二、什么是垃圾回收机制？"><a href="#二、什么是垃圾回收机制？" class="headerlink" title="二、什么是垃圾回收机制？"></a>二、什么是垃圾回收机制？</h2><p>垃圾回收机制（简称GC）是Python解释器自带一种机，专门用来回收不可用的变量值所占用的内存空间</p>
<h2 id="三、为什么要用垃圾回收机制？"><a href="#三、为什么要用垃圾回收机制？" class="headerlink" title="三、为什么要用垃圾回收机制？"></a>三、为什么要用垃圾回收机制？</h2><p>程序运行过程中会申请大量的内存空间，而对于一些无用的内存空间如果不及时清理的话会导致内存使用殆尽（内存溢出），导致程序崩溃，因此管理内存是一件重要且繁杂的事情，而python解释器自带的垃圾回收机制把程序员从繁杂的内存管理中解放出来。</p>
<p><img src="https://pic2.zhimg.com/80/v2-1dade7ff0e1a23520534e517b2cde6b1_720w.jpg" alt="img"></p>
<h2 id="四、垃圾回收机制原理分析"><a href="#四、垃圾回收机制原理分析" class="headerlink" title="四、垃圾回收机制原理分析"></a>四、垃圾回收机制原理分析</h2><p>Python的GC模块主要运用了“引用计数”（reference counting）来跟踪和回收垃圾。在引用计数的基础上，还可以通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用的问题，并且通过“分代回收”（generation collection）以空间换取时间的方式来进一步提高垃圾回收的效率。</p>
<p><img src="https://pic1.zhimg.com/80/v2-d0747b871d71091eff8ab5b0ebb6b3b0_720w.jpg" alt="img"></p>
<h2 id="4-1、什么是引用计数？"><a href="#4-1、什么是引用计数？" class="headerlink" title="4.1、什么是引用计数？"></a>4.1、什么是引用计数？</h2><p>引用计数就是：变量值被变量名关联的次数</p>
<p>如：age&#x3D;18</p>
<p>变量值18被关联了一个变量名age，称之为引用计数为1</p>
<p><img src="https://pic3.zhimg.com/80/v2-89915f2dc64db1fe79ce739a233bb09a_720w.jpg" alt="img"></p>
<p>引用计数增加：</p>
<p>age&#x3D;18 （此时，变量值18的引用计数为1）</p>
<p>m&#x3D;age （把age的内存地址给了m，此时，m,age都关联了18，所以变量值18的引用计数为2）</p>
<p><img src="https://pic4.zhimg.com/80/v2-8a46e8993c193017bbbbca370ce6970b_720w.jpg" alt="img"></p>
<p>引用计数减少：</p>
<p>age&#x3D;10（名字age先与值18解除关联，再与3建立了关联，变量值18的引用计数为1）</p>
<p>del m（del的意思是解除变量名x与变量值18的关联关系，此时，变量18的引用计数为0）</p>
<p><img src="https://pic3.zhimg.com/80/v2-6d0ed3fa462194215235ae22888b373a_720w.jpg" alt="img"></p>
<p>值18的引用计数一旦变为0，其占用的内存地址就应该被解释器的垃圾回收机制回收</p>
<h2 id="4-2、引用计数扩展阅读"><a href="#4-2、引用计数扩展阅读" class="headerlink" title="4.2、引用计数扩展阅读"></a>4.2、引用计数扩展阅读</h2><p>变量值被关联次数的增加或减少，都会引发引用计数机制的执行（增加或减少值的引用计数），这存在明显的效率问题。</p>
<p><img src="https://pic1.zhimg.com/80/v2-2876d1bad8466226f58b1edcb84714a0_720w.jpg" alt="img"></p>
<p>如果说执行效率还仅仅是引用计数机制的一个软肋的话，那么很不幸，引用计数机制还存在着一个致命的弱点，即循环引用（也称交叉引用）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如下我们定义了两个列表，简称列表1与列表2，变量名l1指向列表1，变量名l2指向列表2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[<span class="string">&#x27;xxx&#x27;</span>]  <span class="comment"># 列表1被引用一次，列表1的引用计数变为1   </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2=[<span class="string">&#x27;yyy&#x27;</span>]  <span class="comment"># 列表2被引用一次，列表2的引用计数变为1   </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.append(l2)             <span class="comment"># 把列表2追加到l1中作为第二个元素，列表2的引用计数变为2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2.append(l1)             <span class="comment"># 把列表1追加到l2中作为第二个元素，列表1的引用计数变为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1与l2之间有相互引用</span></span><br><span class="line"><span class="comment"># l1 = [&#x27;xxx&#x27;的内存地址,列表2的内存地址]</span></span><br><span class="line"><span class="comment"># l2 = [&#x27;yyy&#x27;的内存地址,列表1的内存地址]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">&#x27;xxx&#x27;</span>, [<span class="string">&#x27;yyy&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">&#x27;yyy&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>, [...]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p>循环引用会导致：值不再被任何名字关联，但是值的引用计数并不会为0，应该被回收但不能被回收，什么意思呢？试想一下，请看如下操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l1 <span class="comment"># 列表1的引用计数减1，列表1的引用计数变为1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l2 <span class="comment"># 列表2的引用计数减1，列表2的引用计数变为1</span></span><br></pre></td></tr></table></figure>

<p>此时，只剩下列表1与列表2之间的相互引用，两个列表的引用计数均不为0，但两个列表不再被任何其他对象关联，没有任何人可以再引用到它们，所以它俩占用内存空间应该被回收，但由于相互引用的存在，每一个对象的引用计数都不为0，因此这些对象所占用的内存永远不会被释放，所以循环引用是致命的，这与手动进行内存管理所产生的内存泄露毫无区别。 所以Python引入了“标记-清除” 与“分代回收”来分别解决引用计数的循环引用与效率低的问题</p>
<p><img src="https://pic1.zhimg.com/80/v2-3c62f9500a8809200caa264257b93b14_720w.jpg" alt="img"></p>
<h3 id="4-2-1-标记-清除"><a href="#4-2-1-标记-清除" class="headerlink" title="4.2.1 标记-清除"></a>4.2.1 标记-清除</h3><p>容器对象（比如：list，set，dict，class，instance）都可以包含对其他对象的引用，所以都可能产生循环引用。而“标记-清除”计数就是为了解决循环引用的问题。</p>
<p>在了解标记清除算法前，我们需要明确一点，关于变量的存储，内存中有两块区域：堆区与栈区，在定义变量时，变量名与值内存地址的关联关系存放于栈区，变量值存放于堆区，内存管理回收的则是堆区的内容，详解如下图,</p>
<p>定义了两个变量x &#x3D; 10、y &#x3D; 20</p>
<p><img src="https://pic1.zhimg.com/80/v2-73d5845ef7dc5a403333d2099d456fc0_720w.jpg" alt="img"></p>
<p>当我们执行x&#x3D;y时，内存中的栈区与堆区变化如下</p>
<p><img src="https://pic1.zhimg.com/80/v2-9ec5b20fd2c2d2e9c90194d57bcf7778_720w.jpg" alt="img"></p>
<p>标记&#x2F;清除算法的做法是当应用程序可用的内存空间被耗尽的时，就会停止整个程序，然后进行两项工作，第一项则是标记，第二项则是清除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、标记</span></span><br><span class="line">通俗地讲就是：标记的过程就行相当于从栈区出发一条线，“连接”到堆区，再由堆区间接“连接”到其他地址，凡是被这条自栈区起始的线连接到内存空间都属于可以访达的，会被标记为存活</span><br><span class="line"></span><br><span class="line">具体地：标记的过程其实就是，遍历所有的GC Roots对象(栈区中的所有内容或者线程都可以作为GC Roots对象），然后将所有GC Roots的对象可以直接或间接访问到的对象标记为存活的对象，其余的均为非存活对象，应该被清除。</span><br><span class="line">                          </span><br><span class="line"><span class="comment">#2、清除</span></span><br><span class="line">清除的过程将遍历堆中所有的对象，将没有标记存活的对象全部清除掉。</span><br></pre></td></tr></table></figure>

<p>直接引用指的是从栈区出发直接引用到的内存地址，间接引用指的是从栈区出发引用到堆区后再进一步引用到的内存地址，以我们之前的两个列表l1与l2为例画出如下图像</p>
<p><img src="https://pic3.zhimg.com/80/v2-1bfee07a84fc747da5980d990430d10a_720w.jpg" alt="img"></p>
<p>当我们同时删除l1与l2时，会清理到栈区中l1与l2的内容</p>
<p><img src="https://pic2.zhimg.com/80/v2-509de2bd1adfb0566368719c73620fbd_720w.jpg" alt="img"></p>
<p>这样在启用标记清除算法时，发现栈区内不再有l1与l2（只剩下堆区内二者的相互引用），于是列表1与列表2都没有被标记为存活，二者会被清理掉，这样就解决了循环引用带来的内存泄漏问题。</p>
<h3 id="4-2-2-分代回收"><a href="#4-2-2-分代回收" class="headerlink" title="4.2.2 分代回收"></a>4.2.2 分代回收</h3><p>背景：</p>
<p>基于引用计数的回收机制，每次回收内存，都需要把所有对象的引用计数都遍历一遍，这是非常消耗时间的，于是引入了分代回收来提高回收效率，分代回收采用的是用“空间换时间”的策略。</p>
<p><strong>分代：</strong></p>
<p>分代回收的核心思想是：在历经多次扫描的情况下，都没有被回收的变量，gc机制就会认为，该变量是常用变量，gc对其扫描的频率会降低，具体实现原理如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">分代指的是根据存活时间来为变量划分不同等级（也就是不同的代）</span><br><span class="line"></span><br><span class="line">新定义的变量，放到新生代这个等级中，假设每隔<span class="number">1</span>分钟扫描新生代一次，如果发现变量依然被引用，那么该对象的权重（权重本质就是个整数）加一，当变量的权重大于某个设定得值（假设为<span class="number">3</span>），会将它移动到更高一级的青春代，青春代的gc扫描的频率低于新生代（扫描时间间隔更长），假设<span class="number">5</span>分钟扫描青春代一次，这样每次gc需要扫描的变量的总个数就变少了，节省了扫描的总时间，接下来，青春代中的对象，也会以同样的方式被移动到老年代中。也就是等级（代）越高，被垃圾回收机制扫描的频率越低</span><br></pre></td></tr></table></figure>

<p><strong>回收：</strong></p>
<p>回收依然是使用引用计数作为回收的依据</p>
<p><img src="https://pic1.zhimg.com/80/v2-2458685b385b338192d6b90628ed92a8_720w.jpg" alt="img"></p>
<p>虽然分代回收可以起到提升效率的效果，但也存在一定的缺点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例如一个变量刚刚从新生代移入青春代，该变量的绑定关系就解除了，该变量应该被回收，但青春代的扫描频率低于新生代，</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>07-流程控制</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/07_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一-引子："><a href="#一-引子：" class="headerlink" title="一 引子："></a>一 引子：</h2><p>流程控制即控制流程，具体指控制程序的执行流程，而程序的执行流程分为三种结构：顺序结构（之前我们写的代码都是顺序结构）、分支结构（用到if判断）、循环结构（用到while与for）</p>
<p><img src="https://pic3.zhimg.com/80/v2-1c94b67e61036b4b8029f1ff0e04021e_720w.jpg" alt="img"></p>
<h2 id="二-分支结构"><a href="#二-分支结构" class="headerlink" title="二 分支结构"></a>二 分支结构</h2><h2 id="2-1-什么是分支结构"><a href="#2-1-什么是分支结构" class="headerlink" title="2.1 什么是分支结构"></a>2.1 什么是分支结构</h2><p>分支结构就是根据条件判断的真假去执行不同分支对应的子代码</p>
<h2 id="2-2-为什么要用分支结构"><a href="#2-2-为什么要用分支结构" class="headerlink" title="2.2 为什么要用分支结构"></a>2.2 为什么要用分支结构</h2><p>人类某些时候需要根据条件来决定做什么事情，比如：如果今天下雨，就带伞</p>
<p>所以程序中必须有相应的机制来控制计算机具备人的这种判断能力</p>
<h2 id="2-3-如何使用分支结构"><a href="#2-3-如何使用分支结构" class="headerlink" title="2.3 如何使用分支结构"></a>2.3 如何使用分支结构</h2><h3 id="2-3-1-if语法"><a href="#2-3-1-if语法" class="headerlink" title="2.3.1 if语法"></a>2.3.1 if语法</h3><p><img src="https://pic3.zhimg.com/80/v2-a75171615cb658ae9bb3db7afabc6846_720w.jpg" alt="img"></p>
<p>用if关键字来实现分支结构，完整语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:   <span class="comment"># 如果条件1的结果为True，就依次执行：代码1、代码2，......</span></span><br><span class="line">  　代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>: <span class="comment"># 如果条件2的结果为True，就依次执行：代码3、代码4，......</span></span><br><span class="line">  　代码<span class="number">3</span></span><br><span class="line">    代码<span class="number">4</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>: <span class="comment"># 如果条件3的结果为True，就依次执行：代码5、代码6，......</span></span><br><span class="line">  　代码<span class="number">5</span></span><br><span class="line">    代码<span class="number">6</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:　　   <span class="comment"># 其它情况，就依次执行：代码7、代码8，......</span></span><br><span class="line">    代码<span class="number">7</span></span><br><span class="line">    代码<span class="number">8</span></span><br><span class="line">    ......</span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 1、python用相同缩进(4个空格表示一个缩进)来标识一组代码块，同一组代码会自上而下依次运行</span></span><br><span class="line"><span class="comment"># 2、条件可以是任意表达式，但执行结果必须为布尔类型</span></span><br><span class="line">     <span class="comment"># 在if判断中所有的数据类型也都会自动转换成布尔类型</span></span><br><span class="line">       <span class="comment"># 2.1、None，0，空（空字符串，空列表，空字典等）三种情况下转换成的布尔值为False</span></span><br><span class="line">       <span class="comment"># 2.2、其余均为True</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-if应用案例"><a href="#2-3-2-if应用案例" class="headerlink" title="2.3.2 if应用案例"></a>2.3.2 if应用案例</h3><p><img src="https://pic4.zhimg.com/80/v2-0dff1efd05c82779f08db912b84ed5a3_720w.jpg" alt="img"></p>
<p>案例1：</p>
<p>如果：女人的年龄&gt;30岁，那么：叫阿姨</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age_of_girl=31</span><br><span class="line">if age_of_girl &gt; 30:</span><br><span class="line">    print(&#x27;阿姨好&#x27;)</span><br></pre></td></tr></table></figure>

<p>案例2：</p>
<p>如果：女人的年龄&gt;30岁，那么：叫阿姨，否则：叫小姐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age_of_girl=18</span><br><span class="line">if age_of_girl &gt; 30:</span><br><span class="line">    print(&#x27;阿姨好&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;小姐好&#x27;)</span><br></pre></td></tr></table></figure>

<p>案例3：</p>
<p>如果：女人的年龄&gt;&#x3D;18并且&lt;22岁并且身高&gt;170并且体重&lt;100并且是漂亮的，那么：表白，否则：叫阿姨**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age_of_girl=18</span><br><span class="line">height=171</span><br><span class="line">weight=99</span><br><span class="line">is_pretty=True</span><br><span class="line">if age_of_girl &gt;= 18 and age_of_girl &lt; 22 and height &gt; 170 and weight &lt; 100 and is_pretty == True:</span><br><span class="line">    print(&#x27;表白...&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;阿姨好&#x27;)</span><br></pre></td></tr></table></figure>

<p>案例4：</p>
<p>如果：成绩&gt;&#x3D;90，那么：优秀</p>
<p>如果成绩&gt;&#x3D;80且&lt;90,那么：良好</p>
<p>如果成绩&gt;&#x3D;70且&lt;80,那么：普通</p>
<p>其他情况：很差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">score=<span class="built_in">int</span>(score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;普通&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;很差&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>案例5：if嵌套</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在表白的基础上继续：</span><br><span class="line">#如果表白成功，那么：在一起</span><br><span class="line">#否则：打印。。。</span><br><span class="line"></span><br><span class="line">age_of_girl=18</span><br><span class="line">height=171</span><br><span class="line">weight=99</span><br><span class="line">is_pretty=True</span><br><span class="line">success=False</span><br><span class="line"></span><br><span class="line">if age_of_girl &gt;= 18 and age_of_girl &lt; 22 and height &gt; 170 and weight &lt; 100 and is_pretty == True:</span><br><span class="line">    if success:</span><br><span class="line">        print(&#x27;表白成功,在一起&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;什么爱情不爱情的,爱nmlgb的爱情,爱nmlg啊...&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;阿姨好&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-3a90716a58a4458640aee154894b0bd2_720w.jpg" alt="img"></p>
<p>练习1: 登陆功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户名字：&#x27;</span>).strip()</span><br><span class="line">password=<span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;tony&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;tony login success&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>练习2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#根据用户输入内容打印其权限</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">egon --&gt; 超级管理员</span><br><span class="line">tom  --&gt; 普通管理员</span><br><span class="line">jack,rain --&gt; 业务主管</span><br><span class="line">其他 --&gt; 普通用户</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">name=input(&#x27;请输入用户名字：&#x27;)</span><br><span class="line"></span><br><span class="line">if name == &#x27;egon&#x27;:</span><br><span class="line">    print(&#x27;超级管理员&#x27;)</span><br><span class="line">elif name == &#x27;tom&#x27;:</span><br><span class="line">    print(&#x27;普通管理员&#x27;)</span><br><span class="line">elif name == &#x27;jack&#x27; or name == &#x27;rain&#x27;:</span><br><span class="line">    print(&#x27;业务主管&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;普通用户&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="三-循环结构"><a href="#三-循环结构" class="headerlink" title="三 循环结构"></a>三 循环结构</h2><h2 id="3-1-什么是循环结构"><a href="#3-1-什么是循环结构" class="headerlink" title="3.1 什么是循环结构"></a>3.1 什么是循环结构</h2><p>循环结构就是重复执行某段代码块</p>
<h2 id="3-2-为什么要用循环结构"><a href="#3-2-为什么要用循环结构" class="headerlink" title="3.2 为什么要用循环结构"></a>3.2 为什么要用循环结构</h2><p><img src="https://pic4.zhimg.com/80/v2-f174b482ecf2583633bd31e3a13f8e8b_720w.jpg" alt="img"></p>
<p>人类某些时候需要重复做某件事情</p>
<p>所以程序中必须有相应的机制来控制计算机具备人的这种循环做事的能力</p>
<h2 id="3-3-如何使用循环结构"><a href="#3-3-如何使用循环结构" class="headerlink" title="3.3 如何使用循环结构"></a>3.3 如何使用循环结构</h2><h3 id="3-3-1-while循环语法"><a href="#3-3-1-while循环语法" class="headerlink" title="3.3.1 while循环语法"></a>3.3.1 while循环语法</h3><p><img src="https://pic4.zhimg.com/80/v2-43c2d731786fa1b75f5e45b55f0cf833_720w.jpg" alt="img"></p>
<p>python中有while与for两种循环机制，其中while循环称之为条件循环，语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">     代码<span class="number">1</span>     </span><br><span class="line">     代码<span class="number">2</span>     </span><br><span class="line">     代码<span class="number">3</span></span><br><span class="line"><span class="keyword">while</span>的运行步骤：</span><br><span class="line">步骤<span class="number">1</span>：如果条件为真，那么依次执行：代码<span class="number">1</span>、代码<span class="number">2</span>、代码<span class="number">3</span>、......</span><br><span class="line">步骤<span class="number">2</span>：执行完毕后再次判断条件,如果条件为<span class="literal">True</span>则再次执行：代码<span class="number">1</span>、代码<span class="number">2</span>、代码<span class="number">3</span>、......，如果条件为<span class="literal">False</span>,则循环终止</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-6f56fdbd7d92dd2a7ce02573d950136a_720w.jpg" alt="img"></p>
<h3 id="3-3-2-while循环应用案例"><a href="#3-3-2-while循环应用案例" class="headerlink" title="3.3.2 while循环应用案例"></a>3.3.2 while循环应用案例</h3><p><img src="https://pic4.zhimg.com/80/v2-0dff1efd05c82779f08db912b84ed5a3_720w.jpg" alt="img"></p>
<p>案例一：while循环的基本使用</p>
<p>用户认证程序</p>
<p><img src="https://pic2.zhimg.com/80/v2-72163eb478e754fbfd478839c5cbf845_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户认证程序的基本逻辑就是接收用户输入的用户名密码然后与程序中存放的用户名密码进行判断，判断成功则登陆成功，判断失败则输出账号或密码错误</span></span><br><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">inp_name =  <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">inp_pwd =  <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line"><span class="comment">#通常认证失败的情况下，会要求用户重新输入用户名和密码进行验证，如果我们想给用户三次试错机会，本质就是将上述代码重复运行三遍，你总不会想着把代码复制3次吧。。。。</span></span><br><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次验证</span></span><br><span class="line">inp_name =  <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">inp_pwd =  <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次验证</span></span><br><span class="line">inp_name =  <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">inp_pwd =  <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次验证</span></span><br><span class="line">inp_name =  <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">inp_pwd =  <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#即使是小白的你，也觉得的太low了是不是，以后要修改功能还得修改3次，因此记住，写重复的代码是程序员最不耻的行为。</span></span><br><span class="line"><span class="comment">#那么如何做到不用写重复代码又能让程序重复一段代码多次呢？ 循环语句就派上用场啦（使用while循环实现）</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment"># 记录错误验证的次数</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>案例二：while+break的使用</p>
<p>使用了while循环后，代码确实精简多了，但问题是用户输入正确的用户名密码以后无法结束循环，那如何结束掉一个循环呢？这就需要用到break了！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment"># 记录错误验证的次数</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># 用于结束本层循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>案例三：while循环嵌套+break</p>
<p>如果while循环嵌套了很多层，要想退出每一层循环则需要在每一层循环都有一个break</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:  <span class="comment"># 第一层循环</span></span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 第二层循环</span></span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 用于结束本层循环，即第二层循环</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;run &lt;%s&gt;&#x27;</span> % cmd)</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 用于结束本层循环，即第一层循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>案例四：while循环嵌套+tag的使用</p>
<p>针对嵌套多层的while循环，如果我们的目的很明确就是要在某一层直接退出所有层的循环，其实有一个窍门，就让所有while循环的条件都用同一个变量，该变量的初始值为True，一旦在某一层将该变量的值改成False，则所有层的循环都结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&quot;jason&quot;</span></span><br><span class="line">password = <span class="string">&quot;123&quot;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag: </span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> tag:  </span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                tag = <span class="literal">False</span>  <span class="comment"># tag变为False， 所有while循环的条件都变为False </span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;run &lt;%s&gt;&#x27;</span> % cmd)</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 用于结束本层循环，即第一层循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的用户名或密码错误！&quot;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>案例五：while+continue的使用</p>
<p>break代表结束本层循环，而continue则用于结束本次循环，直接进入下一次循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印1到10之间，除7以外的所有数字</span></span><br><span class="line">number=<span class="number">11</span></span><br><span class="line"><span class="keyword">while</span> number&gt;<span class="number">1</span>:</span><br><span class="line">    number -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> number==<span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># 结束掉本次循环，即本次循环continue之后的代码都不会运行了，而是直接进入下一次循环</span></span><br><span class="line">    <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure>

<p>案例五：while+else的使用</p>
<p>在while循环的后面，我们可以跟else语句，当while 循环正常执行完并且中间没有被break 中止的话，就会执行else后面的语句，所以我们可以用else来验证，循环是否正常结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span> :</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loop&quot;</span>,count)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常执行完啦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----out of while loop ------&quot;</span>)</span><br><span class="line">输出</span><br><span class="line">Loop <span class="number">1</span></span><br><span class="line">Loop <span class="number">2</span></span><br><span class="line">Loop <span class="number">3</span></span><br><span class="line">Loop <span class="number">4</span></span><br><span class="line">Loop <span class="number">5</span></span><br><span class="line">Loop <span class="number">6</span></span><br><span class="line">循环正常执行完啦   <span class="comment">#没有被break打断，所以执行了该行代码</span></span><br><span class="line">-----out of <span class="keyword">while</span> loop ------</span><br></pre></td></tr></table></figure>

<p>如果执行过程中被break，就不会执行else的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span> :</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loop&quot;</span>,count)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常执行完啦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----out of while loop ------&quot;</span>)</span><br><span class="line">输出</span><br><span class="line">Loop <span class="number">1</span></span><br><span class="line">Loop <span class="number">2</span></span><br><span class="line">-----out of <span class="keyword">while</span> loop ------ <span class="comment">#由于循环被break打断了，所以不执行else后的输出语句</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-3a90716a58a4458640aee154894b0bd2_720w.jpg" alt="img"></p>
<p>练习1：</p>
<p>寻找1到100之间数字7最大的倍数（结果是98）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> number&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> number%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(number)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    number-=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>练习2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">3</span>:</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; age :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜的太大了，往小里试试...&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; age :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜的太小了，往大里试试...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;恭喜你，猜对了...&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-for循环语法"><a href="#3-3-3-for循环语法" class="headerlink" title="3.3.3 for循环语法"></a>3.3.3 for循环语法</h3><p><img src="https://pic3.zhimg.com/80/v2-3a90716a58a4458640aee154894b0bd2_720w.jpg" alt="img"></p>
<p>循环结构的第二种实现方式是for循环，for循环可以做的事情while循环都可以实现，之所以用for循环是因为在循环取值（即遍历值）时for循环比while循环的使用更为简洁，</p>
<p><strong>for循环语法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 可迭代对象: <span class="comment"># 此时只需知道可迭代对象可以是字符串\列表\字典，我们之后会专门讲解可迭代对象</span></span><br><span class="line">    代码一</span><br><span class="line">    代码二</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#例1</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参照例1来介绍for循环的运行步骤</span></span><br><span class="line"><span class="comment"># 步骤1：从列表[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]中读出第一个值赋值给item（item=‘a’），然后执行循环体代码</span></span><br><span class="line"><span class="comment"># 步骤2：从列表[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]中读出第二个值赋值给item（item=‘b’），然后执行循环体代码</span></span><br><span class="line"><span class="comment"># 步骤3: 重复以上过程直到列表中的值读尽</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-7d7dc5ae41a09a7cd6e043d75c63b81c_720w.jpg" alt="img"></p>
<h3 id="3-3-4-for循环应用案例"><a href="#3-3-4-for循环应用案例" class="headerlink" title="3.3.4 for循环应用案例"></a>3.3.4 for循环应用案例</h3><p><img src="https://pic4.zhimg.com/80/v2-0dff1efd05c82779f08db912b84ed5a3_720w.jpg" alt="img"></p>
<p>案例一：打印数字0-5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单版：for循环的实现方式</span></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):  <span class="comment"># range(6)会产生从0-5这6个数</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂版：while循环的实现方式</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>案例二：遍历字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单版：for循环的实现方式</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;:  <span class="comment"># for 循环默认取的是字典的key赋值给变量名k</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂版：while循环确实可以遍历字典，后续将会迭代器部分详细介绍</span></span><br></pre></td></tr></table></figure>

<p>案例三：for循环嵌套</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请用for循环嵌套的方式打印如下图形：</span></span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># print()表示换行</span></span><br></pre></td></tr></table></figure>

<p>注意：break 与 continue也可以用于for循环，使用语法同while循环</p>
<p><img src="https://pic3.zhimg.com/80/v2-3a90716a58a4458640aee154894b0bd2_720w.jpg" alt="img"></p>
<p>练习一：</p>
<p>打印九九乘法表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s*%s=%s&#x27;</span> %(i,j,i*j),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<p>练习二：</p>
<p>打印金字塔</p>
<p><img src="https://pic3.zhimg.com/80/v2-53598748f490542a9700e63433b79496_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分析</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#max_level=5</span></span><br><span class="line"><span class="string">     *        # current_level=1，空格数=4，*号数=1</span></span><br><span class="line"><span class="string">    ***       # current_level=2,空格数=3,*号数=3</span></span><br><span class="line"><span class="string">   *****      # current_level=3,空格数=2,*号数=5</span></span><br><span class="line"><span class="string">  *******     # current_level=4,空格数=1,*号数=7</span></span><br><span class="line"><span class="string"> *********    # current_level=5,空格数=0,*号数=9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 数学表达式</span></span><br><span class="line"><span class="string">空格数=max_level-current_level</span></span><br><span class="line"><span class="string">*号数=2*current_level-1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 实现：</span></span><br><span class="line">max_level=<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> current_level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,max_level+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_level-current_level):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment">#在一行中连续打印多个空格</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*current_level-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment">#在一行中连续打印多个空格</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>1、if判断</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=10">https://www.bilibili.com/video/av73342471/?p=10www.bilibili.com/video/av73342471/?p=10</a></p>
<p>2、while循环</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=11">https://www.bilibili.com/video/av73342471?p=11www.bilibili.com/video/av73342471?p=11</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>08-基本数据类型及内置方法</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/08_%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-引子"><a href="#一-引子" class="headerlink" title="一 引子"></a>一 引子</h2><p> 数据类型是用来记录事物状态的，而事物的状态是不断变化的(如:一个人年龄的增长（操作int类型） ，单个人名的修改（操作str类型），学生列表中增加学生（操作list类型）等)，这意味着我们在开发程序时需要频繁对数据进行操作，为了提升我们的开发效率， python针对这些常用的操作，为每一种数据类型内置了一系列方法。本章的主题就是带大家详细了解下它们，以及每种数据类型的详细定义、类型转换。</p>
<p><img src="https://pic1.zhimg.com/80/v2-10e28bbd95c783f2266fea32400e48d0_720w.jpg" alt="img"></p>
<h2 id="二-数字类型int与float"><a href="#二-数字类型int与float" class="headerlink" title="二 数字类型int与float"></a>二 数字类型int与float</h2><p><img src="https://pic3.zhimg.com/80/v2-c2179471827cd00d18d8a286eb708fd6_720w.jpg" alt="img"></p>
<h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、定义：</span></span><br><span class="line"><span class="comment"># 1.1 整型int的定义</span></span><br><span class="line">age=<span class="number">10</span>  <span class="comment"># 本质age = int(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2 浮点型float的定义</span></span><br><span class="line">salary=<span class="number">3000.3</span>  <span class="comment"># 本质salary=float(3000.3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：名字+括号的意思就是调用某个功能，比如</span></span><br><span class="line"><span class="comment"># print(...)调用打印功能</span></span><br><span class="line"><span class="comment"># int(...)调用创建整型数据的功能</span></span><br><span class="line"><span class="comment"># float(...)调用创建浮点型数据的功能</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-类型转换"><a href="#2-2-类型转换" class="headerlink" title="2.2 类型转换"></a>2.2 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、数据类型转换</span></span><br><span class="line"><span class="comment"># 1.1 int可以将由纯整数构成的字符串直接转换成整型，若包含其他任意非整数符号，则会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res,<span class="built_in">type</span>(res)</span><br><span class="line">(<span class="number">123</span>, &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">int</span>(<span class="params"><span class="string">&#x27;12.3&#x27;</span></span>) # 错误演示：字符串内包含了非整数符号.</span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> (<span class="params">most recent call last</span>):</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;12.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2 进制转换</span></span><br><span class="line"><span class="comment"># 十进制转其他进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;0b11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">9</span>)</span><br><span class="line"><span class="string">&#x27;0o11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">17</span>)</span><br><span class="line"><span class="string">&#x27;0x11&#x27;</span></span><br><span class="line"><span class="comment"># 其他进制转十进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;0b11&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;0o11&#x27;</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;0x11&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.3 float同样可以用来做数据类型的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;12.3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="built_in">float</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res,<span class="built_in">type</span>(res)</span><br><span class="line">(<span class="number">12.3</span>, &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">float</span>&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h2><p>数字类型主要就是用来做数学运算与比较运算，因此数字类型除了与运算符结合使用之外，并无需要掌握的内置方法</p>
<p><img src="https://pic3.zhimg.com/80/v2-45110f0279c9d352ab9c17dca57c140e_720w.jpg" alt="img"></p>
<h2 id="三-字符串"><a href="#三-字符串" class="headerlink" title="三 字符串"></a>三 字符串</h2><p><img src="https://pic4.zhimg.com/80/v2-15b3e5110d3102e523299c53ddadf663_720w.jpg" alt="img"></p>
<h2 id="3-1-定义："><a href="#3-1-定义：" class="headerlink" title="3.1 定义："></a>3.1 定义：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义：在单引号\双引号\三引号内包含一串字符</span></span><br><span class="line">name1 = <span class="string">&#x27;jason&#x27;</span>  <span class="comment"># 本质:name = str(&#x27;任意形式内容&#x27;)</span></span><br><span class="line">name2 = <span class="string">&quot;lili&quot;</span>  <span class="comment"># 本质:name = str(&quot;任意形式内容&quot;)</span></span><br><span class="line">name3 = <span class="string">&quot;&quot;&quot;ricky&quot;&quot;&quot;</span>  <span class="comment"># 本质:name = str(&quot;&quot;&quot;任意形式内容&quot;&quot;&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3.2 类型转换"></a>3.2 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据类型转换：str()可以将任意数据类型转换成字符串类型，例如 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])) <span class="comment"># list-&gt;str</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params"><span class="built_in">str</span>(<span class="params">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jason&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span>)</span>) # <span class="title">dict</span>-&gt;<span class="built_in">str</span></span></span><br><span class="line"><span class="class">&lt;<span class="keyword">class</span> &#x27;<span class="built_in">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="built_in">type</span>(<span class="built_in">str</span>((1,2,3)))  # <span class="built_in">tuple</span>-&gt;<span class="built_in">str</span></span></span><br><span class="line"><span class="class">&lt;<span class="keyword">class</span> &#x27;<span class="built_in">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="built_in">type</span>(<span class="built_in">str</span>(&#123;1,2,3,4&#125;)) # <span class="built_in">set</span>-&gt;<span class="built_in">str</span></span></span><br><span class="line"><span class="class">&lt;<span class="keyword">class</span> &#x27;<span class="built_in">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h2><h3 id="3-3-1-优先掌握的操作"><a href="#3-3-1-优先掌握的操作" class="headerlink" title="3.3.1 优先掌握的操作"></a>3.3.1 优先掌握的操作</h3><p><img src="https://pic4.zhimg.com/80/v2-fefd043609f271fb50a01020cea03f73_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;hello python!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.按索引取值(正向取，反向取)：</span></span><br><span class="line"><span class="comment"># 1.1 正向取(从左往右)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">6</span>]</span><br><span class="line">p</span><br><span class="line"><span class="comment"># 1.2 反向取(负号表示从右往左)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[-<span class="number">4</span>]</span><br><span class="line">h</span><br><span class="line"><span class="comment"># 1.3 对于str来说，只能按照索引取值，不能改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>]=<span class="string">&#x27;H&#x27;</span> <span class="comment"># 报错TypeError</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.切片(顾头不顾尾，步长)</span></span><br><span class="line"><span class="comment"># 2.1 顾头不顾尾：取出索引为0到8的所有字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>:<span class="number">9</span>]  </span><br><span class="line">hello pyt</span><br><span class="line"><span class="comment"># 2.2 步长：0:9:2,第三个参数2代表步长，会从0开始，每次累加一个2即可，所以会取出索引0、2、4、6、8的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>:<span class="number">9</span>:<span class="number">2</span>]  </span><br><span class="line">hlopt </span><br><span class="line"><span class="comment"># 2.3 反向切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[::-<span class="number">1</span>]  <span class="comment"># -1表示从右往左依次取值</span></span><br><span class="line">!nohtyp olleh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.长度len</span></span><br><span class="line"><span class="comment"># 3.1 获取字符串的长度，即字符的个数，但凡存在于引号内的都算作字符)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(str1) <span class="comment"># 空格也算字符</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.成员运算 in 和 not in    </span></span><br><span class="line"><span class="comment"># 4.1 int:判断hello 是否在 str1里面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> str1  </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 4.2 not in:判断tony 是否不在 str1里面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;tony&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> str1 </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.strip移除字符串首尾指定的字符(默认移除空格)</span></span><br><span class="line"><span class="comment"># 5.1 括号内不指定字符，默认移除首尾空白字符(空格、\n、\t)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;  life is short!  &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1.strip()  </span><br><span class="line">life <span class="keyword">is</span> short!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 括号内指定字符，移除首尾指定的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;**tony**&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2.strip(<span class="string">&#x27;*&#x27;</span>)  </span><br><span class="line">tony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.切分split</span></span><br><span class="line"><span class="comment"># 6.1 括号内不指定字符，默认以空格作为切分符号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.split()</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="comment"># 6.2 括号内指定分隔字符，则按照括号内指定的字符切割字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4.split(<span class="string">&#x27;.&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;127&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]  <span class="comment"># 注意:split切割得到的结果是列表数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.循环</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5 = <span class="string">&#x27;今天你好吗？&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> str5:  <span class="comment"># 依次取出字符串中每一个字符</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line)</span><br><span class="line">...</span><br><span class="line">今</span><br><span class="line">天</span><br><span class="line">你</span><br><span class="line">好</span><br><span class="line">吗</span><br><span class="line">？</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-需要掌握的操作"><a href="#3-3-2-需要掌握的操作" class="headerlink" title="3.3.2 需要掌握的操作"></a>3.3.2 需要掌握的操作</h3><p><img src="https://pic4.zhimg.com/80/v2-3870f73c837fd6488da8a24bec358a6f_720w.jpg" alt="img"></p>
<p><strong>1.strip, lstrip, rstrip</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;**tony***&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1.strip(<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 移除左右两边的指定字符</span></span><br><span class="line"><span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1.lstrip(<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 只移除左边的指定字符</span></span><br><span class="line">tony***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1.rstrip(<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 只移除右边的指定字符</span></span><br><span class="line">**tony</span><br></pre></td></tr></table></figure>

<p><strong>2.lower(),upper()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;My nAme is tonY！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2.lower()  <span class="comment"># 将英文字符串全部变小写</span></span><br><span class="line">my name <span class="keyword">is</span> tony！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2.upper()  <span class="comment"># 将英文字符串全部变大写</span></span><br><span class="line">MY NAME IS TONY！</span><br></pre></td></tr></table></figure>

<p><strong>3.startswith,endswith</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3 = <span class="string">&#x27;tony jam&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startswith()判断字符串是否以括号内指定的字符开头，结果为布尔值True或False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.startswith(<span class="string">&#x27;t&#x27;</span>) </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.startswith(<span class="string">&#x27;j&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># endswith()判断字符串是否以括号内指定的字符结尾，结果为布尔值True或False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.endswith(<span class="string">&#x27;jam&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.endswith(<span class="string">&#x27;tony&#x27;</span>)  </span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>4.格式化输出之format</strong></p>
<p>之前我们使用%s来做字符串的格式化输出操作，在传值时，必须严格按照位置与%s一一对应，而字符串的内置方法format则提供了一种不依赖位置的传值方式</p>
<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># format括号内在传参数时完全可以打乱顺序，但仍然能指名道姓地为指定的参数传值，name=‘tony’就是传给&#123;name&#125;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;name&#125;, my age is &#123;age&#125;!&#x27;</span>.<span class="built_in">format</span>(age=<span class="number">18</span>,name=<span class="string">&#x27;tony&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line"><span class="string">&#x27;my name is tony, my age is 18!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;name&#125;&#123;name&#125;&#123;name&#125;, my age is &#123;name&#125;!&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;tony&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line"><span class="string">&#x27;my name is tonytonytony, my age is tony!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>format的其他使用方式（了解）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类似于%s的用法，传入的值会按照位置与&#123;&#125;一一对应</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;&#125;, my age is &#123;&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;tony&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 </span><br><span class="line">my name <span class="keyword">is</span> tony, my age <span class="keyword">is</span> <span class="number">18</span>!</span><br><span class="line"><span class="comment"># 把format传入的多个值当作一个列表，然后用&#123;索引&#125;取值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;0&#125;, my age is &#123;1&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;tony&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4</span><br><span class="line">my name <span class="keyword">is</span> tony, my age <span class="keyword">is</span> <span class="number">18</span>!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;1&#125;, my age is &#123;0&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;tony&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line">my name <span class="keyword">is</span> <span class="number">18</span>, my age <span class="keyword">is</span> tony!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;1&#125;, my age is &#123;1&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;tony&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line">my name <span class="keyword">is</span> <span class="number">18</span>, my age <span class="keyword">is</span> <span class="number">18</span>!</span><br></pre></td></tr></table></figure>

<p><strong>5.split,rsplit</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-56cf164d7e6dc3467c228bf141f1585b_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># split会按照从左到右的顺序对字符串进行切分，可以指定切割次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5=<span class="string">&#x27;C:/a/b/c/d.txt&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5.split(<span class="string">&#x27;/&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">[<span class="string">&#x27;C:&#x27;</span>, <span class="string">&#x27;a/b/c/d.txt&#x27;</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># rsplit刚好与split相反，从右往左切割，可以指定切割次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5=<span class="string">&#x27;a|b|c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5.rsplit(<span class="string">&#x27;|&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">[<span class="string">&#x27;a|b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>6.join</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从可迭代对象中取出多个字符串，然后按照指定的分隔符进行拼接，拼接的结果为字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%&#x27;</span>.join(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 从字符串&#x27;hello&#x27;中取出多个字符串，然后按照%作为分隔符号进行拼接</span></span><br><span class="line"><span class="string">&#x27;h%e%l%l%o&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;|&#x27;</span>.join([<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;read&#x27;</span>])  <span class="comment"># 从列表中取出多个字符串，然后按照*作为分隔符号进行拼接</span></span><br><span class="line"><span class="string">&#x27;tony|18|read&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>7.replace</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用新的字符替换字符串中旧的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7 = <span class="string">&#x27;my name is tony, my age is 18!&#x27;</span>  <span class="comment"># 将tony的年龄由18岁改成73岁</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7 = str7.replace(<span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;73&#x27;</span>)  <span class="comment"># 语法:replace(&#x27;旧内容&#x27;, &#x27;新内容&#x27;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7</span><br><span class="line">my name <span class="keyword">is</span> tony, my age <span class="keyword">is</span> <span class="number">73</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以指定修改的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7 = <span class="string">&#x27;my name is tony, my age is 18!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7 = str7.replace(<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;MY&#x27;</span>,<span class="number">1</span>) <span class="comment"># 只把一个my改为MY</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str7</span><br><span class="line"><span class="string">&#x27;MY name is tony, my age is 18!&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>8.isdigit</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断字符串是否是纯数字组成，返回结果为True或False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str8 = <span class="string">&#x27;5201314&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str8.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str8 = <span class="string">&#x27;123g123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str8.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-了解操作"><a href="#3-3-3-了解操作" class="headerlink" title="3.3.3 了解操作"></a>3.3.3 了解操作</h3><p><img src="https://pic1.zhimg.com/80/v2-44989c1a59822b2480dc44ed07e1987c_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.find,rfind,index,rindex,count</span></span><br><span class="line"><span class="comment"># 1.1 find：从指定范围内查找子字符串的起始索引，找得到则返回数字1，找不到则返回-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg=<span class="string">&#x27;tony say hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.find(<span class="string">&#x27;o&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>)  <span class="comment"># 在索引为1和2(顾头不顾尾)的字符中查找字符o的索引</span></span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="comment"># 1.2 index:同find,但在找不到时会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.index(<span class="string">&#x27;e&#x27;</span>,<span class="number">2</span>,<span class="number">4</span>) <span class="comment"># 报错ValueError</span></span><br><span class="line"><span class="comment"># 1.3 rfind与rindex：略</span></span><br><span class="line"><span class="comment"># 1.4 count:统计字符串在大字符串中出现的次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg = <span class="string">&quot;hello everyone&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.count(<span class="string">&#x27;e&#x27;</span>)  <span class="comment"># 统计字符串e出现的次数</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.count(<span class="string">&#x27;e&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>)  <span class="comment"># 字符串e在索引1~5范围内出现的次数</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.center,ljust,rjust,zfill</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.center(<span class="number">30</span>,<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 总宽度为30，字符串居中显示，不够用-填充</span></span><br><span class="line">-------------tony-------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.ljust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 总宽度为30，字符串左对齐显示，不够用*填充</span></span><br><span class="line">tony**************************</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.rjust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 总宽度为30，字符串右对齐显示，不够用*填充</span></span><br><span class="line">**************************tony</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.zfill(<span class="number">50</span>)  <span class="comment"># 总宽度为50，字符串右对齐显示，不够用0填充</span></span><br><span class="line">0000000000000000000000000000000000000000000000tony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.expandtabs</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;tony\thello&#x27;</span>  <span class="comment"># \t表示制表符(tab键)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">tony    hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.expandtabs(<span class="number">1</span>)  <span class="comment"># 修改\t制表符代表的空格数</span></span><br><span class="line">tony hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.captalize,swapcase,title</span></span><br><span class="line"><span class="comment"># 4.1 captalize：首字母大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;hello everyone nice to meet you!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message.capitalize()</span><br><span class="line">Hello everyone nice to meet you!  </span><br><span class="line"><span class="comment"># 4.2 swapcase：大小写翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message1 = <span class="string">&#x27;Hi girl, I want make friends with you!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message1.swapcase()  </span><br><span class="line">hI GIRL, i WANT MAKE FRIENDS WITH YOU!  </span><br><span class="line"><span class="comment">#4.3 title：每个单词的首字母大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg = <span class="string">&#x27;dear my friend i miss you very much&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.title()</span><br><span class="line">Dear My Friend I Miss You Very Much </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.is数字系列</span></span><br><span class="line"><span class="comment">#在python3中</span></span><br><span class="line">num1 = <span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2 = <span class="string">u&#x27;4&#x27;</span> <span class="comment">#unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3 = <span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4 = <span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isdigt:bytes,unicode</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isdigit() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isdecimal:uncicode(bytes类型无isdecimal方法)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isdecimal() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isdecimal() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isdecimal() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isnumberic:unicode,中文数字,罗马数字(bytes类型无isnumberic方法)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三者不能判断浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5 = <span class="string">&#x27;4.3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isdecimal()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isnumeric()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">    最常用的是isdigit,可以判断bytes和unicode类型,这也是最常见的数字应用场景</span></span><br><span class="line"><span class="string">    如果要判断中文数字或罗马数字,则需要用到isnumeric。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.is其他</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;tony123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isalnum() <span class="comment">#字符串中既可以包含数字也可以包含字母</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isalpha() <span class="comment">#字符串中只包含字母</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isidentifier()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.islower()  <span class="comment"># 字符串是否是纯小写</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isupper()  <span class="comment"># 字符串是否是纯大写</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isspace()  <span class="comment"># 字符串是否全是空格</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.istitle()  <span class="comment"># 字符串中的单词首字母是否都是大写</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="四-列表"><a href="#四-列表" class="headerlink" title="四 列表"></a>四 列表</h2><p><img src="https://pic4.zhimg.com/80/v2-c388190efab0d91f2604988622f3fd37_720w.jpg" alt="img"></p>
<h2 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义：在[]内,用逗号分隔开多个任意数据类型的值</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>]]  <span class="comment"># 本质:l1 = list([1,&#x27;a&#x27;,[1,2]])</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-类型转换"><a href="#4-2-类型转换" class="headerlink" title="4.2 类型转换"></a>4.2 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但凡能被for循环遍历的数据类型都可以传给list()转换成列表类型，list()会跟for循环一样遍历出数据类型中包含的每一个元素然后放到列表中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="string">&#x27;wdad&#x27;</span>) <span class="comment"># 结果：[&#x27;w&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;d&#x27;] </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># 结果：[1, 2, 3]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jason&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;) <span class="comment">#结果：[&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 结果：[1, 2, 3] </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;) <span class="comment"># 结果：[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h2><h3 id="4-3-1-优先掌握的操作"><a href="#4-3-1-优先掌握的操作" class="headerlink" title="4.3.1 优先掌握的操作"></a>4.3.1 优先掌握的操作</h3><p><img src="https://pic3.zhimg.com/80/v2-17400abd279a6fb484ecc78c5d8d3b8e_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.按索引存取值(正向存取+反向存取)：即可存也可以取  </span></span><br><span class="line"><span class="comment"># 1.1 正向取(从左往右)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends=[<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends[<span class="number">0</span>]  </span><br><span class="line">tony</span><br><span class="line"><span class="comment"># 1.2 反向取(负号表示从右往左)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends[-<span class="number">1</span>]  </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment"># 1.3 对于list来说，既可以按照索引取值，又可以按照索引修改指定位置的值，但如果索引不存在则报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends = [<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;jason&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends[<span class="number">1</span>] = <span class="string">&#x27;martthow&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends</span><br><span class="line">[<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;martthow&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.切片(顾头不顾尾，步长)</span></span><br><span class="line"><span class="comment"># 2.1 顾头不顾尾：取出索引为0到3的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends[<span class="number">0</span>:<span class="number">4</span>] </span><br><span class="line">[<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 2.2 步长：0:4:2,第三个参数2代表步长，会从0开始，每次累加一个2即可，所以会取出索引0、2的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_friends[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]  </span><br><span class="line">[<span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(my_friends)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.成员运算in和not in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;tony&#x27;</span> <span class="keyword">in</span> my_friends</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;xxx&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> my_friends</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.添加</span></span><br><span class="line"><span class="comment"># 5.1 append()列表尾部追加元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.append(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 extend()一次性在列表尾部添加多个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.extend([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.3 insert()在指定位置插入元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.insert(<span class="number">0</span>,<span class="string">&quot;first&quot;</span>)  <span class="comment"># 0表示按索引位置插值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;alisa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.删除</span></span><br><span class="line"><span class="comment"># 6.1 del</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">2</span>]  <span class="comment"># 删除索引为2的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.2 pop()默认删除列表最后一个元素，并将删除的值返回，括号内可以通过加索引值来指定删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">44</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=l.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=l.pop(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.3 remove()括号内指名道姓表示要删除哪个元素，没有返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">44</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=l.remove(<span class="number">22</span>) <span class="comment"># 从左往右查找第一个括号内需要删除的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(res)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.reverse()颠倒列表内元素顺序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.reverse() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">44</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.sort()给列表内所有元素排序</span></span><br><span class="line"><span class="comment"># 8.1 排序时列表元素之间必须是相同数据类型，不可混搭，否则报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">42</span>,<span class="number">7</span>,<span class="number">55</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l </span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">42</span>, <span class="number">55</span>]  <span class="comment"># 默认从小到大排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">42</span>,<span class="number">7</span>,<span class="number">55</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort(reverse=<span class="literal">True</span>)  <span class="comment"># reverse用来指定是否跌倒排序，默认为False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l </span><br><span class="line">[<span class="number">55</span>, <span class="number">42</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 8.2 了解知识：</span></span><br><span class="line"><span class="comment"># 我们常用的数字类型直接比较大小，但其实，字符串、列表等都可以比较大小，原理相同：都是依次比较对应位置的元素的大小，如果分出大小，则无需比较下一个元素，比如</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2=[<span class="number">2</span>,]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 &gt; l1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 字符之间的大小取决于它们在ASCII表中的先后顺序，越往后越大</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2=<span class="string">&#x27;az&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 &gt; s1 <span class="comment"># s1与s2的第一个字符没有分出胜负，但第二个字符&#x27;z&#x27;&gt;&#x27;b&#x27;,所以s2&gt;s1成立</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 所以我们也可以对下面这个列表排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;adjk&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hea&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;adjk&#x27;</span>, <span class="string">&#x27;hea&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.循环</span></span><br><span class="line"><span class="comment"># 循环遍历my_friends列表里面的值</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> my_friends:</span><br><span class="line">    <span class="built_in">print</span>(line) </span><br><span class="line"><span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="string">&#x27;jason&#x27;</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-了解操作"><a href="#4-3-2-了解操作" class="headerlink" title="4.3.2 了解操作"></a>4.3.2 了解操作</h3><p><img src="https://pic3.zhimg.com/80/v2-7c242fdec61e16c79e06f9181bb71a1a_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>:<span class="number">1</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 正向步长</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>::-<span class="number">1</span>] </span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  <span class="comment"># 反向步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引取值实现列表翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="五-元组"><a href="#五-元组" class="headerlink" title="五 元组"></a>五 元组</h2><p><img src="https://pic1.zhimg.com/80/v2-c2d1b8f652b5290b197d97c45f115830_720w.jpg" alt="img"></p>
<h2 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h2><p>元组与列表类似，也是可以存多个任意类型的元素，不同之处在于元组的元素不能修改，即元组相当于不可变的列表，用于记录多个固定不允许修改的值，单纯用于取</p>
<p><img src="https://pic1.zhimg.com/80/v2-66e37151e39efc17ad3473a1ccadafc4_720w.jpg" alt="img"></p>
<h2 id="5-2-定义方式"><a href="#5-2-定义方式" class="headerlink" title="5.2 定义方式"></a>5.2 定义方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在()内用逗号分隔开多个任意类型的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countries = (<span class="string">&quot;中国&quot;</span>，<span class="string">&quot;美国&quot;</span>，<span class="string">&quot;英国&quot;</span>)  <span class="comment"># 本质:countries = tuple(&quot;中国&quot;，&quot;美国&quot;，&quot;英国&quot;)</span></span><br><span class="line"><span class="comment"># 强调：如果元组内只有一个值，则必须加一个逗号，否则()就只是包含的意思而非定义元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countries = (<span class="string">&quot;中国&quot;</span>，)  <span class="comment"># 本质:countries = tuple(&quot;中国&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-类型转换"><a href="#5-3-类型转换" class="headerlink" title="5.3 类型转换"></a>5.3 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但凡能被for循环的遍历的数据类型都可以传给tuple()转换成元组类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(<span class="string">&#x27;wdad&#x27;</span>) <span class="comment"># 结果：(&#x27;w&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;d&#x27;) </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># 结果：(1, 2, 3)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jason&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;) <span class="comment"># 结果：(&#x27;name&#x27;, &#x27;age&#x27;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 结果：(1, 2, 3)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;) <span class="comment"># 结果：(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment"># tuple()会跟for循环一样遍历出数据类型中包含的每一个元素然后放到元组中</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-使用"><a href="#5-4-使用" class="headerlink" title="5.4 使用"></a>5.4 使用</h2><p><img src="https://pic3.zhimg.com/80/v2-4ece19ae4a48f1677deb018019fe2c2a_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="number">1</span>, <span class="string">&#x27;hhaha&#x27;</span>, <span class="number">15000.00</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>) </span><br><span class="line"><span class="comment"># 1、按索引取值(正向取+反向取)：只能取，不能改否则报错！  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1[-<span class="number">2</span>]</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1[<span class="number">0</span>] = <span class="string">&#x27;hehe&#x27;</span>  <span class="comment"># 报错：TypeError:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、切片(顾头不顾尾，步长)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>] </span><br><span class="line">(<span class="number">1</span>, <span class="number">15000.0</span>, <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(tuple1)  </span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、成员运算 in 和 not in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hhaha&#x27;</span> <span class="keyword">in</span> tuple1 </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hhaha&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tuple1  </span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、循环</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> tuple1:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">hhaha</span><br><span class="line"><span class="number">15000.0</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure>

<h2 id="六-字典"><a href="#六-字典" class="headerlink" title="六 字典"></a>六 字典</h2><p><img src="https://pic4.zhimg.com/80/v2-d1303c9f61b67e515d181e47ea284163_720w.jpg" alt="img"></p>
<h2 id="6-1-定义方式"><a href="#6-1-定义方式" class="headerlink" title="6.1 定义方式"></a>6.1 定义方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义：在&#123;&#125;内用逗号分隔开多元素，每一个元素都是key:value的形式，其中value可以是任意类型，而key则必须是不可变类型，详见第八小节，通常key应该是str类型，因为str类型会对value有描述性的功能</span></span><br><span class="line">info=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125; <span class="comment">#本质info=dict(&#123;....&#125;)</span></span><br><span class="line"><span class="comment"># 也可以这么定义字典</span></span><br><span class="line">info=<span class="built_in">dict</span>(name=<span class="string">&#x27;tony&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>) <span class="comment"># info=&#123;&#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;name&#x27;: &#x27;tony&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-类型转换"><a href="#6-2-类型转换" class="headerlink" title="6.2 类型转换"></a>6.2 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转换1: </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info=<span class="built_in">dict</span>([[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;tony&#x27;</span>],(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tony&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换2：fromkeys会从元组中取出每个值当做key，然后与None组成key:value放到字典中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.fromkeys((<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>),<span class="literal">None</span>)  </span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;name&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-使用"><a href="#6-3-使用" class="headerlink" title="6.3 使用"></a>6.3 使用</h2><h3 id="6-3-1-优先掌握的操作"><a href="#6-3-1-优先掌握的操作" class="headerlink" title="6.3.1 优先掌握的操作"></a>6.3.1 优先掌握的操作</h3><p><img src="https://pic3.zhimg.com/80/v2-f9177137b88b9fc3f31c88d91ff854ee_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、按key存取值：可存可取</span></span><br><span class="line"><span class="comment"># 1.1 取</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;hobbies&#x27;</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;basketball&#x27;</span></span><br><span class="line"><span class="comment"># 1.2 对于赋值操作，如果key原先不存在于字典，则会新增key:value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;gender&#x27;</span>] = <span class="string">&#x27;male&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>],<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 1.3 对于赋值操作，如果key原先存在于字典，则会修改对应value的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tony&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、长度len</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(dic) </span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、成员运算in和not in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> dic  <span class="comment"># 判断某个值是否是字典的key</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.pop(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 通过指定字典的key来删除字典的键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、键keys()，值values()，键值对items()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobbies&#x27;</span>: [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>], <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 获取字典所有的key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.keys()  </span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;hobbies&#x27;</span>])</span><br><span class="line"><span class="comment"># 获取字典所有的value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.values()</span><br><span class="line">dict_values([<span class="string">&#x27;xxx&#x27;</span>, <span class="number">18</span>, [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]])</span><br><span class="line"><span class="comment"># 获取字典所有的键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.items()</span><br><span class="line">dict_items([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;hobbies&#x27;</span>, [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、循环</span></span><br><span class="line"><span class="comment"># 6.1 默认遍历的是字典的key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">age</span><br><span class="line">hobbies</span><br><span class="line">name</span><br><span class="line"><span class="comment"># 6.2 只遍历key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">age</span><br><span class="line">hobbies</span><br><span class="line">name</span><br><span class="line"><span class="comment"># 6.3 只遍历value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> dic.values():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">[<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>]</span><br><span class="line">xxx</span><br><span class="line"><span class="comment"># 6.4 遍历key与value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> dic.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">(<span class="string">&#x27;hobbies&#x27;</span>, [<span class="string">&#x27;play game&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>])</span><br><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-3-2-需要掌握的操作"><a href="#6-3-2-需要掌握的操作" class="headerlink" title="6.3.2 需要掌握的操作"></a>6.3.2 需要掌握的操作</h3><p><img src="https://pic1.zhimg.com/80/v2-9a6cb9d36cc1ce915091d1937532a35c_720w.jpg" alt="img"></p>
<p><strong>1.get()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic= &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;JY&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.get(<span class="string">&#x27;k1&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;jason&#x27;</span>  <span class="comment"># key存在，则获取key对应的value值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=dic.get(<span class="string">&#x27;xxx&#x27;</span>) <span class="comment"># key不存在，不会报错而是默认返回None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(res)</span><br><span class="line"><span class="literal">None</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=dic.get(<span class="string">&#x27;xxx&#x27;</span>,<span class="number">666</span>) <span class="comment"># key不存在时，可以设置默认返回的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(res)</span><br><span class="line"><span class="number">666</span> </span><br><span class="line"><span class="comment"># ps:字典取值建议使用get方法</span></span><br></pre></td></tr></table></figure>

<p><strong>2.pop()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic= &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;JY&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v = dic.pop(<span class="string">&#x27;k2&#x27;</span>)  <span class="comment"># 删除指定的key对应的键值对,并返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;kk2&#x27;</span>: <span class="string">&#x27;JY&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v</span><br><span class="line"><span class="string">&#x27;Tony&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.popitem()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic= &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;JY&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item = dic.popitem()  <span class="comment"># 随机删除一组键值对,并将删除的键值放到元组内返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;k3&#x27;</span>: <span class="string">&#x27;JY&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">(<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>4.update()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用新字典更新旧字典，有则修改，无则添加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic= &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;JY&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.update(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;JN&#x27;</span>,<span class="string">&#x27;k4&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;JN&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>: <span class="string">&#x27;JY&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;k4&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.fromkeys()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>],[])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: [], <span class="string">&#x27;k2&#x27;</span>: [], <span class="string">&#x27;k3&#x27;</span>: []&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6.setdefault()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key不存在则新增键值对，并将新增的value返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=dic.setdefault(<span class="string">&#x27;k3&#x27;</span>,<span class="number">333</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic <span class="comment"># 字典中新增了键值对</span></span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;k3&#x27;</span>: <span class="number">333</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">222</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># key存在则不做任何修改，并返回已存在key对应的value值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=dic.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">666</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic <span class="comment"># 字典不变</span></span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">222</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七-集合"><a href="#七-集合" class="headerlink" title="七 集合"></a>七 集合</h2><p><img src="https://pic4.zhimg.com/80/v2-a7172908ebf2b327251e4defb86b6d67_720w.jpg" alt="img"></p>
<h2 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7.1 作用"></a>7.1 作用</h2><p>集合、list、tuple、dict一样都可以存放多个值，但是集合主要用于：去重、关系运算</p>
<p><img src="https://pic2.zhimg.com/80/v2-3c82eb7aaa1df9d7830884196d689979_720w.jpg" alt="img"></p>
<h2 id="7-2-定义"><a href="#7-2-定义" class="headerlink" title="7.2 定义"></a>7.2 定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">定义：在&#123;&#125;内用逗号分隔开多个元素，集合具备以下三个特点：</span></span><br><span class="line"><span class="string">     1：每个元素必须是不可变类型</span></span><br><span class="line"><span class="string">     2：集合内没有重复的元素</span></span><br><span class="line"><span class="string">     3：集合内元素无序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;  <span class="comment"># 本质 s = set(&#123;1,2,3,4&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意1：列表类型是索引对应值，字典是key对应值，均可以取得单个指定的值，而集合类型既没有索引也没有key与值对应，所以无法取得单个的值，而且对于集合来说，主要用于去重与关系元素，根本没有取出单个指定值这种需求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意2:&#123;&#125;既可以用于定义dict，也可以用于定义集合，但是字典内的元素必须是key:value的格式，现在我们想定义一个空字典和空集合，该如何准确去定义两者?</span></span><br><span class="line">d = &#123;&#125; <span class="comment"># 默认是空字典 </span></span><br><span class="line">s = <span class="built_in">set</span>() <span class="comment"># 这才是定义空集合</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3-类型转换"><a href="#7-3-类型转换" class="headerlink" title="7.3 类型转换"></a>7.3 类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但凡能被for循环的遍历的数据类型（强调：遍历出的每一个值都必须为不可变类型）都可以传给set()转换成集合类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3 = <span class="built_in">set</span>(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s,s1,s2,s3</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; &#123;<span class="string">&#x27;name&#x27;</span>&#125; &#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;n&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-4-使用"><a href="#7-4-使用" class="headerlink" title="7.4 使用"></a>7.4 使用</h2><h3 id="7-4-1-关系运算"><a href="#7-4-1-关系运算" class="headerlink" title="7.4.1 关系运算"></a>7.4.1 关系运算</h3><p>我们定义两个集合friends与friends2来分别存放两个人的好友名字，然后以这两个集合为例讲解集合的关系运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 = &#123;<span class="string">&quot;zero&quot;</span>,<span class="string">&quot;kevin&quot;</span>,<span class="string">&quot;jason&quot;</span>,<span class="string">&quot;egon&quot;</span>&#125; <span class="comment"># 用户1的好友们 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends2 = &#123;<span class="string">&quot;Jy&quot;</span>,<span class="string">&quot;ricky&quot;</span>,<span class="string">&quot;jason&quot;</span>,<span class="string">&quot;egon&quot;</span>&#125;   <span class="comment"># 用户2的好友们</span></span><br></pre></td></tr></table></figure>

<p>两个集合的关系如下图所示</p>
<p><img src="https://pic1.zhimg.com/80/v2-db98a5092d33449c4667fd2f9717a2c0_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.合集/并集(|)：求两个用户所有的好友（重复好友只留一个）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 | friends2</span><br><span class="line">&#123;<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;ricky&#x27;</span>, <span class="string">&#x27;zero&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;Jy&#x27;</span>, <span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.交集(&amp;)：求两个用户的共同好友</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 &amp; friends2</span><br><span class="line">&#123;<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.差集(-)：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 - friends2 <span class="comment"># 求用户1独有的好友</span></span><br><span class="line">&#123;<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;zero&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends2 - friends1 <span class="comment"># 求用户2独有的好友</span></span><br><span class="line">&#123;<span class="string">&#x27;ricky&#x27;</span>, <span class="string">&#x27;Jy&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.对称差集(^) # 求两个用户独有的好友们（即去掉共有的好友）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 ^ friends2</span><br><span class="line">&#123;<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;zero&#x27;</span>, <span class="string">&#x27;ricky&#x27;</span>, <span class="string">&#x27;Jy&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.值是否相等(==)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends1 == friends2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.父集：一个集合是否包含另外一个集合</span></span><br><span class="line"><span class="comment"># 6.1 包含则返回True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt;= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6.2 不存在包含关系，则返回False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt; &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt;= &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.子集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-2-去重"><a href="#7-4-2-去重" class="headerlink" title="7.4.2 去重"></a>7.4.2 去重</h3><p><img src="https://pic4.zhimg.com/80/v2-3c863c52c62660f0547ff39f09ac41b7_720w.jpg" alt="img"></p>
<p>集合去重复有局限性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 只能针对不可变类型</span></span><br><span class="line"><span class="comment"># 2. 集合本身是无序的，去重之后无法保留原来的顺序</span></span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="built_in">set</span>(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s <span class="comment"># 将列表转成了集合</span></span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l_new=<span class="built_in">list</span>(s) <span class="comment"># 再将集合转回列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l_new</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>] <span class="comment"># 去除了重复，但是打乱了顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不可变类型，并且保证顺序则需要我们自己写代码实现，例如</span></span><br><span class="line">l=[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">73</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">new_l=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dic <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> dic <span class="keyword">not</span> <span class="keyword">in</span> new_l:</span><br><span class="line">        new_l.append(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_l)</span><br><span class="line"><span class="comment"># 结果：既去除了重复，又保证了顺序，而且是针对不可变类型的去重</span></span><br><span class="line">[</span><br><span class="line">    &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lili&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">73</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="7-4-3-其他操作"><a href="#7-4-3-其他操作" class="headerlink" title="7.4.3 其他操作"></a>7.4.3 其他操作</h3><p><img src="https://pic3.zhimg.com/80/v2-825386b940849f68a704c35e40a1a5de_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.成员运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.循环</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">c</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p><img src="https://pic2.zhimg.com/80/v2-59e6a2d4c402f9178c89e0716037ec51_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一.关系运算</span></span><br><span class="line"><span class="string">　　有如下两个集合，pythons是报名python课程的学员名字集合，linuxs是报名linux课程的学员名字集合</span></span><br><span class="line"><span class="string">　　pythons=&#123;&#x27;jason&#x27;,&#x27;egon&#x27;,&#x27;kevin&#x27;,&#x27;ricky&#x27;,&#x27;gangdan&#x27;,&#x27;biubiu&#x27;&#125;</span></span><br><span class="line"><span class="string">　　linuxs=&#123;&#x27;kermit&#x27;,&#x27;tony&#x27;,&#x27;gangdan&#x27;&#125;</span></span><br><span class="line"><span class="string">　　1. 求出即报名python又报名linux课程的学员名字集合</span></span><br><span class="line"><span class="string">　　2. 求出所有报名的学生名字集合</span></span><br><span class="line"><span class="string">　　3. 求出只报名python课程的学员名字</span></span><br><span class="line"><span class="string">　　4. 求出没有同时这两门课程的学员名字集合</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 求出即报名python又报名linux课程的学员名字集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons &amp; linuxs</span><br><span class="line"><span class="comment"># 求出所有报名的学生名字集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons | linuxs</span><br><span class="line"><span class="comment"># 求出只报名python课程的学员名字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons - linuxs</span><br><span class="line"><span class="comment"># 求出没有同时这两门课程的学员名字集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons ^ linuxs</span><br></pre></td></tr></table></figure>

<h2 id="八-可变类型与不可变类型"><a href="#八-可变类型与不可变类型" class="headerlink" title="八 可变类型与不可变类型"></a>八 可变类型与不可变类型</h2><p><strong>可变数据类型：</strong>值发生改变时，内存地址不变，即id不变，证明在改变原值</p>
<p><strong>不可变类型：</strong>值发生改变时，内存地址也发生改变，即id也变，证明是没有在改变原值，是产生了新的值</p>
<p><strong>数字类型:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">1830448896</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">1830448928</span></span><br><span class="line"><span class="comment"># 内存地址改变了，说明整型是不可变数据类型，浮点型也一样</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-aba483b5a4fce5be3c97c4e9eb358c6d_720w.jpg" alt="img"></p>
<p><strong>字符串</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&quot;Jy&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">938809263920</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&quot;Ricky&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">938809264088</span></span><br><span class="line"><span class="comment"># 内存地址改变了，说明字符串是不可变数据类型</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-bb67114dc6c8fe2694d4f9971b8ddc09_720w.jpg" alt="img"></p>
<p><strong>列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(list1)</span><br><span class="line"><span class="number">486316639176</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">2</span>] = <span class="string">&#x27;kevin&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(list1)</span><br><span class="line"><span class="number">486316639176</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.append(<span class="string">&#x27;lili&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(list1)</span><br><span class="line"><span class="number">486316639176</span></span><br><span class="line"><span class="comment"># 对列表的值进行操作时，值改变但内存地址不变，所以列表是可变数据类型</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-e2cc6a90794d0d79719ff0a898b3c467_720w.jpg" alt="img"></p>
<p><strong>元组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = (<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jack&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">0</span>]=<span class="string">&#x27;TOM&#x27;</span> <span class="comment"># 报错：TypeError</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1.append(<span class="string">&#x27;lili&#x27;</span>) <span class="comment"># 报错：TypeError</span></span><br><span class="line"><span class="comment"># 元组内的元素无法修改，指的是元组内索引指向的内存地址不能被修改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = (<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jack&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(t1[<span class="number">0</span>]),<span class="built_in">id</span>(t1[<span class="number">1</span>]),<span class="built_in">id</span>(t1[<span class="number">2</span>])</span><br><span class="line">(<span class="number">4327403152</span>, <span class="number">4327403072</span>, <span class="number">4327422472</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">111</span> <span class="comment"># 如果元组中存在可变类型，是可以修改，但是修改后的内存地址不变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1</span><br><span class="line">(<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, [<span class="number">111</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(t1[<span class="number">0</span>]),<span class="built_in">id</span>(t1[<span class="number">1</span>]),<span class="built_in">id</span>(t1[<span class="number">2</span>]) <span class="comment"># 查看id仍然不变</span></span><br><span class="line">(<span class="number">4327403152</span>, <span class="number">4327403072</span>, <span class="number">4327422472</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-19bc37e4a9fedf83d1b352a502c49a57_720w.jpg" alt="img"></p>
<p><strong>字典</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(dic)</span><br><span class="line"><span class="number">4327423112</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;age&#x27;</span>]=<span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(dic)</span><br><span class="line"><span class="number">4327423112</span></span><br><span class="line"><span class="comment"># 对字典进行操作时，值改变的情况下，字典的id也是不变，即字典也是可变数据类型</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-52e2baab5ad65f3e470166e35bde772a_720w.jpg" alt="img"></p>
<h2 id="九-数据类型总结"><a href="#九-数据类型总结" class="headerlink" title="九 数据类型总结"></a>九 数据类型总结</h2><p><img src="https://pic4.zhimg.com/80/v2-a20045894184b0a3afad79f0542adbab_720w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/80/v2-de70fc0b51f69ade62df5cc235acd493_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>1、数字类型：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=13">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=13<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>2、字符串类型</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=14">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=14<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=15">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=15<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=16">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=16<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>3、列表类型</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=17">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=17<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=18">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=18<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>4、元组类型</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=19">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=19<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>5、字典类型</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=20">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=20<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=21">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=21<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=22">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=22<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=23">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=23<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>6、集合类型</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=24">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=24<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=25">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=25<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>7、小结</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=26">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=26<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>06-用户交互与运算符</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/06_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="一-程序与用户交互"><a href="#一-程序与用户交互" class="headerlink" title="一 程序与用户交互"></a>一 程序与用户交互</h2><h2 id="1-1、什么是与用户交互"><a href="#1-1、什么是与用户交互" class="headerlink" title="1.1、什么是与用户交互"></a>1.1、什么是与用户交互</h2><p>用户交互就是人往计算机中input&#x2F;输入数据，计算机print&#x2F;输出结果</p>
<h2 id="1-2、为什么要与用户交互？"><a href="#1-2、为什么要与用户交互？" class="headerlink" title="1.2、为什么要与用户交互？"></a>1.2、为什么要与用户交互？</h2><p><img src="https://pic2.zhimg.com/80/v2-f5f08a362ab78e8bc5ccce6bb1d3603d_720w.jpg" alt="img"></p>
<p>为了让计算机能够像人一样与用户沟通交流</p>
<p>比如，过去我们去银行取钱，用户需要把帐号密码告诉柜员，而现在，柜员被ATM机取代，ATM机就是一台计算机，所以用户同样需要将帐号密码告诉计算机，于是我们的程序中必须有相应的机制来控制计算机接收用户输入的内容，并且输出结果</p>
<h2 id="1-3、如何与用户交互"><a href="#1-3、如何与用户交互" class="headerlink" title="1.3、如何与用户交互"></a>1.3、如何与用户交互</h2><p><img src="https://pic2.zhimg.com/80/v2-d3247fc02443c3095673598cb86ed189_720w.jpg" alt="img"></p>
<p>交互的本质就是输入、输出</p>
<h3 id="1-3-1-输入input"><a href="#1-3-1-输入input" class="headerlink" title="1.3.1 输入input:"></a>1.3.1 输入input:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在python3中input功能会等待用户的输入，用户输入任何内容，都存成字符串类型，然后赋值给等号左边的变量名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>username=<span class="built_in">input</span>(<span class="string">&#x27;请输入您的用户名：&#x27;</span>) </span><br><span class="line">请输入您的用户名：jack <span class="comment"># username = &quot;jack&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password=<span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>) </span><br><span class="line">请输入您的密码：<span class="number">123</span> <span class="comment"># password = &quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解知识：</span></span><br><span class="line"><span class="comment"># 1、在python2中存在一个raw_input功能与python3中的input功能一模一样</span></span><br><span class="line"><span class="comment"># 2、在python2中还存在一个input功能，需要用户输入一个明确的数据类型，输入什么类型就存成什么类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=<span class="built_in">input</span>(<span class="string">&#x27;输入什么类型就存成什么类型: &#x27;</span>)</span><br><span class="line">输入什么类型就存成什么类型: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(l)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-输出print"><a href="#1-3-2-输出print" class="headerlink" title="1.3.2 输出print:"></a>1.3.2 输出print:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment"># 只输出一个值</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>,<span class="string">&#x27;third&#x27;</span>)  <span class="comment"># 一次性输出多个值，值用逗号隔开</span></span><br><span class="line">first second third</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认print功能有一个end参数，该参数的默认值为&quot;\n&quot;(代表换行)，可以将end参数的值改成任意其它字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaaa&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bbbb&quot;</span>,end=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cccc&quot;</span>,end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">#整体输出结果为：aaaabbbb&amp;cccc@</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-输出之格式化输出"><a href="#1-3-3-输出之格式化输出" class="headerlink" title="1.3.3 输出之格式化输出"></a>1.3.3 输出之格式化输出</h3><h3 id="1-什么是格式化输出？"><a href="#1-什么是格式化输出？" class="headerlink" title="(1)什么是格式化输出？"></a>(1)什么是格式化输出？</h3><p>把一段字符串里面的某些内容替换掉之后再输出，就是格式化输出。</p>
<h3 id="2-为什么要格式化输出？"><a href="#2-为什么要格式化输出？" class="headerlink" title="(2)为什么要格式化输出？"></a>(2)为什么要格式化输出？</h3><p>我们经常会输出具有某种固定格式的内容，比如：’亲爱的xxx你好！你xxx月的话费是xxx，余额是xxx‘，我们需要做的就是将xxx替换为具体的内容。</p>
<p><img src="https://pic4.zhimg.com/80/v2-93a076f4317dfc4d18eeb0e4bd4ae21f_720w.jpg" alt="img"></p>
<h3 id="3-如何格式化输出？"><a href="#3-如何格式化输出？" class="headerlink" title="(3)如何格式化输出？"></a>(3)如何格式化输出？</h3><p>这就用到了占位符，如：%s、%d：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %s占位符：可以接收任意类型的值</span></span><br><span class="line"><span class="comment"># %d占位符：只能接收数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;亲爱的%s你好！你%s月的话费是%d，余额是%d&#x27;</span> %(<span class="string">&#x27;tony&#x27;</span>,<span class="number">12</span>,<span class="number">103</span>,<span class="number">11</span>))</span><br><span class="line">亲爱的tony你好！你<span class="number">12</span>月的话费是<span class="number">103</span>，余额是<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习1：接收用户输入，打印成指定格式</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;your name: &#x27;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;your age: &#x27;</span>) <span class="comment">#用户输入18,会存成字符串18,无法传给%d</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is %s,my age is %s&#x27;</span> %(name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习2：用户输入姓名、年龄、工作、爱好 ，然后打印成以下格式</span></span><br><span class="line">------------ info of Tony -----------</span><br><span class="line">Name  : Tony</span><br><span class="line">Age   : <span class="number">22</span></span><br><span class="line">Sex   : male</span><br><span class="line">Job   : Teacher </span><br><span class="line">------------- end -----------------</span><br></pre></td></tr></table></figure>

<h2 id="二-基本运算符"><a href="#二-基本运算符" class="headerlink" title="二 基本运算符"></a>二 基本运算符</h2><h2 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h2><p> python支持的算数运算符与数学上计算的符号使用是一致的，我们以x&#x3D;9，y&#x3D;2为例来依次介绍它们</p>
<p><img src="https://pic3.zhimg.com/80/v2-1e691dd00888ffbc6a6a91fd6b871fb2_720w.jpg" alt="img"></p>
<h2 id="2-2-比较运算符"><a href="#2-2-比较运算符" class="headerlink" title="2.2 比较运算符"></a>2.2 比较运算符</h2><p> 比较运算用来对两个值进行比较，返回的是布尔值True或False，我们以x&#x3D;9，y&#x3D;2为例来依次介绍它们</p>
<p><img src="https://pic2.zhimg.com/80/v2-4f35183b1ef049ae8e0dff21aa18bd35_720w.jpg" alt="img"></p>
<h2 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h2><p> python语法中除了有&#x3D;号这种简单的赋值运算外，还支持增量赋值、链式赋值、交叉赋值、解压赋值，这些赋值运算符存在的意义都是为了让我们的代码看起来更加精简。我们以x&#x3D;9，y&#x3D;2为例先来介绍一下增量赋值</p>
<h3 id="2-3-1-增量赋值"><a href="#2-3-1-增量赋值" class="headerlink" title="2.3.1 增量赋值"></a>2.3.1 增量赋值</h3><p><img src="https://pic4.zhimg.com/80/v2-b70005b039398a63c6e28fe7d31ab147_720w.jpg" alt="img"></p>
<h3 id="2-3-2-链式赋值"><a href="#2-3-2-链式赋值" class="headerlink" title="2.3.2 链式赋值"></a>2.3.2 链式赋值</h3><p>如果我们想把同一个值同时赋值给多个变量名，可以这么做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z</span><br><span class="line">(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>链式赋值指的是可以用一行代码搞定这件事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=y=z=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z</span><br><span class="line">(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-5e10781fb6adb37f49a50623547bd2be_720w.jpg" alt="img"></p>
<h3 id="2-3-3-交叉赋值"><a href="#2-3-3-交叉赋值" class="headerlink" title="2.3.3 交叉赋值"></a>2.3.3 交叉赋值</h3><p>我们定义两个变量m与n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>如果我们想将m与n的值交换过来，可以这么做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp=m</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=temp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m,n</span><br><span class="line">(<span class="number">20</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>交叉赋值指的是一行代码可以搞定这件事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m,n=n,m <span class="comment"># 交叉赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m,n</span><br><span class="line">(<span class="number">20</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-32d5097d72f9a856c249dc65d94ae965_720w.jpg" alt="img"></p>
<h3 id="2-3-4-解压赋值"><a href="#2-3-4-解压赋值" class="headerlink" title="2.3.4 解压赋值"></a>2.3.4 解压赋值</h3><p>如果我们想把列表中的多个值取出来依次赋值给多个变量名，可以这么做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=nums[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=nums[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=nums[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=nums[<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=nums[<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d,e</span><br><span class="line">(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>)</span><br></pre></td></tr></table></figure>

<p>解压赋值指的是一行代码可以搞定这件事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d,e=nums <span class="comment"># nums包含多个值，就好比一个压缩包，解压赋值因此得名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d,e</span><br><span class="line">(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-5136e82ba7ecce9e31b751b9e3075c5e_720w.jpg" alt="img"></p>
<p>注意，上述解压赋值，等号左边的变量名个数必须与右面包含值的个数相同,否则会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、变量名少了</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b=nums</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、变量名多了</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d,e,f=nums</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="keyword">not</span> enough values to unpack (expected <span class="number">6</span>, got <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>但如果我们只想取头尾的几个值，可以用*_匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,*_=nums</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b</span><br><span class="line">(<span class="number">11</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>ps：字符串、字典、元组、集合类型都支持解压赋值</p>
<p><img src="https://pic1.zhimg.com/80/v2-4d0554fbbd86747cc7aab9fcc5d0ebd8_720w.jpg" alt="img"></p>
<h2 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h2><p> 逻辑运算符用于连接多个条件，进行关联判断，会返回布尔值True或False</p>
<p><img src="https://pic2.zhimg.com/80/v2-e4c3abe3eeb2546d6d093f1e5d690055_720w.jpg" alt="img"></p>
<h3 id="2-4-1-连续多个and"><a href="#2-4-1-连续多个and" class="headerlink" title="2.4.1 连续多个and"></a>2.4.1 连续多个and</h3><p>可以用and连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为False，则无需再往右判断，可以立即判定最终结果就为False，只有在所有条件的结果都为True的情况下，最终结果才为True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="comment"># 判断完第二个条件，就立即结束，得的最终结果为False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-连续多个or"><a href="#2-4-2-连续多个or" class="headerlink" title="2.4.2 连续多个or"></a>2.4.2 连续多个or</h3><p>可以用or连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为True，则无需再往右判断，可以立即判定最终结果就为True，只有在所有条件的结果都为False的情况下，最终结果才为False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="comment"># 判断完第一个条件，就立即结束，得的最终结果为True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-优先级not-gt-and-gt-or"><a href="#2-4-3-优先级not-gt-and-gt-or" class="headerlink" title="2.4.3 优先级not&gt;and&gt;or"></a>2.4.3 优先级not&gt;and&gt;or</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、三者的优先级关系：not&gt;and&gt;or，同一优先级默认从左往右计算。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>&gt;<span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span>&gt;<span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span>==<span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span> <span class="keyword">or</span> <span class="number">3</span> &gt;<span class="number">3</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、最好使用括号来区别优先级，其实意义与上面的一样</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原理为：</span></span><br><span class="line"><span class="string">(1) not的优先级最高，就是把紧跟其后的那个条件结果取反，所以not与紧跟其后的条件不可分割</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2) 如果语句中全部是用and连接，或者全部用or连接，那么按照从左到右的顺序依次计算即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3) 如果语句中既有and也有or，那么先用括号把and的左右两个条件给括起来，然后再进行运算</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>&gt;<span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span>&gt;<span class="number">3</span>) <span class="keyword">or</span> (<span class="number">1</span>==<span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span>) <span class="keyword">or</span> <span class="number">3</span> &gt;<span class="number">3</span></span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#3、短路运算：逻辑运算的结果一旦可以确定，那么就以当前处计算到的值作为最终结果返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">or</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;egon&#x27;</span> == <span class="string">&#x27;dsb&#x27;</span> <span class="keyword">and</span> <span class="number">333</span> <span class="keyword">or</span> <span class="number">10</span> &gt; <span class="number">4</span></span><br><span class="line">我们用括号来明确一下优先级</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="keyword">or</span> (<span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="keyword">or</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">or</span> (<span class="string">&#x27;egon&#x27;</span> == <span class="string">&#x27;dsb&#x27;</span> <span class="keyword">and</span> <span class="number">333</span>) <span class="keyword">or</span> <span class="number">10</span> &gt; <span class="number">4</span></span><br><span class="line">短路：       <span class="number">0</span>      <span class="string">&#x27;&#x27;</span>            <span class="string">&#x27;abc&#x27;</span>                    </span><br><span class="line">            假     假              真</span><br><span class="line"></span><br><span class="line">返回：                            <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、短路运算面试题：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="literal">False</span> </span><br></pre></td></tr></table></figure>

<h2 id="2-5-成员运算符"><a href="#2-5-成员运算符" class="headerlink" title="2.5 成员运算符"></a>2.5 成员运算符</h2><p><img src="https://pic1.zhimg.com/80/v2-beecc7750f15f6600edce6b64ee41c18_720w.jpg" alt="img"></p>
<p>注意：虽然下述两种判断可以达到相同的效果，但我们推荐使用第二种格式，因为not in语义更加明确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="string">&#x27;lili&#x27;</span> <span class="keyword">in</span> [<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;robin&#x27;</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;lili&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;robin&#x27;</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-身份运算符"><a href="#2-6-身份运算符" class="headerlink" title="2.6 身份运算符"></a>2.6 身份运算符</h2><p><img src="https://pic3.zhimg.com/80/v2-7a653e8151847e64a6b97d6488e51766_720w.jpg" alt="img"></p>
<p>需要强调的是：&#x3D;&#x3D;双等号比较的是value是否相等，而is比较的是id是否相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. id相同，内存地址必定相同，意味着type和value必定相同</span></span><br><span class="line"><span class="comment">#2. value相同type肯定相同，但id可能不同,如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&#x27;Info Tony:18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=<span class="string">&#x27;Info Tony:18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x),<span class="built_in">id</span>(y) <span class="comment"># x与y的id不同，但是二者的值相同</span></span><br><span class="line">(<span class="number">4327422640</span>, <span class="number">4327422256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y <span class="comment"># 等号比较的是value</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(x),<span class="built_in">type</span>(y) <span class="comment"># 值相同type肯定相同</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span> <span class="title">is</span> <span class="title">y</span> # <span class="title">is</span>比较的是<span class="title">id</span>，<span class="title">x</span>与<span class="title">y</span>的值相等但<span class="title">id</span>可以不同</span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-4b1be1c9b8e933ac37e47cf14f58503b_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>1、与用户交互：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=5">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471/?p=5<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>2、运算符：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=9">https://www.bilibili.com/video/av73342471?p=9www.bilibili.com/video/av73342471?p=9</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>09-字符编码</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/09_%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 字符串类型、文本文件的内容都是由字符组成的，但凡涉及到字符的存取，都需要考虑字符编码的问题。</p>
<p> 字符编码这个知识点的典型特征就是理论多、结论少，但对于开发而言只需要记住结论即可，下面让我们来一点点介绍它</p>
<p><img src="https://pic1.zhimg.com/80/v2-621d28181cc40a235414a49fc9d14738_720w.jpg" alt="img"></p>
<h2 id="二-知识储备"><a href="#二-知识储备" class="headerlink" title="二 知识储备"></a>二 知识储备</h2><h2 id="2-1-三大核心硬件"><a href="#2-1-三大核心硬件" class="headerlink" title="2.1 三大核心硬件"></a>2.1 三大核心硬件</h2><p>所有软件都是运行硬件之上的，与运行软件相关的三大核心硬件为cpu、内存、硬盘，我们需要明确三点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-48e25e7f03030e066f8fcaf4750cc892_720w.jpg" alt="img"></p>
<h2 id="2-2-文本编辑器读取文件内容的流程"><a href="#2-2-文本编辑器读取文件内容的流程" class="headerlink" title="2.2 文本编辑器读取文件内容的流程"></a>2.2 文本编辑器读取文件内容的流程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段2、文件编辑器会将文件内容从硬盘读入内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-python解释器执行文件的流程"><a href="#2-3-python解释器执行文件的流程" class="headerlink" title="2.3 python解释器执行文件的流程"></a>2.3 python解释器执行文件的流程</h2><p>以python test.py为例，执行流程如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阶段1、启动python解释器，此时就相当于启动了一个文本编辑器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>python解释器与文件本编辑的异同如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下</span></span><br><span class="line">python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下</span></span><br><span class="line">文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-c80921c5d7ede2fd94262892c7e0a733_720w.jpg" alt="img"></p>
<h2 id="三、字符编码介绍"><a href="#三、字符编码介绍" class="headerlink" title="三、字符编码介绍"></a>三、字符编码介绍</h2><h2 id="3-1-什么是字符编码？"><a href="#3-1-什么是字符编码？" class="headerlink" title="3.1 什么是字符编码？"></a>3.1 什么是字符编码？</h2><p>人类在与计算机交互时，用的都是人类能读懂的字符，如中文字符、英文字符、日文字符等</p>
<p>而计算机只能识别二进制数,详解如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二进制数即由0和1组成的数字，例如010010101010。计算机是基于电工作的，电的特性即高低电平，人类从逻辑层面将高电平对应为数字1,低电平对应为数字0，这直接决定了计算机可以识别的是由0和1组成的数字</span></span><br></pre></td></tr></table></figure>

<p>毫无疑问，由人类的字符到计算机中的数字，必须经历一个过程，如下</p>
<p><img src="https://pic1.zhimg.com/80/v2-80b925e192579faa59dcffbb046535a4_720w.jpg" alt="img"></p>
<p>翻译的过程必须参照一个特定的标准，该标准称之为字符编码表，该表上存放的就是字符与数字一一对应的关系。</p>
<p>字符编码中的编码指的是翻译或者转换的意思，即将人能理解的字符翻译成计算机能识别的数字</p>
<h2 id="3-2-字符编码表的发展史-了解"><a href="#3-2-字符编码表的发展史-了解" class="headerlink" title="3.2 字符编码表的发展史 (了解)"></a>3.2 字符编码表的发展史 (了解)</h2><p>字符编码的发展经历了三个重要的阶段，如下</p>
<h3 id="3-2-1-阶段一：一家独大"><a href="#3-2-1-阶段一：一家独大" class="headerlink" title="3.2.1 阶段一：一家独大"></a>3.2.1 阶段一：一家独大</h3><p>现代计算机起源于美国，所以最先考虑仅仅是让计算机识别英文字符，于是诞生了ASCII表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ASCII表的特点:</span></span><br><span class="line">    <span class="number">1</span>、只有英文字符与数字的一一对应关系</span><br><span class="line">    <span class="number">2</span>、一个英文字符对应1Bytes，1Bytes=8bit，8bit最多包含<span class="number">256</span>个数字，可以对应<span class="number">256</span>个字符，足够表示所有英文字符</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-c4a210efb1a57b869288eb7e89bf6fc9_720w.jpg" alt="img"></p>
<h3 id="3-2-2-阶段二：诸侯割据、天下大乱"><a href="#3-2-2-阶段二：诸侯割据、天下大乱" class="headerlink" title="3.2.2 阶段二：诸侯割据、天下大乱"></a>3.2.2 阶段二：诸侯割据、天下大乱</h3><p><img src="https://pic2.zhimg.com/80/v2-114700ee2814bcf3de172a4b673001e1_720w.jpg" alt="img"></p>
<p>为了让计算机能够识别中文和英文，中国人定制了GBK</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GBK表的特点：</span></span><br><span class="line">    <span class="number">1</span>、只有中文字符、英文字符与数字的一一对应关系</span><br><span class="line">    <span class="number">2</span>、一个英文字符对应1Bytes</span><br><span class="line">       一个中文字符对应2Bytes   </span><br><span class="line">       补充说明：</span><br><span class="line">       1Bytes=8bit，8bit最多包含<span class="number">256</span>个数字，可以对应<span class="number">256</span>个字符，足够表示所有英文字符</span><br><span class="line">       2Bytes=16bit，16bit最多包含<span class="number">65536</span>个数字，可以对应<span class="number">65536</span>个字符，足够表示所有中文字符</span><br></pre></td></tr></table></figure>

<p>每个国家都各自的字符，为让计算机能够识别自己国家的字符外加英文字符，各个国家都制定了自己的字符编码表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shift_JIS表的特点：</span></span><br><span class="line">    <span class="number">1</span>、只有日文字符、英文字符与数字的一一对应关系</span><br><span class="line"></span><br><span class="line"><span class="comment"># Euc-kr表的特点：</span></span><br><span class="line">    <span class="number">1</span>、只有韩文字符、英文字符与数字的一一对应关系</span><br></pre></td></tr></table></figure>

<p>此时,美国人用的计算机里使用字符编码标准是ASCII、中国人用的计算机里使用字符编码标准是GBK、日本人用的计算机里使用字符编码标准是Shift_JIS,如下图所示，</p>
<p><img src="https://pic3.zhimg.com/80/v2-19bac7b0910652bbd1f7e026683a28be_720w.jpg" alt="img"></p>
<p>字符编码发展到了这个阶段，可以用一句话概括：诸侯割据、天下大乱，详解如下</p>
<p><img src="https://pic3.zhimg.com/80/v2-b6ac2031b2082daa422c8dc233be95ee_720w.jpg" alt="img"></p>
<p>图1中，文本编辑存取文件的原理如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文本文件内容全都为字符，无论存取都是涉及到字符编码问题</span><br><span class="line"><span class="comment">#1、存文本文件</span></span><br><span class="line">人类通过文本编辑器输入的字符会被转化成ASCII格式的二进制存放于内存中，如果需要永久保存，则直接将内存中的ASCII格式的二进制写入硬盘</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、读文本文件</span></span><br><span class="line">直接将硬盘中的ASCII格式的二进制读入内存，然后通过ASCII表反解成英文字符</span><br></pre></td></tr></table></figure>

<p>图2图3都是相同的过程，此时无论是存还是取由于采用的字符编码表一样，所以肯定不会出现乱码问题，但问题是在美国人用的计算机里只能输入英文字符，而在中国人用的计算机里只能输入中文字符和英文字符….,毫无疑问我们希望计算机允许我们输入万国字符均可识别、不乱码，而现阶段计算机采用的字符编码ASCII、GBK、Shift_JIS都无法识别万国字符，所以我们必须定制一个兼容万国字符的编码表，请看阶段三</p>
<p><img src="https://pic3.zhimg.com/80/v2-aeb16d83abab152e00e7e2f99eaeb102_720w.jpg" alt="img"></p>
<h3 id="3-2-3-阶段三：分久必合"><a href="#3-2-3-阶段三：分久必合" class="headerlink" title="3.2.3 阶段三：分久必合"></a>3.2.3 阶段三：分久必合</h3><p><img src="https://pic1.zhimg.com/80/v2-f405404cd434f2280b4586c4f95ce760_720w.jpg" alt="img"></p>
<p>unicode于1990年开始研发，1994年正式公布，具备两大特点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 存在所有语言中的所有字符与数字的一一对应关系,即兼容万国字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 与传统的字符编码的二进制数都有对应关系，详解如下</span></span><br></pre></td></tr></table></figure>

<p>很多地方或老的系统、应用软件仍会采用各种各样传统的编码，这是历史遗留问题。此处需要强调：软件是存放于硬盘的，而运行软件是要将软件加载到内存的，面对硬盘中存放的各种传统编码的软件，想让我们的计算机能够将它们全都正常运行而不出现乱码，内存中必须有一种兼容万国的编码，并且该编码需要与其他编码有相对应的映射&#x2F;转换关系，这就是unicode的第二大特点产生的缘由</p>
<p><img src="https://pic1.zhimg.com/80/v2-484a43054d2217ed11c7d5d9170675f8_720w.jpg" alt="img"></p>
<p>文本编辑器输入任何字符都是最新存在于内存中，是unicode编码的，存放于硬盘中，则可以转换成任意其他编码，只要该编码可以支持相应的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 英文字符可以被ASCII识别</span></span><br><span class="line">英文字符---&gt;unciode格式的数字---&gt;ASCII格式的数字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文字符、英文字符可以被GBK识别</span></span><br><span class="line">中文字符、英文字符---&gt;unicode格式的数字---&gt;gbk格式的数字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日文字符、英文字符可以被shift-JIS识别</span></span><br><span class="line">日文字符、英文字符---&gt;unicode格式的数字---&gt;shift-JIS格式的数字</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-77be4ea6e528d6ed700fd08b2096566f_720w.jpg" alt="img"></p>
<h2 id="3-3-编码与解码"><a href="#3-3-编码与解码" class="headerlink" title="3.3 编码与解码"></a>3.3 编码与解码</h2><p>由字符转换成内存中的unicode，以及由unicode转换成其他编码的过程，都称为编码encode</p>
<p><img src="https://pic3.zhimg.com/80/v2-08a12814397a5a6d3e530a66cf2dbc02_720w.jpg" alt="img"></p>
<p>由内存中的unicode转换成字符，以及由其他编码转换成unicode的过程，都称为解码decode</p>
<p><img src="https://pic4.zhimg.com/80/v2-5f7b25aaeb4ccc913f0c23d586acdbab_720w.jpg" alt="img"></p>
<p>在诸多文件类型中，只有文本文件的内存是由字符组成的，因而文本文件的存取也涉及到字符编码的问题</p>
<h2 id="3-4-utf-8的由来"><a href="#3-4-utf-8的由来" class="headerlink" title="3.4 utf-8的由来"></a>3.4 utf-8的由来</h2><p>注意：如果保存到硬盘的是GBK格式二进制，当初用户输入的字符只能是中文或英文，同理如果保存到硬盘的是Shift_JIS格式二进制，当初用户输入的字符只能是日文或英文……如果我们输入的字符中包含多国字符，那么该如何处理？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（GBK格式的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（Shift_JIS格式的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（???格式的二进制）</span></span><br></pre></td></tr></table></figure>

<p>理论上是可以将内存中unicode格式的二进制直接存放于硬盘中的，但由于unicode固定使用两个字节来存储一个字符，如果多国字符中包含大量的英文字符时，使用unicode格式存放会额外占用一倍空间（英文字符其实只需要用一个字节存放即可），然而空间占用并不是最致命的问题，最致命地是当我们由内存写入硬盘时会额外耗费一倍的时间，所以将内存中的unicode二进制写入硬盘或者基于网络传输时必须将其转换成一种精简的格式，这种格式即utf-8（全称Unicode Transformation Format，即unicode的转换格式）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（utf-8格式的二进制）</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-c2a4ec82d946e4e35645f9782dbc798a_720w.jpg" alt="img"></p>
<p>那为何在内存中不直接使用utf-8呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utf-<span class="number">8</span>是针对Unicode的可变长度字符编码：一个英文字符占1Bytes，一个中文字符占3Bytes，生僻字用更多的Bytes存储</span><br><span class="line"></span><br><span class="line">unicode更像是一个过渡版本，我们新开发的软件或文件存入硬盘都采用utf-<span class="number">8</span>格式，等过去几十年，所有老编码的文件都淘汰掉之后，会出现一个令人开心的场景，即硬盘里放的都是utf-<span class="number">8</span>格式，此时unicode便可以退出历史舞台，内存里也改用utf-<span class="number">8</span>，天下重新归于统一</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-183090ce203c9e1b6edab8aff77460cb_720w.jpg" alt="img"></p>
<h2 id="四-字符编码的应用"><a href="#四-字符编码的应用" class="headerlink" title="四 字符编码的应用"></a>四 字符编码的应用</h2><p>我们学习字符编码就是为了存取字符时不发生乱码问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、内存中固定使用unicode无论输入任何字符都不会发生乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、我们能够修改的是存/取硬盘的编码方式，如果编码设置不正确将会出现乱码问题。乱码问题分为两种：存乱了，读乱了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.1 存乱了：如果用户输入的内容中包含中文和日文字符，如果单纯以shift_JIS存，日文可以正常写入硬盘，而由于中文字符在shift_jis中没有找到对应关系而导致存乱了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.2 读乱了：如果硬盘中的数据是shift_JIS格式存储的，采GBK格式读入内存就读乱了</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 保证存的时候不乱：在由内存写入硬盘时，必须将编码格式设置为支持所输入字符的编码格式</span></span><br><span class="line"><span class="comment">#2. 保证存的时候不乱：在由硬盘读入内存时，必须采用与写入硬盘时相同的编码格式</span></span><br></pre></td></tr></table></figure>

<h2 id="4-1-文本编辑器nodpad-存取文本文件"><a href="#4-1-文本编辑器nodpad-存取文本文件" class="headerlink" title="4.1 文本编辑器nodpad++存取文本文件"></a>4.1 文本编辑器nodpad++存取文本文件</h2><p>文本编辑器存取的都是文本文件，而文本文件中包含的内容全为字符，所以存取文本文件都涉及到字符编码的问题。</p>
<p><img src="https://pic4.zhimg.com/80/v2-80d179cdb9262eced650c8574bc74d33_720w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/80/v2-75e2cb4b6932bc76c6161a086ad1a5a3_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-3d3b0ae681354751c1a85d75b27ee1d0_720w.jpg" alt="img"></p>
<h2 id="4-2-python解释器执行文件的前两个阶段"><a href="#4-2-python解释器执行文件的前两个阶段" class="headerlink" title="4.2 python解释器执行文件的前两个阶段"></a>4.2 python解释器执行文件的前两个阶段</h2><p>执行py文件的前两个阶段就是python解释器读文本文件的过程，与文本编辑读文本文件的前两个阶段没人任何区别，要保证读不乱码，则必须将python解释器读文件时采用的编码方式设置为文件当初写入硬盘时的编码格式，如果没有设置，python解释器则才用默认的编码方式，在python3中默认为utf-8，在python2中默认为ASCII，我们可以通过指定文件头来修改默认的编码</p>
<ul>
<li>在文件首行写入包含#号在内的以下内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: 当初文件写入硬盘时采用的编码格式</span></span><br></pre></td></tr></table></figure>

<p>解释器会先用默认的编码方式读取文件的首行内容，由于首行是纯英文组成，而任何编码方式都可以识别英文字符。</p>
<p><img src="https://pic4.zhimg.com/80/v2-b39022bd9969bcba565b7cfe6c067b13_720w.jpg" alt="img"></p>
<h2 id="4-3-python解释器执行文件的第三个阶段"><a href="#4-3-python解释器执行文件的第三个阶段" class="headerlink" title="4.3 python解释器执行文件的第三个阶段"></a>4.3 python解释器执行文件的第三个阶段</h2><p>设置文件头的作用是保证运行python程序的前两个阶段不乱码，经过前两个阶段后py文件的内容都会以unicode格式存放于内存中。</p>
<p>在经历第三个阶段时开始识别python语法，当遇到特定的语法name &#x3D; ‘上’（代码本身也都全都是unicode格式存的）时，需要申请内存空间来存储字符串’上’，这就又涉及到应该以什么编码存储‘上’的问题了。</p>
<p>在Python3中，字符串类的值都是使用unicode格式来存储</p>
<p>由于Python2的盛行是早于unicode的，因此在Python2中是按照文件头指定的编码来存储字符串类型的值的（如果文件头中没有指定编码，那么解释器会按照它自己默认的编码方式来存储‘上’），所以，这就有可能导致乱码问题</p>
<p><img src="https://pic2.zhimg.com/80/v2-d27cfdaa0659c34c85fcff4a48a4e2f9_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">x = <span class="string">&#x27;上&#x27;</span> <span class="comment"># x的值为untf-8格式的二进制</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 打印操作是将x的值，即utf-8格式的二进制交给终端，当终端收到后发现并不是unicode（只有unicode才与字符有对应关系），所以终端会执行操作：utf-8二进制---解码--&gt;unicode格式的二进制，解码的过程终端会采用自己默认的编码，而在pycharm的终端默认编码为utf-8、windows下的cmd终端的默认编码为gbk，所以该打印操作在pycharm中显示正常，而在windows下的cmd中则乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在windows下的cmd中运行效果如下</span></span><br><span class="line">C:\Users\Administrator&gt;python2 E:\aaa.py</span><br><span class="line">涓</span><br></pre></td></tr></table></figure>

<p>python2后推出了一种补救措施，就是在字符串类型前加u，则会将字符串类型强制存储unicode，这就与python3保持一致了，对于unicode格式无论丢给任何终端进行打印，都可以直接对应字符不会出现乱码问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">x = <span class="string">u&#x27;上&#x27;</span> <span class="comment"># 即便文件头为utf-8，x的值依然存成unicode</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-1ef12a426d5d928e8ce10eafef489616_720w.jpg" alt="img"></p>
<h2 id="4-4-字符串encode编码与decode解码的使用"><a href="#4-4-字符串encode编码与decode解码的使用" class="headerlink" title="4.4 字符串encode编码与decode解码的使用"></a>4.4 字符串encode编码与decode解码的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、unicode格式------编码encode--------&gt;其它编码格式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&#x27;上&#x27;</span> <span class="comment"># 在python3在&#x27;上&#x27;被存成unicode</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=x.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res,<span class="built_in">type</span>(res) <span class="comment"># unicode编码成了utf-8格式，而编码的结果为bytes类型，可以当作直接当作二进制去使用</span></span><br><span class="line">(<span class="string">b&#x27;\xe4\xb8\x8a&#x27;</span>, &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 2、其它编码格式------解码<span class="title">decode</span>--------&gt;unicode格式</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; res.decode(&#x27;utf-8&#x27;) </span></span><br><span class="line"><span class="class">&#x27;上&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=27">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=27<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=28">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=28<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=29">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=29<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=30">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=30<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>11-函数基本使用</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/11_%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 基于前一部分的学习，我们已经能开发一些功能简单的小程序了，但随着程序功能的增多，代码量随之增大，此时仍不加区分地把所有功能的实现代码放到一起，将会使得程序的组织结构不清晰，可读性变差，且程序中需要频繁使用同一功能时，只能重复编写该功能的实现代码，日积月累，程序将变得冗长，并且当某一功能需要修改时，又不得不找出所有定义及使用这段功能的地方修改之，管理维护的难度极大，好吧，装了半天逼，到底该如何解决提出的这些问题呢？</p>
<p><img src="https://pic1.zhimg.com/80/v2-9c9953bf70a721520e78add4ceeeb340_720w.jpg" alt="img"></p>
<p>我们完全可以从现实生活中找到简化程序设计的方案：比如一个修理工会事先准备好螺丝刀、锤子等工具，这样在进行修理的过程中，需要用到拧螺丝的功能时就直接拿来螺丝刀使用，需要用到锤击物体的功能时就直接拿来锤子使用，而无需临时制造。这个例子的核心在于’事先准备好工具’，遇到应用场景时’拿来就用’，。</p>
<p>在程序中，具备某一功能的‘工具’指的就是函数，‘事先准备工具’的过程即函数的定义，‘拿来就用’即函数的调用。</p>
<h2 id="二-定义函数"><a href="#二-定义函数" class="headerlink" title="二 定义函数"></a>二 定义函数</h2><p>函数的使用必须遵循’先定义，后调用’的原则。函数的定义就相当于事先将函数体代码保存起来，然后将内存地址赋值给函数名，函数名就是对这段代码的引用，这和变量的定义是相似的。没有事先定义函数而直接调用，就相当于在引用一个不存在的’变量名’。</p>
<p>定义函数的语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;文档描述&quot;&quot;&quot;</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 值</span><br></pre></td></tr></table></figure>

<ol>
<li>def: 定义函数的关键字；</li>
<li>函数名：函数名指向函数内存地址，是对函数体代码的引用。函数的命名应该反映出函数的功能；</li>
<li>括号：括号内定义参数，参数是可有可无的，且无需指定参数的类型；</li>
<li>冒号：括号后要加冒号，然后在下一行开始缩进编写函数体的代码；</li>
<li>“””文档描述”””: 描述函数功能，参数介绍等信息的文档，非必要，但是建议加上，从而增强函数的可读性；</li>
<li>函数体：由语句和表达式组成；</li>
<li>return 值：定义函数的返回值，return是可有可无的。</li>
</ol>
<p><img src="https://pic1.zhimg.com/80/v2-b6820acb8b8135a298d22c46d88dc078_720w.jpg" alt="img"></p>
<p>参数是函数的调用者向函数体传值的媒介，若函数体代码逻辑依赖外部传来的参数时则需要定义为参函数，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_min</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    res=x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>否则定义为无参函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactive</span>():</span></span><br><span class="line">    user=<span class="built_in">input</span>(<span class="string">&#x27;user&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    pwd=<span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> (user,pwd)</span><br></pre></td></tr></table></figure>

<p> 函数体为pass代表什么都不做，称之为空函数。定义空函数通常是有用的，因为在程序设计的开始，往往是先想好程序都需要完成什么功能，然后把所有功能都列举出来用pass充当函数体“占位符”，这将使得程序的体系结构立见，清晰且可读性强。例如要编写一个ftp程序，我们可能想到的功能有用户认证，下载，上传，浏览，切换目录等功能，可以先做出如下定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_user</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;user authentication function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_file</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;download file function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;upload file function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;list contents function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cd</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;change directory&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>之后我们便可以统筹安排编程任务，有选择性的去实现上述功能来替换掉pass，从而提高开发效率。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7eec3d29ee04903367255ddf4ba56fa2_720w.jpg" alt="img"></p>
<h2 id="三-调用函数与函数返回值"><a href="#三-调用函数与函数返回值" class="headerlink" title="三 调用函数与函数返回值"></a>三 调用函数与函数返回值</h2><p> 函数的使用分为定义阶段与调用阶段，定义函数时只检测语法，不执行函数体代码，函数名加括号即函数调用，只有调用函数时才会执行函数体代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义阶段</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in the foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in the bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用阶段</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span> the foo</span><br><span class="line"><span class="keyword">in</span> the bar</span><br></pre></td></tr></table></figure>

<p>定义阶段函数foo与bar均无语法错误，而在调用阶段调用foo()时，函数foo与bar都早已经存在于内存中了，所以不会有任何问题。</p>
<p><img src="https://pic4.zhimg.com/80/v2-49571392a08c9cb0980b37d25890cf57_720w.jpg" alt="img"></p>
<p>按照在程序出现的形式和位置，可将函数的调用形式分为三种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、语句形式：</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、表达式形式：</span></span><br><span class="line">m=my_min(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#将调用函数的返回值赋值给x</span></span><br><span class="line">n=<span class="number">10</span>*my_min(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#将调用函数的返回值乘以10的结果赋值给n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、函数调用作为参数的形式：</span></span><br><span class="line"><span class="comment"># my_min（2，3）作为函数my_min的第二个参数，实现了取1,2,3中的较小者赋值给m</span></span><br><span class="line">m=my_min(<span class="number">1</span>，my_min（<span class="number">2</span>，<span class="number">3</span>）)</span><br></pre></td></tr></table></figure>

<p>若需要将函数体代码执行的结果返回给调用者，则需要用到return。return后无值或直接省略return，则默认返回None，return的返回值无类型限制，且可以将多个返回值放到一个元组内。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x,y,z <span class="comment">#等同于return (x,y,z)</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(res)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>return是一个函数结束的标志,函数内可以有多个return，但只执行一次函数就结束了，并把return后定义的值作为本次调用的结果返回。</p>
<p><img src="https://pic3.zhimg.com/80/v2-46449ad493f48f4863cefab55f8da196_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>函数基础</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=38">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=38<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>函数返回值</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=39">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=39<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>10-文件处理</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/10_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 应用程序运行过程中产生的数据最先都是存放于内存中的，若想永久保存下来，必须要保存于硬盘中。应用程序若想操作硬件必须通过操作系统，而文件就是操作系统提供给应用程序来操作硬盘的虚拟概念，用户或应用程序对文件的操作，就是向操作系统发起调用，然后由操作系统完成对硬盘的具体操作。</p>
<p><img src="https://pic2.zhimg.com/80/v2-e1c5ac2494f15c2d7a1ee4732fbb9289_720w.jpg" alt="img"></p>
<h2 id="二-文件操作的基本流程"><a href="#二-文件操作的基本流程" class="headerlink" title="二 文件操作的基本流程"></a>二 文件操作的基本流程</h2><h2 id="2-1-基本流程"><a href="#2-1-基本流程" class="headerlink" title="2.1 基本流程"></a>2.1 基本流程</h2><p><img src="https://pic3.zhimg.com/80/v2-5f2bdccc6b9d407c733fe1c4315a050a_720w.jpg" alt="img"></p>
<p>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件，由应用程序向操作系统发起系统调用open(...)，操作系统打开该文件，对应一块硬盘空间，并返回一个文件对象赋值给一个变量f</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#默认打开模式就为r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用文件对象下的读/写方法，会被操作系统转换为读/写硬盘的操作</span></span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 向操作系统发起关闭文件的请求，回收系统资源</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-df5334d72003b1b12e88bdf983af6b5d_720w.jpg" alt="img"></p>
<h2 id="2-2-资源回收与with上下文管理"><a href="#2-2-资源回收与with上下文管理" class="headerlink" title="2.2 资源回收与with上下文管理"></a>2.2 资源回收与with上下文管理</h2><p>打开一个文件包含两部分资源：应用程序的变量f和操作系统打开的文件。在操作完毕一个文件时，必须把与该文件的这两部分资源全部回收，回收方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、f.close() <span class="comment">#回收操作系统打开的文件资源</span></span><br><span class="line"><span class="number">2</span>、<span class="keyword">del</span> f <span class="comment">#回收应用程序级的变量</span></span><br></pre></td></tr></table></figure>

<p>其中del f一定要发生在f.close()之后，否则就会导致操作系统打开的文件无法关闭，白白占用资源， 而python自动的垃圾回收机制决定了我们无需考虑del f，这就要求我们，在操作完毕文件后，一定要记住f.close()，虽然我们如此强调，但是大多数读者还是会不由自主地忘记f.close()，考虑到这一点，python提供了with关键字来帮我们管理上下文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、在执行完子代码块后，with 会自动执行f.close()</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、可用用with同时打开多个文件，用逗号分隔开即可</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> write_f:  </span><br><span class="line">    data = read_f.read()</span><br><span class="line">    write_f.write(data)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-d5d2e9ba1e1584d711be9141313c9a55_720w.jpg" alt="img"></p>
<h2 id="2-3-指定操作文本文件的字符编码"><a href="#2-3-指定操作文本文件的字符编码" class="headerlink" title="2.3 指定操作文本文件的字符编码"></a>2.3 指定操作文本文件的字符编码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(...)是由操作系统打开文件，如果打开的是文本文件，会涉及到字符编码问题，如果没有为<span class="built_in">open</span>指定编码，那么打开文本文件的默认编码很明显是操作系统说了算了，操作系统会用自己的默认编码去打开文件，在windows下是gbk，在linux下是utf-<span class="number">8</span>。</span><br><span class="line">这就用到了上节课讲的字符编码的知识：若要保证不乱码，文件以什么方式存的，就要以什么方式打开。</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-fc61df44636a5f14346f24fae99f1b67_720w.jpg" alt="img"></p>
<h2 id="三-文件的操作模式"><a href="#三-文件的操作模式" class="headerlink" title="三 文件的操作模式"></a>三 文件的操作模式</h2><h2 id="3-1-控制文件读写操作的模式"><a href="#3-1-控制文件读写操作的模式" class="headerlink" title="3.1 控制文件读写操作的模式"></a>3.1 控制文件读写操作的模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r(默认的)：只读</span><br><span class="line">w：只写</span><br><span class="line">a：只追加写</span><br></pre></td></tr></table></figure>

<h3 id="3-1-1-案例一：r-模式的使用"><a href="#3-1-1-案例一：r-模式的使用" class="headerlink" title="3.1.1 案例一：r 模式的使用"></a>3.1.1 案例一：r 模式的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># r只读模式: 在文件不存在时则报错,文件存在文件内指针直接跳到文件开头</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     res=f.read() <span class="comment"># 会将文件的内容由硬盘全部读入内存，赋值给res</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习：实现用户认证功能</span></span><br><span class="line"> inp_name=<span class="built_in">input</span>(<span class="string">&#x27;请输入你的名字: &#x27;</span>).strip()</span><br><span class="line"> inp_pwd=<span class="built_in">input</span>(<span class="string">&#x27;请输入你的密码: &#x27;</span>).strip()</span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">         <span class="comment"># 把用户输入的名字与密码与读出内容做比对</span></span><br><span class="line">         u,p=line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">         <span class="keyword">if</span> inp_name == u <span class="keyword">and</span> inp_pwd == p:</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;账号名或者密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-案例二：w-模式的使用"><a href="#3-1-2-案例二：w-模式的使用" class="headerlink" title="3.1.2 案例二：w 模式的使用"></a>3.1.2 案例二：w 模式的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># w只写模式: 在文件不存在时会创建空文档,文件存在会清空文件,文件指针跑到文件开头</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;你好\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;我好\n&#x27;</span>) </span><br><span class="line">    f.write(<span class="string">&#x27;大家好\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;111\n222\n333\n&#x27;</span>)</span><br><span class="line"><span class="comment">#强调：</span></span><br><span class="line"><span class="comment"># 1 在文件不关闭的情况下,连续的写入，后写的内容一定跟在前写内容的后面</span></span><br><span class="line"><span class="comment"># 2 如果重新以w模式打开文件，则会清空文件内容</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-3-案例三：a-模式的使用"><a href="#3-1-3-案例三：a-模式的使用" class="headerlink" title="3.1.3 案例三：a 模式的使用"></a>3.1.3 案例三：a 模式的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a只追加写模式: 在文件不存在时会创建空文档,文件存在会将文件指针直接移动到文件末尾</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.write(<span class="string">&#x27;44444\n&#x27;</span>)</span><br><span class="line">     f.write(<span class="string">&#x27;55555\n&#x27;</span>)</span><br><span class="line"><span class="comment">#强调 w 模式与 a 模式的异同：</span></span><br><span class="line"><span class="comment"># 1 相同点：在打开的文件不关闭的情况下，连续的写入，新写的内容总会跟在前写的内容之后</span></span><br><span class="line"><span class="comment"># 2 不同点：以 a 模式重新打开文件，不会清空原文件内容，会将文件指针直接移动到文件末尾，新写的内容永远写在最后</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习：实现注册功能:</span></span><br><span class="line"> name=<span class="built_in">input</span>(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"> pwd=<span class="built_in">input</span>(<span class="string">&#x27;password&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db1.txt&#x27;</span>,mode=<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     info=<span class="string">&#x27;%s:%s\n&#x27;</span> %(name,pwd)</span><br><span class="line">     f.write(info)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-案例四：-模式的使用-了解"><a href="#3-1-4-案例四：-模式的使用-了解" class="headerlink" title="3.1.4 案例四：+ 模式的使用(了解)"></a>3.1.4 案例四：+ 模式的使用(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># r+ w+ a+ :可读可写</span></span><br><span class="line"><span class="comment">#在平时工作中，我们只单纯使用r/w/a，要么只读，要么只写，一般不用可读可写的模式</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-bea42b94950b49f8be785289904e17b7_720w.jpg" alt="img"></p>
<h2 id="3-2-控制文件读写内容的模式"><a href="#3-2-控制文件读写内容的模式" class="headerlink" title="3.2 控制文件读写内容的模式"></a>3.2 控制文件读写内容的模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">大前提: tb模式均不能单独使用,必须与r/w/a之一结合使用</span><br><span class="line">t（默认的）：文本模式</span><br><span class="line">    <span class="number">1.</span> 读写文件都是以字符串为单位的</span><br><span class="line">    <span class="number">2.</span> 只能针对文本文件</span><br><span class="line">    <span class="number">3.</span> 必须指定encoding参数</span><br><span class="line">b：二进制模式:</span><br><span class="line">   <span class="number">1.</span>读写文件都是以<span class="built_in">bytes</span>/二进制为单位的</span><br><span class="line">   <span class="number">2.</span> 可以针对所有文件</span><br><span class="line">   <span class="number">3.</span> 一定不能指定encoding参数</span><br></pre></td></tr></table></figure>

<h3 id="3-2-1-案例一：t-模式的使用"><a href="#3-2-1-案例一：t-模式的使用" class="headerlink" title="3.2.1 案例一：t 模式的使用"></a>3.2.1 案例一：t 模式的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t 模式：如果我们指定的文件打开模式为r/w/a，其实默认就是rt/wt/at</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     res=f.read() </span><br><span class="line">     <span class="built_in">print</span>(<span class="built_in">type</span>(res)) <span class="comment"># 输出结果为：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     s=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">     f.write(s) <span class="comment"># 写入的也必须是字符串类型</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#强调：t 模式只能用于操作文本文件,无论读写，都应该以字符串为单位，而存取硬盘本质都是二进制的形式，当指定 t 模式时，内部帮我们做了编码与解码</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-案例二：-b-模式的使用"><a href="#3-2-2-案例二：-b-模式的使用" class="headerlink" title="3.2.2 案例二： b 模式的使用"></a>3.2.2 案例二： b 模式的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># b: 读写都是以二进制位单位</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.mp4&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data=f.read()</span><br><span class="line">     <span class="built_in">print</span>(<span class="built_in">type</span>(data)) <span class="comment"># 输出结果为：&lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     msg=<span class="string">&quot;你好&quot;</span></span><br><span class="line">     res=msg.encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># res为bytes类型</span></span><br><span class="line">     f.write(res) <span class="comment"># 在b模式下写入文件的只能是bytes类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#强调：b模式对比t模式</span></span><br><span class="line"><span class="number">1</span>、在操作纯文本文件方面t模式帮我们省去了编码与解码的环节，b模式则需要手动编码与解码，所以此时t模式更为方便</span><br><span class="line"><span class="number">2</span>、针对非文本文件（如图片、视频、音频等）只能使用b模式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习： 编写拷贝工具</span></span><br><span class="line">src_file=<span class="built_in">input</span>(<span class="string">&#x27;源文件路径: &#x27;</span>).strip()</span><br><span class="line">dst_file=<span class="built_in">input</span>(<span class="string">&#x27;目标文件路径: &#x27;</span>).strip()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %src_file,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %dst_file,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        <span class="comment"># print(line)</span></span><br><span class="line">        write_f.write(line)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-4af94c11c6a45976fca8c53a0794c3a2_720w.jpg" alt="img"></p>
<h2 id="四-操作文件的方法"><a href="#四-操作文件的方法" class="headerlink" title="四 操作文件的方法"></a>四 操作文件的方法</h2><h2 id="4-1-重点"><a href="#4-1-重点" class="headerlink" title="4.1 重点"></a>4.1 重点</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读操作</span></span><br><span class="line">f.read()  <span class="comment"># 读取所有内容,执行完该操作后，文件指针会移动到文件末尾</span></span><br><span class="line">f.readline()  <span class="comment"># 读取一行内容,光标移动到第二行首部</span></span><br><span class="line">f.readlines()  <span class="comment"># 读取每一行内容,存放于列表中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment"># f.read()与f.readlines()都是将内容一次性读入内容，如果内容过大会导致内存溢出，若还想将内容全读入内存，则必须分多次读入，有两种实现方式：</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line) <span class="comment"># 同一时刻只读入一行内容到内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.mp4&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=f.read(<span class="number">1024</span>) <span class="comment"># 同一时刻只读入1024个Bytes到内存中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写操作</span></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>)  <span class="comment"># 针对文本模式的写,需要自己写换行符</span></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 针对b模式的写,需要自己写换行符</span></span><br><span class="line">f.writelines([<span class="string">&#x27;333\n&#x27;</span>,<span class="string">&#x27;444\n&#x27;</span>])  <span class="comment"># 文件模式</span></span><br><span class="line">f.writelines([<span class="built_in">bytes</span>(<span class="string">&#x27;333\n&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;444\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)]) <span class="comment">#b模式</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-30d5763461db05414c3ac2cc944a8f6e_720w.jpg" alt="img"></p>
<h2 id="4-2-了解"><a href="#4-2-了解" class="headerlink" title="4.2 了解"></a>4.2 了解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.readable()  <span class="comment"># 文件是否可读</span></span><br><span class="line">f.writable()  <span class="comment"># 文件是否可读</span></span><br><span class="line">f.closed  <span class="comment"># 文件是否关闭</span></span><br><span class="line">f.encoding  <span class="comment"># 如果文件打开模式为b,则没有该属性</span></span><br><span class="line">f.flush()  <span class="comment"># 立刻将文件内容从内存刷到硬盘</span></span><br><span class="line">f.name</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-3474d487b3fb518ce9b511c73153ce78_720w.jpg" alt="img"></p>
<h2 id="五-主动控制文件内指针移动"><a href="#五-主动控制文件内指针移动" class="headerlink" title="五 主动控制文件内指针移动"></a>五 主动控制文件内指针移动</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#大前提:文件内指针的移动都是Bytes为单位的,唯一例外的是t模式下的read(n),n以字符为单位</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data=f.read(<span class="number">3</span>) <span class="comment"># 读取3个字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data=f.read(<span class="number">3</span>) <span class="comment"># 读取3个Bytes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之前文件内指针的移动都是由读/写操作而被动触发的，若想读取文件某一特定位置的数据，则则需要用f.seek方法主动控制文件内指针的移动，详细用法如下：</span></span><br><span class="line"><span class="comment"># f.seek(指针移动的字节数,模式控制): </span></span><br><span class="line"><span class="comment"># 模式控制:</span></span><br><span class="line"><span class="comment"># 0: 默认的模式,该模式代表指针移动的字节数是以文件开头为参照的</span></span><br><span class="line"><span class="comment"># 1: 该模式代表指针移动的字节数是以当前所在的位置为参照的</span></span><br><span class="line"><span class="comment"># 2: 该模式代表指针移动的字节数是以文件末尾的位置为参照的</span></span><br><span class="line"><span class="comment"># 强调:其中0模式可以在t或者b模式使用,而1跟2模式只能在b模式下用</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-2b5a0f6ecedec41601c52959b34d7f5a_720w.jpg" alt="img"></p>
<h2 id="5-1-案例一：-0模式详解"><a href="#5-1-案例一：-0模式详解" class="headerlink" title="5.1 案例一： 0模式详解"></a>5.1 案例一： 0模式详解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span></span><br><span class="line">abc你好</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">0</span>)     <span class="comment"># 参照文件开头移动了3个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 查看当前文件指针距离文件开头的位置，输出结果为3</span></span><br><span class="line">    <span class="built_in">print</span>(f.read()) <span class="comment"># 从第3个字节的位置读到文件末尾，输出结果为：你好</span></span><br><span class="line">    <span class="comment"># 注意：由于在t模式下，会将读取的内容自动解码，所以必须保证读取的内容是一个完整中文数据，否则解码失败</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">6</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment">#输出结果为: 好</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-9a9115785268e099152bbed9d0bc7e97_720w.jpg" alt="img"></p>
<h2 id="5-2-案例二：-1模式详解"><a href="#5-2-案例二：-1模式详解" class="headerlink" title="5.2 案例二： 1模式详解"></a>5.2 案例二： 1模式详解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">1</span>) <span class="comment"># 从当前位置往后移动3个字节，而此时的当前位置就是文件开头</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：3</span></span><br><span class="line">    f.seek(<span class="number">4</span>,<span class="number">1</span>)     <span class="comment"># 从当前位置往后移动4个字节，而此时的当前位置为3</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：7</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-2122d50b6c97ed1c5fe27a13126266d0_720w.jpg" alt="img"></p>
<h2 id="5-3-案例三：-2模式详解"><a href="#5-3-案例三：-2模式详解" class="headerlink" title="5.3 案例三： 2模式详解"></a>5.3 案例三： 2模式详解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span></span><br><span class="line">abc你好</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)     <span class="comment"># 参照文件末尾移动0个字节， 即直接跳到文件末尾</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：9</span></span><br><span class="line">    f.seek(-<span class="number">3</span>,<span class="number">2</span>)     <span class="comment"># 参照文件末尾往前移动了3个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 输出结果为：好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习：实现动态查看最新一条日志的效果</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;access.log&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line=f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 没有内容</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-009f54e4493921a84480b80a4fa5aa90_720w.jpg" alt="img"></p>
<h2 id="六-文件的修改"><a href="#六-文件的修改" class="headerlink" title="六 文件的修改"></a>六 文件的修改</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件a.txt内容如下</span></span><br><span class="line">张一蛋     山东    <span class="number">179</span>    <span class="number">49</span>    <span class="number">12344234523</span></span><br><span class="line">李二蛋     河北    <span class="number">163</span>    <span class="number">57</span>    <span class="number">13913453521</span></span><br><span class="line">王全蛋     山西    <span class="number">153</span>    <span class="number">62</span>    <span class="number">18651433422</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;r+t&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">9</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;&lt;妇女主任&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件修改后的内容如下</span></span><br><span class="line">张一蛋&lt;妇女主任&gt; <span class="number">179</span>    <span class="number">49</span>    <span class="number">12344234523</span></span><br><span class="line">李二蛋     河北    <span class="number">163</span>    <span class="number">57</span>    <span class="number">13913453521</span></span><br><span class="line">王全蛋     山西    <span class="number">153</span>    <span class="number">62</span>    <span class="number">18651433422</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment"># 1、硬盘空间是无法修改的,硬盘中数据的更新都是用新内容覆盖旧内容</span></span><br><span class="line"><span class="comment"># 2、内存中的数据是可以修改的</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-138c4c7000b5db3a37d691ea0aa09fb0_720w.jpg" alt="img"></p>
<p>文件对应的是硬盘空间,硬盘不能修改对应着文件本质也不能修改, 那我们看到文件的内容可以修改,是如何实现的呢? 大致的思路是将硬盘中文件内容读入内存,然后在内存中修改完毕后再覆盖回硬盘 具体的实现方式分为两种:</p>
<h2 id="6-1-文件修改方式一"><a href="#6-1-文件修改方式一" class="headerlink" title="6.1 文件修改方式一"></a>6.1 文件修改方式一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现思路：将文件内容发一次性全部读入内存,然后在内存中修改完毕后再覆盖写回原文件</span></span><br><span class="line"><span class="comment"># 优点: 在文件修改过程中同一份数据只有一份</span></span><br><span class="line"><span class="comment"># 缺点: 会过多地占用内存</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data.replace(<span class="string">&#x27;kevin&#x27;</span>,<span class="string">&#x27;SB&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="6-1-文件修改方式二"><a href="#6-1-文件修改方式二" class="headerlink" title="6.1 文件修改方式二"></a>6.1 文件修改方式二</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现思路：以读的方式打开原文件,以写的方式打开一个临时文件,一行行读取原文件内容,修改完后写入临时文件...,删掉原文件,将临时文件重命名原文件名</span></span><br><span class="line"><span class="comment"># 优点: 不会占用过多的内存</span></span><br><span class="line"><span class="comment"># 缺点: 在文件修改过程中同一份数据存了两份</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;.db.txt.swap&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wrife_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        wrife_f.write(line.replace(<span class="string">&#x27;SB&#x27;</span>,<span class="string">&#x27;kevin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;db.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;.db.txt.swap&#x27;</span>,<span class="string">&#x27;db.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-d45f4a423f5dd6e9880e4dbcdb1bdaf7_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>文件处理</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=31">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=31<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=32">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=32<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=33">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=33<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=34">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=34<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=35">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=35<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=36">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=36<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=37">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=37<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>11-函数的参数</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/12_%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一-形参与实参介绍"><a href="#一-形参与实参介绍" class="headerlink" title="一 形参与实参介绍"></a>一 形参与实参介绍</h2><p><img src="https://pic2.zhimg.com/80/v2-3be956bc3ace8da945af47995ea41b19_720w.jpg" alt="img"></p>
<p>函数的参数分为形式参数和实际参数，简称形参和实参：</p>
<p>形参即在定义函数时，括号内声明的参数。形参本质就是一个变量名，用来接收外部传来的值。</p>
<p>实参即在调用函数时，括号内传入的值，值可以是常量、变量、表达式或三者的组合:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1：实参是常量</span></span><br><span class="line">res=my_min(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2：实参是变量</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">res=my_min(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3：实参是表达式</span></span><br><span class="line">res=my_min(<span class="number">10</span>*<span class="number">2</span>,<span class="number">10</span>*my_min(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#4：实参可以是常量、变量、表达式的任意组合</span></span><br><span class="line">a=<span class="number">2</span></span><br><span class="line">my_min(<span class="number">1</span>,a,<span class="number">10</span>*my_min(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<p>在调用有参函数时，实参（值）会赋值给形参（变量名）。在Python中，变量名与值只是单纯的绑定关系，而对于函数来说，这种绑定关系只在函数调用时生效，在调用结束后解除。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b0036c8f8942a558d95a3200f38338d1_720w.jpg" alt="img"></p>
<h2 id="二-形参与实参的具体使用"><a href="#二-形参与实参的具体使用" class="headerlink" title="二 形参与实参的具体使用"></a>二 形参与实参的具体使用</h2><h2 id="2-1-位置参数"><a href="#2-1-位置参数" class="headerlink" title="2.1 位置参数"></a>2.1 位置参数</h2><p>位置即顺序，位置参数指的是按顺序定义的参数，需要从两个角度去看：</p>
<ol>
<li>在定义函数时，按照从左到右的顺序依次定义形参,称为位置形参，凡是按照这种形式定义的形参都必须被传值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,sex</span>):</span> <span class="comment">#定义位置形参：name，age，sex，三者都必须被传值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))</span><br><span class="line">register() <span class="comment">#TypeError：缺少3个位置参数 </span></span><br></pre></td></tr></table></figure>

<ol>
<li>在调用函数时，按照从左到右的顺序依次定义实参，称为位置实参，凡是按照这种形式定义的实参会按照从左到右的顺序与形参一一对应</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,sex</span>):</span> <span class="comment">#定义位置形参：name，age，sex，三者都必须被传值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))</span><br><span class="line">register() <span class="comment">#TypeError：缺少3个位置参数</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-1152d1943f7d6b217981965ad5d2b8be_720w.jpg" alt="img"></p>
<h2 id="2-2-关键字参数"><a href="#2-2-关键字参数" class="headerlink" title="2.2 关键字参数"></a>2.2 关键字参数</h2><p>在调用函数时，实参可以是key&#x3D;value的形式，称为关键字参数，凡是按照这种形式定义的实参，可以完全不按照从左到右的顺序定义，但仍能为指定的形参赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(sex=<span class="string">&#x27;male&#x27;</span>,name=<span class="string">&#x27;lili&#x27;</span>,age=<span class="number">18</span>)</span><br><span class="line">Name:lili Age:<span class="number">18</span> Sex:male</span><br></pre></td></tr></table></figure>

<p>需要注意在调用函数时，实参也可以是按位置或按关键字的混合使用，但必须保证关键字参数在位置参数后面，且不可以对一个形参重复赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,sex=<span class="string">&#x27;male&#x27;</span>,age=<span class="number">18</span>) <span class="comment">#正确使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(name=<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>) <span class="comment">#SyntaxError：关键字参数name=‘lili’在位置参数18之前</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,sex=<span class="string">&#x27;male&#x27;</span>,age=<span class="number">18</span>,name=<span class="string">&#x27;jack&#x27;</span>) <span class="comment">#TypeError：形参name被重复赋值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-751903e8073067049e6c42c5196754fe_720w.jpg" alt="img"></p>
<h2 id="2-3-默认参数"><a href="#2-3-默认参数" class="headerlink" title="2.3 默认参数"></a>2.3 默认参数</h2><p>在定义函数时，就已经为形参赋值，这类形参称之为默认参数，当函数有多个参数时，需要将值经常改变的参数定义成位置参数，而将值改变较少的参数定义成默认参数。例如编写一个注册学生信息的函数，如果大多数学生的性别都为男，那完全可以将形参sex定义成默认参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,sex=<span class="string">&#x27;male&#x27;</span></span>):</span> <span class="comment">#默认sex的值为male</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>定义时就已经为参数sex赋值，意味着调用时可以不对sex赋值，这降低了函数调用的复杂度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;tom&#x27;</span>,<span class="number">17</span>) <span class="comment">#大多数情况,无需为sex传值,默认为male</span></span><br><span class="line">Name:tom Age:<span class="number">17</span> Sex:male</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;Lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;female&#x27;</span>) <span class="comment">#少数情况,可以为sex传值female</span></span><br><span class="line">Name:Lili Age:<span class="number">18</span> Sex:female</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-85c49040b5ca19b0a6cd236d6a335d21_720w.jpg" alt="img"></p>
<p>需要注意：</p>
<ol>
<li>默认参数必须在位置参数之后</li>
<li>默认参数的值仅在函数定义阶段被赋值一次</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">arg=x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">5</span> <span class="comment">#定义阶段arg已被赋值为1，此处的修改与默认参数arg无任何关系</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol>
<li>默认参数的值通常应设为不可变类型</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n,arg=[]</span>):</span>    </span><br><span class="line">     arg.append(n)    </span><br><span class="line">     <span class="keyword">return</span> arg    </span><br><span class="line">foo(<span class="number">1</span>)    </span><br><span class="line">[<span class="number">1</span>] </span><br><span class="line">foo(<span class="number">2</span>)    </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] </span><br><span class="line">foo(<span class="number">3</span>)    </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>每次调用是在上一次的基础上向同一列表增加值，修改如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n,arg=<span class="literal">None</span></span>):</span>    </span><br><span class="line">     <span class="keyword">if</span> arg <span class="keyword">is</span> <span class="literal">None</span>:    </span><br><span class="line">         arg=[]    </span><br><span class="line">     arg.append(n)    </span><br><span class="line">     <span class="keyword">return</span> arg    </span><br><span class="line">foo(<span class="number">1</span>)    </span><br><span class="line">[<span class="number">1</span>] </span><br><span class="line">foo(<span class="number">2</span>)    </span><br><span class="line">[<span class="number">2</span>] </span><br><span class="line">foo(<span class="number">3</span>)    </span><br><span class="line">[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-c48b74c4968b946d68531c2ef2c1b40e_720w.jpg" alt="img"></p>
<h2 id="2-4-可变长度的参数（-与-的用法）"><a href="#2-4-可变长度的参数（-与-的用法）" class="headerlink" title="2.4 可变长度的参数（*与**的用法）"></a>2.4 可变长度的参数（*与**的用法）</h2><p><img src="https://pic2.zhimg.com/80/v2-ac1ed3f13dbd9fea9e3c5cfbb1047611_720w.jpg" alt="img"></p>
<p>参数的长度可变指的是在调用函数时，实参的个数可以不固定，而在调用函数时，实参的定义无非是按位置或者按关键字两种形式，这就要求形参提供两种解决方案来分别处理两种形式的可变长度的参数</p>
<h3 id="2-4-1-可变长度的位置参数"><a href="#2-4-1-可变长度的位置参数" class="headerlink" title="2.4.1 可变长度的位置参数"></a>2.4.1 可变长度的位置参数</h3><p>如果在最后一个形参名前加<em>号,那么在调用函数时，溢出的位置实参，都会被</em>接收，以元组的形式保存下来赋值给该形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,z=<span class="number">1</span>,*args</span>):</span> <span class="comment">#在最后一个形参名args前加*号</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(args)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)  <span class="comment">#实参1、2、3按位置为形参x、y、z赋值，多余的位置实参4、5、6、7都被*接收，以元组的形式保存下来，赋值给args，即args=(4, 5, 6,7)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>如果我们事先生成了一个列表,仍然是可以传值给*args的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,*args</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(args)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,*L) <span class="comment"># *L就相当于位置参数3，4，5, foo(1,2,*L)就等同于foo(1,2,3,4,5)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-e73cc42b02d988741717036dab3ef3d8_720w.jpg" alt="img"></p>
<p>注意：如果在传入L时没有加*,那L就只是一个普通的位置参数了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,L) <span class="comment">#仅多出一个位置实参L</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],)</span><br></pre></td></tr></table></figure>

<p>如果形参为常规的参数（位置或默认），实参仍可以是*的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,z=<span class="number">3</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(*[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">#等同于foo(1,2)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>如果我们想要求多个值的和，*args就派上用场了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">*args</span>):</span></span><br><span class="line"><span class="meta">... </span>    res=<span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line"><span class="meta">... </span>        res+=i</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> res</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-8996656ee55ad76ec5b15628a8044140_720w.jpg" alt="img"></p>
<h3 id="2-4-2-可变长度的关键字参数"><a href="#2-4-2-可变长度的关键字参数" class="headerlink" title="2.4.2 可变长度的关键字参数"></a>2.4.2 可变长度的关键字参数</h3><p>如果在最后一个形参名前加<strong>号,那么在调用函数时，溢出的关键字参数，都会被</strong>接收，以字典的形式保存下来赋值给该形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,**kwargs</span>):</span> <span class="comment">#在最后一个参数kwargs前加**</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)        </span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(kwargs)   </span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(y=<span class="number">2</span>,x=<span class="number">1</span>,z=<span class="number">3</span>) <span class="comment">#溢出的关键字实参y=2，z=3都被**接收，以字典的形式保存下来，赋值给kwargs</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们事先生成了一个字典,仍然是可以传值给**kwargs的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,**kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(kwargs)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,**dic) <span class="comment">#**dic就相当于关键字参数a=1，b=2，foo(1,2,**dic)等同foo(1,2,a=1,b=2)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-b4374327737ac837551b67f7813666e8_720w.jpg" alt="img"></p>
<p>注意：如果在传入dic时没有加**,那dic就只是一个普通的位置参数了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,dic) <span class="comment">#TypeError:函数foo只需要2个位置参数，但是传了3个</span></span><br></pre></td></tr></table></figure>

<p>如果形参为常规参数（位置或默认），实参仍可以是**的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,z=<span class="number">3</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(**&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>&#125;) <span class="comment">#等同于foo(y=2,x=1)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>如果我们要编写一个用户认证的函数，起初可能只基于用户名密码的验证就可以了，可以使用**kwargs为日后的扩展供良好的环境，同时保持了函数的简洁性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">user,password,**kwargs</span>):</span> </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span> </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="2-5-命名关键字参数"><a href="#2-5-命名关键字参数" class="headerlink" title="2.5 命名关键字参数"></a>2.5 命名关键字参数</h2><p>在定义了**kwargs参数后，函数调用者就可以传入任意的关键字参数key&#x3D;value，如果函数体代码的执行需要依赖某个key，必须在函数内进行判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,**kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line"><span class="meta">... </span>        <span class="comment">#有sex参数</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="string">&#x27;height&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line"><span class="meta">... </span>        <span class="comment">#有height参数</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>想要限定函数的调用者必须以key&#x3D;value的形式传值，Python3提供了专门的语法：需要在定义形参时，用<em>作为一个分隔符号，</em>号之后的形参称为命名关键字参数。对于这类参数，在函数调用时，必须按照key&#x3D;value的形式为其传值，且必须被传值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,*,sex,height</span>):</span> <span class="comment">#sex,height为命名关键字参数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>,height=<span class="string">&#x27;1.8m&#x27;</span>) <span class="comment">#正确使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;1.8m&#x27;</span>) <span class="comment"># TypeError:未使用关键字的形式为sex和height传值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,height=<span class="string">&#x27;1.8m&#x27;</span>) <span class="comment"># TypeError没有为命名关键字参数height传值。</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-536b4db7a18e1f39795a152f4c6249bb_720w.jpg" alt="img"></p>
<p>命名关键字参数也可以有默认值，从而简化调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,*,sex=<span class="string">&#x27;male&#x27;</span>,height</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Name:%s,Age:%s,Sex:%s,Height:%s&#x27;</span> %(name,age,sex,height))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,height=<span class="string">&#x27;1.8m&#x27;</span>)</span><br><span class="line">Name:lili,Age:<span class="number">18</span>,Sex:male,Height:<span class="number">1.8</span>m</span><br></pre></td></tr></table></figure>

<p>需要强调的是：sex不是默认参数，height也不是位置参数，因为二者均在<em>后，所以都是命名关键字参数，形参sex&#x3D;’male’属于命名关键字参数的默认值，因而即便是放到形参height之前也不会有问题。另外，如果形参中已经有一个</em>args了，命名关键字参数就不再需要一个单独的*作为分隔符号了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,*args,sex=<span class="string">&#x27;male&#x27;</span>,height</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(<span class="string">&#x27;Name:%s,Age:%s,Args:%s,Sex:%s,Height:%s&#x27;</span> %(name,age,args,sex,height))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,height=<span class="string">&#x27;1.8m&#x27;</span>) <span class="comment">#sex与height仍为命名关键字参数</span></span><br><span class="line">Name:lili,Age:<span class="number">18</span>,Args:(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),Sex:male,Height:<span class="number">1.8</span>m</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-daa2f3a7038bc4603a334da19e216dcf_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-f69da71d076e7119fd2ec2e84817dd6c_720w.jpg" alt="img"></p>
<h2 id="2-6-组合使用"><a href="#2-6-组合使用" class="headerlink" title="2.6 组合使用"></a>2.6 组合使用</h2><p>综上所述所有参数可任意组合使用，但定义顺序必须是：位置参数、默认参数、*args、命名关键字参数、**kwargs</p>
<p>可变参数*args与关键字参数<strong>kwargs通常是组合在一起使用的，如果一个函数的形参为*args与</strong>kwargs，那么代表该函数可以接收任何形式、任意长度的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-8a33c0e3ae4f314dc75eca6250b66fe7_720w.jpg" alt="img"></p>
<p>在该函数内部还可以把接收到的参数传给另外一个函数（这在4.6小节装饰器的实现中大有用处）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x,y,z)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>    func(*args,**kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wrapper(<span class="number">1</span>,z=<span class="number">3</span>,y=<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>按照上述写法，在为函数wrapper传参时，其实遵循的是函数func的参数规则，调用函数wrapper的过程分析如下：</p>
<ol>
<li>位置实参1被*接收，以元组的形式保存下来，赋值给args，即args&#x3D;(1,),关键字实参z&#x3D;3，y&#x3D;2被**接收，以字典的形式保存下来，赋值给kwargs，即kwargs&#x3D;{‘y’: 2, ‘z’: 3}</li>
<li>执行func(<em>args,<em>kwargs),即func(</em>(1,),</em>* {‘y’: 2, ‘z’: 3}),等同于func(1,z&#x3D;3,y&#x3D;2)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">提示： *args、**kwargs中的args和kwargs被替换成其他名字并无语法错误，但使用args、kwargs是约定俗成的。</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-0064bdc3b1e3fd19d4240f375fecce8a_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=40">https://www.bilibili.com/video/av73342471/?p=40www.bilibili.com/video/av73342471/?p=40</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=41">https://www.bilibili.com/video/av73342471?p=41www.bilibili.com/video/av73342471?p=41</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=42">https://www.bilibili.com/video/av73342471?p=42www.bilibili.com/video/av73342471?p=42</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>13-名称空间和作用域</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/13_%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="一-名称空间"><a href="#一-名称空间" class="headerlink" title="一 名称空间"></a>一 名称空间</h2><p>名称空间即存放名字与对象映射&#x2F;绑定关系的地方。对于x&#x3D;3，Python会申请内存空间存放对象3，然后将名字x与3的绑定关系存放于名称空间中，del x表示清除该绑定关系。</p>
<p> 在程序执行期间最多会存在三种名称空间</p>
<p><img src="https://pic2.zhimg.com/80/v2-596e030156bc539213fb080d356ca1d9_720w.jpg" alt="img"></p>
<h2 id="1-1-内建名称空间"><a href="#1-1-内建名称空间" class="headerlink" title="1.1 内建名称空间"></a>1.1 内建名称空间</h2><p>伴随python解释器的启动&#x2F;关闭而产生&#x2F;回收，因而是第一个被加载的名称空间，用来存放一些内置的名字，比如内建函数名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">max</span>&gt; <span class="comment">#built-in内建</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-6b1e7070c484f0d266dcfdc04ebf265a_720w.jpg" alt="img"></p>
<h2 id="1-2-全局名称空间"><a href="#1-2-全局名称空间" class="headerlink" title="1.2 全局名称空间"></a>1.2 全局名称空间</h2><p>伴随python文件的开始执行&#x2F;执行完毕而产生&#x2F;回收，是第二个被加载的名称空间，文件执行过程中产生的名字都会存放于该名称空间中，如下名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys <span class="comment">#模块名sys</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span> <span class="comment">#变量名x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">    y=<span class="number">2</span> <span class="comment">#变量名y</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x</span>):</span> <span class="comment">#函数名foo</span></span><br><span class="line">    y=<span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Class Bar: <span class="comment">#类名Bar</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-2def7f8d2d87802b200813e691a5acfd_720w.jpg" alt="img"></p>
<h2 id="1-3-局部名称空间"><a href="#1-3-局部名称空间" class="headerlink" title="1.3 局部名称空间"></a>1.3 局部名称空间</h2><p>伴随函数的调用&#x2F;结束而临时产生&#x2F;回收，函数的形参、函数内定义的名字都会被存放于该名称空间中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x</span>):</span></span><br><span class="line">    y=<span class="number">3</span> <span class="comment">#调用函数时，才会执行函数代码，名字x和y都存放于该函数的局部名称空间中</span></span><br></pre></td></tr></table></figure>

<p>名称空间的加载顺序是：内置名称空间-&gt;全局名称空间-&gt;局部名称空间，而查找一个名字，必须从三个名称空间之一找到，查找顺序为：局部名称空间-&gt;全局名称空间-&gt;内置名称空间。</p>
<p><img src="https://pic1.zhimg.com/80/v2-521d2bf3131371f8d2656b184ad17798_720w.jpg" alt="img"></p>
<h2 id="二-作用域"><a href="#二-作用域" class="headerlink" title="二 作用域"></a>二 作用域</h2><h2 id="2-1-全局作用域与局部作用域"><a href="#2-1-全局作用域与局部作用域" class="headerlink" title="2.1 全局作用域与局部作用域"></a>2.1 全局作用域与局部作用域</h2><p>按照名字作用范围的不同可以将三个名称空间划分为两个区域：</p>
<ol>
<li>全局作用域:位于全局名称空间、内建名称空间中的名字属于全局范围，该范围内的名字全局存活（除非被删除，否则在整个文件执行过程中存活）、全局有效（在任意位置都可以使用）；</li>
<li>局部作用域:位于局部名称空间中的名字属于局部范围。该范围内的名字临时存活（即在函数调用时临时生成，函数调用结束后就释放）、局部有效（只能在函数内使用）。</li>
</ol>
<p><img src="https://pic4.zhimg.com/80/v2-c7c952d4554d6db0cf46305be525bafb_720w.jpg" alt="img"></p>
<h2 id="2-2-作用域与名字查找的优先级"><a href="#2-2-作用域与名字查找的优先级" class="headerlink" title="2.2 作用域与名字查找的优先级"></a>2.2 作用域与名字查找的优先级</h2><p> 在局部作用域查找名字时，起始位置是局部作用域，所以先查找局部名称空间，没有找到，再去全局作用域查找：先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">100</span> <span class="comment">#全局作用域的名字x</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x=<span class="number">300</span> <span class="comment">#局部作用域的名字x</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">#在局部找x</span></span><br><span class="line">foo()<span class="comment">#结果为300</span></span><br></pre></td></tr></table></figure>

<p>在全局作用域查找名字时，起始位置便是全局作用域，所以先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x=<span class="number">300</span> <span class="comment">#在函数调用时产生局部作用域的名字x</span></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#在全局找x,结果为100</span></span><br></pre></td></tr></table></figure>

<p>提示：可以调用内建函数locals()和globals()来分别查看局部作用域和全局作用域的名字，查看的结果都是字典格式。在全局作用域查看到的locals()的结果等于globals()</p>
<p><img src="https://pic3.zhimg.com/80/v2-7adbbd64e5216724e7933789054d0f1e_720w.jpg" alt="img"></p>
<p>Python支持函数的嵌套定义，在内嵌的函数内查找名字时，会优先查找自己局部作用域的名字，然后由内而外一层层查找外部嵌套函数定义的作用域，没有找到，则查找全局作用域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span> <span class="comment"># 函数名inner属于outer这一层作用域的名字</span></span><br><span class="line">        x=<span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner x:%s&#x27;</span> %x)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer x:%s&#x27;</span> %x)</span><br><span class="line"></span><br><span class="line">outer() </span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line">inner x:<span class="number">3</span></span><br><span class="line">outer x:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>在函数内，无论嵌套多少层，都可以查看到全局作用域的名字，若要在函数内修改全局名称空间中名字的值，当值为不可变类型时，则需要用到global关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x <span class="comment">#声明x为全局名称空间的名字</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#结果为2</span></span><br></pre></td></tr></table></figure>

<p>当实参的值为可变类型时，函数体内对该值的修改将直接反应到原值，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">nums</span>):</span></span><br><span class="line">    nums.append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">foo(num_list)</span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>对于嵌套多层的函数，使用nonlocal关键字可以将名字声明为来自外部嵌套函数定义的作用域（非全局）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">f1</span>():</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x=<span class="number">3</span></span><br><span class="line">    f2() <span class="comment">#调用f2(),修改f1作用域中名字x的值</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">#在f1作用域查看x</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>nonlocal x会从当前函数的外层函数开始一层层去查找名字x，若是一直到最外层函数都找不到，则会抛出异常。</p>
<p><img src="https://pic2.zhimg.com/80/v2-632ec1c5586b42b1b603268097360c35_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=45">https://www.bilibili.com/video/av73342471/?p=45www.bilibili.com/video/av73342471/?p=45</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>14-函数对象和闭包</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/14_%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一-函数对象"><a href="#一-函数对象" class="headerlink" title="一 函数对象"></a>一 函数对象</h2><p>函数对象指的是函数可以被当做’数据’来处理，具体可以分为四个方面的使用，我们如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-610f07da055d449976326f5e234075d9_720w.jpg" alt="img"></p>
<h2 id="1-1-函数可以被引用"><a href="#1-1-函数可以被引用" class="headerlink" title="1.1 函数可以被引用"></a>1.1 函数可以被引用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func=add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-函数可以作为容器类型的元素"><a href="#1-2-函数可以作为容器类型的元素" class="headerlink" title="1.2 函数可以作为容器类型的元素"></a>1.2 函数可以作为容器类型的元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic=&#123;<span class="string">&#x27;add&#x27;</span>:add,<span class="string">&#x27;max&#x27;</span>:<span class="built_in">max</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="string">&#x27;add&#x27;</span>: &lt;function add at <span class="number">0x100661e18</span>&gt;, <span class="string">&#x27;max&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">max</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">&#x27;add&#x27;</span>](<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-函数可以作为参数传入另外一个函数"><a href="#1-3-函数可以作为参数传入另外一个函数" class="headerlink" title="1.3 函数可以作为参数传入另外一个函数"></a>1.3 函数可以作为参数传入另外一个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x,y,func</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> func(x,y)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,add)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-函数的返回值可以是一个函数"><a href="#1-4-函数的返回值可以是一个函数" class="headerlink" title="1.4 函数的返回值可以是一个函数"></a>1.4 函数的返回值可以是一个函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span> </span><br><span class="line">     <span class="keyword">return</span> add </span><br><span class="line">func=bar() </span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-3a92b83b2c4ab23b0e237f071b6bcd7e_720w.jpg" alt="img"></p>
<h2 id="二-闭包函数"><a href="#二-闭包函数" class="headerlink" title="二 闭包函数"></a>二 闭包函数</h2><h2 id="2-1-闭与包"><a href="#2-1-闭与包" class="headerlink" title="2.1 闭与包"></a>2.1 闭与包</h2><p>基于函数对象的概念，可以将函数返回到任意位置去调用，但作用域的关系是在定义完函数时就已经被确定了的，与函数的调用位置无关。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    f2=f1() <span class="comment">#调用f1()返回函数f2</span></span><br><span class="line">    f2() <span class="comment">#需要按照函数定义时的作用关系去执行，与调用位置无关</span></span><br><span class="line"></span><br><span class="line">f3() <span class="comment">#结果为1</span></span><br></pre></td></tr></table></figure>

<p>也就是说函数被当做数据处理时，始终以自带的作用域为准。若内嵌函数包含对外部函数作用域（而非全局作用域）中变量的引用，那么该’内嵌函数’就是闭包函数，简称闭包(Closures)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">func=outer()</span><br><span class="line">func() <span class="comment"># 结果为2</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-f8b3a3ff993a95277b4ec5b1514cb103_720w.jpg" alt="img"></p>
<p>可以通过函数的<strong>closure</strong>属性，查看到闭包函数所包裹的外部变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x10212af78</span>: <span class="built_in">int</span> <span class="built_in">object</span> at <span class="number">0x10028cca0</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>“闭”代表函数是内部的，“包”代表函数外’包裹’着对外层作用域的引用。因而无论在何处调用闭包函数，使用的仍然是包裹在其外层的变量。</p>
<p><img src="https://pic4.zhimg.com/80/v2-c6e623206aa2c60c1036f30656ffbbaf_720w.jpg" alt="img"></p>
<h2 id="2-2-闭包的用途"><a href="#2-2-闭包的用途" class="headerlink" title="2.2 闭包的用途"></a>2.2 闭包的用途</h2><p>目前为止，我们得到了两种为函数体传值的方式，一种是直接将值以参数的形式传入，另外一种就是将值包给函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).text</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">        <span class="keyword">return</span> requests.get(url).text</span><br><span class="line">    <span class="keyword">return</span> get</span><br></pre></td></tr></table></figure>

<p>提示：requests模块是用来模拟浏览器向网站发送请求并将页面内容下载到本地，需要事先安装：pip3 install requests</p>
<p><img src="https://pic1.zhimg.com/80/v2-25aba810eb15ef9e3d59241516b05358_720w.jpg" alt="img"></p>
<p>对比两种方式，方式一在下载同一页面时需要重复传入url，而方式二只需要传一次值，就会得到一个包含指定url的闭包函数，以后调用该闭包函数无需再传url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一下载同一页面</span></span><br><span class="line">get(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二下载同一页面</span></span><br><span class="line">python=page(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">python()</span><br><span class="line">python()</span><br><span class="line">python()</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>闭包函数的这种特性有时又称为惰性计算。使用将值包给函数的方式，在接下来的装饰器中也将大有用处</p>
<p><img src="https://pic3.zhimg.com/80/v2-fbcde5e64980428d3864f2c389ce3f3e_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>函数对象：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=43">https://www.bilibili.com/video/av73342471?p=43www.bilibili.com/video/av73342471?p=43</a></p>
<p>闭包函数：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=46">https://www.bilibili.com/video/av73342471?p=46www.bilibili.com/video/av73342471?p=46</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>15-装饰器</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/15_%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-装饰器介绍"><a href="#一-装饰器介绍" class="headerlink" title="一 装饰器介绍"></a>一 装饰器介绍</h2><h2 id="1-1-为何要用装饰器"><a href="#1-1-为何要用装饰器" class="headerlink" title="1.1 为何要用装饰器"></a>1.1 为何要用装饰器</h2><p><img src="https://pic3.zhimg.com/80/v2-5f0bd90a1428a4b373be52c22f7d871a_720w.jpg" alt="img"></p>
<p>软件的设计应该遵循开放封闭原则，即对扩展是开放的，而对修改是封闭的。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着对象一旦设计完成，就可以独立完成其工作，而不要对其进行修改。</p>
<p>软件包含的所有功能的源代码以及调用方式，都应该避免修改，否则一旦改错，则极有可能产生连锁反应，最终导致程序崩溃，而对于上线后的软件，新需求或者变化又层出不穷，我们必须为程序提供扩展的可能性，这就用到了装饰器。</p>
<h2 id="1-2-什么是装饰器"><a href="#1-2-什么是装饰器" class="headerlink" title="1.2 什么是装饰器"></a>1.2 什么是装饰器</h2><p><img src="https://pic2.zhimg.com/80/v2-b43bfaa7c4abf2a53d535ce272d937b9_720w.jpg" alt="img"></p>
<p>’装饰’代指为被装饰对象添加新的功能，’器’代指器具&#x2F;工具，装饰器与被装饰的对象均可以是任意可调用对象。概括地讲，装饰器的作用就是在不修改被装饰对象源代码和调用方式的前提下为被装饰对象添加额外的功能。装饰器经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等应用场景，装饰器是解决这类问题的绝佳设计，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</p>
<p>提示：可调用对象有函数，方法或者类，此处我们单以本章主题函数为例，来介绍函数装饰器，并且被装饰的对象也是函数。</p>
<h2 id="二-装饰器的实现"><a href="#二-装饰器的实现" class="headerlink" title="二 装饰器的实现"></a>二 装饰器的实现</h2><p>函数装饰器分为：无参装饰器和有参装饰两种，二者的实现原理一样，都是’函数嵌套+闭包+函数对象’的组合使用的产物。</p>
<p><img src="https://pic2.zhimg.com/80/v2-21b3488ea792ad818b3eea81740f6945_720w.jpg" alt="img"></p>
<h2 id="2-1-无参装饰器的实现"><a href="#2-1-无参装饰器的实现" class="headerlink" title="2.1 无参装饰器的实现"></a>2.1 无参装饰器的实现</h2><p>如果想为下述函数添加统计其执行时间的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the index page’)</span></span><br><span class="line"><span class="string">    return 200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">index() #函数执行</span></span><br></pre></td></tr></table></figure>

<p>遵循不修改被装饰对象源代码的原则，我们想到的解决方法可能是这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_time=time.time()</span><br><span class="line">index() <span class="comment">#函数执行</span></span><br><span class="line">stop_time=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-2e3af8429a3c2606c4cfbedb0b196e89_720w.jpg" alt="img"></p>
<p>考虑到还有可能要统计其他函数的执行时间，于是我们将其做成一个单独的工具，函数体需要外部传入被装饰的函数从而进行调用，我们可以使用参数的形式传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">func</span>):</span> <span class="comment"># 通过参数接收外部的值</span></span><br><span class="line">    start_time=time.time()</span><br><span class="line">    res=func()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>但之后函数的调用方式都需要统一改成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wrapper(index)</span><br><span class="line">wrapper(其他函数)</span><br></pre></td></tr></table></figure>

<p>这便违反了不能修改被装饰对象调用方式的原则，于是我们换一种为函数体传值的方式，即将值包给函数，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span> <span class="comment"># 引用外部作用域的变量func</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res=func()</span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>这样我们便可以在不修改被装饰函数源代码和调用方式的前提下为其加上统计时间的功能，只不过需要事先执行一次timer将被装饰的函数传入，返回一个闭包函数wrapper重新赋值给变量名 &#x2F;函数名index，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index=timer(index)  <span class="comment">#得到index=wrapper，wrapper携带对外作用域的引用：func=原始的index</span></span><br><span class="line">index() <span class="comment"># 执行的是wrapper()，在wrapper的函数体内再执行最原始的index</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-6c1260375fb70d489df20b676c5cac51_720w.jpg" alt="img"></p>
<p>至此我们便实现了一个无参装饰器timer，可以在不修改被装饰对象index源代码和调用方式的前提下为其加上新功能。但我们忽略了若被装饰的函数是一个有参函数，便会抛出异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the home page&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line">home=timer(home)</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#抛出异常</span></span><br><span class="line">TypeError: wrapper() takes <span class="number">0</span> positional arguments but <span class="number">1</span> was given</span><br></pre></td></tr></table></figure>

<p>之所以会抛出异常，是因为home(‘egon’)调用的其实是wrapper(‘egon’)，而函数wrapper没有参数。wrapper函数接收的参数其实是给最原始的func用的，为了能满足被装饰函数参数的所有情况，便用上*args+**kwargs组合（见4.3小节）,于是修正装饰器timer如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-da8d9c6733f96b2a897c986e3515ffe3_720w.jpg" alt="img"></p>
<p>此时我们就可以用timer来装饰带参数或不带参数的函数了，但是为了简洁而优雅地使用装饰器，Python提供了专门的装饰器语法来取代index&#x3D;timer(index)的形式，需要在被装饰对象的正上方单独一行添加@timer,当解释器解释到@timer时就会调用timer函数，且把它正下方的函数名当做实参传入，然后将返回的结果重新赋值给原函数名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer </span><span class="comment"># index=timer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the index page&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"><span class="meta">@timer </span><span class="comment"># index=timer(home)</span>           <span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the home page’,name)</span></span><br></pre></td></tr></table></figure>

<p>如果我们有多个装饰器，可以叠加多个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>叠加多个装饰器也无特殊之处，上述代码语义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index=deco3(deco2(deco1(index)))</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-c6e67404ac0e4319ce3cd89af56ead5d_720w.jpg" alt="img"></p>
<h2 id="2-2-有参装饰器的实现"><a href="#2-2-有参装饰器的实现" class="headerlink" title="2.2 有参装饰器的实现"></a>2.2 有参装饰器的实现</h2><p>了解无参装饰器的实现原理后，我们可以再实现一个用来为被装饰对象添加认证功能的装饰器，实现的基本形式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        编写基于文件的认证,认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>如果我们想提供多种不同的认证方式以供选择，单从wrapper函数的实现角度改写如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> driver == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                编写基于文件的认证,认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">            <span class="keyword">elif</span> driver == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                编写基于mysql认证,认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-82fb584a53b2277048a09561b3e19b58_720w.jpg" alt="img"></p>
<p>函数wrapper需要一个driver参数，而函数deco与wrapper的参数都有其特定的功能，不能用来接受其他类别的参数，可以在deco的外部再包一层函数auth，用来专门接受额外的参数，这样便保证了在auth函数内无论多少层都可以引用到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">driver</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">        ……</span><br><span class="line">    <span class="keyword">return</span> deco</span><br></pre></td></tr></table></figure>

<p>此时我们就实现了一个有参装饰器，使用方式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先调用auth_type(driver=<span class="string">&#x27;file&#x27;</span>)，得到@deco，deco是一个闭包函数，</span><br><span class="line">包含了对外部作用域名字driver的引用，@deco的语法意义与无参装饰器一样</span><br><span class="line"><span class="meta">@auth(<span class="params">driver=<span class="string">&#x27;file&#x27;</span></span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span>     </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@auth(<span class="params">driver=<span class="string">&#x27;mysql&#x27;</span></span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="keyword">pass</span>  </span><br></pre></td></tr></table></figure>

<p>可以使用help(函数名)来查看函数的文档注释，本质就是查看函数的<strong>doc</strong>属性，但对于被装饰之后的函数，查看文档注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    home page function</span></span><br><span class="line"><span class="string">    :param name: str</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the home page&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(home))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Help on function wrapper in module __main__:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wrapper(*args, **kwargs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">None</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-3380e05c82d8501f9ac1c2681311a062_720w.jpg" alt="img"></p>
<p>在被装饰之后home&#x3D;wrapper,查看home.<strong>name</strong>也可以发现home的函数名确实是wrapper，想要保留原函数的文档和函数名属性，需要修正装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    wrapper.__doc__=func.__doc__</span><br><span class="line">    wrapper.__name__=func.__name__</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>按照上述方式来实现保留原函数属性过于麻烦，functools模块下提供一个装饰器wraps专门用来帮我们实现这件事，用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-091acff94160bf2b8258553158168f79_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>简单装饰器的实现</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=47">https://www.bilibili.com/video/av73342471?p=47www.bilibili.com/video/av73342471?p=47</a></p>
<p>装饰器修订</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=48">https://www.bilibili.com/video/av73342471?p=48www.bilibili.com/video/av73342471?p=48</a></p>
<p>wraps补充</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=49">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=49<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>19-面向过程和函数式</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/19_%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一-编程范式"><a href="#一-编程范式" class="headerlink" title="一 编程范式"></a>一 编程范式</h2><p> 很多初学者在了解了一门编程语言的基本语法和使用之后，面对一个’开发需求‘时仍然会觉得无从下手、没有思路&#x2F;套路，本节主题“编程范式”正是为了解决该问题，那到底什么是编程范式呢？</p>
<p>编程范式指的就是编程的套路，打个比方，如果把编程的过程比喻为练习武功，那编程范式指的就是武林中的各种流派，而在编程的世界里常见的流派有：面向过程、函数式、面向对象等，本节我们主要介绍前两者。</p>
<p> 在正式介绍前，我们需要强调：“功夫的流派没有高低之分，只有习武的人才有高低之分“，在编程世界里更是这样，各种编程范式在不同的场景下都各有优劣，谁好谁坏不能一概而论，下面就让我们来一一解读它们。</p>
<p><img src="https://pic3.zhimg.com/80/v2-320a4e510709df1dd29361212ca7617e_720w.jpg" alt="img"></p>
<h2 id="二-面向过程"><a href="#二-面向过程" class="headerlink" title="二 面向过程"></a>二 面向过程</h2><p> ”面向过程“核心是“过程”二字，“过程”指的是解决问题的步骤，即先干什么再干什么……，基于面向过程开发程序就好比在设计一条流水线，是一种机械式的思维方式，这正好契合计算机的运行原理：任何程序的执行最终都需要转换成cpu的指令流水按过程调度执行，即无论采用什么语言、无论依据何种编程范式设计出的程序，最终的执行都是过程式的。</p>
<p><img src="https://pic1.zhimg.com/80/v2-84ee41725a5dbbd4e8c6cbcf9c7a28f8_720w.jpg" alt="img"></p>
<p> 详细的，若程序一开始是要着手解决一个大的问题，按照过程式的思路就是把这个大的问题分解成很多个小问题或子过程去实现，然后依次调用即可，这极大地降低了程序的复杂度。举例如下：</p>
<p> 写一个数据远程备份程序，分三步：本地数据打包，上传至云服务器，检测备份文件可用性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一：基于本章所学，我们可以用函数去实现这一个个的步骤</span></span><br><span class="line"><span class="comment"># 1、本地数据打包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_backup</span>(<span class="params">folder</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找到备份目录: %s&quot;</span> %folder)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在备份...&#x27;</span>)</span><br><span class="line">    zip_file=<span class="string">&#x27;/tmp/backup_%s.zip&#x27;</span> %time.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;备份成功，备份文件为: %s&#x27;</span> %zip_file)</span><br><span class="line">    <span class="keyword">return</span> zip_file</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、上传至云服务器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cloud_upload</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nconnecting cloud storage center...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cloud storage connected&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;upload [%s] to cloud...&quot;</span> %file)</span><br><span class="line">    link=<span class="string">&#x27;https://www.xxx.com/bak/%s&#x27;</span> %os.path.basename(file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;close connection&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> link</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、检测备份文件可用性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_backup_check</span>(<span class="params">link</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n下载文件: %s , 验证文件是否无损...&quot;</span> %link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#二：依次调用</span></span><br><span class="line"><span class="comment"># 步骤一：本地数据打包</span></span><br><span class="line">zip_file = data_backup(<span class="string">r&quot;/Users/egon/欧美100G高清无码&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤二：上传至云服务器</span></span><br><span class="line">link=cloud_upload(zip_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤三：检测备份文件的可用性</span></span><br><span class="line">data_backup_check(link)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-d7abc4f23679ef40d74b5ab5a5d01e95_720w.jpg" alt="img"></p>
<p>面向过程总结：</p>
<p>1、优点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将复杂的问题流程化，进而简单化</span><br></pre></td></tr></table></figure>

<p>2、缺点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">程序的可扩展性极差，因为一套流水线或者流程就是用来解决一个问题，就好比生产汽水的流水线无法生产汽车一样，即便是能，也得是大改，而且改一个组件，与其相关的组件可能都需要修改，比如我们修改了cloud_upload的逻辑，那么依赖其结果才能正常执行的data_backup_check也需要修改，这就造成了连锁反应，而且这一问题会随着程序规模的增大而变得越发的糟糕。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cloud_upload</span>(<span class="params">file</span>):</span> <span class="comment"># 加上异常处理，在出现异常的情况下，没有link返回</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nconnecting cloud storage center...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cloud storage connected&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;upload [%s] to cloud...&quot;</span> %file)</span><br><span class="line">        link=<span class="string">&#x27;https://www.xxx.com/bak/%s&#x27;</span> %os.path.basename(file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;close connection&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> link</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;upload error&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;close connection.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_backup_check</span>(<span class="params">link</span>):</span> <span class="comment"># 加上对参数link的判断</span></span><br><span class="line">    <span class="keyword">if</span> link:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n下载文件: %s , 验证文件是否无损...&quot;</span> %link)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n链接不存在&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>3、应用场景</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">面向过程的程序设计一般用于那些功能一旦实现之后就很少需要改变的场景， 如果你只是写一些简单的脚本，去做一些一次性任务，用面向过程去实现是极好的，但如果你要处理的任务是复杂的，且需要不断迭代和维护， 那还是用面向对象最为方便。</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-7ef6c56d758201f1262fce11e4b52cc6_720w.jpg" alt="img"></p>
<h2 id="三-函数式"><a href="#三-函数式" class="headerlink" title="三 函数式"></a>三 函数式</h2><p>函数式编程并非用函数编程这么简单，而是将计算机的运算视为数学意义上的运算，比起面向过程，函数式更加注重的是执行结果而非执行的过程，代表语言有：Haskell、Erlang。而python并不是一门函数式编程语言，但是仍为我们提供了很多函数式编程好的特性，如lambda，map，reduce，filter</p>
<p><img src="https://pic1.zhimg.com/80/v2-fcd96db9b6524e583f4483121d7fe160_720w.jpg" alt="img"></p>
<h2 id="3-1-匿名函数与lambda"><a href="#3-1-匿名函数与lambda" class="headerlink" title="3.1 匿名函数与lambda"></a>3.1 匿名函数与lambda</h2><p> 对比使用def关键字创建的是有名字的函数，使用lambda关键字创建则是没有名字的函数，即匿名函数，语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数<span class="number">1</span>,参数<span class="number">2</span>,...: expression</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、定义</span></span><br><span class="line"><span class="keyword">lambda</span> x,y,z:x+y+z</span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、调用</span></span><br><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line">res=(<span class="keyword">lambda</span> x,y,z:x+y+z)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：</span></span><br><span class="line">func=<span class="keyword">lambda</span> x,y,z:x+y+z <span class="comment"># “匿名”的本质就是要没有名字，所以此处为匿名函数指定名字是没有意义的</span></span><br><span class="line">res=func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-51fa4a8780bba6ac0b31a882bedfd92d_720w.jpg" alt="img"></p>
<p>匿名函数与有名函数有相同的作用域，但是匿名意味着引用计数为0，使用一次就释放，所以匿名函数用于临时使用一次的场景，匿名函数通常与其他函数配合使用，我们以下述字典为例来介绍它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">salaries=&#123;</span><br><span class="line">    <span class="string">&#x27;siry&#x27;</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="string">&#x27;tom&#x27;</span>:<span class="number">7000</span>,</span><br><span class="line">    <span class="string">&#x27;lili&#x27;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&#x27;jack&#x27;</span>:<span class="number">2000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要想取得薪水的最大值和最小值，我们可以使用内置函数max和min（为了方便开发，python解释器已经为我们定义好了一系列常用的功能，称之为内置的函数，我们只需要拿来使用即可）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries)</span><br><span class="line"><span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries)</span><br><span class="line"><span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<p>内置max和min都支持迭代器协议，工作原理都是迭代字典，取得是字典的键，因而比较的是键的最大和最小值，而我们想要的是比较值的最大值与最小值，于是做出如下改动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数max会迭代字典salaries，每取出一个“人名”就会当做参数传给指定的匿名函数，然后将匿名函数的返回值当做比较依据，最终返回薪资最高的那个人的名字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k]) </span><br><span class="line"><span class="string">&#x27;lili&#x27;</span></span><br><span class="line"><span class="comment"># 原理同上</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k])</span><br><span class="line"><span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<p>同理，我们直接对字典进行排序，默认也是按照字典的键去排序的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(salaries)</span><br><span class="line">[<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;siry&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-73a826d95d6e8a03bf2db2c8e3bfd84e_720w.jpg" alt="img"></p>
<h2 id="3-2-map、reduce、filter"><a href="#3-2-map、reduce、filter" class="headerlink" title="3.2 map、reduce、filter"></a>3.2 map、reduce、filter</h2><p>函数map、reduce、filter都支持迭代器协议，用来处理可迭代对象，我们以一个可迭代对象array为例来介绍它们三个的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>要求一：对array的每个元素做平方处理，可以使用map函数</p>
<p>map函数可以接收两个参数，一个是函数，另外一个是可迭代对象，具体用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,array)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x1033f45f8</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>解析：map会依次迭代array，得到的值依次传给匿名函数（也可以是有名函数），而map函数得到的结果仍然是迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(res) <span class="comment">#使用list可以依次迭代res，取得的值作为列表元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-585046858a6b78be30ccd4a4b1ef2da3_720w.jpg" alt="img"></p>
<p>要求二：对array进行合并操作，比如求和运算，这就用到了reduce函数</p>
<p>reduce函数可以接收三个参数，一个是函数，第二个是可迭代对象，第三个是初始值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reduce在python2中是内置函数，在python3中则被集成到模块functools中，需要导入才能使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=reduce(<span class="keyword">lambda</span> x,y:x+y,array)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>1 没有初始值，reduce函数会先迭代一次array得到的值作为初始值，作为第一个值数传给x，然后继续迭代一次array得到的值作为第二个值传给y，运算的结果为3</p>
<p>2 将上一次reduce运算的结果作为第一个值传给x，然后迭代一次array得到的结果作为第二个值传给y，依次类推，知道迭代完array的所有元素，得到最终的结果15</p>
<p>也可以为reduce指定初始值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=reduce(<span class="keyword">lambda</span> x,y:x+y,array,<span class="number">100</span>) <span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="number">115</span></span><br></pre></td></tr></table></figure>

<p>要求三：对array进行过滤操作，这就用到了filter函数，比如过滤出大于3的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;<span class="number">3</span>,array)</span><br></pre></td></tr></table></figure>

<p>解析：filter函数会依次迭代array，得到的值依次传给匿名函数，如果匿名函数的返回值为真，则过滤出该元素，而filter函数得到的结果仍然是迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(res) </span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>提示：我们介绍map、filter、reduce只是为了带大家了解函数式编程的大致思想，在实际开发中，我们完全可以用列表生成式或者生成器表达式来实现三者的功能。</p>
<p><img src="https://pic3.zhimg.com/80/v2-8ce8d9f5f81621b10d67231fd1c60f86_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=55">https://www.bilibili.com/video/av73342471?p=55www.bilibili.com/video/av73342471?p=55</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=56">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=56<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>18-函数递归</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/18_%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h2 id="一-函数递归调用介绍"><a href="#一-函数递归调用介绍" class="headerlink" title="一 函数递归调用介绍"></a>一 函数递归调用介绍</h2><p><img src="https://pic2.zhimg.com/80/v2-41fbf2d09891b34e4150056188af9201_720w.jpg" alt="img"></p>
<p>函数不仅可以嵌套定义，还可以嵌套调用，即在调用一个函数的过程中，函数内部又调用另一个函数，而函数的递归调用指的是在调用一个函数的过程中又直接或间接地调用该函数本身</p>
<p><img src="https://pic3.zhimg.com/80/v2-3b052e2e8d0b3e8db1e7c7230478bd8a_720w.jpg" alt="img"></p>
<p>例如</p>
<p>在调用f1的过程中，又调用f1，这就是直接调用函数f1本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-e409210099ed20bf4b6a01fc4f1a7c9e_720w.jpg" alt="img"></p>
<p>在调用f1的过程中，又调用f2，而在调用f2的过程中又调用f1，这就是间接调用函数f1本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f2&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-3190338dfab02a5e59a1f6d099801667_720w.jpg" alt="img"></p>
<p>从上图可以看出，两种情况下的递归调用都是一个无限循环的过程，但在python对函数的递归调用的深度做了限制，因而并不会像大家所想的那样进入无限循环，会抛出异常，要避免出现这种情况，就必须让递归调用在满足某个特定条件下终止。</p>
<p>提示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 可以使用sys.getrecursionlimit()去查看递归深度，默认值为1000，虽然可以使用</span></span><br><span class="line">sys.setrecursionlimit()去设定该值，但仍受限于主机操作系统栈大小的限制</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. python不是一门函数式编程语言，无法对递归进行尾递归优化。</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-d949d426fb903f274b5fa4126516b9d8_720w.jpg" alt="img"></p>
<h2 id="二-回溯与递推"><a href="#二-回溯与递推" class="headerlink" title="二 回溯与递推"></a>二 回溯与递推</h2><p>下面我们用一个浅显的例子，为了让读者阐释递归的原理和使用：</p>
<p>例4.5</p>
<p>某公司四个员工坐在一起，问第四个人薪水，他说比第三个人多1000，问第三个人薪水，第他说比第二个人多1000，问第二个人薪水，他说比第一个人多1000，最后第一人说自己每月5000，请问第四个人的薪水是多少？</p>
<p>思路解析：</p>
<p>要知道第四个人的月薪，就必须知道第三个人的，第三个人的又取决于第二个人的，第二个人的又取决于第一个人的，而且每一个员工都比前一个多一千，数学表达式即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">salary(<span class="number">4</span>)=salary(<span class="number">3</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">3</span>)=salary(<span class="number">2</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">2</span>)=salary(<span class="number">1</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">1</span>)=<span class="number">5000</span></span><br><span class="line">总结为： </span><br><span class="line">salary(n)=salary(n-<span class="number">1</span>)+<span class="number">1000</span> (n&gt;<span class="number">1</span>) </span><br><span class="line">salary(<span class="number">1</span>)=<span class="number">5000</span> (n=<span class="number">1</span>) </span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-56aac40500c7f687bf181640f4c36eee_720w.jpg" alt="img"></p>
<p>很明显这是一个递归的过程，可以将该过程分为两个阶段：回溯和递推。</p>
<p> 在回溯阶段，要求第n个员工的薪水，需要回溯得到(n-1)个员工的薪水，以此类推，直到得到第一个员工的薪水，此时，salary(1)已知，因而不必再向前回溯了。然后进入递推阶段：从第一个员工的薪水可以推算出第二个员工的薪水(6000)，从第二个员工的薪水可以推算出第三个员工的薪水(7000)，以此类推，一直推算出第第四个员工的薪水(8000)为止，递归结束。需要注意的一点是，递归一定要有一个结束条件，这里n&#x3D;1就是结束条件。</p>
<p><img src="https://pic3.zhimg.com/80/v2-b8756ae5141d371f4594408e3df84e56_720w.jpg" alt="img"></p>
<p>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">salary</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5000</span></span><br><span class="line">    <span class="keyword">return</span> salary(n-<span class="number">1</span>)+<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">s=salary(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8000</span></span><br></pre></td></tr></table></figure>

<p>程序分析：</p>
<p>在未满足n==1的条件时，一直进行递归调用，即一直回溯，见图4.3的左半部分。而在满足n==1的条件时，终止递归调用，即结束回溯，从而进入递推阶段，依次推导直到得到最终的结果。</p>
<p>递归本质就是在做重复的事情，所以理论上递归可以解决的问题循环也都可以解决，只不过在某些情况下，使用递归会更容易实现，比如有一个嵌套多层的列表，要求打印出所有的元素，代码实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items=[[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>]]]]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(i,<span class="built_in">list</span>): <span class="comment">#满足未遍历完items以及if判断成立的条件时，一直进行递归调用</span></span><br><span class="line">            foo(i) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo(items) <span class="comment">#打印结果1 2 3 4 5 6 7</span></span><br></pre></td></tr></table></figure>

<p>使用递归，我们只需要分析出要重复执行的代码逻辑，然后提取进入下一次递归调用的条件或者说递归结束的条件即可，代码实现起来简洁清晰</p>
<p><img src="https://pic4.zhimg.com/80/v2-73c8b40fe24179104a712dcb49be1153_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=59">https://www.bilibili.com/video/av73342471?p=59www.bilibili.com/video/av73342471?p=59</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>16-迭代器</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/16_%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-迭代器介绍"><a href="#一-迭代器介绍" class="headerlink" title="一 迭代器介绍"></a>一 迭代器介绍</h2><p>迭代器即用来迭代取值的工具，而迭代是重复反馈过程的活动，其目的通常是为了逼近所需的目标或结果，每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值,单纯的重复并不是迭代</p>
<p><img src="https://pic4.zhimg.com/80/v2-565373773a847faa7a97a79b8851d2db_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>

<p>下述while循环才是一个迭代过程，不仅满足重复，而且以每次重新赋值后的index值作为下一次循环中新的索引进行取值，反复迭代，最终可以取尽列表中的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods=[<span class="string">&#x27;mac&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;acer&#x27;</span>,<span class="string">&#x27;dell&#x27;</span>,<span class="string">&#x27;sony&#x27;</span>]</span><br><span class="line"></span><br><span class="line">index=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(goods):</span><br><span class="line">    <span class="built_in">print</span>(goods[index])</span><br><span class="line">    index+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-70866f67008dbbd32b1db9a0122e5a85_720w.jpg" alt="img"></p>
<h2 id="1-1-可迭代对象"><a href="#1-1-可迭代对象" class="headerlink" title="1.1 可迭代对象"></a>1.1 可迭代对象</h2><p>通过索引的方式进行迭代取值，实现简单，但仅适用于序列类型：字符串，列表，元组。对于没有索引的字典、集合等非序列类型，必须找到一种不依赖索引来进行迭代取值的方式，这就用到了迭代器。</p>
<p>要想了解迭代器为何物，必须事先搞清楚一个很重要的概念：可迭代对象(Iterable)。从语法形式上讲，内置有__iter__方法的对象都是可迭代对象，字符串、列表、元组、字典、集合、打开的文件都是可迭代对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>&#125;.__iter__</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;.__iter__</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-2d426dd7229747e25b7342c4bba5be50_720w.jpg" alt="img"></p>
<h3 id="1-2-迭代器对象"><a href="#1-2-迭代器对象" class="headerlink" title="1.2 迭代器对象"></a>1.2 迭代器对象</h3><p>调用obj.<strong>iter</strong>()方法返回的结果就是一个迭代器对象(Iterator)。迭代器对象是内置有<strong>iter</strong>和<strong>next</strong>方法的对象，打开的文件本身就是一个迭代器对象，执行迭代器对象.<strong>iter</strong>()方法得到的仍然是迭代器本身，而执行迭代器.<strong>next</strong>()方法就会计算出迭代器中的下一个值。 迭代器是Python提供的一种统一的、不依赖于索引的迭代取值方式，只要存在多个“值”，无论序列类型还是非序列类型都可以按照迭代器的方式取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># 可迭代对象s</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i=<span class="built_in">iter</span>(s)  <span class="comment"># 本质就是在调用s.__iter__(),返回s的迭代器对象i，</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(i) <span class="comment"># 本质就是在调用i.__next__()</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(i)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(i)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(i)  <span class="comment">#抛出StopIteration的异常，代表无值可取，迭代结束</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-737e0d369eb76a990b772d9666e25a4f_720w.jpg" alt="img"></p>
<h2 id="二-for循环原理"><a href="#二-for循环原理" class="headerlink" title="二 for循环原理"></a>二 for循环原理</h2><p>有了迭代器后，我们便可以不依赖索引迭代取值了，使用while循环的实现方式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods=[<span class="string">&#x27;mac&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;acer&#x27;</span>,<span class="string">&#x27;dell&#x27;</span>,<span class="string">&#x27;sony&#x27;</span>]</span><br><span class="line">i=<span class="built_in">iter</span>(goods) <span class="comment">#每次都需要重新获取一个迭代器对象</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(i))</span><br><span class="line">    <span class="keyword">except</span> StopIteration: <span class="comment">#捕捉异常终止循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>for循环又称为迭代循环，in后可以跟任意可迭代对象，上述while循环可以简写为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods=[<span class="string">&#x27;mac&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;acer&#x27;</span>,<span class="string">&#x27;dell&#x27;</span>,<span class="string">&#x27;sony&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> goods:   </span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<p>for 循环在工作时，首先会调用可迭代对象goods内置的<strong>iter</strong>方法拿到一个迭代器对象，然后再调用该迭代器对象的<strong>next</strong>方法将取到的值赋给item,执行循环体完成一次循环，周而复始，直到捕捉StopIteration异常，结束迭代。</p>
<p><img src="https://pic2.zhimg.com/80/v2-c64b3c28a2b8977bfce7621078da63b9_720w.jpg" alt="img"></p>
<h2 id="三-迭代器的优缺点"><a href="#三-迭代器的优缺点" class="headerlink" title="三 迭代器的优缺点"></a>三 迭代器的优缺点</h2><p>基于索引的迭代取值，所有迭代的状态都保存在了索引中，而基于迭代器实现迭代的方式不再需要索引，所有迭代的状态就保存在迭代器中，然而这种处理方式优点与缺点并存：</p>
<h2 id="3-1-优点："><a href="#3-1-优点：" class="headerlink" title="3.1 优点："></a>3.1 优点：</h2><p>1、为序列和非序列类型提供了一种统一的迭代取值方式。</p>
<p>2、惰性计算：迭代器对象表示的是一个数据流，可以只在需要时才去调用<strong>next</strong>来计算出一个值，就迭代器本身来说，同一时刻在内存中只有一个值，因而可以存放无限大的数据流，而对于其他容器类型，如列表，需要把所有的元素都存放于内存中，受内存大小的限制，可以存放的值的个数是有限的。</p>
<p><img src="https://pic2.zhimg.com/80/v2-c91b05bd30f1abae45ec6867bb5e9625_720w.jpg" alt="img"></p>
<h2 id="3-2-缺点："><a href="#3-2-缺点：" class="headerlink" title="3.2 缺点："></a>3.2 缺点：</h2><p>1、除非取尽，否则无法获取迭代器的长度</p>
<p>2、只能取下一个值，不能回到开始，更像是‘一次性的’，迭代器产生后的唯一目标就是重复执行next方法直到值取尽，否则就会停留在某个位置，等待下一次调用next；若是要再次迭代同个对象，你只能重新调用iter方法去创建一个新的迭代器对象，如果有两个或者多个循环使用同一个迭代器，必然只会有一个循环能取到值。</p>
<p><img src="https://pic2.zhimg.com/80/v2-8e0f71376333332d0411bb2199131c6d_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=51">https://www.bilibili.com/video/av73342471?p=51www.bilibili.com/video/av73342471?p=51</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>17-生成器</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/17_%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-生成器与yield"><a href="#一-生成器与yield" class="headerlink" title="一 生成器与yield"></a>一 生成器与yield</h2><p><img src="https://pic2.zhimg.com/80/v2-2c92ed3ae0da1fd192339be9abc973a1_720w.jpg" alt="img"></p>
<p>若函数体包含yield关键字，再调用函数，并不会执行函数体代码，得到的返回值即生成器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_range</span>(<span class="params">start,stop,step=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;start...&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> start</span><br><span class="line"><span class="meta">... </span>        start+=step</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=my_range(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> my_range at <span class="number">0x104105678</span>&gt;</span><br></pre></td></tr></table></figure>

<p>生成器内置有__iter__和__next__方法，所以生成器本身就是一个迭代器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__iter__</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__iter__&#x27;</span> of generator <span class="built_in">object</span> at <span class="number">0x1037d2af0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__next__&#x27;</span> of generator <span class="built_in">object</span> at <span class="number">0x1037d2af0</span>&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-31590362f23201814f45879db5dd6a51_720w.jpg" alt="img"></p>
<p>因而我们可以用next(生成器)触发生成器所对应函数的执行，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g) <span class="comment"># 触发函数执行直到遇到yield则停止,将yield后的值返回，并在当前位置挂起函数</span></span><br><span class="line">start...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g) <span class="comment"># 再次调用next(g)，函数从上次暂停的位置继续执行，直到重新遇到yield...</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g) <span class="comment"># 周而复始...</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g) <span class="comment"># 触发函数执行没有遇到yield则无值返回，即取值完毕抛出异常结束迭代</span></span><br><span class="line">end...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-fa04ec0eaa5bd7bb8804908ad7b88369_720w.jpg" alt="img"></p>
<p>既然生成器对象属于迭代器，那么必然可以使用for循环迭代，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> countdown(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">countdown start</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">Done!</span><br></pre></td></tr></table></figure>

<p>有了yield关键字，我们就有了一种自定义迭代器的实现方式。yield可以用于返回值，但不同于return，函数一旦遇到return就结束了，而yield可以保存函数的运行状态挂起函数，用来返回多次值</p>
<p><img src="https://pic4.zhimg.com/80/v2-024f3ac36393f784226497828d53eebf_720w.jpg" alt="img"></p>
<h2 id="二-yield表达式应用"><a href="#二-yield表达式应用" class="headerlink" title="二 yield表达式应用"></a>二 yield表达式应用</h2><p>在函数内可以采用表达式形式的yield</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">eater</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Ready to eat&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>        food=<span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;get the food: %s, and start to eat&#x27;</span> %food)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以拿到函数的生成器对象持续为函数体send值，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=eater() <span class="comment"># 得到生成器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> eater at <span class="number">0x101b6e2b0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(e) <span class="comment"># 需要事先”初始化”一次，让函数挂起在food=yield，等待调用g.send()方法为其传值</span></span><br><span class="line">Ready to eat</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.send(<span class="string">&#x27;包子&#x27;</span>)</span><br><span class="line">get the food: 包子, <span class="keyword">and</span> start to eat</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.send(<span class="string">&#x27;鸡腿&#x27;</span>)</span><br><span class="line">get the food: 鸡腿, <span class="keyword">and</span> start to eat</span><br></pre></td></tr></table></figure>

<p>针对表达式形式的yield，生成器对象必须事先被初始化一次，让函数挂起在food&#x3D;yield的位置，等待调用g.send()方法为函数体传值，g.send(None)等同于next(g)。</p>
<p><img src="https://pic1.zhimg.com/80/v2-277c3fe7374520dba8973dea02474790_720w.jpg" alt="img"></p>
<p> 我们可以编写装饰器来完成为所有表达式形式yield对应生成器的初始化操作，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        g=func(*args,**kwargs)</span><br><span class="line">        <span class="built_in">next</span>(g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eater</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Ready to eat&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        food=<span class="keyword">yield</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get the food: %s, and start to eat&#x27;</span> %food)</span><br></pre></td></tr></table></figure>

<p>表达式形式的yield也可以用于返回多次值，即<code>变量名=yield 值</code>的形式，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">eater</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Ready to eat&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    food_list=[]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>        food=<span class="keyword">yield</span> food_list</span><br><span class="line"><span class="meta">... </span>        food_list.append(food)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=eater()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(e)</span><br><span class="line">Ready to eat</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.send(<span class="string">&#x27;蒸羊羔&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;蒸羊羔&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.send(<span class="string">&#x27;蒸熊掌&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;蒸羊羔&#x27;</span>, <span class="string">&#x27;蒸熊掌&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.send(<span class="string">&#x27;蒸鹿尾儿&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;蒸羊羔&#x27;</span>, <span class="string">&#x27;蒸熊掌&#x27;</span>, <span class="string">&#x27;蒸鹿尾儿&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="三-三元表达式、列表生成式、生成器表达式"><a href="#三-三元表达式、列表生成式、生成器表达式" class="headerlink" title="三 三元表达式、列表生成式、生成器表达式"></a>三 三元表达式、列表生成式、生成器表达式</h2><h2 id="3-1-三元表达式"><a href="#3-1-三元表达式" class="headerlink" title="3.1 三元表达式"></a>3.1 三元表达式</h2><p>三元表达式是python为我们提供的一种简化代码的解决方案，语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = 条件成立时返回的值 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 条件不成立时返回的值</span><br></pre></td></tr></table></figure>

<p>针对下述场景</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max2(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>用三元表达式可以一行解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">2</span></span><br><span class="line">res = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y <span class="comment"># 三元表达式</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-6b5e335f9c2baca1a9d076721c672b19_720w.jpg" alt="img"></p>
<h2 id="3-2-列表生成式"><a href="#3-2-列表生成式" class="headerlink" title="3.2 列表生成式"></a>3.2 列表生成式</h2><p>列表生成式是python为我们提供的一种简化代码的解决方案，用来快速生成列表，语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1 <span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2 <span class="keyword">if</span> condition2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN <span class="keyword">if</span> conditionN</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#类似于</span></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1:</span><br><span class="line">    <span class="keyword">if</span> condition1:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2:</span><br><span class="line">            <span class="keyword">if</span> condition2</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN:</span><br><span class="line">                    <span class="keyword">if</span> conditionN:</span><br><span class="line">                        res.append(expression)</span><br></pre></td></tr></table></figure>

<p>针对下述场景</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">egg_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    egg_list.append(<span class="string">&#x27;鸡蛋%s&#x27;</span> %i)</span><br></pre></td></tr></table></figure>

<p>用列表生成式可以一行解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">egg_list=[<span class="string">&#x27;鸡蛋%s&#x27;</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-d9640f4c3f1c13bbd78e7cf6de6dc316_720w.jpg" alt="img"></p>
<h2 id="3-3-生成器表达式"><a href="#3-3-生成器表达式" class="headerlink" title="3.3 生成器表达式"></a>3.3 生成器表达式</h2><p>创建一个生成器对象有两种方式，一种是调用带yield关键字的函数，另一种就是生成器表达式，与列表生成式的语法格式相同，只需要将[]换成()，即：</p>
<p><img src="https://pic3.zhimg.com/80/v2-70257d333a3e9a49704c10982ce48856_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">（expression <span class="keyword">for</span> item <span class="keyword">in</span> iterable <span class="keyword">if</span> condition）</span><br></pre></td></tr></table></figure>

<p>对比列表生成式返回的是一个列表，生成器表达式返回的是一个生成器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x101be0ba0</span>&gt;</span><br></pre></td></tr></table></figure>

<p>对比列表生成式，生成器表达式的优点自然是节省内存（一次只产生一个值在内存中）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g) <span class="comment">#抛出异常StopIteration</span></span><br></pre></td></tr></table></figure>

<p>如果我们要读取一个大文件的字节数，应该基于生成器表达式的方式完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums=(<span class="built_in">len</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    total_size=<span class="built_in">sum</span>(nums) <span class="comment"># 依次执行next(nums)，然后累加到一起得到结果=</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-f0a061871b663d857e13ada7c10b31ac_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=52">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=52<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=53">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=53<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=54">https://www.bilibili.com/video/av73342471?p=54www.bilibili.com/video/av73342471?p=54</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>23-面向对象编程</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/23_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一-对象的概念"><a href="#一-对象的概念" class="headerlink" title="一 对象的概念"></a>一 对象的概念</h2><p><img src="https://pic2.zhimg.com/80/v2-9e0fb874291cdb93dc680387fb4b6895_720w.jpg" alt="img"></p>
<p>”面向对象“的核心是“对象”二字，而对象的精髓在于“整合“，什么意思？</p>
<p><img src="https://pic3.zhimg.com/80/v2-35fa66297dc63ecf396e6cbdbdf55e82_720w.jpg" alt="img"></p>
<p>所有的程序都是由”数据”与“功能“组成，因而编写程序的本质就是定义出一系列的数据，然后定义出一系列的功能来对数据进行操作。在学习”对象“之前，程序中的数据与功能是分离开的，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据：name、age、sex</span></span><br><span class="line">name=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line">sex=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能：tell_info</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">name,age,sex</span>):</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s:%s:%s&gt;&#x27;</span> %(name,age,sex))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时若想执行查看个人信息的功能，需要同时拿来两样东西，一类是功能tell_info，另外一类则是多个数据name、age、sex，然后才能执行，非常麻烦</span></span><br><span class="line">tell_info(name,age,sex)</span><br></pre></td></tr></table></figure>

<p>在学习了“对象”之后，我们就有了一个容器，该容器可以盛放数据与功能，所以我们可以说：对象是把数据与功能整合到一起的产物，或者说”对象“就是一个盛放数据与功能的容器&#x2F;箱子&#x2F;盒子。</p>
<p>如果把”数据“比喻为”睫毛膏“、”眼影“、”唇彩“等化妆所需要的原材料；把”功能“比喻为眼线笔、眉笔等化妆所需要的工具，那么”对象“就是一个彩妆盒，彩妆盒可以把”原材料“与”工具“都装到一起</p>
<p><img src="https://pic2.zhimg.com/80/v2-0e2848da85da660b62cd804505d52095_720w.jpg" alt="img"></p>
<p>如果我们把”化妆“比喻为要执行的业务逻辑，此时只需要拿来一样东西即可，那就是彩妆盒，因为彩妆盒里整合了化妆所需的所有原材料与功能，这比起你分别拿来原材料与功能才能执行，要方便的多。</p>
<p><img src="https://pic2.zhimg.com/80/v2-4cb7055278382e36149f1ebc48d995e5_720w.jpg" alt="img"></p>
<p> 在了解了对象的基本概念之后，理解面向对象的编程方式就相对简单很多了，面向对象编程就是要造出一个个的对象，把原本分散开的相关数据与功能整合到一个个的对象里，这么做既方便使用，也可以提高程序的解耦合程度，进而提升了程序的可扩展性（需要强调的是，软件质量属性包含很多方面，面向对象解决的仅仅只是扩展性问题）</p>
<p><img src="https://pic1.zhimg.com/80/v2-be68cd9e27b83c937cf44dbe7a2cf56c_720w.jpg" alt="img"></p>
<h2 id="二-类与对象"><a href="#二-类与对象" class="headerlink" title="二 类与对象"></a>二 类与对象</h2><p>类即类别&#x2F;种类，是面向对象分析和设计的基石，如果多个对象有相似的数据与功能，那么该多个对象就属于同一种类。有了类的好处是：我们可以把同一类对象相同的数据与功能存放到类里，而无需每个对象都重复存一份，这样每个对象里只需存自己独有的数据即可，极大地节省了空间。所以，如果说对象是用来存放数据与功能的容器，那么类则是用来存放多个对象相同的数据与功能的容器。</p>
<p><img src="https://pic2.zhimg.com/80/v2-0b1c2138d316307c0c830aa1df3aa1e1_720w.jpg" alt="img"></p>
<p> 综上所述，虽然我们是先介绍对象后介绍类，但是需要强调的是：在程序中，必须要事先定义类，然后再调用类产生对象（调用类拿到的返回值就是对象）。产生对象的类与对象之间存在关联，这种关联指的是：对象可以访问到类中共有的数据与功能，所以类中的内容仍然是属于对象的，类只不过是一种节省空间、减少代码冗余的机制，面向对象编程最终的核心仍然是去使用对象。</p>
<p> 在了解了类与对象这两大核心概念之后，我们就可以来介绍一下面向对象编程啦。</p>
<p><img src="https://pic3.zhimg.com/80/v2-dad32bbb5927e33abfc0003c07c6edd2_720w.jpg" alt="img"></p>
<h2 id="三-面向对象编程"><a href="#三-面向对象编程" class="headerlink" title="三 面向对象编程"></a>三 面向对象编程</h2><h2 id="3-1-类的定义与实例化"><a href="#3-1-类的定义与实例化" class="headerlink" title="3.1 类的定义与实例化"></a>3.1 类的定义与实例化</h2><p>我们以开发一个清华大学的选课系统为例，来简单介绍基于面向对象的思想如何编写程序</p>
<p><img src="https://pic3.zhimg.com/80/v2-39114d379b38da06b6a6b9923573e30a_720w.jpg" alt="img"></p>
<p>面向对象的基本思路就是把程序中要用到的、相关联的数据与功能整合到对象里，然后再去使用，但程序中要用到的数据以及功能那么多，如何找到相关连的呢？我需要先提取选课系统里的角色：学生、老师、课程等，然后显而易见的是：学生有学生相关的数据于功能，老师有老师相关的数据与功能，我们单以学生为例，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 学生的数据有</span></span><br><span class="line">学校</span><br><span class="line">名字</span><br><span class="line">年龄</span><br><span class="line">性别</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生的功能有</span></span><br><span class="line">选课</span><br></pre></td></tr></table></figure>

<p>详细的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 学生1：</span></span><br><span class="line">    数据:</span><br><span class="line">        学校=清华大学</span><br><span class="line">        姓名=李建刚</span><br><span class="line">        性别=男</span><br><span class="line">        年龄=<span class="number">28</span></span><br><span class="line">    功能：</span><br><span class="line">        选课</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生2：</span></span><br><span class="line">    数据:</span><br><span class="line">        学校=清华大学</span><br><span class="line">        姓名=王大力</span><br><span class="line">        性别=女</span><br><span class="line">        年龄=<span class="number">18</span></span><br><span class="line">    功能：</span><br><span class="line">        选课</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生3：</span></span><br><span class="line">    数据:</span><br><span class="line">        学校=清华大学</span><br><span class="line">        姓名=牛嗷嗷</span><br><span class="line">        性别=男</span><br><span class="line">        年龄=<span class="number">38</span></span><br><span class="line">    功能：</span><br><span class="line">        选课</span><br></pre></td></tr></table></figure>

<p>我们可以总结出一个学生类，用来存放学生们相同的数据与功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 学生类</span></span><br><span class="line">    相同的特征:</span><br><span class="line">        学校=清华大学</span><br><span class="line">    相同的功能：</span><br><span class="line">        选课</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-953b7365b40efb7c36560df09c4ec93d_720w.jpg" alt="img"></p>
<p>基于上述分析的结果，我们接下来需要做的就是在程序中定义出类，然后调用类产生对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> <span class="comment"># 类的命名应该使用“驼峰体”</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span> <span class="comment"># 数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose</span>(<span class="params">self</span>):</span> <span class="comment"># 功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing a course&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p>类体最常见的是变量的定义和函数的定义，但其实类体可以包含任意Python代码，类体的代码在类定义阶段就会执行，因而会产生新的名称空间用来存放类中定义的名字，可以打印Student.__dict__来查看类这个容器内盛放的东西</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Student.__dict__)</span><br><span class="line">&#123;..., <span class="string">&#x27;school&#x27;</span>: <span class="string">&#x27;清华大学&#x27;</span>, <span class="string">&#x27;choose&#x27;</span>: &lt;function Student.choose at <span class="number">0x1018a2950</span>&gt;, ...&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-ba4f6b43742c2eb0d1d2be4395948ba4_720w.jpg" alt="img"></p>
<p>调用类的过程称为将类实例化，拿到的返回值就是程序中的对象，或称为一个实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1=Student() <span class="comment"># 每实例化一次Student类就得到一个学生对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu2=Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu3=Student()</span><br></pre></td></tr></table></figure>

<p>如此stu1、stu2、stu3全都一样了（只有类中共有的内容，而没有各自独有的数据），想在实例化的过程中就为三位学生定制各自独有的数据：姓名，性别，年龄，需要我们在类内部新增一个__init__方法,如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#该方法会在对象产生之后自动执行，专门为对象进行初始化操作，可以有任意代码，但一定不能返回非None的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing a course&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p>然后我们重新实例出三位学生</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1=Student(<span class="string">&#x27;李建刚&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">28</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu2=Student(<span class="string">&#x27;王大力&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu3=Student(<span class="string">&#x27;牛嗷嗷&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">38</span>)</span><br></pre></td></tr></table></figure>

<p>单拿stu1的产生过程来分析，调用类会先产生一个空对象stu1，然后将stu1连同调用类时括号内的参数一起传给Student.<strong>init</strong>(stu1,’李建刚’,’男’,28)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">    self.name = name  <span class="comment"># stu1.name = &#x27;李建刚&#x27;</span></span><br><span class="line">    self.sex = sex    <span class="comment"># stu1.sex = &#x27;男&#x27;</span></span><br><span class="line">    self.age = age    <span class="comment"># stu1.age = 28</span></span><br></pre></td></tr></table></figure>

<p>会产生对象的名称空间，同样可以用__dict__查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李建刚&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">28</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-83db32155675e830580cb17e6c767a4f_720w.jpg" alt="img"></p>
<p>至此，我们造出了三个对象与一个类，对象存放各自独有的数据，类中存放对象们共有的内容</p>
<p><img src="https://pic2.zhimg.com/80/v2-c3bb7aefce6ffee1029b1ae5dee72689_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-1c37ec375b8bcc6f734df307b13f978a_720w.jpg" alt="img"></p>
<p>存的目的是为了用，那么如何访问对象或者类中存放的内容呢？</p>
<p><img src="https://pic4.zhimg.com/80/v2-990cc37a6f39fc36193ba32a6a3c722f_720w.jpg" alt="img"></p>
<h2 id="3-2-属性访问"><a href="#3-2-属性访问" class="headerlink" title="3.2 属性访问"></a>3.2 属性访问</h2><h3 id="3-2-1-类属性与对象属性"><a href="#3-2-1-类属性与对象属性" class="headerlink" title="3.2.1 类属性与对象属性"></a>3.2.1 类属性与对象属性</h3><p><img src="https://pic4.zhimg.com/80/v2-ebbce58a25058d9ee08eba3272cba03f_720w.jpg" alt="img"></p>
<p>在类中定义的名字，都是类的属性，细说的话，类有两种属性：数据属性和函数属性，可以通过__dict__访问属性的值，比如Student.<strong>dict</strong>[‘school’]，但Python提供了专门的属性访问语法</p>
<p>插图：恶搞图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.school <span class="comment"># 访问数据属性，等同于Student.__dict__[&#x27;school&#x27;]</span></span><br><span class="line"><span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.choose <span class="comment"># 访问函数属性，等同于Student.__dict__[&#x27;choose&#x27;]</span></span><br><span class="line">&lt;function Student.choose at <span class="number">0x1018a2950</span>&gt;</span><br><span class="line"><span class="comment"># 除了查看属性外，我们还可以使用Student.attrib=value(修改或新增属性),用del Student.attrib删除属性。</span></span><br></pre></td></tr></table></figure>

<p>操作对象的属性也是一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1.name <span class="comment"># 查看，等同于obj1.__dict__[‘name&#x27;]</span></span><br><span class="line"><span class="string">&#x27;李建刚&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1.course=’python’ <span class="comment"># 新增，等同于obj1.__dict__[‘course&#x27;]=&#x27;python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu1.age=<span class="number">38</span> <span class="comment"># 修改，等同于obj1.__dict__[‘age&#x27;]=38</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> obj1.course <span class="comment"># 删除，等同于del obj1.__dict__[&#x27;course&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-1c37ec375b8bcc6f734df307b13f978a_720w.jpg" alt="img"></p>
<h3 id="3-2-2-属性查找顺序与绑定方法"><a href="#3-2-2-属性查找顺序与绑定方法" class="headerlink" title="3.2.2 属性查找顺序与绑定方法"></a>3.2.2 属性查找顺序与绑定方法</h3><p>对象的名称空间里只存放着对象独有的属性，而对象们相似的属性是存放于类中的。对象在访问属性时，会优先从对象本身的__dict__中查找，未找到，则去类的__dict__中查找</p>
<p><img src="https://pic4.zhimg.com/80/v2-990cc37a6f39fc36193ba32a6a3c722f_720w.jpg" alt="img"></p>
<p>1、类中定义的变量是类的数据属性，是共享给所有对象用的，指向相同的内存地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># id都一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student.school)) <span class="comment"># 4301108704</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1.school)) <span class="comment"># 4301108704</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2.school)) <span class="comment"># 4301108704</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu3.school)) <span class="comment"># 4301108704</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-b636757ed106dde009623bd44a59f95e_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-15142b4a30e324fec709b506e2ecc518_720w.jpg" alt="img"></p>
<p>2、类中定义的函数是类的函数属性，类可以使用，但必须遵循函数的参数规则，有几个参数需要传几个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Student.choose(stu1) <span class="comment"># 李建刚 is choosing a course</span></span><br><span class="line">Student.choose(stu2) <span class="comment"># 王大力 is choosing a course</span></span><br><span class="line">Student.choose(stu3) <span class="comment"># 牛嗷嗷 is choosing a course</span></span><br></pre></td></tr></table></figure>

<p>但其实类中定义的函数主要是给对象使用的，而且是绑定给对象的，虽然所有对象指向的都是相同的功能，但是绑定到不同的对象就是不同的绑定方法，内存地址各不相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student.choose)) <span class="comment"># 4335426280</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1.choose)) <span class="comment"># 4300433608</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2.choose)) <span class="comment"># 4300433608</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu3.choose)) <span class="comment"># 4300433608</span></span><br></pre></td></tr></table></figure>

<p>绑定到对象的方法特殊之处在于，绑定给谁就应该由谁来调用，谁来调用，就会将’谁’本身当做第一个参数自动传入（方法__init__也是一样的道理）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1.choose()  <span class="comment"># 等同于Student.choose(stu1)</span></span><br><span class="line">stu2.choose()  <span class="comment"># 等同于Student.choose(stu2)</span></span><br><span class="line">stu3.choose()  <span class="comment"># 等同于Student.choose(stu3)</span></span><br></pre></td></tr></table></figure>

<p>绑定到不同对象的choose技能，虽然都是选课，但李建刚选的课，不会选给王大力，这正是”绑定“二字的精髓所在。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意：绑定到对象方法的这种自动传值的特征，决定了在类中定义的函数都要默认写一个参数self，self可以是任意名字，但命名为self是约定俗成的。</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-e54a102e09cb18b8deebc1bfee58c0ed_720w.jpg" alt="img"></p>
<p>Python中一切皆为对象，且Python3中类与类型是一个概念，因而绑定方法我们早就接触过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类型list就是类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#实例化的到3个对象<span class="title">l1</span>,<span class="title">l2</span>,<span class="title">l3</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l1</span>=<span class="title">list</span>(<span class="params">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l2</span>=<span class="title">list</span>(<span class="params">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l3</span>=<span class="title">list</span>(<span class="params">[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#三个对象都有绑定方法<span class="title">append</span>,是相同的功能,但内存地址不同</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l1</span>.<span class="title">append</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">method</span> <span class="title">append</span> <span class="title">of</span> <span class="title">list</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x10b482b48</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l2</span>.<span class="title">append</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">method</span> <span class="title">append</span> <span class="title">of</span> <span class="title">list</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x10b482b88</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l3</span>.<span class="title">append</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">built</span>-<span class="title">in</span> <span class="title">method</span> <span class="title">append</span> <span class="title">of</span> <span class="title">list</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x10b482bc8</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#操作绑定方法<span class="title">l1</span>.<span class="title">append</span>(<span class="params"><span class="number">4</span></span>),就是在往<span class="title">l1</span>添加4,绝对不会将4添加到<span class="title">l2</span>或<span class="title">l3</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l1</span>.<span class="title">append</span>(<span class="params"><span class="number">4</span></span>) #等同于<span class="title">list</span>.<span class="title">append</span>(<span class="params">l1,<span class="number">4</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l1</span></span></span><br><span class="line"><span class="class">[1,2,3,4]</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l2</span></span></span><br><span class="line"><span class="class">[&#x27;<span class="title">a</span>&#x27;,&#x27;<span class="title">b</span>&#x27;,&#x27;<span class="title">c</span>&#x27;]</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">l3</span></span></span><br><span class="line"><span class="class">[&#x27;<span class="title">x</span>&#x27;,&#x27;<span class="title">y</span>&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-b636757ed106dde009623bd44a59f95e_720w.jpg" alt="img"></p>
<h3 id="3-3-3-小结"><a href="#3-3-3-小结" class="headerlink" title="3.3.3 小结"></a>3.3.3 小结</h3><p>在上述介绍类与对象的使用过程中，我们更多的是站在底层原理的角度去介绍类与对象之间的关联关系，如果只是站在使用的角度，我们无需考虑语法“对象.属性”中”属性“到底源自于哪里，只需要知道是通过对象获取到的就可以了，所以说，对象是一个高度整合的产物，有了对象，我们只需要使用”对象.xxx“的语法就可以得到跟这个对象相关的所有数据与功能，十分方便且解耦合程度极高。</p>
<p><img src="https://pic4.zhimg.com/80/v2-990cc37a6f39fc36193ba32a6a3c722f_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-b6a8d20895c9d6c58cdb2be667a03774_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=91">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=91<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>21-包</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/21_%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一-包介绍"><a href="#一-包介绍" class="headerlink" title="一 包介绍"></a>一 包介绍</h2><p>随着模块数目的增多，把所有模块不加区分地放到一起也是极不合理的，于是Python为我们提供了一种把模块组织到一起的方法，即创建一个包。包就是一个含有__init__.py文件的文件夹，文件夹内可以组织子模块或子包，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool/                <span class="comment">#顶级包</span></span><br><span class="line">├── __init__.py     </span><br><span class="line">├── futures          <span class="comment">#子包</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── process.py</span><br><span class="line">│   └── thread.py</span><br><span class="line">└── versions.py      <span class="comment">#子模块</span></span><br></pre></td></tr></table></figure>

<p>需要强调的是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模</span></span><br></pre></td></tr></table></figure>

<p>接下来我们就以包pool为例来介绍包的使用，包内各文件内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># process.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessPoolExecutor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,max_workers</span>):</span></span><br><span class="line">        self.max_workers=max_workers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ProcessPool submit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># thread.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max_workers</span>):</span></span><br><span class="line">        self.max_workers = max_workers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ThreadPool submit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># versions.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;check versions’)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># __init__.py文件内容均为空</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-5dd50856f36ac71d32e384a0c9cb514f_720w.jpg" alt="img"></p>
<h2 id="二-包的使用"><a href="#二-包的使用" class="headerlink" title="二 包的使用"></a>二 包的使用</h2><h2 id="2-1-导入包与-init-py"><a href="#2-1-导入包与-init-py" class="headerlink" title="2.1 导入包与__init__.py"></a>2.1 导入包与__init__.py</h2><p>包属于模块的一种，因而包以及包内的模块均是用来被导入使用的，而绝非被直接执行，首次导入包（如import pool）同样会做三件事：</p>
<p>1、执行包下的__init__.py文件</p>
<p>2、产生一个新的名称空间用于存放__init__.py执行过程中产生的名字</p>
<p>3、在当前执行文件所在的名称空间中得到一个名字pool，该名字指向__init__.py的名称空间，例如<a href="https://link.zhihu.com/?target=http://pool.xxx">http://pool.xxx</a>和pool.yyy中的xxx和yyy都是来自于pool下的__init__.py，也就是说导入包时并不会导入包下所有的子模块与子包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pool</span><br><span class="line"></span><br><span class="line">pool.versions.check() <span class="comment">#抛出异常AttributeError</span></span><br><span class="line">pool.futures.process.ProcessPoolExecutor(<span class="number">3</span>) <span class="comment">#抛出异常AttributeError</span></span><br></pre></td></tr></table></figure>

<p>pool.versions.check()要求pool下有名字versions，进而pool.versions下有名字check。pool.versions下已经有名字check了，所以问题出在pool下没有名字versions，这就需要在pool下的__init__.py中导入模块versions</p>
<p><img src="https://pic3.zhimg.com/80/v2-08c7810c490572e8aed0d3dccfb2eb26_720w.jpg" alt="img"></p>
<p><strong>强调</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>关于包相关的导入语句也分为<span class="keyword">import</span>和<span class="keyword">from</span> ... <span class="keyword">import</span> ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如<span class="keyword">import</span> 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="keyword">import</span>导入文件时，产生名称空间中的名字来源于文件，<span class="keyword">import</span> 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span><br></pre></td></tr></table></figure>

<h2 id="2-2-绝对导入与相对导入"><a href="#2-2-绝对导入与相对导入" class="headerlink" title="2.2 绝对导入与相对导入"></a>2.2 绝对导入与相对导入</h2><p>针对包内的模块之间互相导入，导入的方式有两种</p>
<p>1、绝对导入：以顶级包为起始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>

<p>2、相对导入：.代表当前文件所在的目录，..代表当前目录的上一级目录，依此类推</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>

<p>同理，针对pool.futures.process.ProcessPoolExecutor(3)，则需要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#操作pool下的__init__.py，保证pool.futures</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> futures <span class="comment">#或from pool import futures</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#操作futrues下的__init__.py，保证pool.futures.process</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> process <span class="comment">#或from pool.futures import process</span></span><br></pre></td></tr></table></figure>

<p>在包内使用相对导入还可以跨目录导入模块，比如thread.py中想引用versions.py的名字check</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>也能使用绝对导入，导入过程中同样会依次执行包下的__init__.py,只是基于<span class="keyword">import</span>导入的结果，使用时必须加上该前缀</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-0d72cc18ba9ff316c955509c82222653_720w.jpg" alt="img"></p>
<p>例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pool.futures <span class="comment">#拿到名字pool.futures指向futures下的__init__.py</span></span><br><span class="line"></span><br><span class="line">pool.futures.xxx <span class="comment">#要求futures下的__init__.py中必须有名字xxx</span></span><br></pre></td></tr></table></figure>

<p>例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pool.futures.thread <span class="comment">#拿到名字pool.futures.thread指向thread.py</span></span><br><span class="line"></span><br><span class="line">thread_pool=pool.futures.thread.ThreadPoolExecutor(<span class="number">3</span>)</span><br><span class="line">thread_pool.submit()</span><br></pre></td></tr></table></figure>

<p>相对导入只能用from module import symbol的形式,import ..versions语法是不对的，且symbol只能是一个明确的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> futures.process <span class="comment">#语法错误</span></span><br><span class="line"><span class="keyword">from</span> pool.futures <span class="keyword">import</span> process <span class="comment">#语法正确</span></span><br></pre></td></tr></table></figure>

<p>针对包内部模块之间的相互导入推荐使用相对导入，需要特别强调：</p>
<p>1、相对导入只能在包内部使用，用相对导入不同目录下的模块是非法的</p>
<p>2、无论是import还是from-import，但凡是在导入时带点的，点的左边必须是包,否则语法错误</p>
<p><img src="https://pic4.zhimg.com/80/v2-833bff5bca842734b92acebb8d524e03_720w.jpg" alt="img"></p>
<p>总结包的使用需要牢记三点<br>1、导包就是在导包下__init__.py文件<br>2、包内部的导入应该使用相对导入，相对导入也只能在包内部使用，而且…取上一级不能出包<br>3、<br>使用语句中的点代表的是访问属性<br>m.n.x —-&gt; 向m要n，向n要x<br>而导入语句中的点代表的是路径分隔符<br>import a.b.c –&gt; a&#x2F;b&#x2F;c，文件夹下a下有子文件夹b，文件夹b下有子文件或文件夹c<br>所以导入语句中点的左边必须是一个包</p>
<h2 id="2-3-from-包-import"><a href="#2-3-from-包-import" class="headerlink" title="2.3 from 包 import *"></a>2.3 from 包 import *</h2><p> 在使用包时同样支持from pool.futures import * ，毫无疑问<em>代表的是futures下__init__.py中所有的名字，通用是用变量__all__来控制</em>代表的意思</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#futures下的__init__.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;process&#x27;</span>,<span class="string">&#x27;thread&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p> 最后说明一点，包内部的目录结构通常是包的开发者为了方便自己管理和维护代码而创建的，这种目录结构对包的使用者往往是无用的，此时通过操作__init__.py可以“隐藏”包内部的目录结构，降低使用难度，比如想要让使用者直接使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pool</span><br><span class="line"></span><br><span class="line">pool.check()</span><br><span class="line">pool.ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">pool.ThreadPoolExecutor(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>需要操作pool下的__init__.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .versions <span class="keyword">import</span> check</span><br><span class="line"><span class="keyword">from</span> .futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> .futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-6c06f350e2f63e5e46e0fc59062dc6ac_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>包的定义：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=69">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=69<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>包的使用：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=70">https://www.bilibili.com/video/av73342471?p=70www.bilibili.com/video/av73342471?p=70</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>20-模块</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/20_%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="一-模块介绍"><a href="#一-模块介绍" class="headerlink" title="一 模块介绍"></a>一 模块介绍</h2><p>在Python中，一个py文件就是一个模块，文件名为xxx.py模块名则是xxx,导入模块可以引用模块中已经写好的功能。如果把开发程序比喻成制造一台电脑，编写模块就像是在制造电脑的零部件，准备好零部件后，剩下的工作就是按照逻辑把它们组装到一起。</p>
<p>将程序模块化会使得程序的组织结构清晰，维护起来更加方便。比起直接开发一个完整的程序，单独开发一个小的模块也会更加简单，并且程序中的模块与电脑中的零部件稍微不同的是：程序中的模块可以被重复使用。所以总结下来，使用模块既保证了代码的重用性，又增强了程序的结构性和可维护性。另外除了自定义模块外，我们还可以导入使用内置或第三方模块提供的现成功能，这种“拿来主义”极大地提高了程序员的开发效率。</p>
<h2 id="二-模块的使用"><a href="#二-模块的使用" class="headerlink" title="二 模块的使用"></a>二 模块的使用</h2><h2 id="2-1-import语句"><a href="#2-1-import语句" class="headerlink" title="2.1 import语句"></a>2.1 import语句</h2><p>有如下示范文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件名：foo.py</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>要想在另外一个py文件中引用foo.py中的功能，需要使用import foo，首次导入模块会做三件事：</p>
<p>1、执行源文件代码</p>
<p>2、产生一个新的名称空间用于存放源文件执行过程中产生的名字</p>
<p>3、在当前执行文件所在的名称空间中得到一个名字foo，该名字指向新创建的模块名称空间，若要引用模块名称空间中的名字，需要加上该前缀，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="comment">#导入模块foo</span></span><br><span class="line">a=foo.x <span class="comment">#引用模块foo中变量x的值赋值给当前名称空间中的名字a</span></span><br><span class="line">foo.get() <span class="comment">#调用模块foo的get函数</span></span><br><span class="line">foo.change() <span class="comment">#调用模块foo中的change函数</span></span><br><span class="line">obj=foo.Foo() <span class="comment">#使用模块foo的类Foo来实例化，进一步可以执行obj.func()</span></span><br></pre></td></tr></table></figure>

<p>加上foo.作为前缀就相当于指名道姓地说明要引用foo名称空间中的名字，所以肯定不会与当前执行文件所在名称空间中的名字相冲突，并且若当前执行文件的名称空间中存在x，执行foo.get()或foo.change()操作的都是源文件中的全局变量x。</p>
<p><img src="https://pic4.zhimg.com/80/v2-884e2868bde505c7fb7232f576bbcfdb_720w.jpg" alt="img"></p>
<p>需要强调一点是，第一次导入模块已经将其加载到内存空间了，之后的重复导入会直接引用内存中已存在的模块，不会重复执行文件，通过import sys，打印sys.modules的值可以看到内存中已经加载的模块名。</p>
<p>提示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、在Python中模块也属于第一类对象，可以进行赋值、以数据形式传递以及作为容器类型的元素等操作。</span></span><br><span class="line"><span class="comment">#2、模块名应该遵循小写形式，标准库从python2过渡到python3做出了很多这类调整，比如ConfigParser、Queue、SocketServer全更新为纯小写形式。</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-d0708c002191a57754895d0ed4d05262_720w.jpg" alt="img"></p>
<p>用import语句导入多个模块，可以写多行import语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1</span><br><span class="line"><span class="keyword">import</span> module2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">import</span> moduleN</span><br></pre></td></tr></table></figure>

<p>还可以在一行导入，用逗号分隔开不同的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1,module2,...,moduleN</span><br></pre></td></tr></table></figure>

<p>但其实第一种形式更为规范，可读性更强，推荐使用，而且我们导入的模块中可能包含有python内置的模块、第三方的模块、自定义的模块，为了便于明显地区分它们，我们通常在文件的开头导入模块，并且分类导入，一类模块的导入与另外一类的导入用空行隔开，不同类别的导入顺序如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. python内置模块</span></span><br><span class="line"><span class="comment">#2. 第三方模块</span></span><br><span class="line"><span class="comment">#3. 程序员自定义模块</span></span><br></pre></td></tr></table></figure>

<p> 当然，我们也可以在函数内导入模块，对比在文件开头导入模块属于全局作用域，在函数内导入的模块则属于局部的作用域。</p>
<p><img src="https://pic1.zhimg.com/80/v2-506cce5c2b597bfe50f9644086cb2258_720w.jpg" alt="img"></p>
<h2 id="2-2-from-import-语句"><a href="#2-2-from-import-语句" class="headerlink" title="2.2 from-import 语句"></a>2.2 from-import 语句</h2><p>from…import…与import语句基本一致，唯一不同的是：使用import foo导入模块后，引用模块中的名字都需要加上foo.作为前缀，而使用from foo import x,get,change,Foo则可以在当前执行文件中直接引用模块foo中的名字，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> x,get,change <span class="comment">#将模块foo中的x和get导入到当前名称空间</span></span><br><span class="line">a=x <span class="comment">#直接使用模块foo中的x赋值给a</span></span><br><span class="line">get() <span class="comment">#直接执行foo中的get函数</span></span><br><span class="line">change() <span class="comment">#即便是当前有重名的x，修改的仍然是源文件中的x</span></span><br></pre></td></tr></table></figure>

<p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p>
<p><img src="https://pic3.zhimg.com/80/v2-13b67a1601f0ad7ca5f461fb17a631ce_720w.jpg" alt="img"></p>
<p>另外from语句支持from foo import <em>语法，</em>代表将foo中所有的名字都导入到当前位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#把foo中所有的名字都导入到当前执行文件的名称空间中，在当前位置直接可以使用这些名字</span></span><br><span class="line"></span><br><span class="line">a=x</span><br><span class="line">get()</span><br><span class="line">change()</span><br><span class="line">obj=Foo()</span><br></pre></td></tr></table></figure>

<p>如果我们需要引用模块中的名字过多的话，可以采用上述的导入形式来达到节省代码量的效果，但是需要强调的一点是：只能在模块最顶层使用<em>的方式导入，在函数内则非法，并且</em>的方式会带来一种副作用，即我们无法搞清楚究竟从源文件中导入了哪些名字到当前位置，这极有可能与当前位置的名字产生冲突。模块的编写者可以在自己的文件中定义__all__变量用来控制*代表的意思</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;get&#x27;</span>] <span class="comment">#该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这样我们在另外一个文件中使用*导入时，就只能导入__all__定义的名字了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#此时的*只代表x和get</span></span><br><span class="line"></span><br><span class="line">x <span class="comment">#可用</span></span><br><span class="line">get() <span class="comment">#可用</span></span><br><span class="line">change() <span class="comment">#不可用</span></span><br><span class="line">Foo() <span class="comment">#不可用</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-a7d712d021543c75a8f4be75999cee1e_720w.jpg" alt="img"></p>
<h2 id="2-3-其他导入语法-as"><a href="#2-3-其他导入语法-as" class="headerlink" title="2.3 其他导入语法(as)"></a>2.3 其他导入语法(as)</h2><p>我们还可以在当前位置为导入的模块起一个别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">as</span> f <span class="comment">#为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</span></span><br><span class="line">f.x</span><br><span class="line">f.get()</span><br></pre></td></tr></table></figure>

<p>还可以为导入的一个名字起别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> get <span class="keyword">as</span> get_x</span><br><span class="line">get_x()</span><br></pre></td></tr></table></figure>

<p>通常在被导入的名字过长时采用起别名的方式来精简代码，另外为被导入的名字起别名可以很好地避免与当前名字发生冲突，还有很重要的一点就是：可以保持调用方式的一致性，例如我们有两个模块json和pickle同时实现了load方法，作用是从一个打开的文件中解析出结构化的数据，但解析的格式不同，可以用下述代码有选择性地加载不同的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> data_format == <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> json <span class="keyword">as</span> serialize <span class="comment">#如果数据格式是json，那么导入json模块并命名为serialize</span></span><br><span class="line"><span class="keyword">elif</span> data_format == <span class="string">&#x27;pickle&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> pickle <span class="keyword">as</span> serialize <span class="comment">#如果数据格式是pickle，那么导入pickle模块并命名为serialize</span></span><br><span class="line"></span><br><span class="line">data=serialize.load(fn) <span class="comment">#最终调用的方式是一致的</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-46fbc37fa93302dfacd0803f7d78715d_720w.jpg" alt="img"></p>
<h2 id="2-4-循环导入问题"><a href="#2-4-循环导入问题" class="headerlink" title="2.4 循环导入问题"></a>2.4 循环导入问题</h2><p><img src="https://pic1.zhimg.com/80/v2-415ea58d416900ea166573cb65543080_720w.jpg" alt="img"></p>
<p>循环导入问题指的是在一个模块加载&#x2F;导入的过程中导入另外一个模块，而在另外一个模块中又返回来导入第一个模块中的名字，由于第一个模块尚未加载完毕，所以引用失败、抛出异常，究其根源就是在python中，同一个模块只会在第一次导入时执行其内部代码，再次导入该模块时，即便是该模块尚未完全加载完毕也不会去重复执行内部代码</p>
<p><strong>我们以下述文件为例，来详细分析循环&#x2F;嵌套导入出现异常的原因以及解决的方案</strong></p>
<p>m1.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>m2.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>run.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br></pre></td></tr></table></figure>

<p><strong>测试一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、执行run.py会抛出异常</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/aa.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> m1</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">先执行run.py---&gt;执行<span class="keyword">import</span> m1，开始导入m1并运行其内部代码---&gt;打印内容<span class="string">&quot;正在导入m1&quot;</span></span><br><span class="line">---&gt;执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y 开始导入m2并运行其内部代码---&gt;打印内容“正在导入m2”---&gt;执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x,由于m1已经被导入过了，所以不会重新导入，所以直接去m1中拿x，然而x此时并没有存在于m1中，所以报错</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-991b007f2b930863c768b479e0f303eb_720w.jpg" alt="img"></p>
<p><strong>测试二</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、执行文件不等于导入文件，比如执行m1.py不等于导入了m1</span></span><br><span class="line">直接执行m1.py抛出异常</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">正在导入m1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;y&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">执行m1.py，打印“正在导入m1”，执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y ，导入m2进而执行m2.py内部代码---&gt;打印<span class="string">&quot;正在导入m2&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x，此时m1是第一次被导入，执行m1.py并不等于导入了m1，于是开始导入m1并执行其内部代码---&gt;打印<span class="string">&quot;正在导入m1&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> y，由于m1已经被导入过了，所以无需继续导入而直接问m2要y，然而y此时并没有存在于m2中所以报错</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-99a7e78c8f88bf5e443c03d3b94183ca_720w.jpg" alt="img"></p>
<p><strong>解决方案</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方案一：导入语句放到最后，保证在导入时，所有名字都已经加载过</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"><span class="built_in">print</span>(m1.x)</span><br><span class="line"><span class="built_in">print</span>(m1.y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案二：导入语句放到函数中，只有在调用函数时才会执行其内部代码</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">y = <span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line">m1.f1()</span><br></pre></td></tr></table></figure>

<p><strong>注意：循环导入问题大多数情况是因为程序设计失误导致，上述解决方案也只是在烂设计之上的无奈之举，在我们的程序中应该尽量避免出现循环&#x2F;嵌套导入，如果多个模块确实都需要共享某些数据，可以将共享的数据集中存放到某一个地方，然后进行导入</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-ba9d3d04398d89655c579c67cbe9f9f1_720w.jpg" alt="img"></p>
<h2 id="2-5-搜索模块的路径与优先级"><a href="#2-5-搜索模块的路径与优先级" class="headerlink" title="2.5 搜索模块的路径与优先级"></a>2.5 搜索模块的路径与优先级</h2><p>模块其实分为四个通用类别，分别是：</p>
<p>1、使用纯Python代码编写的py文件</p>
<p>2、包含一系列模块的包</p>
<p>3、使用C编写并链接到Python解释器中的内置模块</p>
<p>4、使用C或C++编译的扩展模块</p>
<p>在导入一个模块时，如果该模块已加载到内存中，则直接引用，否则会优先查找内置模块，然后按照从左到右的顺序依次检索sys.path中定义的路径，直到找模块对应的文件为止，否则抛出异常。sys.path也被称为模块的搜索路径，它是一个列表类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5&#x27;</span>,</span><br><span class="line">...,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages&#x27;</span></span><br></pre></td></tr></table></figure>

<p>列表中的每个元素其实都可以当作一个目录来看：在列表中会发现有.zip或.egg结尾的文件，二者是不同形式的压缩文件，事实上Python确实支持从一个压缩文件中导入模块，我们也只需要把它们都当成目录去看即可。</p>
<p><img src="https://pic3.zhimg.com/80/v2-b380918dbff3c80f06c3e47d778b913e_720w.jpg" alt="img"></p>
<p>sys.path中的第一个路径通常为空，代表执行文件所在的路径，所以在被导入模块与执行文件在同一目录下时肯定是可以正常导入的，而针对被导入的模块与执行文件在不同路径下的情况，为了确保模块对应的源文件仍可以被找到，需要将源文件foo.py所在的路径添加到sys.path中，假设foo.py所在的路径为&#x2F;pythoner&#x2F;projects&#x2F;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r&#x27;/pythoner/projects/&#x27;</span>) <span class="comment">#也可以使用sys.path.insert(……)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo <span class="comment">#无论foo.py在何处,我们都可以导入它了</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-区分py文件的两种用途"><a href="#2-6-区分py文件的两种用途" class="headerlink" title="2.6 区分py文件的两种用途"></a>2.6 区分py文件的两种用途</h2><p>一个Python文件有两种用途，一种被当主程序&#x2F;脚本执行，另一种被当模块导入，为了区别同一个文件的不同用途，每个py文件都内置了__name__变量，该变量在py文件被当做脚本执行时赋值为“__main__”,在py文件被当做模块导入时赋值为模块名</p>
<p><img src="https://pic4.zhimg.com/80/v2-d10449104b8d634196b784b31ab1f0e3_720w.jpg" alt="img"></p>
<p>作为模块foo.py的开发者，可以在文件末尾基于__name__在不同应用场景下值的不同来控制文件执行不同的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo.py被当做脚本执行时运行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    foo.py被当做模块导入时运行的代码</span><br></pre></td></tr></table></figure>

<p>通常我们会在if的子代码块中编写针对模块功能的测试代码，这样foo.py在被当做脚本运行时，就会执行测试代码，而被当做模块导入时则不用执行测试代码。</p>
<h2 id="2-7-编写一个规范的模块"><a href="#2-7-编写一个规范的模块" class="headerlink" title="2.7 编写一个规范的模块"></a>2.7 编写一个规范的模块</h2><p><img src="https://pic2.zhimg.com/80/v2-c8e40baa1976d8e26f75f0fa2ceb5cd5_720w.jpg" alt="img"></p>
<p>我们在编写py文件时，需要时刻提醒自己，该文件既是给自己用的，也有可能会被其他人使用，因而代码的可读性与易维护性显得十分重要，为此我们在编写一个模块时最好按照统一的规范去编写，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python #通常只在类unix环境有效,作用是可以使用脚本名来执行，而无需直接调用解释器。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;The module is used to...&quot;</span> <span class="comment">#模块的文档描述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span> <span class="comment">#定义全局变量,如果非必须,则最好使用局部变量,这样可以提高代码的易维护性,并且可以节省内存提高性能</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span> <span class="comment">#定义类,并写好类的注释</span></span><br><span class="line">    <span class="string">&#x27;Class Foo is used to...&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span> <span class="comment">#定义函数,并写好函数的注释</span></span><br><span class="line">    <span class="string">&#x27;Function test is used to…&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: <span class="comment">#主程序</span></span><br><span class="line">    test() <span class="comment">#在被当做脚本执行时,执行此处的代码</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-0aa2d5e22f88e3b8b8f4b6f2fdfb76b1_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>模块的使用之import</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=65">https://www.bilibili.com/video/av73342471?p=65www.bilibili.com/video/av73342471?p=65</a></p>
<p>模块的使用之from…import…</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=66">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=66<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>区分python文件的两种用途</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=67">https://www.bilibili.com/video/av73342471?p=67www.bilibili.com/video/av73342471?p=67</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>22-软件开发的目录规范</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/22_%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="软件开发目录规范"><a href="#软件开发目录规范" class="headerlink" title="软件开发目录规范"></a>软件开发目录规范</h2><p><img src="https://pic2.zhimg.com/80/v2-0cda8e5e376f38fcc2d7c5dac518c0b9_720w.jpg" alt="img"></p>
<p>强烈推荐配套资料：<a href="https://link.zhihu.com/?target=https://egonlin.com/book.html">egon新书来袭干货满满 - linhaifeng</a></p>
<p>为了提高程序的可读性与可维护性，我们应该为软件设计良好的目录结构，这与规范的编码风格同等重要。软件的目录规范并无硬性标准，只要清晰可读即可，假设你的软件名为foo，笔者推荐目录结构如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Foo/</span><br><span class="line">|-- core/</span><br><span class="line">|   |-- core.py</span><br><span class="line">|</span><br><span class="line">|-- api/</span><br><span class="line">|   |-- api.py</span><br><span class="line">|</span><br><span class="line">|-- db/</span><br><span class="line">|   |-- db_handle.py</span><br><span class="line">|</span><br><span class="line">|-- lib/</span><br><span class="line">|   |-- common.py</span><br><span class="line">|</span><br><span class="line">|-- conf/</span><br><span class="line">|   |-- settings.py</span><br><span class="line">|</span><br><span class="line">|-- run.py</span><br><span class="line">|-- setup.py</span><br><span class="line">|-- requirements.txt</span><br><span class="line">|-- README</span><br></pre></td></tr></table></figure>

<p>简要解释一下:</p>
<p> • core&#x2F;: 存放业务逻辑相关代码</p>
<p> • api&#x2F;: 存放接口文件，接口主要用于为业务逻辑提供数据操作。</p>
<p> • db&#x2F;: 存放操作数据库相关文件，主要用于与数据库交互</p>
<p> • lib&#x2F;: 存放程序中常用的自定义模块</p>
<p> • conf&#x2F;: 存放配置文件</p>
<p> • run.py: 程序的启动文件，一般放在项目的根目录下，因为在运行时会默认将运行文件所在的文件夹作为sys.path的第一个路径，这样就省去了处理环境变量的步骤</p>
<p> • setup.py: 安装、部署、打包的脚本。</p>
<p> • requirements.txt: 存放软件依赖的外部Python包列表。</p>
<p> • README: 项目说明文件。</p>
<p>除此之外，有一些方案给出了更加多的内容，比如LICENSE.txt,ChangeLog.txt文件等，主要是在项目需要开源时才会用到，请读者自行查阅。</p>
<p>关于README的内容，这个应该是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。它需要说明以下几个事项:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、软件定位，软件的基本功能；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、运行代码的方法: 安装环境、启动命令等；</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、简要的使用说明；</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、代码目录结构说明，更详细点可以说明软件的基本原理；</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、常见问题说明。</span><br></pre></td></tr></table></figure>

<p>关于setup.py和requirements.txt：</p>
<p><img src="https://pic3.zhimg.com/80/v2-6e2c485cb45f4d50dd8d98f091fe062a_720w.jpg" alt="img"></p>
<p>一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情，这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，一个项目一定要有一个安装部署工具，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。</p>
<p>requirements.txt文件的存在是为了方便开发者维护软件的依赖库。我们需要将开发过程中依赖库的信息添加进该文件中，避免在 setup.py安装依赖时漏掉软件包，同时也方便了使用者明确项目引用了哪些Python包。</p>
<p>这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;&#x3D;0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 pip install -r requirements.txt来把所有Python依赖库都装好了，具体格式参照<a href="https://link.zhihu.com/?target=https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=71">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=71<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>24-封装</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/24_%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="24、封装"><a href="#24、封装" class="headerlink" title="24、封装"></a>24、封装</h1><p><a href="https://www.zhihu.com/people/xiaoyuanqujing"><img src="https://pic3.zhimg.com/v2-c71f12bc82a46fa2c0ad1268aa249d7e_xs.jpg?source=172ae18b" alt="Egon林海峰"></a></p>
<p><a href="https://www.zhihu.com/people/xiaoyuanqujing">Egon林海峰</a></p>
<p>Egon的知识星球：<a href="https://egonlin.com/">https://egonlin.com</a></p>
<p>关注他</p>
<p>65 人赞同了该文章</p>
<p>目录：</p>
<ul>
<li><p>引入</p>
</li>
<li><p>隐藏属性</p>
</li>
<li><p>开放接口</p>
</li>
<li><ul>
<li>隐藏数据接口</li>
<li>隐藏函数接口</li>
</ul>
</li>
<li><p>property</p>
</li>
<li><p>视频链接</p>
</li>
</ul>
<p>强烈推荐配套资料：<a href="https://link.zhihu.com/?target=https://egonlin.com/book.html">egon新书来袭干货满满 - linhaifeng</a></p>
<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 面向对象编程有三大特性：封装、继承、多态，其中最重要的一个特性就是封装。封装指的就是把数据与功能都整合到一起，听起来是不是很熟悉，没错，我们之前所说的”整合“二字其实就是封装的通俗说法。除此之外，针对封装到对象或者类中的属性，我们还可以严格控制对它们的访问，分两步实现：隐藏与开放接口</p>
<p><img src="https://pic4.zhimg.com/80/v2-6a32e315fdeb5e7de1452455ee287933_720w.jpg" alt="img"></p>
<h2 id="二-隐藏属性"><a href="#二-隐藏属性" class="headerlink" title="二 隐藏属性"></a>二 隐藏属性</h2><p>Python的Class机制采用双下划线开头的方式将属性隐藏起来（设置成私有的），但其实这仅仅只是一种变形操作，类中所有双下滑线开头的属性都会在类定义阶段、检测语法时自动变成“_类名__属性名”的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    __N=<span class="number">0</span> <span class="comment"># 变形为_Foo__N</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span> <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__x=<span class="number">10</span> <span class="comment"># 变形为self._Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment"># 变形为_Foo__f1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__f1 run&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span>  <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__f1() <span class="comment">#变形为self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__N) <span class="comment"># 报错AttributeError:类Foo没有属性__N</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="built_in">print</span>(obbj.__x) <span class="comment"># 报错AttributeError:对象obj没有属性__x</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-805e04f3fd093604e61c6fa286d1658a_720w.jpg" alt="img"></p>
<p>这种变形需要注意的问题是：</p>
<p>1、在类外部无法直接访问双下滑线开头的属性，但知道了类名和属性名就可以拼出名字：_类名__属性，然后就可以访问了，如Foo._A__N，所以说这种操作并没有严格意义上地限制外部访问，仅仅只是一种语法意义上的变形。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__dict__</span><br><span class="line">mappingproxy(&#123;..., <span class="string">&#x27;_Foo__N&#x27;</span>: <span class="number">0</span>, ...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;_Foo__x&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo._Foo__N</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj._Foo__x</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj._Foo__N</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>2、在类内部是可以直接访问双下滑线开头的属性的，比如self.__f1()，因为在类定义阶段类内部双下滑线开头的属性统一发生了变形。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.f2()</span><br><span class="line">__f1 run</span><br></pre></td></tr></table></figure>

<p>3、变形操作只在类定义阶段发生一次,在类定义之后的赋值操作，不会变形。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__M=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__dict__</span><br><span class="line">mappingproxy(&#123;..., <span class="string">&#x27;__M&#x27;</span>: <span class="number">100</span>,...&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__M</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__y=<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;__y&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;_Foo__x&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__y</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-8832156adebe2467bff885f22728411f_720w.jpg" alt="img"></p>
<h2 id="三-开放接口"><a href="#三-开放接口" class="headerlink" title="三 开放接口"></a>三 开放接口</h2><p>定义属性就是为了使用，所以隐藏并不是目的</p>
<h2 id="3-1-隐藏数据属性"><a href="#3-1-隐藏数据属性" class="headerlink" title="3.1 隐藏数据属性"></a>3.1 隐藏数据属性</h2><p>将数据隐藏起来就限制了类外部对数据的直接操作，然后类内应该提供相应的接口来允许类外部间接地操作数据，接口之上可以附加额外的逻辑来对数据的操作进行严格地控制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span> <span class="comment">#将名字和年纪都隐藏起来</span></span><br><span class="line"><span class="meta">... </span>        self.__name=name</span><br><span class="line"><span class="meta">... </span>        self.__age=age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span> <span class="comment">#对外提供访问老师信息的接口</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;姓名:%s,年龄:%s&#x27;</span> %(self.__name,self.__age))</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span>(<span class="params">self,name,age</span>):</span> <span class="comment">#对外提供设置老师信息的接口，并附加类型检查的逻辑</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;姓名必须是字符串类型&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;年龄必须是整型&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        self.__name=name</span><br><span class="line"><span class="meta">... </span>        self.__age=age</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.set_info(‘LiLi<span class="string">&#x27;,&#x27;</span><span class="number">19</span><span class="string">&#x27;) # 年龄不为整型，抛出异常</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 11, in set_info</span></span><br><span class="line"><span class="string">TypeError: 年龄必须是整型</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; t.set_info(&#x27;</span>LiLi<span class="string">&#x27;,19) # 名字为字符串类型，年龄为整形，可以正常设置</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; t.tell_info() # 查看老师的信息</span></span><br><span class="line"><span class="string">姓名:LiLi,年龄:19</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-8ee414d1292c42e754f32fa3887c77eb_720w.jpg" alt="img"></p>
<h2 id="3-2-隐藏函数属性"><a href="#3-2-隐藏函数属性" class="headerlink" title="3.2 隐藏函数属性"></a>3.2 隐藏函数属性</h2><p>目的的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ATM</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__card</span>(<span class="params">self</span>):</span> <span class="comment">#插卡</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__auth</span>(<span class="params">self</span>):</span> <span class="comment">#身份认证</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__input</span>(<span class="params">self</span>):</span> <span class="comment">#输入金额</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__print_bill</span>(<span class="params">self</span>):</span> <span class="comment">#打印小票</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__take_money</span>(<span class="params">self</span>):</span> <span class="comment">#取钱</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self</span>):</span> <span class="comment">#取款功能</span></span><br><span class="line"><span class="meta">... </span>        self.__card()</span><br><span class="line"><span class="meta">... </span>        self.__auth()</span><br><span class="line"><span class="meta">... </span>        self.__<span class="built_in">input</span>()</span><br><span class="line"><span class="meta">... </span>        self.__print_bill()</span><br><span class="line"><span class="meta">... </span>        self.__take_money()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=ATM()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.withdraw()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-3a8cbf5b04077b88e85f6c075b37b94d_720w.jpg" alt="img"></p>
<p>总结隐藏属性与开放接口，本质就是为了明确地区分内外，类内部可以修改封装内的东西而不影响外部调用者的代码；而类外部只需拿到一个接口，只要接口名、参数不变，则无论设计者如何改变内部实现代码，使用者均无需改变代码。这就提供一个良好的合作基础，只要接口这个基础约定不变，则代码的修改不足为虑。</p>
<h2 id="四-property"><a href="#四-property" class="headerlink" title="四 property"></a>四 property</h2><p>BMI指数是用来衡量一个人的体重与身高对健康影响的一个指标，计算公式为</p>
<p><img src="https://pic3.zhimg.com/80/v2-43498605399e4a86e295e67ddd75962e_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">体质指数（BMI）=体重（kg）÷身高^<span class="number">2</span>（m）</span><br><span class="line">EX：70kg÷（<span class="number">1.75</span>×<span class="number">1.75</span>）=<span class="number">22.86</span></span><br></pre></td></tr></table></figure>

<p>身高或体重是不断变化的，因而每次想查看BMI值都需要通过计算才能得到，但很明显BMI听起来更像是一个特征而非功能，为此Python专门提供了一个装饰器property，可以将类中的函数“伪装成”对象的数据属性，对象在访问该特殊属性时会触发功能的执行，然后将返回值作为本次访问的结果，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,weight,height</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.weight=weight</span><br><span class="line"><span class="meta">... </span>        self.height=height</span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">property</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.weight / (self.height**<span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=People(<span class="string">&#x27;lili&#x27;</span>,<span class="number">75</span>,<span class="number">1.85</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.bmi <span class="comment">#触发方法bmi的执行，将obj自动传给self，执行后返回值作为本次引用的结果</span></span><br><span class="line"><span class="number">21.913805697589478</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-6efd0b831d73e828f7c644df0d8d996f_720w.jpg" alt="img"></p>
<p>使用property有效地保证了属性访问的一致性。另外property还提供设置和删除属性的功能，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,val</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.__NAME=val <span class="comment">#将属性隐藏起来</span></span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">property</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.__NAME</span><br><span class="line"><span class="meta">... </span>    @name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,value</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):  <span class="comment">#在设定值之前进行类型检查</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;%s must be str&#x27;</span> %value)</span><br><span class="line"><span class="meta">... </span>        self.__NAME=value <span class="comment">#通过类型检查后,将值value存放到真实的位置self.__NAME</span></span><br><span class="line"><span class="meta">... </span>    @name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> PermissionError(<span class="string">&#x27;Can not delete&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=Foo(<span class="string">&#x27;lili&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name</span><br><span class="line">lili</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name=<span class="string">&#x27;LiLi&#x27;</span> <span class="comment">#触发name.setter装饰器对应的函数name(f,’Egon&#x27;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name=<span class="number">123</span> <span class="comment">#触发name.setter对应的的函数name(f,123),抛出异常TypeError</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> f.name <span class="comment">#触发name.deleter对应的函数name(f),抛出异常PermissionError</span></span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>封装之隐藏属性</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=111">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=111<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>封装真正的意义</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=112">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=112<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>property</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=113">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=113<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>25-继承与派生</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/25_%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F/</url>
    <content><![CDATA[<h2 id="一-继承介绍"><a href="#一-继承介绍" class="headerlink" title="一 继承介绍"></a>一 继承介绍</h2><p><img src="https://pic3.zhimg.com/80/v2-e3ac39ed0476bd4ad372e51bea210c72_720w.jpg" alt="img"></p>
<p>继承是一种创建新类的方式，在Python中，新建的类可以继承一个或多个父类，新建的类可称为子类或派生类，父类又可称为基类或超类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>:</span> <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass2</span>:</span> <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span>(<span class="params">ParentClass1</span>):</span> <span class="comment">#单继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span>(<span class="params">ParentClass1,ParentClass2</span>):</span> <span class="comment">#多继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>通过类的内置属性__bases__可以查看类继承的所有父类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass2.__bases__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">ParentClass1</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">ParentClass2</span>&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-b61fc012e7821e82ed7a57bf446f238c_720w.jpg" alt="img"></p>
<p>在Python2中有经典类与新式类之分，没有显式地继承object类的类，以及该类的子类，都是经典类，显式地继承object的类，以及该类的子类，都是新式类。而在Python3中，即使没有显式地继承object，也会默认继承该类，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ParentClass1.__bases__</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> ‘<span class="title">object</span>&#x27;&gt;,)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">ParentClass2</span>.<span class="title">__bases__</span></span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br></pre></td></tr></table></figure>

<p>因而在Python3中统一都是新式类，关于经典类与新式类的区别，我们稍后讨论</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">提示：<span class="built_in">object</span>类提供了一些常用内置方法的实现，如用来在打印对象时返回字符串的内置方法__str__</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-7c9d1a5d2778f92a7327f8733dcb419a_720w.jpg" alt="img"></p>
<h2 id="二-继承与抽象"><a href="#二-继承与抽象" class="headerlink" title="二 继承与抽象"></a>二 继承与抽象</h2><p>要找出类与类之间的继承关系，需要先抽象，再继承。抽象即总结相似之处，总结对象之间的相似之处得到类，总结类与类之间的相似之处就可以得到父类，如下图所示</p>
<p><img src="https://pic1.zhimg.com/80/v2-10df80634dbda00e4dcb4113c2a75b3c_720w.jpg" alt="img"></p>
<p>基于抽象的结果，我们就找到了继承关系</p>
<p><img src="https://pic1.zhimg.com/80/v2-d22528a722bfbb1765b99d1d75d8f1a4_720w.jpg" alt="img"></p>
<p>基于上图我们可以看出类与类之间的继承指的是什么’是’什么的关系（比如人类，猪类，猴类都是动物类）。子类可以继承／遗传父类所有的属性，因而继承可以用来解决类与类之间的代码重用性问题。比如我们按照定义Student类的方式再定义一个Teacher类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span></span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-a17f608a24f6f7dfc8d72c1394a8057f_720w.jpg" alt="img"></p>
<p>类Teacher与Student之间存在重复的代码，老师与学生都是人类，所以我们可以得出如下继承关系，实现代码重用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">People</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is choosing a course&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p>Teacher类内并没有定义__init__方法，但是会从父类中找到__init__,因而仍然可以正常实例化，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>teacher1=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>teacher1.school,teacher1.name,teacher1.sex,teacher1.age</span><br><span class="line">(<span class="string">&#x27;清华大学&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-b933b0de334a6cad2b227b53f3ae170a_720w.jpg" alt="img"></p>
<h2 id="三-属性查找"><a href="#三-属性查找" class="headerlink" title="三 属性查找"></a>三 属性查找</h2><p>有了继承关系，对象在查找属性时，先从对象自己的__dict__中找，如果没有则去子类中找，然后再去父类中找……</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        self.f1()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Bar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.f2()</span><br><span class="line">Foo.f2</span><br><span class="line">Foo.f1</span><br></pre></td></tr></table></figure>

<p>b.f2()会在父类Foo中找到f2，先打印Foo.f2,然后执行到self.f1(),即b.f1()，仍会按照：对象本身-&gt;类Bar-&gt;父类Foo的顺序依次找下去，在类Bar中找到f1，因而打印结果为Foo.f1</p>
<p><img src="https://pic2.zhimg.com/80/v2-3b3119b9824bc80de6d1c7cb11219a6d_720w.jpg" alt="img"></p>
<p>父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment"># 变形为_Foo__fa</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>) </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        self.__f1() <span class="comment"># 变形为self._Foo__fa,因而只会调用自己所在的类中的方法</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment"># 变形为_Bar__f1</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Bar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.f2() <span class="comment">#在父类中找到f2方法，进而调用b._Foo__f1()方法，同样是在父类中找到该方法</span></span><br><span class="line">Foo.f2</span><br><span class="line">Foo.f1</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-80a1043173e8f968576b1efd57e857e9_720w.jpg" alt="img"></p>
<h2 id="四-继承的实现原理"><a href="#四-继承的实现原理" class="headerlink" title="四 继承的实现原理"></a>四 继承的实现原理</h2><h3 id="4-1-菱形问题"><a href="#4-1-菱形问题" class="headerlink" title="4.1 菱形问题"></a>4.1 菱形问题</h3><p> 大多数面向对象语言都不支持多继承，而在Python中，一个子类是可以同时继承多个父类的，这固然可以带来一个子类可以对多个不同父类加以重用的好处，但也有可能引发著名的 <a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Diamond_problem">Diamond problem</a>菱形问题(或称钻石问题，有时候也被称为“死亡钻石”)，菱形其实就是对下面这种继承结构的形象比喻</p>
<p><img src="https://pic4.zhimg.com/80/v2-7c6088a106bbf1fc46de0cca9c03a037_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A类在顶部，B类和C类分别位于其下方，D类在底部将两者连接在一起形成菱形。</span><br></pre></td></tr></table></figure>

<p>这种继承结构下导致的问题称之为菱形问题：如果A中有一个方法，B和&#x2F;或C都重写了该方法，而D没有重写它，那么D继承的是哪个版本的方法：B的还是C的？如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">B,C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = D()</span><br><span class="line">obj.test() <span class="comment"># 结果为：from B</span></span><br></pre></td></tr></table></figure>

<p>要想搞明白obj.test()是如何找到方法test的，需要了解python的继承实现原理</p>
<h3 id="4-2-继承原理"><a href="#4-2-继承原理" class="headerlink" title="4.2 继承原理"></a>4.2 继承原理</h3><p>python到底是如何实现继承的呢？ 对于你定义的每一个类，Python都会计算出一个方法解析顺序(MRO)列表，该MRO列表就是一个简单的所有基类的线性顺序列表，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>D.mro() <span class="comment"># 新式类内置了mro方法可以查看线性列表的内容，经典类没有该内置该方法</span></span><br><span class="line">[&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">D</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">B</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">C</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;]</span></span><br></pre></td></tr></table></figure>

<p>python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。 而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>子类会先于父类被检查</span><br><span class="line"><span class="number">2.</span>多个父类会根据它们在列表中的顺序被检查</span><br><span class="line"><span class="number">3.</span>如果对下一个类存在两个合法的选择,选择第一个父类</span><br></pre></td></tr></table></figure>

<p>所以obj.test()的查找顺序是，先从对象obj本身的属性里找方法test，没有找到，则参照属性查找的发起者(即obj)所处类D的MRO列表来依次检索，首先在类D中未找到，然后再B中找到方法test</p>
<p>ps：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>由对象发起的属性查找，会从对象自身的属性里检索，没有则会按照对象的类.mro()规定的顺序依次找下去，</span><br><span class="line"><span class="number">2.</span>由类发起的属性查找，会按照当前类.mro()规定的顺序依次找下去，</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-e75f3e5658ec15a3d5e964d32dce7d19_720w.jpg" alt="img"></p>
<h3 id="4-3-深度优先和广度优先"><a href="#4-3-深度优先和广度优先" class="headerlink" title="4.3 深度优先和广度优先"></a>4.3 深度优先和广度优先</h3><p>参照下述代码，多继承结构为非菱形结构，此时，会按照先找B这一条分支，然后再找C这一条分支，最后找D这一条分支的顺序直到找到我们想要的属性</p>
<p><img src="https://pic4.zhimg.com/80/v2-64faa1a6e825277233fe2bf40401b99b_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from E&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">E</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">F</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">B, C, D</span>):</span></span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;from A&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.mro())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.E&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.test() <span class="comment"># 结果为：from B</span></span><br><span class="line"><span class="comment"># 可依次注释上述类中的方法test来进行验证</span></span><br></pre></td></tr></table></figure>

<p>如果继承关系为菱形结构，那么经典类与新式类会有不同MRO，分别对应属性的两种查找方式：深度优先和广度优先</p>
<p><img src="https://pic4.zhimg.com/80/v2-e95d9f13b01af6eb7da3b5043442f697_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span>:</span> <span class="comment"># 在python2中，未继承object的类及其子类，都是经典类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from G&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from E&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">E</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">F</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">B,C,D</span>):</span></span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;from A&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.test() <span class="comment"># 如上图，查找顺序为:obj-&gt;A-&gt;B-&gt;E-&gt;G-&gt;C-&gt;F-&gt;D-&gt;object</span></span><br><span class="line"><span class="comment"># 可依次注释上述类中的方法test来进行验证,注意请在python2.x中进行测试</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-08eb8fd2226110ae845da74805cb98fb_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from G&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from E&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">E</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">F</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">B,C,D</span>):</span></span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;from A&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.test() <span class="comment"># 如上图，查找顺序为:obj-&gt;A-&gt;B-&gt;E-&gt;C-&gt;F-&gt;D-&gt;G-&gt;object</span></span><br><span class="line"><span class="comment"># 可依次注释上述类中的方法test来进行验证</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-Pyton-Mixins机制"><a href="#4-4-Pyton-Mixins机制" class="headerlink" title="4.4 Pyton Mixins机制"></a>4.4 Pyton Mixins机制</h3><p> 一个子类可以同时继承多个父类，这样的设计常被人诟病，一来它有可能导致可恶的菱形问题，二来在人的世界观里继承应该是个”is-a”关系。 比如轿车类之所以可以继承交通工具类，是因为基于人的世界观，我们可以说：轿车是一个(“is-a”)交通工具，而在人的世界观里，一个物品不可能是多种不同的东西，因此多重继承在人的世界观里是说不通的，它仅仅只是代码层面的逻辑。不过有没有这种情况，一个类的确是需要继承多个类呢？</p>
<p> 答案是有，我们还是拿交通工具来举例子:</p>
<p> 民航飞机、直升飞机、轿车都是一个（is-a）交通工具，前两者都有一个功能是飞行fly，但是轿车没有，所以如下所示我们把飞行功能放到交通工具这个父类中是不合理的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>:</span>  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CivilAircraft</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helicopter</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 汽车并不会飞，但按照上述继承关系，汽车也能飞了</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p> 但是如果民航飞机和直升机都各自写自己的飞行fly方法，又违背了代码尽可能重用的原则（如果以后飞行工具越来越多，那会重复代码将会越来越多）。</p>
<p> 怎么办？？？为了尽可能地重用代码，那就只好在定义出一个飞行器的类，然后让民航飞机和直升飞机同时继承交通工具以及飞行器两个父类，这样就出现了多重继承。这时又违背了继承必须是”is-a”关系。这个难题该怎么解决？</p>
<p> 不同的语言给出了不同的方法，让我们先来了解Java的处理方法。Java提供了接口interface功能，来实现多重继承：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象基类：交通工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口：飞行器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类：实现了飞行器接口的类，在该类中实现具体的fly方法，这样下面民航飞机与直升飞机在实现fly时直接重用即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyableImpl</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 民航飞机，继承自交通工具类，并实现了飞行器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CivilAircraft</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Flyable flyable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CivilAircraft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyable = <span class="keyword">new</span> FlyableImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyable.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直升飞机，继承自交通工具类，并实现了飞行器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helicopter</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Flyable flyable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Helicopter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyable = <span class="keyword">new</span> FlyableImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyable.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汽车，继承自交通工具类，</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们的飞机同时具有了交通工具及飞行器两种属性，而且我们不需要重写飞行器中的飞行方法，同时我们没有破坏单一继承的原则。飞机就是一种交通工具，可飞行的能力是飞机的属性，通过继承接口来获取。</p>
<p>回到主题，Python语言可没有接口功能，但Python提供了Mixins机制，简单来说Mixins机制指的是子类混合(mixin)不同类的功能，而这些类采用统一的命名规范（例如Mixin后缀），以此标识这些类只是用来混合功能的，并不是用来标识子类的从属”is-a”关系的，所以Mixins机制本质仍是多继承，但同样遵守”is-a”关系，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>:</span>  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CivilAircraft</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helicopter</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 汽车</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps: 采用某种规范（如命名规范）来解决具体的问题是python惯用的套路</span></span><br></pre></td></tr></table></figure>

<p>可以看到，上面的CivilAircraft、Helicopter类实现了多继承，不过它继承的第一个类我们起名为FlyableMixin，而不是Flyable，这个并不影响功能，但是会告诉后来读代码的人，这个类是一个Mixin类，表示混入(mix-in)，这种命名方式就是用来明确地告诉别人（python语言惯用的手法），这个类是作为功能添加到子类中，而不是作为父类，它的作用同Java中的接口。所以从含义上理解，CivilAircraft、Helicopter类都只是一个Vehicle，而不是一个飞行器。</p>
<p>使用Mixin类实现多重继承要非常小心</p>
<ul>
<li>首先它必须表示某一种功能，而不是某个物品，python 对于mixin类的命名方式一般以 Mixin, able, ible 为后缀</li>
<li>其次它必须责任单一，如果有多个功能，那就写多个Mixin类，一个类可以继承多个Mixin，为了保证遵循继承的“is-a”原则，只能继承一个标识其归属含义的父类</li>
<li>然后，它不依赖于子类的实现</li>
<li>最后，子类即便没有继承这个Mixin类，也照样可以工作，就是缺少了某个功能。（比如飞机照样可以载客，就是不能飞了）</li>
</ul>
<p> Mixins是从多个类中重用代码的好方法，但是需要付出相应的代价，我们定义的Minx类越多，子类的代码可读性就会越差，并且更恶心的是，在继承的层级变多时，代码阅读者在定位某一个方法到底在何处调用时会晕头转向，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Displayer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggerMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, message, filename=<span class="string">&#x27;logfile.txt&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">            fh.write(message)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().display(message) <span class="comment"># super的用法请参考下一小节</span></span><br><span class="line">        self.log(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>(<span class="params">LoggerMixin, Displayer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().log(message, filename=<span class="string">&#x27;subclasslog.txt&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = MySubClass()</span><br><span class="line">obj.display(<span class="string">&quot;This string will be shown and logged in subclasslog.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性查找的发起者是obj,所以会参照类MySubClass的MRO来检索属性</span></span><br><span class="line"><span class="comment">#[&lt;class &#x27;__main__.MySubClass&#x27;&gt;, &lt;class &#x27;__main__.LoggerMixin&#x27;&gt;, &lt;class &#x27;__main__.Displayer&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、首先会去对象obj的类MySubClass找方法display，没有则去类LoggerMixin中找，找到开始执行代码</span></span><br><span class="line"><span class="comment"># 2、执行LoggerMixin的第一行代码：执行super().display(message)，参照MySubClass.mro(),super会去下一个类即类Displayer中找，找到display，开始执行代码，打印消息&quot;This string will be shown and logged in subclasslog.txt&quot;</span></span><br><span class="line"><span class="comment"># 3、执行LoggerMixin的第二行代码：self.log(message)，self是对象obj，即obj.log(message)，属性查找的发起者为obj，所以会按照其类MySubClass.mro(),即MySubClass-&gt;LoggerMixin-&gt;Displayer-&gt;object的顺序查找，在MySubClass中找到方法log，开始执行super().log(message, filename=&#x27;subclasslog.txt&#x27;)，super会按照MySubClass.mro()查找下一个类，在类LoggerMixin中找到log方法开始执行，最终将日志写入文件subclasslog.txt</span></span><br></pre></td></tr></table></figure>

<p>ps：课外了解小知识</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java只允许接口的多重继承。接口本质上是抽象基类，具有所有抽象方法，没有数据成员。</span><br><span class="line">与java一样，python也有抽象类的概念但是同样需要借助模块实现，抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化，继承的子类必须实现抽象基类规定的方法，这样便可保证始终只有一个特定方法或属性的实现，并且不会产生歧义，因而也可以起到避免菱形问题的作用</span><br><span class="line"></span><br><span class="line">java的interface：https://www.cnblogs.com/linhaifeng/articles/<span class="number">7340153.</span>html<span class="comment">#_label6</span></span><br><span class="line">python的抽象基类：https://www.cnblogs.com/linhaifeng/articles/<span class="number">7340153.</span>html<span class="comment">#_label7</span></span><br></pre></td></tr></table></figure>

<h2 id="五-派生与方法重用"><a href="#五-派生与方法重用" class="headerlink" title="五 派生与方法重用"></a>五 派生与方法重用</h2><p>子类可以派生出自己新的属性，在进行属性查找时，子类中的属性名会优先于父类被查找，例如每个老师还有职称这一属性，我们就需要在Teacher类中定义该类自己的__init__覆盖父类的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line"><span class="meta">... </span>    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.sex=sex</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age,title</span>):</span> <span class="comment"># 派生</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.sex=sex</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;高级讲师&#x27;</span>) <span class="comment">#只会找自己类中的__init__，并不会自动调用父类的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.name,obj.sex,obj.age,obj.title</span><br><span class="line">(<span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;高级讲师&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>很明显子类Teacher中__init__内的前三行又是在写重复代码，若想在子类派生出的方法内重用父类的功能，有两种实现方式</p>
<p>方法一：“指名道姓”地调用某一个类的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age,title</span>):</span></span><br><span class="line"><span class="meta">... </span>        People.__init__(self,name,age,sex) <span class="comment">#调用的是函数,因而需要传入self</span></span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-d21ae6052b43be565f551fc1fcabe5c3_720w.jpg" alt="img"></p>
<p>方法二：super()</p>
<p>调用super()会得到一个特殊的对象，该对象专门用来引用父类的属性，且严格按照MRO规定的顺序向后查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age,title</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().__init__(name,age,sex) <span class="comment">#调用的是绑定方法，自动传入self</span></span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>提示：在Python2中super的使用需要完整地写成super(自己的类名,self) ,而在python3中可以简写为super()。</p>
<p><img src="https://pic3.zhimg.com/80/v2-908bf3b15e8a66ce55d1dc41155639ea_720w.jpg" alt="img"></p>
<p>这两种方式的区别是：方式一是跟继承没有关系的，而方式二的super()是依赖于继承的，并且即使没有直接继承关系，super()仍然会按照MRO继续往后查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#A没有继承B</span></span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().test()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro() <span class="comment"># 在代码层面A并不是B的子类，但从MRO列表来看，属性查找时，就是按照顺序C-&gt;A-&gt;B-&gt;object，B就相当于A的“父类”</span></span><br><span class="line">[&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">C</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">B</span>&#x27;&gt;,&lt;<span class="title">class</span> ‘<span class="title">object</span>&#x27;&gt;]</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>=<span class="title">C</span>()</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>.<span class="title">test</span>() # 属性查找的发起者是类<span class="title">C</span>的对象<span class="title">obj</span>，所以中途发生的属性查找都是参照<span class="title">C</span>.<span class="title">mro</span>()</span></span><br><span class="line"><span class="class"><span class="title">from</span> <span class="title">B</span></span></span><br></pre></td></tr></table></figure>

<p>obj.test()首先找到A下的test方法，执行super().test()会基于MRO列表(以C.mro()为准)当前所处的位置继续往后查找()，然后在B中找到了test方法并执行。</p>
<p>关于在子类中重用父类功能的这两种方式，使用任何一种都可以，但是在最新的代码中还是推荐使用super()</p>
<p><img src="https://pic1.zhimg.com/80/v2-ad4967402d87e33226ff03f96801f350_720w.jpg" alt="img"></p>
<h2 id="六-组合"><a href="#六-组合" class="headerlink" title="六 组合"></a>六 组合</h2><p>在一个类中以另外一个类的对象作为数据属性，称为类的组合。组合与继承都是用来解决代码的重用性问题。不同的是：继承是一种“是”的关系，比如老师是人、学生是人，当类之间有很多相同的之处，应该使用继承；而组合则是一种“有”的关系，比如老师有生日，老师有多门课程，当类之间有显著不同，并且较小的类是较大的类所需要的组件时，应该使用组合，如下示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,period,price</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.period=period</span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s %s %s&gt;&#x27;</span> %(self.name,self.period,self.price))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,year,mon,day</span>):</span></span><br><span class="line">        self.year=year</span><br><span class="line">        self.mon=mon</span><br><span class="line">        self.day=day</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_birth</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s-%s-%s&gt;&#x27;</span> %(self.year,self.mon,self.day))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"><span class="comment">#Teacher类基于继承来重用People的代码，基于组合来重用Date类和Course类的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span> <span class="comment">#老师是人</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex,age,title,year,mon,day</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age,sex)</span><br><span class="line">        self.birth=Date(year,mon,day) <span class="comment">#老师有生日</span></span><br><span class="line">        self.courses=[] <span class="comment">#老师有课程，可以在实例化后，往该列表中添加Course类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python=Course(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;3mons&#x27;</span>,<span class="number">3000.0</span>)</span><br><span class="line">linux=Course(<span class="string">&#x27;linux&#x27;</span>,<span class="string">&#x27;5mons&#x27;</span>,<span class="number">5000.0</span>)</span><br><span class="line">teacher1=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;博士生导师&#x27;</span>,<span class="number">1990</span>,<span class="number">3</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># teacher1有两门课程</span></span><br><span class="line">teacher1.courses.append(python)</span><br><span class="line">teacher1.courses.append(linux)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重用Date类的功能</span></span><br><span class="line">teacher1.birth.tell_birth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重用Course类的功能</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> teacher1.courses: </span><br><span class="line">    obj.tell_info()</span><br></pre></td></tr></table></figure>

<p>此时对象teacher1集对象独有的属性、Teacher类中的内容、Course类中的内容于一身（都可以访问到），是一个高度整合的产物</p>
<p><img src="https://pic2.zhimg.com/80/v2-80420dc0b3ecd5676e7b9d9f02f41aad_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>继承与派生</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=100">https://www.bilibili.com/video/av73342471?p=100www.bilibili.com/video/av73342471?p=100</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>26-绑定方法和非绑定方法</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/27_%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-绑定方法与非绑定方法"><a href="#一-绑定方法与非绑定方法" class="headerlink" title="一 绑定方法与非绑定方法"></a>一 绑定方法与非绑定方法</h2><p> 类中定义的函数分为两大类：绑定方法和非绑定方法</p>
<p> 其中绑定方法又分为绑定到对象的对象方法和绑定到类的类方法。</p>
<p> 在类中正常定义的函数默认是绑定到对象的，而为某个函数加上装饰器@classmethod后，该函数就绑定到了类。</p>
<p><img src="https://pic1.zhimg.com/80/v2-a60b7d2829a72bfcca8dd8d0c74fb028_720w.jpg" alt="img"></p>
<p> 我们在之前的章节中已经介绍过对象方法了，本节我们主要介绍类方法。类方法通常用来在__init__的基础上提供额外的初始化实例的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件settings.py的内容</span></span><br><span class="line">HOST=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法的应用</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span> <span class="comment"># 从配置文件中读取配置进行初始化</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MySQL.from_conf <span class="comment"># 绑定到类的方法</span></span><br><span class="line">&lt;bound method MySQL.from_conf of &lt;<span class="class"><span class="keyword">class</span> ‘<span class="title">__main__</span>.<span class="title">MySQL</span>&#x27;&gt;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">conn</span>=<span class="title">MySQL</span>.<span class="title">from_conf</span>() # 调用类方法，自动将类<span class="title">MySQL</span>当作第一个参数传给<span class="title">cls</span></span></span><br></pre></td></tr></table></figure>

<p>绑定到类的方法就是专门给类用的，但其实对象也可以调用，只不过自动传入的第一个参数仍然是类，也就是说这种调用是没有意义的，并且容易引起混淆，这也是Python的对象系统与其他面向对象语言对象系统的区别之一，比如Smalltalk和Ruby中，绑定到类的方法与绑定到对象的方法是严格区分开的。</p>
<p><img src="https://pic1.zhimg.com/80/v2-ac3327054b536d6be35c9664c05cf4ac_720w.jpg" alt="img"></p>
<h2 id="二-非绑定方法"><a href="#二-非绑定方法" class="headerlink" title="二 非绑定方法"></a>二 非绑定方法</h2><p>为类中某个函数加上装饰器@staticmethod后，该函数就变成了非绑定方法，也称为静态方法。该方法不与类或对象绑定，类与对象都可以来调用它，但它就是一个普通函数而已，因而没有自动传值那么一说</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.<span class="built_in">id</span>=self.create_id()</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span>():</span></span><br><span class="line">        <span class="keyword">return</span> uuid.uuid1()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn=MySQL(‘<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&#x27;,3306)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(conn.id) #100365f6-8ae0-11e7-a51e-0088653ea1ec</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 类或对象来调用create_id发现都是普通函数，而非绑定到谁的方法</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; MySQL.create_id</span></span><br><span class="line"><span class="string">&lt;function MySQL.create_id at 0x1025c16a8&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn.create_id</span></span><br><span class="line"><span class="string">&lt;function MySQL.create_id at 0x1025c16a8&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结绑定方法与非绑定方法的使用：若类中需要一个功能，该功能的实现代码中需要引用对象则将其定义成对象方法、需要引用类则将其定义成类方法、无需引用类或对象则将其定义成静态方法。</p>
<p><img src="https://pic4.zhimg.com/80/v2-66b5c969960fb21cd5d0f69ea6364e1f_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>28-反射和内置方法</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/28_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-反射"><a href="#一-反射" class="headerlink" title="一 反射"></a>一 反射</h2><p><img src="https://pic2.zhimg.com/80/v2-3d1d85b30d01da04b681d316cb460975_720w.jpg" alt="img"></p>
<p>python是动态语言，而反射(reflection)机制被视为动态语言的关键。</p>
<p>反射机制指的是在程序的运行状态中</p>
<p>对于任意一个类，都可以知道这个类的所有属性和方法；</p>
<p>对于任意一个对象，都能够调用他的任意方法和属性。</p>
<p>这种动态获取程序信息以及动态调用对象的功能称为反射机制。</p>
<p>在python中实现反射非常简单，在程序运行过程中，如果我们获取一个不知道存有何种属性的对象，若想操作其内部属性，可以先通过内置函数dir来获取任意一个类或者对象的属性列表，列表中全为字符串格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,gender</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span>        self.gender=gender</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(obj) <span class="comment"># 列表中查看到的属性全为字符串</span></span><br><span class="line">[......,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>接下来就是想办法通过字符串来操作对象的属性了，这就涉及到内置函数hasattr、getattr、setattr、delattr的使用了（Python中一切皆对象，类和对象都可以被这四个函数操作，用法一样）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,full_name</span>):</span></span><br><span class="line">        self.full_name =full_name</span><br><span class="line"></span><br><span class="line">t=Teacher(<span class="string">&#x27;Egon Lin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hasattr(object,&#x27;name&#x27;)</span></span><br><span class="line"><span class="built_in">hasattr</span>(t,<span class="string">&#x27;full_name&#x27;</span>) <span class="comment"># 按字符串&#x27;full_name&#x27;判断有无属性t.full_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getattr(object, &#x27;name&#x27;, default=None)</span></span><br><span class="line"><span class="built_in">getattr</span>(t,<span class="string">&#x27;full_name&#x27;</span>,<span class="literal">None</span>) <span class="comment"># 等同于t.full_name,不存在该属性则返回默认值None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setattr(x, &#x27;y&#x27;, v)</span></span><br><span class="line"><span class="built_in">setattr</span>(t,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>) <span class="comment"># 等同于t.age=18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delattr(x, &#x27;y&#x27;)</span></span><br><span class="line"><span class="built_in">delattr</span>(t,<span class="string">&#x27;age&#x27;</span>) <span class="comment"># 等同于del t.age</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-9bc82da339b0bf1fab4fa4c5da110592_720w.jpg" alt="img"></p>
<p>基于反射可以十分灵活地操作对象的属性，比如将用户交互的结果反射到具体的功能执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">FtpServer</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>            inp=<span class="built_in">input</span>(<span class="string">&#x27;input your cmd&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"><span class="meta">... </span>            cmd,file=inp.split()</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd): <span class="comment"># 根据用户输入的cmd，判断对象self有无对应的方法属性</span></span><br><span class="line"><span class="meta">... </span>                func=<span class="built_in">getattr</span>(self,cmd) <span class="comment"># 根据字符串cmd，获取对象self对应的方法属性</span></span><br><span class="line"><span class="meta">... </span>                func(file)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,file</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Downloading %s...&#x27;</span> %file)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self,file</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Uploading %s...&#x27;</span> %file)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server=FtpServer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.serve_forever()</span><br><span class="line"><span class="built_in">input</span> your cmd&gt;&gt;: get a.txt</span><br><span class="line">Downloading a.txt...</span><br><span class="line"><span class="built_in">input</span> your cmd&gt;&gt;: put a.txt</span><br><span class="line">Uploading a.txt...</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-97d87ec7c2fe74480aad298b224565a0_720w.jpg" alt="img"></p>
<h2 id="二-内置方法"><a href="#二-内置方法" class="headerlink" title="二 内置方法"></a>二 内置方法</h2><p>Python的Class机制内置了很多特殊的方法来帮助使用者高度定制自己的类，这些内置方法都是以双下划线开头和结尾的，会在满足某种条件时自动触发，我们以常用的__str__和__del__为例来简单介绍它们的使用。</p>
<p><img src="https://pic4.zhimg.com/80/v2-6e4601a804f239a1f7f9a2aa14d8879f_720w.jpg" alt="img"></p>
<p>__str__方法会在对象被打印时自动触发，print功能打印的就是它的返回值，我们通常基于方法来定制对象的打印信息，该方法必须返回字符串类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&#x27;&lt;Name:%s Age:%s&gt;&#x27;</span> %(self.name,self.age) <span class="comment">#返回类型必须是字符串</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=People(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(p) <span class="comment">#触发p.__str__()，拿到返回值后进行打印</span></span><br><span class="line">&lt;Name:lili Age:<span class="number">18</span>&gt;</span><br></pre></td></tr></table></figure>

<p>__del__会在对象被删除时自动触发。由于Python自带的垃圾回收机制会自动清理Python程序的资源，所以当一个对象只占用应用程序级资源时，完全没必要为对象定制__del__方法，但在产生一个对象的同时涉及到申请系统资源（比如系统打开的文件、网络连接等）的情况下，关于系统资源的回收，Python的垃圾回收机制便派不上用场了，需要我们为对象定制该方法，用来在对象被删除时自动触发回收系统资源的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ip,port</span>):</span></span><br><span class="line">        self.conn=connect(ip,port) <span class="comment"># 伪代码，发起网络连接，需要占用系统资源</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.conn.close() <span class="comment"># 关闭网络连接，回收系统资源</span></span><br><span class="line"></span><br><span class="line">obj=MySQL(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>) <span class="comment"># 在对象obj被删除时，自动触发obj.__del__()</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-d760c34985ac2f1797ea5c3e718e28be_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>26-多态与鸭子类型</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/26_%E5%A4%9A%E6%80%81%E6%80%A7%E4%B8%8E%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="多态与多态性"><a href="#多态与多态性" class="headerlink" title="多态与多态性"></a>多态与多态性</h2><p>多态指的是一类事物有多种形态，比如动物有多种形态：猫、狗、猪</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span> <span class="comment">#同一类事物:动物</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span> <span class="comment">#动物的形态之一:猫</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;喵喵喵&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span> <span class="comment">#动物的形态之二:狗</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span> <span class="comment">#动物的形态之三:猪</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化得到三个对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat=Cat()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog=Dog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pig=Pig()</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-422b662cd3ea9bc9566bccae2e2a6a5e_720w.jpg" alt="img"></p>
<p>多态性指的是可以在不用考虑对象具体类型的情况下而直接使用对象，这就需要在设计时，把对象的使用方法统一成一种：例如cat、dog、pig都是动物,但凡是动物肯定有talk方法，于是我们可以不用考虑它们三者的具体是什么类型的动物,而直接使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat.talk()</span><br><span class="line">喵喵喵</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog.talk()</span><br><span class="line">汪汪汪</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pig.talk()</span><br><span class="line">哼哼哼</span><br></pre></td></tr></table></figure>

<p>更进一步,我们可以定义一个统一的接口来使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">Talk</span>(<span class="params">animal</span>):</span></span><br><span class="line"><span class="meta">... </span>    animal.talk()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(cat)</span><br><span class="line">喵喵喵</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(dog)</span><br><span class="line">汪汪汪</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(pig)</span><br><span class="line">哼哼哼</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-382e86f07927121108888dea757b1a9a_720w.jpg" alt="img"></p>
<p>Python中一切皆对象，本身就支持多态性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们可以在不考虑三者类型的情况下直接使用统计三个对象的长度</span></span><br><span class="line">s.__len__()</span><br><span class="line">l.__len__()</span><br><span class="line">t.__len__()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python内置了一个统一的接口</span></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"><span class="built_in">len</span>(l)</span><br><span class="line"><span class="built_in">len</span>(t)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-3d3cdbecfc5d47a2ac2f3143e1abd205_720w.jpg" alt="img"></p>
<p>多态性的好处在于增强了程序的灵活性和可扩展性，比如通过继承Animal类创建了一个新的类，实例化得到的对象obj，可以使用相同的方式使用obj.talk()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Wolf</span>(<span class="params">Animal</span>):</span> <span class="comment">#动物的另外一种形态：狼</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;嗷...&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wolf=Wolf() <span class="comment"># 实例出一头狼</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wolf.talk() <span class="comment"># 使用者根本无需关心wolf是什么类型而调用talk</span></span><br><span class="line">嗷...</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-b091d792728d28043c60245f801b1d80_720w.jpg" alt="img"></p>
<p>综上我们得知，多态性的本质在于不同的类中定义有相同的方法名，这样我们就可以不考虑类而统一用一种方式去使用对象，可以通过在父类引入抽象类的概念来硬性限制子类必须有某些方法名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定metaclass属性将类设置为抽象类，抽象类本身只是用来约束子类的，不能被实例化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment"># 该装饰器限制子类必须定义有一个名为talk的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span> <span class="comment"># 抽象方法中无需实现具体的功能</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span> <span class="comment"># 但凡继承Animal的子类都必须遵循Animal规定的标准</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cat=Cat() <span class="comment"># 若子类中没有一个名为talk的方法则会抛出异常TypeError，无法实例化</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-9835c439fe40447cec2e8c0417181828_720w.jpg" alt="img"></p>
<p>但其实我们完全可以不依赖于继承，只需要制造出外观和行为相同对象，同样可以实现不考虑对象类型而使用对象，这正是Python崇尚的“鸭子类型”（duck typing）：“如果看起来像、叫声像而且走起路来像鸭子，那么它就是鸭子”。比起继承的方式，鸭子类型在某种程度上实现了程序的松耦合度，如下</p>
<p><img src="https://pic3.zhimg.com/80/v2-703589a4b0d56594a97612979289495e_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二者看起来都像文件,因而就可以当文件一样去用，然而它们并没有直接的关系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Txt</span>:</span> <span class="comment">#Txt类有两个与文件类型同名的方法，即read和write</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disk</span>:</span> <span class="comment">#Disk类也有两个与文件类型同名的方法：read和write</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-97aafbff736a6fa0f2cf945a4a47dca9_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=110">https://www.bilibili.com/video/av73342471?p=110www.bilibili.com/video/av73342471?p=110</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>29-元类</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/29_%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="一-元类介绍"><a href="#一-元类介绍" class="headerlink" title="一 元类介绍"></a>一 元类介绍</h2><p><img src="https://pic1.zhimg.com/80/v2-29cebafe1389b48a2773171be4c65688_720w.jpg" alt="img"></p>
<p>什么是元类呢？一切源自于一句话：python中一切皆为对象。让我们先定义一个类，然后逐步分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p>所有的对象都是实例化或者说调用类而得到的（调用类的过程称为类的实例化），比如对象t1是调用类StanfordTeacher得到的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment">#查看对象t1的类是&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果一切皆为对象，那么类StanfordTeacher本质也是一个对象，既然所有的对象都是调用类得到的，那么StanfordTeacher必然也是调用了一个类得到的，这个类称为元类</p>
<p><strong>于是我们可以推导出&#x3D;&#x3D;&#x3D;&gt;产生StanfordTeacher的过程一定发生了：StanfordTeacher&#x3D;元类(…)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(StanfordTeacher)) <span class="comment"># 结果为&lt;class &#x27;type&#x27;&gt;，证明是调用了type这个元类而产生的StanfordTeacher，即默认的元类为type</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-0c3a9e7d4555f2ad236b5b2952ccfc0f_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-51512d73604c757d83751fb2a486cad6_720w.jpg" alt="img"></p>
<h2 id="二-class关键字创建类的流程分析"><a href="#二-class关键字创建类的流程分析" class="headerlink" title="二 class关键字创建类的流程分析"></a>二 class关键字创建类的流程分析</h2><p>上文我们基于python中一切皆为对象的概念分析出：我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类（元类可以简称为类的类），内置的元类为type</p>
<p>class关键字在帮我们创建类时，必然帮我们调用了元类StanfordTeacher&#x3D;type(…)，那调用type时传入的参数是什么呢？必然是类的关键组成部分，一个类有三大组成部分，分别是</p>
<p>1、类名class_name&#x3D;’StanfordTeacher’</p>
<p>2、基类们class_bases&#x3D;(object,)</p>
<p>3、类的名称空间class_dic，类的名称空间是执行类体代码而得到的</p>
<p>调用type时会依次传入以上三个参数</p>
<p>综上，class关键字帮我们创建一个类应该细分为以下四个过程</p>
<p><img src="https://pic3.zhimg.com/80/v2-434226f9a3a7c464e73981972ab666a6_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-6b9d3aedf59408e10a7e6d17ce5f834a_720w.jpg" alt="img"></p>
<p>补充：exec的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#exec：三个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数一：包含一系列python代码的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数二：全局作用域（字典形式），如果不指定，默认为globals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数三：局部作用域（字典形式），如果不指定，默认为locals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以把exec命令的执行当成是一个函数的执行，会将执行期间产生的名字存放于局部名称空间中</span></span><br><span class="line">g=&#123;</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">l=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">global x,z</span></span><br><span class="line"><span class="string">x=100</span></span><br><span class="line"><span class="string">z=200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">m=300</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>,g,l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment">#&#123;&#x27;x&#x27;: 100, &#x27;y&#x27;: 2,&#x27;z&#x27;:200,......&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l) <span class="comment">#&#123;&#x27;m&#x27;: 300&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-1c83a64a4831811981dd5db4aafb3e6a_720w.jpg" alt="img"></p>
<h2 id="四-自定义元类控制类StanfordTeacher的创建"><a href="#四-自定义元类控制类StanfordTeacher的创建" class="headerlink" title="四 自定义元类控制类StanfordTeacher的创建"></a>四 自定义元类控制类StanfordTeacher的创建</h2><p>一个类没有声明自己的元类，默认他的元类就是type，除了使用内置元类type，我们也可以通过继承type来自定义元类，然后使用metaclass关键字参数为一个类指定元类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span> </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-8efe701a4c33c45178b9ecbf8de2c5de_720w.jpg" alt="img"></p>
<p>自定义元类可以控制类的产生过程，类的产生过程其实就是元类的调用过程,即StanfordTeacher&#x3D;Mymeta(‘StanfordTeacher’,(object),{…})，调用Mymeta会先产生一个空对象StanfordTeacher，然后连同调用Mymeta括号内的参数一同传给Mymeta下的__init__方法，完成初始化，于是我们可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span></span><br><span class="line">        <span class="comment"># print(self) #&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment"># print(class_bases) #(&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line">        <span class="comment"># print(class_dic) #&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;StanfordTeacher&#x27;, &#x27;school&#x27;: &#x27;Stanford&#x27;, &#x27;__init__&#x27;: &lt;function StanfordTeacher.__init__ at 0x102b95ae8&gt;, &#x27;say&#x27;: &lt;function StanfordTeacher.say at 0x10621c6a8&gt;&#125;</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases, class_dic)  <span class="comment"># 重用父类的功能</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> class_name.islower():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名%s请修改为驼峰体&#x27;</span> %class_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__doc__&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> class_dic <span class="keyword">or</span> <span class="built_in">len</span>(class_dic[<span class="string">&#x27;__doc__&#x27;</span>].strip(<span class="string">&#x27; \n&#x27;</span>)) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    类StanfordTeacher的文档注释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-cb7c3e73b09fc81f61bde2d076aeb605_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-ac1e4d27769d13173968120e88ae3954_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-583d76e816de5247564f2452a3050fc8_720w.jpg" alt="img"></p>
<h2 id="五-自定义元类控制类StanfordTeacher的调用"><a href="#五-自定义元类控制类StanfordTeacher的调用" class="headerlink" title="五 自定义元类控制类StanfordTeacher的调用"></a>五 自定义元类控制类StanfordTeacher的调用</h2><p>储备知识：<strong>call</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#1、要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法__call__方法，该方法会在调用对象时自动触发</span></span><br><span class="line"><span class="comment">#2、调用obj的返回值就是__call__方法的返回值</span></span><br><span class="line">res=obj(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">1</span>,y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-69fee84a115c801a72c489b2047a11ab_720w.jpg" alt="img"></p>
<p>由上例得知，调用一个对象，就是触发对象所在类中的__call__方法的执行，如果把StanfordTeacher也当做一个对象，那么在StanfordTeacher这个对象的类中也必然存在一个__call__方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self) <span class="comment">#&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(args) <span class="comment">#(&#x27;lili&#x27;, 18)</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs) <span class="comment">#&#123;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用StanfordTeacher就是在调用StanfordTeacher类中的__call__方法</span></span><br><span class="line"><span class="comment"># 然后将StanfordTeacher传给self,溢出的位置参数传给*，溢出的关键字参数传给**</span></span><br><span class="line"><span class="comment"># 调用StanfordTeacher的返回值就是调用__call__的返回值</span></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment">#123</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-138ef01613092ea6cdfce93a4fca1133_720w.jpg" alt="img"></p>
<p>默认地，调用t1&#x3D;StanfordTeacher(‘lili’,18)会做三件事</p>
<p>1、产生一个空对象obj</p>
<p>2、调用__init__方法初始化对象obj</p>
<p>3、返回初始化好的obj</p>
<p>对应着，StanfordTeacher类中的__call__方法也应该做这三件事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类OldoyTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;name&#x27;: &#x27;lili&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-9869aa7ace53374e834e800453c2b911_720w.jpg" alt="img"></p>
<p>上例的__call__相当于一个模板，我们可以在该基础上改写__call__的逻辑从而控制调用StanfordTeacher的过程，比如将StanfordTeacher的对象的所有属性都变成私有的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类StanfordTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在初始化之后，obj.__dict__里就有值了</span></span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;_StanfordTeacher__name&#x27;: &#x27;lili&#x27;, &#x27;_StanfordTeacher__age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p>上例中涉及到查找属性的问题，比如self.__new__，请看下一小节</p>
<p><img src="https://pic2.zhimg.com/80/v2-9869aa7ace53374e834e800453c2b911_720w.jpg" alt="img"></p>
<h2 id="五-再看属性查找"><a href="#五-再看属性查找" class="headerlink" title="五 再看属性查找"></a>五 再看属性查找</h2><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p>
<p><img src="https://pic4.zhimg.com/80/v2-771f5846e57b1e89944a7135f9f307a7_720w.jpg" alt="img"></p>
<p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的 一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象StanfordTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params">Foo,metaclass=Mymeta</span>):</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(StanfordTeacher.n) <span class="comment">#自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-1c83a64a4831811981dd5db4aafb3e6a_720w.jpg" alt="img"></p>
<p>于是属性查找应该分成两层，一层是对象层（基于c3算法的MRO）的查找，另外一个层则是类层（即元类层）的查找</p>
<p><img src="https://pic4.zhimg.com/80/v2-ddf630cf4b846c88c1ab506ba573521b_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找顺序：</span></span><br><span class="line"><span class="comment">#1、先对象层：StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object</span></span><br><span class="line"><span class="comment">#2、然后元类层：Mymeta-&gt;type</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-1f4193a21056eeed75d3e4f9bbba57b3_720w.jpg" alt="img"></p>
<p>依据上述总结，我们来分析下元类Mymeta中__call__里的self.__new__的查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> </span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__new__ <span class="keyword">is</span> <span class="built_in">object</span>.__new__) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params">Foo,metaclass=Mymeta</span>):</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;StanfordTeacher.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>) <span class="comment">#触发StanfordTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找</span></span><br></pre></td></tr></table></figure>

<p>总结，Mymeta下的__call__里的self.<strong>new__在StanfordTeacher、Foo、Bar里都没有找到__new__的情况下，会去找object里的__new__，而object下默认就有一个__new__，所以即便是之前的类均未实现__new</strong>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找__new__</p>
<p><img src="https://pic3.zhimg.com/80/v2-cdbf64639b7652fb9698c52e856ecbbe_720w.jpg" alt="img"></p>
<p><img src="https://pic2.zhimg.com/80/v2-0efee7de2aeae470f383336f50f4f2a1_720w.jpg" alt="img"></p>
<p>我们在元类的__call__中也可以用object.<strong>new</strong>(self)去造对象</p>
<p><img src="https://pic4.zhimg.com/80/v2-657eafd32c29b05e69777e671975d867_720w.jpg" alt="img"></p>
<p><strong>但我们还是推荐在__call__中使用self.<strong>new</strong>(self)去创造空对象，因为这种方式会检索三个类StanfordTeacher-&gt;Foo-&gt;Bar,而object.__new__则是直接跨过了他们三个</strong></p>
<p>最后说明一点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span> <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        obj=<span class="built_in">type</span>.__new__(cls,*args,**kwargs) <span class="comment"># 必须按照这种传值方式</span></span><br><span class="line">        <span class="built_in">print</span>(obj.__dict__)</span><br><span class="line">        <span class="comment"># return obj # 只有在返回值是type的对象时，才会触发下面的__init__</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run。。。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StanfordTeacher</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span> <span class="comment">#StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Mymeta)) <span class="comment">#&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 产生类StanfordTeacher的过程就是在调用Mymeta，而Mymeta也是type类的一个对象，那么Mymeta之所以可以调用，一定是在元类type中有一个__call__方法</span></span><br><span class="line"><span class="comment"># 该方法中同样需要做至少三件事：</span></span><br><span class="line"><span class="comment"># class type:</span></span><br><span class="line"><span class="comment">#     def __call__(self, *args, **kwargs): #self=&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="comment">#         obj=self.__new__(self,*args,**kwargs) # 产生Mymeta的一个对象</span></span><br><span class="line"><span class="comment">#         self.__init__(obj,*args,**kwargs) </span></span><br><span class="line"><span class="comment">#         return obj</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-f3490b306ed20138970d52fac3f665c0_720w.jpg" alt="img"></p>
<h2 id="六-作业"><a href="#六-作业" class="headerlink" title="六 作业"></a>六 作业</h2><p><img src="https://pic2.zhimg.com/80/v2-d550ffee42388e25d9edb134f3b958a1_720w.jpg" alt="img"></p>
<p><strong>1、在元类中控制把自定义类的数据属性都变成大写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls,name,bases,attrs</span>):</span></span><br><span class="line">        update_attrs=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(v) <span class="keyword">and</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;__&#x27;</span>):</span><br><span class="line">                update_attrs[k.upper()]=v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                update_attrs[k]=v</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,name,bases,update_attrs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span>(<span class="params">metaclass=Mymetaclass</span>):</span></span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Chinese.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;COUNTRY&#x27;: &#x27;China&#x27;, </span></span><br><span class="line"><span class="string"> &#x27;TAG&#x27;: &#x27;Legend of the Dragon&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;walk&#x27;: &lt;function Chinese.walk at 0x0000000001E7B950&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Chinese&#x27; objects&gt;,                                         </span></span><br><span class="line"><span class="string"> &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Chinese&#x27; objects&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、在元类中控制自定义的类无需__init__方法</strong></p>
<p> 1.元类帮其完成创建对象，以及初始化操作；</p>
<p>2.要求实例化时传参必须为关键字形式，否则抛出异常TypeError: must use keyword argument</p>
<p>3.key作为用户自定义类产生对象的属性，且所有属性变成大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="comment"># def __new__(cls,name,bases,attrs):</span></span><br><span class="line">    <span class="comment">#     update_attrs=&#123;&#125;</span></span><br><span class="line">    <span class="comment">#     for k,v in attrs.items():</span></span><br><span class="line">    <span class="comment">#         if not callable(v) and not k.startswith(&#x27;__&#x27;):</span></span><br><span class="line">    <span class="comment">#             update_attrs[k.upper()]=v</span></span><br><span class="line">    <span class="comment">#         else:</span></span><br><span class="line">    <span class="comment">#             update_attrs[k]=v</span></span><br><span class="line">    <span class="comment">#     return type.__new__(cls,name,bases,update_attrs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must use keyword argument for key function&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self) <span class="comment">#创建对象，self为类Foo</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            obj.__dict__[k.upper()]=v</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span>(<span class="params">metaclass=Mymetaclass</span>):</span></span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=Chinese(name=<span class="string">&#x27;lili&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.__dict__)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-63bab846a06315171b4c8ac24c4cf44c_720w.jpg" alt="img"></p>
<p><strong>3、在元类中控制自定义的类产生的对象相关的属性全部为隐藏属性</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span></span><br><span class="line">        <span class="comment">#控制类Foo的创建</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment">#控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span>,metaclass=Mymeta</span>):</span>  <span class="comment"># Foo=Mymeta(...)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)</span><br></pre></td></tr></table></figure>

<p><strong>4、基于元类实现单例模式</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-b80f116811d7948d519390f4021f160a_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#步骤五：基于元类实现单例模式</span></span><br><span class="line"><span class="comment"># 单例：即单个实例，指的是同一个类实例化多次的结果指向同一个对象，用于节省内存空间</span></span><br><span class="line"><span class="comment"># 如果我们从配置文件中读取配置来进行实例化，在配置相同的情况下，就没必要重复产生对象浪费内存了</span></span><br><span class="line"><span class="comment">#settings.py文件内容如下</span></span><br><span class="line">HOST=<span class="string">&#x27;1.1.1.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一:定义一个类方法实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    __instance=<span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance=cls(settings.HOST,settings.PORT)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">obj1=Mysql(<span class="string">&#x27;1.1.1.2&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">obj2=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">obj3=Mysql.singleton()</span><br><span class="line">obj4=Mysql.singleton()</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：定制元类实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,bases,dic</span>):</span> <span class="comment">#定义类Mysql时就触发</span></span><br><span class="line">        <span class="comment"># 事先先从配置文件中取配置来造一个Mysql的实例出来</span></span><br><span class="line">        self.__instance = <span class="built_in">object</span>.__new__(self)  <span class="comment"># 产生对象</span></span><br><span class="line">        self.__init__(self.__instance, settings.HOST, settings.PORT)  <span class="comment"># 初始化对象</span></span><br><span class="line">        <span class="comment"># 上述两步可以合成下面一步</span></span><br><span class="line">        <span class="comment"># self.__instance=super().__call__(*args,**kwargs)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name,bases,dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment">#Mysql(...)时触发</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs: <span class="comment"># args或kwargs内有值</span></span><br><span class="line">            obj=<span class="built_in">object</span>.__new__(self)</span><br><span class="line">            self.__init__(obj,*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>(<span class="params">metaclass=Mymeta</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line">obj1=Mysql() <span class="comment"># 没有传值则默认从配置文件中读配置来实例化，所有的实例应该指向一个内存地址</span></span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3)</span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三:定义一个装饰器实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span> <span class="comment">#cls=Mysql</span></span><br><span class="line">    _instance=cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs:</span><br><span class="line">            obj=cls(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> _instance</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton </span><span class="comment"># Mysql=singleton(Mysql)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line">obj5=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3308</span>)</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-9751369a2d4179f20d716d81f5cbbd19_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73346821?p=1">python快速入门补充_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73346821?p=1
  </a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>30-异常处理</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/30_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一-什么是异常"><a href="#一-什么是异常" class="headerlink" title="一 什么是异常"></a>一 什么是异常</h2><p>异常是程序发生错误的信号。程序一旦出现错误，便会产生一个异常，若程序中没有处理它，就会抛出该异常，程序的运行也随之终止。在Python中,错误触发的异常如下</p>
<p><img src="https://pic3.zhimg.com/80/v2-4653ca6dbe955793d1e4ed1fb750ce86_720w.jpg" alt="img"></p>
<p>而错误分成两种，一种是语法上的错误SyntaxError，这种错误应该在程序运行前就修改正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span>  </span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<p>另一类就是逻辑错误，常见的逻辑错误如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TypeError：数字类型无法与字符串类型相加</span></span><br><span class="line"><span class="number">1</span>+’<span class="number">2</span>’</span><br><span class="line"></span><br><span class="line"><span class="comment"># ValueError：当字符串包含有非数字的值时，无法转成int类型</span></span><br><span class="line">num=<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;: &quot;</span>) <span class="comment">#输入hello</span></span><br><span class="line"><span class="built_in">int</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NameError：引用了一个不存在的名字x</span></span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="comment"># IndexError：索引超出列表的限制</span></span><br><span class="line">l=[<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>]</span><br><span class="line">l[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># KeyError：引用了一个不存在的key</span></span><br><span class="line">dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line">dic[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># AttributeError：引用的属性不存在</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">Foo.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZeroDivisionError：除数不能为0</span></span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-c568557e9385e17985dca3108dd58981_720w.jpg" alt="img"></p>
<h2 id="二-异常处理"><a href="#二-异常处理" class="headerlink" title="二 异常处理"></a>二 异常处理</h2><p>为了保证程序的容错性与可靠性，即在遇到错误时有相应的处理机制不会任由程序崩溃掉，我们需要对异常进行处理，处理的基本形式为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型：</span><br><span class="line">    检测到异常，就执行这个位置的逻辑</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># 引用了一个不存在的名字，触发异常NameError</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e: <span class="comment"># as语法将异常类型的值赋值给变量e，这样我们通过打印e便可以知道错误的原因</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;异常值为：%s&#x27;</span> %e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run other code...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果为</span></span><br><span class="line">start...</span><br><span class="line">异常值为：name <span class="string">&#x27;x&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">run other code...</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-eb6851dbe7f64728348b5abb9b54934e_720w.jpg" alt="img"></p>
<p>本来程序一旦出现异常就整体结束掉了，有了异常处理以后，在被检测的代码块出现异常时，被检测的代码块中异常发生位置之后的代码将不会执行，取而代之的是执行匹配异常的except子代码块，其余代码均正常运行。</p>
<p> 当被检测的代码块中有可能触发不同类型的异常时，针对不同类型的异常：</p>
<p> 如果我们想分别用不同的逻辑处理，需要用到多分支的except（类似于多分支的elif，从上到下依次匹配，匹配成功一次便不再匹配其他）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    触发NameError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    触发IndexError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    触发KeyError时对应的处理逻辑</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_int</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=<span class="built_in">int</span>(obj)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ValueError: %s&#x27;</span> %e)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;TypeError: %s&#x27;</span> %e)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">convert_int(<span class="string">&#x27;egon&#x27;</span>) <span class="comment"># ValueError: invalid literal for int() with base 10: &#x27;egon&#x27;</span></span><br><span class="line">convert_int(&#123;<span class="string">&#x27;n&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment"># TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;dict&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-350521efd08746dac4bde9049f1e6cee_720w.jpg" alt="img"></p>
<p>如果我们想多种类型的异常统一用一种逻辑处理，可以将多个异常放到一个元组内，用一个except匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> (NameError,IndexError,TypeError):</span><br><span class="line">    触发NameError或IndexError或TypeError时对应的处理逻辑</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_int</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=<span class="built_in">int</span>(obj)</span><br><span class="line">    <span class="keyword">except</span> (ValueError,TypeError):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;argument must be number or numeric string&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">convert_int(<span class="string">&#x27;egon&#x27;</span>) <span class="comment"># argument must be number or numeric string</span></span><br><span class="line">convert_int(&#123;<span class="string">&#x27;n&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment"># argument must be number or numeric string</span></span><br></pre></td></tr></table></figure>

<p>如果我们想捕获所有异常并用一种逻辑处理，Python提供了一个万能异常类型Exception</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    触发NameError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    触发IndexError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    其他类型的异常统一用此处的逻辑处理</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-3bcb24c9b610fc49cf8a5c65d81ca81e_720w.jpg" alt="img"></p>
<p>在多分支except之后还可以跟一个else（else必须跟在except之后，不能单独存在），只有在被检测的代码块没有触发任何异常的情况下才会执行else的子代码块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有异常发生时执行的代码块</span><br></pre></td></tr></table></figure>

<p><img src="https://pic2.zhimg.com/80/v2-0f32aec0c63c6943040c3b6affdabc3d_720w.jpg" alt="img"></p>
<p>此外try还可以与finally连用，从语法上讲finally必须放到else之后，但可以使用try-except-finally的形式，也可以直接使用try-finally的形式。无论被检测的代码块是否触发异常，都会执行finally的子代码块，因此通常在finally的子代码块做一些回收资源的操作，比如关闭打开的文件、关闭数据库连接等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python <span class="keyword">try</span>: 被检测的代码块 <span class="keyword">except</span> 异常类型<span class="number">1</span>: <span class="keyword">pass</span> <span class="keyword">except</span> 异常类型<span class="number">2</span>: <span class="keyword">pass</span> ...... <span class="keyword">else</span>: 没有异常发生时执行的代码块 <span class="keyword">finally</span>: 无论有无异常发生都会执行的代码块</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f=<span class="built_in">open</span>(‘db.txt’,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    s=f.read().strip()</span><br><span class="line">    <span class="built_in">int</span>(s)  <span class="comment"># 若字符串s中包含非数字时则会触发异常ValueError</span></span><br><span class="line">    <span class="comment"># f.close() # 若上面的代码触发异常，则根本不可能执行到此处的代码，应该将关闭文件的操作放到finally中</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f: <span class="comment"># 文件存在则f的值不为None</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>

<p>在不符合Python解释器的语法或逻辑规则时，是由Python解释器主动触发的各种类型的异常，而对于违反程序员自定制的各类规则，则需要由程序员自己来明确地触发异常，这就用到了raise语句，raise后必须是一个异常的类或者是异常的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;name must be str&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;age must be int&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="number">4573</span>,<span class="number">18</span>) <span class="comment"># TypeError: name must be str</span></span><br><span class="line">stu2=Student(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;18&#x27;</span>) <span class="comment"># TypeError: age must be int</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-844dd17bef29d8cd13a459d3c28a9053_720w.jpg" alt="img"></p>
<p>在内置异常不够用的情况下，我们可以通过继承内置的异常类来自定义异常类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoolEmptyError</span>(<span class="params">Exception</span>):</span> <span class="comment"># 可以通过继承Exception来定义一个全新的异常</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value=<span class="string">&#x27;The proxy source is exhausted&#x27;</span></span>):</span> <span class="comment"># 可以定制初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(PoolEmptyError,self).__init__()</span><br><span class="line">        self.value=value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># 可以定义该方法用来定制触发异常时打印异常值的格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt; %s &gt;&#x27;</span> %self.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkIOError</span>(<span class="params">IOError</span>):</span> <span class="comment"># 也可以在特定异常的基础上扩展一个相关的异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> PoolEmptyError <span class="comment"># __main__.PoolEmptyError: &lt; The proxy source is exhausted &gt;</span></span><br><span class="line"><span class="keyword">raise</span> NetworkIOError(<span class="string">&#x27;连接被拒绝&#x27;</span>) <span class="comment"># __main__.NetworkIOError: 连接被拒绝</span></span><br></pre></td></tr></table></figure>

<p>最后，Python还提供了一个断言语句assert expression，断定表达式expression成立，否则触发异常AssertionError，与raise-if-not的语义相同，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若表达式isinstance(age,int)返回值为False则触发异常AssertionError</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line">    <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-b4c672c234ecd697537f7cfcaac1a828_720w.jpg" alt="img"></p>
<h2 id="三-何时使用异常处理"><a href="#三-何时使用异常处理" class="headerlink" title="三 何时使用异常处理"></a>三 何时使用异常处理</h2><p>在了解了异常处理机制后，本着提高程序容错性和可靠性的目的，读者可能会错误地认为应该尽可能多地为程序加上try…except…，这其是在过度消费程序的可读性，因为try…except本来就是你附加给程序的一种额外的逻辑，与你的主要工作是没有多大关系的。</p>
<p> 如果错误发生的条件是“可预知的”，我们应该用if来进行”预防”，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="built_in">input</span>(<span class="string">&#x27;input your age&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> age.isdigit(): <span class="comment"># 可预知只有满足字符串age是数字的条件，int(age)才不会触发异常，</span></span><br><span class="line">    age=<span class="built_in">int</span>(age)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You must enter the number&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-93ad4d4a063406cea18caa3d056519a0_720w.jpg" alt="img"></p>
<p>如果错误发生的条件“不可预知”，即异常一定会触发，那么我们才应该使用try…except语句来处理。例如我们编写一个下载网页内容的功能，网络发生延迟之类的异常是很正常的事，而我们根本无法预知在满足什么条件的情况下才会出现延迟，因而只能用异常处理机制了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ConnectTimeout <span class="comment"># 导入requests模块内自定义的异常</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(url,timeout=<span class="number">3</span>)<span class="comment">#超过3秒未下载成功则触发ConnectTimeout异常</span></span><br><span class="line">        res=response.text</span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;连接请求超时&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;网络出现其他异常&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-7f0323790a39e9352c1a1a6671fb9623_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73346821?p=6">python快速入门补充_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73346821?p=6<img src="https://pic4.zhimg.com/v2-2e36f1807728ea385dcbcf702a634e37_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>33-并发编程（二）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/33_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="一-什么是进程"><a href="#一-什么是进程" class="headerlink" title="一 什么是进程"></a>一 什么是进程</h3><p>进程：正在进行的一个过程或者说一个任务。而负责执行任务则是cpu。</p>
<p>举例（单核+多道，实现多个进程的并发执行）：</p>
<p>egon在一个时间段内有很多任务要做：python备课的任务，写书的任务，交女朋友的任务，王者荣耀上分的任务，　　</p>
<p>但egon同一时刻只能做一个任务（cpu同一时间只能干一个活），如何才能玩出多个任务并发执行的效果？</p>
<p>egon备一会课，再去跟李杰的女朋友聊聊天，再去打一会王者荣耀….这就保证了每个任务都在进行中.</p>
<h3 id="二-进程与程序的区别"><a href="#二-进程与程序的区别" class="headerlink" title="二 进程与程序的区别"></a>二 进程与程序的区别</h3><p>程序仅仅只是一堆代码而已，而进程指的是程序的运行过程。</p>
<p>举例：</p>
<p>想象一位有一手好厨艺的计算机科学家egon正在为他的女儿元昊烘制生日蛋糕。</p>
<p>他有做生日蛋糕的食谱，</p>
<p>厨房里有所需的原料:面粉、鸡蛋、韭菜，蒜泥等。</p>
<p>在这个比喻中：</p>
<p><strong>做蛋糕的食谱就是程序</strong>(即用适当形式描述的算法)</p>
<p><strong>计算机科学家就是处理器(cpu)</strong></p>
<p><strong>而做蛋糕的各种原料就是输入数据</strong>。</p>
<p><strong>进程就是厨师阅读食谱、取来各种原料以及烘制蛋糕等一系列动作的总和</strong>。</p>
<p>现在假设计算机科学家egon的儿子alex哭着跑了进来，说：<a href="https://link.zhihu.com/?target=http://fanyi.baidu.com/translate?aldtype=16047&query=%E5%98%BF%EF%BC%8C%E7%88%B8%E7%88%B8%EF%BC%8C%E6%88%91%E7%9A%84%E5%A4%B4%E8%A2%AB%E8%9C%9C%E8%9C%82%E8%9B%B0%E4%BA%86&keyfrom=baidu&smartresult=dict&lang=auto2zh%23zh/en/%E5%98%BF%EF%BC%8C%E7%88%B8%E7%88%B8%EF%BC%8C%E6%88%91%E7%9A%84%E5%A4%B4%E8%A2%AB%E8%9C%9C%E8%9C%82%E8%9B%B0%E4%BA%86">XXXXXXXXXXXXXX</a>。</p>
<p>科学家egon想了想，处理儿子alex蛰伤的任务比给女儿元昊做蛋糕的任务更重要，于是</p>
<p>计算机科学家就记录下他照着食谱做到哪儿了(保存进程的当前状态)，然后拿出一本急救手册，按照其中的指示处理蛰伤。这里，我们看到处理机从一个进程(做蛋糕)切换到另一个高优先级的进程(实施医疗救治)，每个进程拥有各自的程序(食谱和急救手册)。当蜜蜂蛰伤处理完之后，这位计算机科学家又回来做蛋糕，从他 离开时的那一步继续做下去。</p>
<p><strong>需要强调的是：同一个程序执行两次，那也是两个进程，比如打开暴风影音，虽然都是同一个软件，但是一个可以播放苍井空，一个可以播放饭岛爱。</strong></p>
<h3 id="三-并发与并行"><a href="#三-并发与并行" class="headerlink" title="三 并发与并行"></a>三 并发与并行</h3><p>无论是并行还是并发，在用户看来都是’同时’运行的，不管是进程还是线程，都只是一个任务而已，真是干活的是cpu，cpu来做这些任务，而一个cpu同一时刻只能执行一个任务</p>
<p>一 并发：是伪并行，即看起来是同时运行。单个cpu+多道技术就可以实现并发，（并行也属于并发）</p>
<p>单cpu，多进程，并发举例一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你是一个cpu，你同时谈了三个女朋友，每一个都可以是一个恋爱任务，你被这三个任务共享</span><br><span class="line">要玩出并发恋爱的效果，</span><br><span class="line">应该是你先跟女友<span class="number">1</span>去看电影，看了一会说：不好，我要拉肚子，然后跑去跟第二个女友吃饭，吃了一会说：那啥，我</span><br><span class="line">去趟洗手间，然后跑去跟女友<span class="number">3</span>开了个房</span><br></pre></td></tr></table></figure>

<p>单cpu，多进程，并发举例二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">某天下午，egon，yuanhao，wupeiqi，alex约好了一起去嫖娼，但娼只有一个，cpu只有一个，但是却要‘同时’干</span><br><span class="line">四个任务(嫖出并发的效果)，那就必须是干一会egon，再干一会yuanhao，再干一会wupeiqi，再干一会alex</span><br><span class="line">egon：花了<span class="number">200</span>块钱，因为人美活好</span><br><span class="line">yuanhao：<span class="number">500</span>块钱</span><br><span class="line">wupeiqi：<span class="number">100</span>块钱，可能是不太行</span><br><span class="line">alex：没要钱，为啥？？？因为大家刚刚嫖的是他女朋友</span><br></pre></td></tr></table></figure>

<p>二 并行：同时运行，只有具备多个cpu才能实现并行</p>
<p> 单核下，可以利用多道技术，多个核，每个核也都可以利用多道技术（<strong>多道技术是针对单核而言的</strong>）</p>
<p> 有四个核，六个任务，这样同一时间有四个任务被执行，假设分别被分配给了cpu1，cpu2，cpu3，cpu4，</p>
<p> 一旦任务1遇到I&#x2F;O就被迫中断执行，此时任务5就拿到cpu1的时间片去执行，这就是单核下的多道技术</p>
<p> 而一旦任务1的I&#x2F;O结束了，操作系统会重新调用它(<strong>需知进程的调度、分配给哪个cpu运行，由操作系统说了算</strong>)，可能被分配给四个cpu中的任意一个去执行</p>
<p><img src="https://pic2.zhimg.com/80/v2-7137159d323204d49821595cb18e4729_720w.jpg" alt="img"></p>
<p>所有现代计算机经常会在同一时间做很多件事，一个用户的PC（无论是单cpu还是多cpu），都可以同时运行多个任务（一个任务可以理解为一个进程）。</p>
<p>启动一个进程来杀毒（360软件）</p>
<p>启动一个进程来看电影（暴风影音）</p>
<p>启动一个进程来聊天（腾讯QQ）</p>
<p>所有的这些进程都需被管理，于是一个支持多进程的多道程序系统是至关重要的</p>
<p>多道技术概念回顾：内存中同时存入多道（多个）程序，cpu从一个进程快速切换到另外一个，使每个进程各自运行几十或几百毫秒，这样，虽然在某一个瞬间，一个cpu只能执行一个任务，但在1秒内，cpu却可以运行多个进程，这就给人产生了并行的错觉，即伪并发，以此来区分多处理器操作系统的真正硬件并行（多个cpu共享同一个物理内存）</p>
<h3 id="四-同步-异步and阻塞-非阻塞（重点）"><a href="#四-同步-异步and阻塞-非阻塞（重点）" class="headerlink" title="四 同步\异步and阻塞\非阻塞（重点）"></a>四 同步\异步and阻塞\非阻塞（重点）</h3><p><strong>同步：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不会返回。按照这个定义，其实绝大多数函数都是同步调用。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</span></span><br><span class="line"><span class="comment">#举例：</span></span><br><span class="line"><span class="comment">#1. multiprocessing.Pool下的apply #发起同步调用后，就在原地等着任务结束，根本不考虑任务是在计算还是在io阻塞，总之就是一股脑地等任务结束</span></span><br><span class="line"><span class="comment">#2. concurrent.futures.ProcessPoolExecutor().submit(func,).result()</span></span><br><span class="line"><span class="comment">#3. concurrent.futures.ThreadPoolExecutor().submit(func,).result()</span></span><br></pre></td></tr></table></figure>

<p><strong>异步：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#异步的概念和同步相对。当一个异步功能调用发出后，调用者不能立刻得到结果。当该异步功能完成后，通过状态、通知或回调来通知调用者。如果异步功能用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一 种很严重的错误）。如果是使用通知的方式，效率则很高，因为异步功能几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</span></span><br><span class="line"><span class="comment">#举例：</span></span><br><span class="line"><span class="comment">#1. multiprocessing.Pool().apply_async() #发起异步调用后，并不会等待任务结束才返回，相反，会立即获取一个临时结果（并不是最终的结果，可能是封装好的一个对象）。</span></span><br><span class="line"><span class="comment">#2. concurrent.futures.ProcessPoolExecutor(3).submit(func,)</span></span><br><span class="line"><span class="comment">#3. concurrent.futures.ThreadPoolExecutor(3).submit(func,)</span></span><br></pre></td></tr></table></figure>

<p><strong>阻塞：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阻塞调用是指调用结果返回之前，当前线程会被挂起（如遇到io操作）。函数只有在得到结果之后才会将阻塞的线程激活。有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。</span></span><br><span class="line"><span class="comment">#举例：</span></span><br><span class="line"><span class="comment">#1. 同步调用：apply一个累计1亿次的任务，该调用会一直等待，直到任务返回结果为止，但并未阻塞住（即便是被抢走cpu的执行权限，那也是处于就绪态）;</span></span><br><span class="line"><span class="comment">#2. 阻塞调用：当socket工作在阻塞模式的时候，如果没有数据的情况下调用recv函数，则当前线程就会被挂起，直到有数据为止。</span></span><br></pre></td></tr></table></figure>

<p><strong>非阻塞：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前也会立刻返回，同时该函数不会阻塞当前线程。</span></span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 同步与异步针对的是函数/任务的调用方式：同步就是当一个进程发起一个函数（任务）调用的时候，一直等到函数（任务）完成，而进程继续处于激活状态。而异步情况下是当一个进程发起一个函数（任务）调用的时候，不会等函数返回，而是继续往下执行当，函数返回的时候通过状态、通知、事件等方式通知进程任务完成。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 阻塞与非阻塞针对的是进程或线程：阻塞是当请求不能满足的时候就将进程挂起，而非阻塞则不会阻塞当前进程</span></span><br></pre></td></tr></table></figure>

<h3 id="五-进程的创建（了解）"><a href="#五-进程的创建（了解）" class="headerlink" title="五 进程的创建（了解）"></a>五 进程的创建（了解）</h3><p>但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如微波炉中的控制器，一旦启动微波炉，所有的进程都已经存在。</p>
<p>而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程</p>
<p>\1. 系统初始化（查看进程linux中用ps命令，windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）</p>
<p>\2. 一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）</p>
<p>\3. 用户的交互式请求，而创建一个新进程（如用户双击暴风影音）</p>
<p>\4. 一个批处理作业的初始化（只在大型机的批处理系统中应用）</p>
<p>无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的：</p>
<p>\1. 在UNIX中该系统调用是：fork，fork会创建一个与父进程一模一样的副本，二者有相同的存储映像、同样的环境字符串和同样的打开文件（在shell解释器进程中，执行一个命令就会创建一个子进程）</p>
<p>\2. 在windows中该系统调用是：CreateProcess，CreateProcess既处理进程的创建，也负责把正确的程序装入新进程。　</p>
<p>关于创建的子进程，UNIX和windows</p>
<p>1.相同的是：进程创建后，父进程和子进程有各自不同的地址空间（<strong>多道技术要求物理层面实现进程之间内存的隔离</strong>），任何一个进程的在其地址空间中的修改都不会影响到另外一个进程。</p>
<p>2.不同的是：在UNIX中，子进程的初始地址空间是父进程的一个副本，提示：子进程和父进程是可以有只读的共享内存区的。但是对于windows系统来说，从一开始父进程与子进程的地址空间就是不同的。</p>
<h3 id="六-进程的终止（了解）"><a href="#六-进程的终止（了解）" class="headerlink" title="六 进程的终止（了解）"></a>六 进程的终止（了解）</h3><p>\1. 正常退出（自愿，如用户点击交互式页面的叉号，或程序执行完毕调用发起系统调用正常退出，在linux中用exit，在windows中用ExitProcess）</p>
<p>\2. 出错退出（自愿，python a.py中a.py不存在）</p>
<p>\3. 严重错误（非自愿，执行非法指令，如引用不存在的内存，1&#x2F;0等，可以捕捉异常，try…except…）</p>
<p>\4. 被其他进程杀死（非自愿，如kill -9）</p>
<h3 id="七-进程的层次结构"><a href="#七-进程的层次结构" class="headerlink" title="七 进程的层次结构"></a>七 进程的层次结构</h3><p>无论UNIX还是windows，进程只有一个父进程，不同的是：</p>
<p>\1. 在UNIX中所有的进程，都是以init进程为根，组成树形结构。父子进程共同组成一个进程组，这样，当从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组中的所有成员。</p>
<p>\2. 在windows中，没有进程层次的概念，所有的进程都是地位相同的，唯一类似于进程层次的暗示，是在创建进程时，父进程得到一个特别的令牌（<strong>称为句柄</strong>）,该句柄可以用来控制子进程，但是父进程有权把该句柄传给其他子进程，这样就没有层次了。</p>
<h3 id="八-进程的状态"><a href="#八-进程的状态" class="headerlink" title="八 进程的状态"></a>八 进程的状态</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">tail -f <span class="keyword">access</span>.<span class="keyword">log</span> |grep <span class="string">&#x27;404&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行程序tail，开启一个子进程，执行程序grep，开启另外一个子进程，两个进程之间基于管道’|’通讯，将tail的结果作为grep的输入。</p>
<p>进程grep在等待输入（即I&#x2F;O）时的状态称为阻塞，此时grep命令都无法运行</p>
<p>其实在两种情况下会导致一个进程在逻辑上不能运行，</p>
<p>\1. 进程挂起是自身原因，遇到I&#x2F;O阻塞，便要让出CPU让其他进程去执行，这样保证CPU一直在工作</p>
<p>\2. 与进程无关，是操作系统层面，可能会因为一个进程占用时间过多，或者优先级等原因，而调用其他的进程去使用CPU。</p>
<p>因而一个进程由三种状态</p>
<p><img src="https://pic1.zhimg.com/80/v2-1b816bea5d7900ca5faad9abdee1cec4_720w.jpg" alt="img"></p>
<h3 id="九-进程并发的实现（了解）"><a href="#九-进程并发的实现（了解）" class="headerlink" title="九 进程并发的实现（了解）"></a>九 进程并发的实现（了解）</h3><p>进程并发的实现在于，硬件中断一个正在运行的进程，把此时进程运行的所有状态保存下来，为此，操作系统维护一张表格，即进程表（process table），每个进程占用一个进程表项（这些表项也称为进程控制块）</p>
<p><img src="https://pic1.zhimg.com/80/v2-c7e653f1793ccc5d2aeed7d128459698_720w.jpg" alt="img"></p>
<p>该表存放了进程状态的重要信息：程序计数器、堆栈指针、内存分配状况、所有打开文件的状态、帐号和调度信息，以及其他在进程由运行态转为就绪态或阻塞态时，必须保存的信息，从而保证该进程在再次启动时，就像从未被中断过一样。<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/linhaifeng/articles/7430066.html">python并发编程之多进程理论部分</a></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=130">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=130<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>31-网络编程</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/31_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一-客户端-x2F-服务器架构"><a href="#一-客户端-x2F-服务器架构" class="headerlink" title="一 客户端&#x2F;服务器架构"></a>一 客户端&#x2F;服务器架构</h2><p>1.硬件C&#x2F;S架构(打印机)</p>
<p>2.软件C&#x2F;S架构</p>
<p><em>互联网中处处是C&#x2F;S架构</em></p>
<p><em>如黄色网站是服务端，你的浏览器是客户端（B&#x2F;S架构也是C&#x2F;S架构的一种）</em></p>
<p><em>腾讯作为服务端为你提供视频，你得下个腾讯视频客户端才能看它的视频）</em></p>
<p>C&#x2F;S架构与socket的关系：</p>
<p><em>我们学习socket就是为了完成C&#x2F;S架构的开发</em></p>
<h3 id="二-osi七层"><a href="#二-osi七层" class="headerlink" title="二 osi七层"></a>二 osi七层</h3><p><strong>引子：</strong></p>
<p><em>须知一个完整的计算机系统是由硬件、操作系统、应用软件三者组成,具备了这三个条件，一台计算机系统就可以自己跟自己玩了（打个单机游戏，玩个扫雷啥的）</em></p>
<p><em>如果你要跟别人一起玩，那你就需要上网了，什么是互联网？</em></p>
<p><em>互联网的核心就是由一堆协议组成，协议就是标准，比如全世界人通信的标准是英语</em></p>
<p><em>如果把计算机比作人，互联网协议就是计算机界的英语。所有的计算机都学会了互联网协议，那所有的计算机都就可以按照统一的标准去收发信息从而完成通信了。</em></p>
<p><em>人们按照分工不同把互联网协议从逻辑上划分了层级，</em></p>
<p><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/5937962.html">详见网络通信原理：http://www.cnblogs.com/linhaifeng/articles/5937962.html</a></p>
<p><strong>为何学习socket一定要先学习互联网协议：</strong></p>
<p><em>1.首先：本节课程的目标就是教会你如何基于socket编程，来开发一款自己的C&#x2F;S架构软件</em></p>
<p><em>2.其次：C&#x2F;S架构的软件（软件属于应用层）是基于网络进行通信的</em></p>
<p><em>3.然后：网络的核心即一堆协议，协议即标准，你想开发一款基于网络通信的软件，就必须遵循这些标准。</em></p>
<p><em>4.最后：就让我们从这些标准开始研究，开启我们的socket编程之旅</em></p>
<p><img src="https://pic4.zhimg.com/80/v2-3f2ab5646d1bbca993e920c8ae27f40f_720w.jpg" alt="img"></p>
<p> 图1</p>
<h3 id="三-socket层"><a href="#三-socket层" class="headerlink" title="三 socket层"></a>三 socket层</h3><p>在图1中，我们没有看到Socket的影子，那么它到底在哪里呢？还是用图来说话，一目了然。</p>
<p><img src="https://pic3.zhimg.com/80/v2-a4a1fd105e5e7af5d7db820b303ad7e2_720w.jpg" alt="img"></p>
<p><strong>图2</strong></p>
<h3 id="四-socket是什么"><a href="#四-socket是什么" class="headerlink" title="四 socket是什么"></a>四 socket是什么</h3><p>Socket是应用层与TCP&#x2F;IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP&#x2F;IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>
<p>所以，我们无需深入理解tcp&#x2F;udp协议，socket已经为我们封装好了，我们只需要遵循socket的规定去编程，写出的程序自然就是遵循tcp&#x2F;udp标准的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">也有人将socket说成ip+port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序</span><br><span class="line"></span><br><span class="line">而程序的pid是同一台机器上不同进程或者线程的标识</span><br></pre></td></tr></table></figure>

<h3 id="五-套接字发展史及分类"><a href="#五-套接字发展史及分类" class="headerlink" title="五 套接字发展史及分类"></a>五 套接字发展史及分类</h3><p>套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。</p>
<p>*<strong>基于文件类型的套接字家族*</strong></p>
<p>套接字家族的名字：AF_UNIX</p>
<p>unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信</p>
<p>*<strong>基于网络类型的套接字家族*</strong></p>
<p>套接字家族的名字：AF_INET</p>
<p>(还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET)</p>
<h3 id="六-套接字工作流程"><a href="#六-套接字工作流程" class="headerlink" title="六 套接字工作流程"></a>六 套接字工作流程</h3><p> 一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。 生活中的场景就解释了这工作原理。</p>
<p><img src="https://pic1.zhimg.com/80/v2-7d4ff6c59a5201bac25926b792826a40_720w.jpg" alt="img"></p>
<p> 图3</p>
<p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束</p>
<p>socket()模块函数用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> socket</span><br><span class="line"> <span class="number">2</span> socket.socket(socket_family,socket_type,protocal=<span class="number">0</span>)</span><br><span class="line"> <span class="number">3</span> socket_family 可以是 AF_UNIX 或 AF_INET。socket_type 可以是 SOCK_STREAM 或 SOCK_DGRAM。protocol 一般不填,默认值为 <span class="number">0</span>。</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> 获取tcp/ip套接字</span><br><span class="line"> <span class="number">6</span> tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> 获取udp/ip套接字</span><br><span class="line"> <span class="number">9</span> udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> 由于 socket 模块中有太多的属性。我们在这里破例使用了<span class="string">&#x27;from module import *&#x27;</span>语句。使用 <span class="string">&#x27;from socket import *&#x27;</span>,我们就把 socket 模块里的所有属性都带到我们的命名空间里了,这样能 大幅减短我们的代码。</span><br><span class="line"><span class="number">12</span> 例如tcpSock = socket(AF_INET, SOCK_STREAM</span><br></pre></td></tr></table></figure>

<p><em><strong>服务端套接字函数</strong></em><br>s.bind() 绑定(主机,端口号)到套接字<br>s.listen() 开始TCP监听<br>s.accept() 被动接受TCP客户的连接,(阻塞式)等待连接的到来</p>
<p><em><strong>客户端套接字函数</strong></em><br>s.connect() 主动初始化TCP服务器连接<br>s.connect_ex() connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</p>
<p><em><strong>公共用途的套接字函数</strong></em><br>s.recv() 接收TCP数据<br>s.send() 发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不会发完)<br>s.sendall() 发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己端缓存区剩余空间时,数据不丢失,循环调用send直到发完)<br>s.recvfrom() 接收UDP数据<br>s.sendto() 发送UDP数据<br>s.getpeername() 连接到当前套接字的远端的地址<br>s.getsockname() 当前套接字的地址<br>s.getsockopt() 返回指定套接字的参数<br>s.setsockopt() 设置指定套接字的参数<br>s.close() 关闭套接字</p>
<p><em><strong>面向锁的套接字方法</strong></em><br>s.setblocking() 设置套接字的阻塞与非阻塞模式<br>s.settimeout() 设置阻塞套接字操作的超时时间<br>s.gettimeout() 得到阻塞套接字操作的超时时间</p>
<p><em><strong>面向文件的套接字的函数</strong></em><br>s.fileno() 套接字的文件描述符<br>s.makefile() 创建一个与该套接字相关的文件</p>
<h3 id="七-基于TCP的套接字"><a href="#七-基于TCP的套接字" class="headerlink" title="七 基于TCP的套接字"></a>七 基于TCP的套接字</h3><p>*<strong>tcp是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端*</strong></p>
<p>*<strong>tcp服务端*</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> ss = socket() <span class="comment">#创建服务器套接字</span></span><br><span class="line"><span class="number">2</span> ss.bind()      <span class="comment">#把地址绑定到套接字</span></span><br><span class="line"><span class="number">3</span> ss.listen()      <span class="comment">#监听链接</span></span><br><span class="line"><span class="number">4</span> inf_loop:      <span class="comment">#服务器无限循环</span></span><br><span class="line"><span class="number">5</span>     cs = ss.accept() <span class="comment">#接受客户端链接</span></span><br><span class="line"><span class="number">6</span>     comm_loop:         <span class="comment">#通讯循环</span></span><br><span class="line"><span class="number">7</span>         cs.recv()/cs.send() <span class="comment">#对话(接收与发送)</span></span><br><span class="line"><span class="number">8</span>     cs.close()    <span class="comment">#关闭客户端套接字</span></span><br><span class="line"><span class="number">9</span> ss.close()        <span class="comment">#关闭服务器套接字(可选)</span></span><br></pre></td></tr></table></figure>

<p>*<strong>tcp客户端*</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> cs = socket()    <span class="comment"># 创建客户套接字</span></span><br><span class="line"><span class="number">2</span> cs.connect()    <span class="comment"># 尝试连接服务器</span></span><br><span class="line"><span class="number">3</span> comm_loop:        <span class="comment"># 通讯循环</span></span><br><span class="line"><span class="number">4</span>     cs.send()/cs.recv()    <span class="comment"># 对话(发送/接收)</span></span><br><span class="line"><span class="number">5</span> cs.close()            <span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure>

<p>socket通信流程与打电话流程类似，我们就以打电话为例来实现一个low版的套接字通信</p>
<p>服务端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)  <span class="comment">#电话卡</span></span><br><span class="line">BUFSIZE=<span class="number">1024</span>                <span class="comment">#收发消息的尺寸</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#买手机</span></span><br><span class="line">s.bind(ip_port) <span class="comment">#手机插卡</span></span><br><span class="line">s.listen(<span class="number">5</span>)     <span class="comment">#手机待机</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn,addr=s.accept()            <span class="comment">#手机接电话</span></span><br><span class="line"><span class="comment"># print(conn)</span></span><br><span class="line"><span class="comment"># print(addr)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;接到来自%s的电话&#x27;</span> %addr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">msg=conn.recv(BUFSIZE)             <span class="comment">#听消息,听话</span></span><br><span class="line"><span class="built_in">print</span>(msg,<span class="built_in">type</span>(msg))</span><br><span class="line"></span><br><span class="line">conn.send(msg.upper())          <span class="comment">#发消息,说话</span></span><br><span class="line"></span><br><span class="line">conn.close()                    <span class="comment">#挂电话</span></span><br><span class="line"></span><br><span class="line">s.close()                       <span class="comment">#手机关机</span></span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect_ex(ip_port)           <span class="comment">#拨电话</span></span><br><span class="line"></span><br><span class="line">s.send(<span class="string">&#x27;linhaifeng nb&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))         <span class="comment">#发消息,说话(只能发送字节类型)</span></span><br><span class="line"></span><br><span class="line">feedback=s.recv(BUFSIZE)                           <span class="comment">#收消息,听话</span></span><br><span class="line"><span class="built_in">print</span>(feedback.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.close()                                       <span class="comment">#挂电话</span></span><br></pre></td></tr></table></figure>

<p>加上链接循环与通信循环</p>
<p>服务端改进版:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>)<span class="comment">#电话卡</span></span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment">#买手机</span></span><br><span class="line">s.bind(ip_port) <span class="comment">#手机插卡</span></span><br><span class="line">s.listen(<span class="number">5</span>)     <span class="comment">#手机待机</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:                         <span class="comment">#新增接收链接循环,可以不停的接电话</span></span><br><span class="line">    conn,addr=s.accept()            <span class="comment">#手机接电话</span></span><br><span class="line">    <span class="comment"># print(conn)</span></span><br><span class="line">    <span class="comment"># print(addr)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;接到来自%s的电话&#x27;</span> %addr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:                         <span class="comment">#新增通信循环,可以不断的通信,收发消息</span></span><br><span class="line">        msg=conn.recv(BUFSIZE)             <span class="comment">#听消息,听话</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if len(msg) == 0:break        #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(msg,<span class="built_in">type</span>(msg))</span><br><span class="line"></span><br><span class="line">        conn.send(msg.upper())          <span class="comment">#发消息,说话</span></span><br><span class="line"></span><br><span class="line">    conn.close()                    <span class="comment">#挂电话</span></span><br><span class="line"></span><br><span class="line">s.close()                       <span class="comment">#手机关机</span></span><br></pre></td></tr></table></figure>

<p>客户端改进版</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect_ex(ip_port)           <span class="comment">#拨电话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:                             <span class="comment">#新增通信循环,客户端可以不断发收消息</span></span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))         <span class="comment">#发消息,说话(只能发送字节类型)</span></span><br><span class="line"></span><br><span class="line">    feedback=s.recv(BUFSIZE)                           <span class="comment">#收消息,听话</span></span><br><span class="line">    <span class="built_in">print</span>(feedback.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.close()                                       <span class="comment">#挂电话</span></span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>有的同学在重启服务端时可能会遇到</p>
<p><img src="https://pic2.zhimg.com/80/v2-aeeffa09a60bc1037ae69a2856cf8941_720w.jpg" alt="img"></p>
<p>这个是由于你的服务端仍然存在四次挥手的time_wait状态在占用地址（如果不懂，请深入研究1.tcp三次握手，四次挥手 2.syn洪水攻击 3.服务器高并发情况下会有大量的time_wait状态的优化方法）</p>
<p>解决方法：</p>
<p>方法一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入一条socket配置，重用ip和端口</span></span><br><span class="line"></span><br><span class="line">phone=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">phone.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#就是它，在bind前加</span></span><br><span class="line">phone.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">发现系统存在大量TIME_WAIT状态的连接，通过调整linux内核参数解决，</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">编辑文件，加入以下内容：</span><br><span class="line">net.ipv4.tcp_syncookies = <span class="number">1</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">然后执行 /sbin/sysctl -p 让参数生效。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = <span class="number">1</span> 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为<span class="number">0</span>，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span> 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为<span class="number">0</span>，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span> 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为<span class="number">0</span>，表示关闭。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout 修改系統默认的 TIMEOUT 时间</span><br></pre></td></tr></table></figure>

<h3 id="八-基于UDP的套接字"><a href="#八-基于UDP的套接字" class="headerlink" title="八 基于UDP的套接字"></a>八 基于UDP的套接字</h3><p>*<strong>udp是无链接的，先启动哪一端都不会报错*</strong></p>
<p>udp服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> ss = socket()   <span class="comment">#创建一个服务器的套接字</span></span><br><span class="line"><span class="number">2</span> ss.bind()       <span class="comment">#绑定服务器套接字</span></span><br><span class="line"><span class="number">3</span> inf_loop:       <span class="comment">#服务器无限循环</span></span><br><span class="line"><span class="number">4</span>     cs = ss.recvfrom()/ss.sendto() <span class="comment"># 对话(接收与发送)</span></span><br><span class="line"><span class="number">5</span> ss.close()                         <span class="comment"># 关闭服务器套接字</span></span><br></pre></td></tr></table></figure>

<p>udp客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cs = socket()   <span class="comment"># 创建客户套接字</span></span><br><span class="line">comm_loop:      <span class="comment"># 通讯循环</span></span><br><span class="line">    cs.sendto()/cs.recvfrom()   <span class="comment"># 对话(发送/接收)</span></span><br><span class="line">cs.close()                      <span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure>

<p>*<strong>udp套接字简单示例*</strong></p>
<p>udp服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_server_client=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">udp_server_client.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg,addr=udp_server_client.recvfrom(BUFSIZE)</span><br><span class="line">    <span class="built_in">print</span>(msg,addr)</span><br><span class="line"></span><br><span class="line">    udp_server_client.sendto(msg.upper(),addr)</span><br></pre></td></tr></table></figure>

<p>udp客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_server_client=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    udp_server_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),ip_port)</span><br><span class="line"></span><br><span class="line">    back_msg,addr=udp_server_client.recvfrom(BUFSIZE)</span><br><span class="line">    <span class="built_in">print</span>(back_msg.decode(<span class="string">&#x27;utf-8&#x27;</span>),addr)</span><br></pre></td></tr></table></figure>

<p>*<strong>qq聊天(由于udp无连接，所以可以同时多个客户端去跟服务端通信)*</strong></p>
<p>udp服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>)</span><br><span class="line">udp_server_sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#买手机</span></span><br><span class="line">udp_server_sock.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    qq_msg,addr=udp_server_sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;来自[%s:%s]的一条消息:\033[1;44m%s\033[0m&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],qq_msg.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    back_msg=<span class="built_in">input</span>(<span class="string">&#x27;回复消息: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">    udp_server_sock.sendto(back_msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),addr)</span><br></pre></td></tr></table></figure>

<p>udp客户端1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_client_socket=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">qq_name_dic=&#123;</span><br><span class="line">    <span class="string">&#x27;狗哥alex&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;瞎驴&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;一棵树&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;武大郎&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    qq_name=<span class="built_in">input</span>(<span class="string">&#x27;请选择聊天对象: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg=<span class="built_in">input</span>(<span class="string">&#x27;请输入消息,回车发送: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg <span class="keyword">or</span> <span class="keyword">not</span> qq_name <span class="keyword">or</span> qq_name <span class="keyword">not</span> <span class="keyword">in</span> qq_name_dic:<span class="keyword">continue</span></span><br><span class="line">        udp_client_socket.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),qq_name_dic[qq_name])</span><br><span class="line"></span><br><span class="line">        back_msg,addr=udp_client_socket.recvfrom(BUFSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;来自[%s:%s]的一条消息:\033[1;44m%s\033[0m&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],back_msg.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">udp_client_socket.close()</span><br></pre></td></tr></table></figure>

<p>udp客户端2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_client_socket=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">qq_name_dic=&#123;</span><br><span class="line">    <span class="string">&#x27;狗哥alex&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;瞎驴&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;一棵树&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">    <span class="string">&#x27;武大郎&#x27;</span>:(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    qq_name=<span class="built_in">input</span>(<span class="string">&#x27;请选择聊天对象: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg=<span class="built_in">input</span>(<span class="string">&#x27;请输入消息,回车发送: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg <span class="keyword">or</span> <span class="keyword">not</span> qq_name <span class="keyword">or</span> qq_name <span class="keyword">not</span> <span class="keyword">in</span> qq_name_dic:<span class="keyword">continue</span></span><br><span class="line">        udp_client_socket.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),qq_name_dic[qq_name])</span><br><span class="line"></span><br><span class="line">        back_msg,addr=udp_client_socket.recvfrom(BUFSIZE)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;来自[%s:%s]的一条消息:\033[1;44m%s\033[0m&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],back_msg.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">udp_client_socket.close()</span><br></pre></td></tr></table></figure>

<p>服务端运行结果</p>
<p><img src="https://pic3.zhimg.com/80/v2-b8475dd2de46da061d4f507bc2414206_720w.jpg" alt="img"></p>
<p>客户端1运行结果</p>
<p><img src="https://pic1.zhimg.com/80/v2-7fa4072d1b9ed772c81fe72b20497eec_720w.jpg" alt="img"></p>
<p>客户端2运行结果</p>
<p><img src="https://pic2.zhimg.com/80/v2-c70ea48a4774814cbc6d58657b811539_720w.jpg" alt="img"></p>
<p>*<strong>时间服务器*</strong></p>
<p>ntp服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line"></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">bufsize=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">tcp_server=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">tcp_server.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg,addr=tcp_server.recvfrom(bufsize)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">        time_fmt=<span class="string">&#x27;%Y-%m-%d %X&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time_fmt=msg.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    back_msg=strftime(time_fmt)</span><br><span class="line"></span><br><span class="line">    tcp_server.sendto(back_msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),addr)</span><br><span class="line"></span><br><span class="line">tcp_server.close()</span><br></pre></td></tr></table></figure>

<p>ntp客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">bufsize=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">tcp_client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;请输入时间格式(例%Y %m %d)&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    tcp_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),ip_port)</span><br><span class="line">    data=tcp_client.recv(bufsize)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">tcp_client.close()</span><br></pre></td></tr></table></figure>

<h3 id="九-粘包现象"><a href="#九-粘包现象" class="headerlink" title="九 粘包现象"></a>九 粘包现象</h3><p>让我们基于tcp先制作一个远程执行命令的程序（1：执行错误命令 2：执行ls 3：执行ifconfig）</p>
<p><strong>注意注意注意：</strong></p>
<p>res&#x3D;subprocess.Popen(cmd.decode(‘utf-8’), shell&#x3D;True, stderr&#x3D;subprocess.PIPE, stdout&#x3D;subprocess.PIPE)</p>
<p>的结果的编码是以当前所在的系统为准的，如果是windows，那么<strong>res.stdout.read()读出的就是GBK编码的</strong>，在接收端需<strong>要用GBK解码</strong></p>
<p><strong>且只能从管道里读一次结果</strong></p>
<p>注意：命令ls -l ; lllllll ; pwd 的结果是既有正确stdout结果，又有错误stderr结果</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr=tcp_socket_server.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;客户端&#x27;</span>,addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd=conn.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),shell=<span class="literal">True</span>,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        stderr=act_res.stderr.read()</span><br><span class="line">        stdout=act_res.stdout.read()</span><br><span class="line">        conn.send(stderr)</span><br><span class="line">        conn.send(stdout)</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    act_res=s.recv(BUFSIZE)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(act_res.decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上述程序是基于tcp的socket，在运行时会发生粘包</p>
<p>让我们再基于udp制作一个远程执行命令的程序</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9003</span>)</span><br><span class="line">bufsize=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">udp_server=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">udp_server.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#收消息</span></span><br><span class="line">    cmd,addr=udp_server.recvfrom(bufsize)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用户命令-----&gt;&#x27;</span>,cmd)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#逻辑处理</span></span><br><span class="line">    res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),shell=<span class="literal">True</span>,stderr=subprocess.PIPE,stdin=subprocess.PIPE,stdout=subprocess.PIPE)</span><br><span class="line">    stderr=res.stderr.read()</span><br><span class="line">    stdout=res.stdout.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发消息</span></span><br><span class="line">    udp_server.sendto(stderr,addr)</span><br><span class="line">    udp_server.sendto(stdout,addr)</span><br><span class="line">udp_server.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9003</span>)</span><br><span class="line">bufsize=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">udp_client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    udp_client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),ip_port)</span><br><span class="line"></span><br><span class="line">    data,addr=udp_client.recvfrom(bufsize)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上述程序是基于udp的socket，在运行时永远不会发生粘包</p>
<h3 id="十-什么是粘包"><a href="#十-什么是粘包" class="headerlink" title="十 什么是粘包"></a>十 什么是粘包</h3><p>须知：只有TCP有粘包现象，UDP永远不会粘包，为何，且听我娓娓道来</p>
<p>首先需要掌握一个socket收发消息的原理</p>
<p><img src="https://pic4.zhimg.com/80/v2-5e9568f888a55cd273aca6f561cea2d7_720w.jpg" alt="img"></p>
<p>发送端可以是一K一K地发送数据，而接收端的应用程序可以两K两K地提走数据，当然也有可能一次提走3K或6K数据，或者一次只提走几个字节的数据，也就是说，应用程序所看到的数据是一个整体，或说是一个流（stream），一条消息有多少字节对应用程序是不可见的，因此TCP协议是面向流的协议，这也是容易出现粘包问题的原因。而UDP是面向消息的协议，每个UDP段都是一条消息，应用程序必须以消息为单位提取数据，不能一次提取任意字节的数据，这一点和TCP是很不同的。怎样定义消息呢？可以认为对方一次性write&#x2F;send的数据为一个消息，需要明白的是当对方send一条信息的时候，无论底层怎样分段分片，TCP协议层会把构成整条消息的数据段排序完成后才呈现在内核缓冲区。</p>
<p>例如基于tcp的套接字客户端往服务端上传文件，发送时文件内容是按照一段一段的字节流发送的，在接收方看了，根本不知道该文件的字节流从何处开始，在何处结束</p>
<p>所谓粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的。</p>
<p>此外，发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一个TCP段。若连续几次需要send的数据都很少，通常TCP会根据优化<a href="https://link.zhihu.com/?target=http://lib.csdn.net/base/datastructure">算法</a>把这些数据合成一个TCP段后一次发送出去，这样接收方就收到了粘包数据。</p>
<ol>
<li>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</li>
<li>UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务。不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 <strong>即面向消息的通信是有消息保护边界的。</strong></li>
<li><strong>tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而udp是基于数据报的，即便是你输入的是空内容（直接回车），那也不是空消息，udp协议会帮你封装上消息头，实验略</strong></li>
</ol>
<p>udp的recvfrom是阻塞的，一个recvfrom(x)必须对唯一一个sendinto(y),收完了x个字节的数据就算完成,若是y&gt;x数据就丢失，这意味着udp根本不会粘包，但是会丢数据，不可靠</p>
<p>tcp的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack时才会清除缓冲区内容。数据是可靠的，但是会粘包。</p>
<p>*<strong>两种情况下会发生粘包。*</strong></p>
<p>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn,addr=tcp_socket_server.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data1=conn.recv(<span class="number">10</span>)</span><br><span class="line">data2=conn.recv(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>,data1.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>,data2.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.send(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">s.send(<span class="string">&#x27;feng&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再收的时候还是从缓冲区拿上次遗留的数据，产生粘包）</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn,addr=tcp_socket_server.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data1=conn.recv(<span class="number">2</span>) <span class="comment">#一次没有收完整</span></span><br><span class="line">data2=conn.recv(<span class="number">10</span>)<span class="comment">#下次收的时候,会先取旧的数据,然后取新的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>,data1.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>,data2.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.send(<span class="string">&#x27;hello feng&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>*<strong>拆包的发生情况*</strong></p>
<p>当发送端缓冲区的长度大于网卡的MTU时，tcp会将这次发送的数据拆成几个数据包发送出去。</p>
<p>*<strong>补充问题一：为何tcp是可靠传输，udp是不可靠传输*</strong></p>
<p>基于tcp的数据传输请参考我的另一篇文章<a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/5937962.html">http://www.cnblogs.com/linhaifeng/articles/5937962.html</a>，tcp在数据传输时，发送端先把数据发送到自己的缓存中，然后协议控制将缓存中的数据发往对端，对端返回一个ack&#x3D;1，发送端则清理缓存中的数据，对端返回ack&#x3D;0，则重新发送数据，所以tcp是可靠的</p>
<p>而udp发送数据，对端是不会返回确认信息的，因此不可靠</p>
<p>*<strong>补充问题二：send(字节流)和recv(1024)及sendall*</strong></p>
<p>recv里指定的1024意思是从缓存里一次拿出1024个字节的数据</p>
<p>send的字节流是先放入己端缓存，然后由协议控制将缓存内容发往对端，如果待发送的字节流大小大于缓存剩余空间，那么数据丢失，用sendall就会循环调用send，数据不会丢失</p>
<h3 id="十一-解决粘包的low比处理方法"><a href="#十一-解决粘包的low比处理方法" class="headerlink" title="十一 解决粘包的low比处理方法"></a>十一 解决粘包的low比处理方法</h3><p>问题的根源在于，接收端不知道发送端将要传送的字节流的长度，所以解决粘包的方法就是围绕，如何让发送端在发送数据前，把自己将要发送的字节流总大小让接收端知晓，然后接收端来一个死循环接收完所有数据</p>
<p>low版本的解决方法</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket,subprocess</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s.bind(ip_port)</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr=s.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;客户端&#x27;</span>,addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">break</span></span><br><span class="line">        res=subprocess.Popen(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>),shell=<span class="literal">True</span>,\</span><br><span class="line">                            stdin=subprocess.PIPE,\</span><br><span class="line">                         stderr=subprocess.PIPE,\</span><br><span class="line">                         stdout=subprocess.PIPE)</span><br><span class="line">        err=res.stderr.read()</span><br><span class="line">        <span class="keyword">if</span> err:</span><br><span class="line">            ret=err</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret=res.stdout.read()</span><br><span class="line">        data_length=<span class="built_in">len</span>(ret)</span><br><span class="line">        conn.send(<span class="built_in">str</span>(data_length).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;recv_ready&#x27;</span>:</span><br><span class="line">            conn.sendall(ret)</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket,time</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    length=<span class="built_in">int</span>(s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    s.send(<span class="string">&#x27;recv_ready&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    send_size=<span class="number">0</span></span><br><span class="line">    recv_size=<span class="number">0</span></span><br><span class="line">    data=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; length:</span><br><span class="line">        data+=s.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size+=<span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>为何low：</p>
<p>程序的运行速度远快于网络传输速度，所以在发送一段字节前，先用send去发送该字节流长度，这种方式会放大网络延迟带来的性能损耗</p>
<h3 id="十二-峰哥解决粘包的方法"><a href="#十二-峰哥解决粘包的方法" class="headerlink" title="十二 峰哥解决粘包的方法"></a>十二 峰哥解决粘包的方法</h3><p>为字节流加上自定义固定长度报头，报头中包含字节流长度，然后一次send到对端，对端在接收时，先从缓存中取出定长的报头，然后再取真实数据</p>
<p><strong>struct模块</strong></p>
<p>该模块可以把一个类型，如数字，转成固定长度的bytes</p>
<p>&gt;&gt;&gt; struct.pack(‘i’,1111111111111)</p>
<p>。。。。。。。。。</p>
<p>struct.error: ‘i’ format requires -2147483648 &lt;&#x3D; number &lt;&#x3D; 2147483647 #这个是范围</p>
<p><img src="https://pic2.zhimg.com/80/v2-d7c66c9a0abe12041ae948a553b908c9_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json,struct</span><br><span class="line"><span class="comment">#假设通过客户端上传1T:1073741824000的文件a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为避免粘包,必须自定制报头</span></span><br><span class="line">header=&#123;<span class="string">&#x27;file_size&#x27;</span>:<span class="number">1073741824000</span>,<span class="string">&#x27;file_name&#x27;</span>:<span class="string">&#x27;/a/b/c/d/e/a.txt&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>:<span class="string">&#x27;8f6fbf8347faa4924a76856701edb0f3&#x27;</span>&#125; <span class="comment">#1T数据,文件路径和md5值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了该报头能传送,需要序列化并且转为bytes</span></span><br><span class="line">head_bytes=<span class="built_in">bytes</span>(json.dumps(header),encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#序列化并转成bytes,用于传输</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了让客户端知道报头的长度,用struck将报头长度这个数字转成固定长度:4个字节</span></span><br><span class="line">head_len_bytes=struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(head_bytes)) <span class="comment">#这4个字节里只包含了一个数字,该数字是报头的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端开始发送</span></span><br><span class="line">conn.send(head_len_bytes) <span class="comment">#先发报头的长度,4个bytes</span></span><br><span class="line">conn.send(head_bytes) <span class="comment">#再发报头的字节格式</span></span><br><span class="line">conn.sendall(文件内容) <span class="comment">#然后发真实内容的字节格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端开始接收</span></span><br><span class="line">head_len_bytes=s.recv(<span class="number">4</span>) <span class="comment">#先收报头4个bytes,得到报头长度的字节格式</span></span><br><span class="line">x=struct.unpack(<span class="string">&#x27;i&#x27;</span>,head_len_bytes)[<span class="number">0</span>] <span class="comment">#提取报头的长度</span></span><br><span class="line"></span><br><span class="line">head_bytes=s.recv(x) <span class="comment">#按照报头长度x,收取报头的bytes格式</span></span><br><span class="line">header=json.loads(json.dumps(header)) <span class="comment">#提取报头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后根据报头的内容提取真实的数据,比如</span></span><br><span class="line">real_data_len=s.recv(header[<span class="string">&#x27;file_size&#x27;</span>])</span><br><span class="line">s.recv(real_data_len)</span><br></pre></td></tr></table></figure>

<p>关于struct的详细用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#http://www.cnblogs.com/coser/archive/2011/12/17/2291160.html</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">values1 = (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="number">2.7</span>)</span><br><span class="line">values2 = (<span class="string">&#x27;defg&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">101</span>)</span><br><span class="line">s1 = struct.Struct(<span class="string">&#x27;I3sf&#x27;</span>)</span><br><span class="line">s2 = struct.Struct(<span class="string">&#x27;4sI&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1.size,s2.size)</span><br><span class="line">prebuffer=ctypes.create_string_buffer(s1.size+s2.size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before : &#x27;</span>,binascii.hexlify(prebuffer))</span><br><span class="line"><span class="comment"># t=binascii.hexlify(&#x27;asdfaf&#x27;.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1.pack_into(prebuffer,<span class="number">0</span>,*values1)</span><br><span class="line">s2.pack_into(prebuffer,s1.size,*values2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After pack&#x27;</span>,binascii.hexlify(prebuffer))</span><br><span class="line"><span class="built_in">print</span>(s1.unpack_from(prebuffer,<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(s2.unpack_from(prebuffer,s1.size))</span><br><span class="line"></span><br><span class="line">s3=struct.Struct(<span class="string">&#x27;ii&#x27;</span>)</span><br><span class="line">s3.pack_into(prebuffer,<span class="number">0</span>,<span class="number">123</span>,<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After pack&#x27;</span>,binascii.hexlify(prebuffer))</span><br><span class="line"><span class="built_in">print</span>(s3.unpack_from(prebuffer,<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>服务端（自定制报头）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,struct,json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">phone=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#就是它，在bind前加</span></span><br><span class="line"></span><br><span class="line">phone.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">phone.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr=phone.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cmd: %s&#x27;</span> %cmd)</span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                             shell=<span class="literal">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE)</span><br><span class="line">        err=res.stderr.read()</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">        <span class="keyword">if</span> err:</span><br><span class="line">            back_msg=err</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_msg=res.stdout.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        conn.send(struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(back_msg))) <span class="comment">#先发back_msg的长度</span></span><br><span class="line">        conn.sendall(back_msg) <span class="comment">#在发真实的内容</span></span><br><span class="line"></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>

<p>客户端（自定制报头）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket,time,struct</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    l=s.recv(<span class="number">4</span>)</span><br><span class="line">    x=struct.unpack(<span class="string">&#x27;i&#x27;</span>,l)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x),x)</span><br><span class="line">    <span class="comment"># print(struct.unpack(&#x27;I&#x27;,l))</span></span><br><span class="line">    r_s=<span class="number">0</span></span><br><span class="line">    data=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> r_s &lt; x:</span><br><span class="line">        r_d=s.recv(<span class="number">1024</span>)</span><br><span class="line">        data+=r_d</span><br><span class="line">        r_s+=<span class="built_in">len</span>(r_d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;gbk&#x27;</span>)) <span class="comment">#windows默认gbk编码</span></span><br></pre></td></tr></table></figure>

<p>我们可以把报头做成字典，字典里包含将要发送的真实数据的详细信息，然后json序列化，然后用struck将序列化后的数据长度打包成4个字节（4个自己足够用了）</p>
<p>发送时：</p>
<p>先发报头长度</p>
<p>再编码报头内容然后发送</p>
<p>最后发真实内容</p>
<p>接收时：</p>
<p>先手报头长度，用struct取出来</p>
<p>根据取出的长度收取报头内容，然后解码，反序列化</p>
<p>从反序列化的结果中取出待取数据的详细信息，然后去取真实的数据内容</p>
<p>服务端：定制稍微复杂一点的报头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,struct,json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">phone=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#就是它，在bind前加</span></span><br><span class="line"></span><br><span class="line">phone.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">phone.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr=phone.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cmd: %s&#x27;</span> %cmd)</span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                             shell=<span class="literal">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE)</span><br><span class="line">        err=res.stderr.read()</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">        <span class="keyword">if</span> err:</span><br><span class="line">            back_msg=err</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_msg=res.stdout.read()</span><br><span class="line"></span><br><span class="line">        headers=&#123;<span class="string">&#x27;data_size&#x27;</span>:<span class="built_in">len</span>(back_msg)&#125;</span><br><span class="line">        head_json=json.dumps(headers)</span><br><span class="line">        head_json_bytes=<span class="built_in">bytes</span>(head_json,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        conn.send(struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(head_json_bytes))) <span class="comment">#先发报头的长度</span></span><br><span class="line">        conn.send(head_json_bytes) <span class="comment">#再发报头</span></span><br><span class="line">        conn.sendall(back_msg) <span class="comment">#在发真实的内容</span></span><br><span class="line"></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct,json</span><br><span class="line"></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">    client.send(<span class="built_in">bytes</span>(cmd,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    head=client.recv(<span class="number">4</span>)</span><br><span class="line">    head_json_len=struct.unpack(<span class="string">&#x27;i&#x27;</span>,head)[<span class="number">0</span>]</span><br><span class="line">    head_json=json.loads(client.recv(head_json_len).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data_len=head_json[<span class="string">&#x27;data_size&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    recv_size=<span class="number">0</span></span><br><span class="line">    recv_data=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; data_len:</span><br><span class="line">        recv_data+=client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size+=<span class="built_in">len</span>(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment">#print(recv_data.decode(&#x27;gbk&#x27;)) #windows默认gbk编码</span></span><br></pre></td></tr></table></figure>

<p>FTP作业：上传下载文件</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYTCPServer</span>:</span></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line"></span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line"></span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    max_packet_size = <span class="number">8192</span></span><br><span class="line"></span><br><span class="line">    coding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    request_queue_size = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    server_dir=<span class="string">&#x27;file_upload&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, server_address, bind_and_activate=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Constructor.  May be extended, do not override.&quot;&quot;&quot;</span></span><br><span class="line">        self.server_address=server_address</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> bind_and_activate:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.server_bind()</span><br><span class="line">                self.server_activate()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.server_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Called by constructor to bind the socket.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.allow_reuse_address:</span><br><span class="line">            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.socket.bind(self.server_address)</span><br><span class="line">        self.server_address = self.socket.getsockname()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_activate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Called by constructor to activate the server.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.socket.listen(self.request_queue_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Called to clean-up the server.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get the request and client address from the socket.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.socket.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Called to clean up an individual request.&quot;&quot;&quot;</span></span><br><span class="line">        request.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.conn,self.client_addr=self.get_request()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;from client &#x27;</span>,self.client_addr)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    head_struct = self.conn.recv(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> head_struct:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                    head_len = struct.unpack(<span class="string">&#x27;i&#x27;</span>, head_struct)[<span class="number">0</span>]</span><br><span class="line">                    head_json = self.conn.recv(head_len).decode(self.coding)</span><br><span class="line">                    head_dic = json.loads(head_json)</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(head_dic)</span><br><span class="line">                    <span class="comment">#head_dic=&#123;&#x27;cmd&#x27;:&#x27;put&#x27;,&#x27;filename&#x27;:&#x27;a.txt&#x27;,&#x27;filesize&#x27;:123123&#125;</span></span><br><span class="line">                    cmd=head_dic[<span class="string">&#x27;cmd&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd):</span><br><span class="line">                        func=<span class="built_in">getattr</span>(self,cmd)</span><br><span class="line">                        func(head_dic)</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self,args</span>):</span></span><br><span class="line">        file_path=os.path.normpath(os.path.join(</span><br><span class="line">            self.server_dir,</span><br><span class="line">            args[<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        filesize=args[<span class="string">&#x27;filesize&#x27;</span>]</span><br><span class="line">        recv_size=<span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>,file_path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> recv_size &lt; filesize:</span><br><span class="line">                recv_data=self.conn.recv(self.max_packet_size)</span><br><span class="line">                f.write(recv_data)</span><br><span class="line">                recv_size+=<span class="built_in">len</span>(recv_data)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;recvsize:%s filesize:%s&#x27;</span> %(recv_size,filesize))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tcpserver1=MYTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">tcpserver1.run()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYTCPClient</span>:</span></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line"></span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line"></span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    max_packet_size = <span class="number">8192</span></span><br><span class="line"></span><br><span class="line">    coding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    request_queue_size = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, server_address, connect=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.server_address=server_address</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> connect:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.client_connect()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.client_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.socket.connect(self.server_address)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp=<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> inp:<span class="keyword">continue</span></span><br><span class="line">            l=inp.split()</span><br><span class="line">            cmd=l[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd):</span><br><span class="line">                func=<span class="built_in">getattr</span>(self,cmd)</span><br><span class="line">                func(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self,args</span>):</span></span><br><span class="line">        cmd=args[<span class="number">0</span>]</span><br><span class="line">        filename=args[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;file:%s is not exists&#x27;</span> %filename)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            filesize=os.path.getsize(filename)</span><br><span class="line"></span><br><span class="line">        head_dic=&#123;<span class="string">&#x27;cmd&#x27;</span>:cmd,<span class="string">&#x27;filename&#x27;</span>:os.path.basename(filename),<span class="string">&#x27;filesize&#x27;</span>:filesize&#125;</span><br><span class="line">        <span class="built_in">print</span>(head_dic)</span><br><span class="line">        head_json=json.dumps(head_dic)</span><br><span class="line">        head_json_bytes=<span class="built_in">bytes</span>(head_json,encoding=self.coding)</span><br><span class="line"></span><br><span class="line">        head_struct=struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(head_json_bytes))</span><br><span class="line">        self.socket.send(head_struct)</span><br><span class="line">        self.socket.send(head_json_bytes)</span><br><span class="line">        send_size=<span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                self.socket.send(line)</span><br><span class="line">                send_size+=<span class="built_in">len</span>(line)</span><br><span class="line">                <span class="built_in">print</span>(send_size)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;upload successful&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client=MYTCPClient((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">client.run()</span><br></pre></td></tr></table></figure>

<h3 id="十三-认证客户端的链接合法性"><a href="#十三-认证客户端的链接合法性" class="headerlink" title="十三 认证客户端的链接合法性"></a>十三 认证客户端的链接合法性</h3><p>如果你想在分布式系统中实现一个简单的客户端链接认证功能，又不像SSL那么复杂，那么利用hmac+加盐的方式来实现</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line"></span><br><span class="line">secret_key=<span class="string">b&#x27;linhaifeng bang bang bang&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    认证客户端链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始验证新链接的合法性&#x27;</span>)</span><br><span class="line">    msg=os.urandom(<span class="number">32</span>)</span><br><span class="line">    conn.sendall(msg)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    respone=conn.recv(<span class="built_in">len</span>(digest))</span><br><span class="line">    <span class="keyword">return</span> hmac.compare_digest(respone,digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_handler</span>(<span class="params">conn,bufsize=<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> conn_auth(conn):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该链接不合法,关闭&#x27;</span>)</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;链接合法,开始通信&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=conn.recv(bufsize)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">break</span></span><br><span class="line">        conn.sendall(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_handler</span>(<span class="params">ip_port,bufsize,backlog=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    只处理链接</span></span><br><span class="line"><span class="string">    :param ip_port:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_server.bind(ip_port)</span><br><span class="line">    tcp_socket_server.listen(backlog)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=tcp_socket_server.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;新连接[%s:%s]&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line">        data_handler(conn,bufsize)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    server_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure>

<p>客户端(合法)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line"></span><br><span class="line">secret_key=<span class="string">b&#x27;linhaifeng bang bang bang&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    验证客户端到服务器的链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    msg=conn.recv(<span class="number">32</span>)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    conn.sendall(digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span>(<span class="params">ip_port,bufsize=<span class="number">1024</span></span>):</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    conn_auth(tcp_socket_client)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        <span class="built_in">print</span>(respone.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure>

<p>客户端(非法:不知道加密方式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span>(<span class="params">ip_port,bufsize=<span class="number">1024</span></span>):</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        <span class="built_in">print</span>(respone.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure>

<p>客户端(非法:不知道secret_key)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line"></span><br><span class="line">secret_key=<span class="string">b&#x27;linhaifeng bang bang bang1111&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    验证客户端到服务器的链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    msg=conn.recv(<span class="number">32</span>)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    conn.sendall(digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span>(<span class="params">ip_port,bufsize=<span class="number">1024</span></span>):</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    conn_auth(tcp_socket_client)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        <span class="built_in">print</span>(respone.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure>

<h3 id="十四-socketserver实现并发"><a href="#十四-socketserver实现并发" class="headerlink" title="十四 socketserver实现并发"></a>十四 socketserver实现并发</h3><p>基于tcp的套接字，关键就是两个循环，一个链接循环，一个通信循环</p>
<p>socketserver模块中分两大类：server类（解决链接问题）和request类（解决通信问题）</p>
<p>server类：</p>
<p><img src="https://pic1.zhimg.com/80/v2-8888d725cb767594afe03b558814ba28_720w.jpg" alt="img"></p>
<p>request类：</p>
<p><img src="https://pic2.zhimg.com/80/v2-d39565c190e7edc28f8cf8be1bf981f9_720w.jpg" alt="img"></p>
<p>继承关系:</p>
<p><img src="https://pic1.zhimg.com/80/v2-16fcc2d93beebe3f1739951dc5d80114_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-154c5cb9cc464fac3e81703938479446_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-43cec3a3b133fd33c4d4db33af86807a_720w.jpg" alt="img"></p>
<p>以下述代码为例，分析socketserver源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ftpserver=socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>),FtpServer)</span><br><span class="line">ftpserver.serve_forever()</span><br></pre></td></tr></table></figure>

<p>查找属性的顺序：ThreadingTCPServer-&gt;ThreadingMixIn-&gt;TCPServer-&gt;BaseServer</p>
<ol>
<li>实例化得到ftpserver，先找类ThreadingTCPServer的<strong>init</strong>,在TCPServer中找到，进而执行server_bind,server_active</li>
<li>找ftpserver下的serve_forever,在BaseServer中找到，进而执行self._handle_request_noblock()，该方法同样是在BaseServer中</li>
<li>执行self._handle_request_noblock()进而执行request, client_address &#x3D; self.get_request()（就是TCPServer中的self.socket.accept()），然后执行self.process_request(request, client_address)</li>
<li>在ThreadingMixIn中找到process_request，开启多线程应对并发，进而执行process_request_thread，执行self.finish_request(request, client_address)</li>
<li>上述四部分完成了链接循环，本部分开始进入处理通讯部分，在BaseServer中找到finish_request,触发我们自己定义的类的实例化，去找<strong>init</strong>方法，而我们自己定义的类没有该方法，则去它的父类也就是BaseRequestHandler中找….</li>
</ol>
<p>源码分析总结：</p>
<p>基于tcp的socketserver我们自己定义的类中的</p>
<ol>
<li>self.server即套接字对象</li>
<li>self.request即一个链接</li>
<li>self.client_address即客户端地址</li>
</ol>
<p>基于udp的socketserver我们自己定义的类中的</p>
<ol>
<li>self.request是一个元组（第一个元素是客户端发来的数据，第二部分是服务端的udp套接字对象），如(b’adsf’, )</li>
<li>self.client_address即客户端地址</li>
</ol>
<p>FtpServer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpServer</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    coding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    server_dir=<span class="string">&#x27;file_upload&#x27;</span></span><br><span class="line">    max_packet_size=<span class="number">1024</span></span><br><span class="line">    BASE_DIR=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.request)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data=self.request.recv(<span class="number">4</span>)</span><br><span class="line">            data_len=struct.unpack(<span class="string">&#x27;i&#x27;</span>,data)[<span class="number">0</span>]</span><br><span class="line">            head_json=self.request.recv(data_len).decode(self.coding)</span><br><span class="line">            head_dic=json.loads(head_json)</span><br><span class="line">            <span class="comment"># print(head_dic)</span></span><br><span class="line">            cmd=head_dic[<span class="string">&#x27;cmd&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd):</span><br><span class="line">                func=<span class="built_in">getattr</span>(self,cmd)</span><br><span class="line">                func(head_dic)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self,args</span>):</span></span><br><span class="line">        file_path = os.path.normpath(os.path.join(</span><br><span class="line">            self.BASE_DIR,</span><br><span class="line">            self.server_dir,</span><br><span class="line">            args[<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        filesize = args[<span class="string">&#x27;filesize&#x27;</span>]</span><br><span class="line">        recv_size = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, file_path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> recv_size &lt; filesize:</span><br><span class="line">                recv_data = self.request.recv(self.max_packet_size)</span><br><span class="line">                f.write(recv_data)</span><br><span class="line">                recv_size += <span class="built_in">len</span>(recv_data)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;recvsize:%s filesize:%s&#x27;</span> % (recv_size, filesize))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ftpserver=socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>),FtpServer)</span><br><span class="line">ftpserver.serve_forever()</span><br></pre></td></tr></table></figure>

<p>FtpClient</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYTCPClient</span>:</span></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line"></span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line"></span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    max_packet_size = <span class="number">8192</span></span><br><span class="line"></span><br><span class="line">    coding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    request_queue_size = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, server_address, connect=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.server_address=server_address</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> connect:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.client_connect()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.client_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.socket.connect(self.server_address)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp=<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> inp:<span class="keyword">continue</span></span><br><span class="line">            l=inp.split()</span><br><span class="line">            cmd=l[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd):</span><br><span class="line">                func=<span class="built_in">getattr</span>(self,cmd)</span><br><span class="line">                func(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self,args</span>):</span></span><br><span class="line">        cmd=args[<span class="number">0</span>]</span><br><span class="line">        filename=args[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;file:%s is not exists&#x27;</span> %filename)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            filesize=os.path.getsize(filename)</span><br><span class="line"></span><br><span class="line">        head_dic=&#123;<span class="string">&#x27;cmd&#x27;</span>:cmd,<span class="string">&#x27;filename&#x27;</span>:os.path.basename(filename),<span class="string">&#x27;filesize&#x27;</span>:filesize&#125;</span><br><span class="line">        <span class="built_in">print</span>(head_dic)</span><br><span class="line">        head_json=json.dumps(head_dic)</span><br><span class="line">        head_json_bytes=<span class="built_in">bytes</span>(head_json,encoding=self.coding)</span><br><span class="line"></span><br><span class="line">        head_struct=struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(head_json_bytes))</span><br><span class="line">        self.socket.send(head_struct)</span><br><span class="line">        self.socket.send(head_json_bytes)</span><br><span class="line">        send_size=<span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                self.socket.send(line)</span><br><span class="line">                send_size+=<span class="built_in">len</span>(line)</span><br><span class="line">                <span class="built_in">print</span>(send_size)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;upload successful&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client=MYTCPClient((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">client.run()</span><br></pre></td></tr></table></figure>

<h3 id="十五-作业"><a href="#十五-作业" class="headerlink" title="十五 作业"></a>十五 作业</h3><p><img src="https://pic3.zhimg.com/80/v2-37d4aec9c5fe06d298f0d35258c0a222_720w.jpg" alt="img"></p>
<h2 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=119">
  </a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>32-并发编程（一）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/32_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="一-引子"><a href="#一-引子" class="headerlink" title="一 引子"></a>一 引子</h2><p>顾名思义，进程即正在执行的一个过程。进程是对正在运行程序的一个抽象。</p>
<p>进程的概念起源于操作系统，是操作系统最核心的概念，也是操作系统提供的最古老也是最重要的抽象概念之一。操作系统的其他所有内容都是围绕进程的概念展开的。</p>
<p>所以想要真正了解进程，必须事先了解操作系统</p>
<h2 id="二-为什么要有操作系统"><a href="#二-为什么要有操作系统" class="headerlink" title="二 为什么要有操作系统"></a>二 为什么要有操作系统</h2><p>现代的计算机系统主要是由一个或者多个处理器，主存，硬盘，键盘，鼠标，显示器，打印机，网络接口及其他输入输出设备组成。</p>
<p>一般而言，现代计算机系统是一个复杂的系统。</p>
<p>其一：如果每位应用程序员都必须掌握该系统所有的细节，那就不可能再编写代码了（严重影响了程序员的开发效率：全部掌握这些细节可能需要一万年….）</p>
<p>其二：并且管理这些部件并加以优化使用，是一件极富挑战性的工作，于是，计算安装了一层软件（系统软件），称为操作系统。它的任务就是为用户程序提供一个更好、更简单、更清晰的计算机模型，并管理刚才提到的所有设备。</p>
<p><strong>总结：</strong></p>
<p><strong>程序员无法把所有的硬件操作细节都了解到，管理这些硬件并且加以优化使用是非常繁琐的工作，这个繁琐的工作就是操作系统来干的，有了他，程序员就从这些繁琐的工作中解脱了出来，只需要考虑自己的应用软件的编写就可以了，应用软件直接使用操作系统提供的功能来间接使用硬件。</strong></p>
<h2 id="三-什么是操作系统"><a href="#三-什么是操作系统" class="headerlink" title="三 什么是操作系统"></a>三 什么是操作系统</h2><p><strong>精简的说的话，操作系统就是一个协调、管理和控制计算机硬件资源和软件资源的控制程序。操作系统所处的位置如图1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#操作系统位于计算机硬件与应用软件之间，本质也是一个软件。操作系统由操作系统的内核（运行于内核态，管理硬件资源）以及系统调用（运行于用户态，为应用程序员写的应用程序提供系统调用接口）两部分组成，所以，单纯的说操作系统是运行于内核态的，是不准确的。</span><br></pre></td></tr></table></figure>



<p><img src="https://pic4.zhimg.com/80/v2-6ad1085ae57855ce665ca5b8692b6e67_720w.jpg" alt="img"></p>
<p> 图1</p>
<p><strong>细说的话，操作系统应该分成两部分功能：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一：隐藏了丑陋的硬件调用接口，为应用程序员提供调用硬件资源的更好，更简单，更清晰的模型（系统调用接口）。应用程序员有了这些接口后，就不用再考虑操作硬件的细节，专心开发自己的应用程序即可。</span></span><br><span class="line">例如：操作系统提供了文件这个抽象概念，对文件的操作就是对磁盘的操作，有了文件我们无需再去考虑关于磁盘的读写控制（比如控制磁盘转动，移动磁头读写数据等细节），</span><br><span class="line"></span><br><span class="line"><span class="comment">#二：将应用程序对硬件资源的竞态请求变得有序化</span></span><br><span class="line">例如：很多应用软件其实是共享一套计算机硬件，比方说有可能有三个应用程序同时需要申请打印机来输出内容，那么a程序竞争到了打印机资源就打印，然后可能是b竞争到打印机资源，也可能是c，这就导致了无序，打印机可能打印一段a的内容然后又去打印c...,操作系统的一个功能就是将这种无序变得有序。</span><br></pre></td></tr></table></figure>

<p>详解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">现代计算机或者网络都是多用户的，多个用户不仅共享硬件，而且共享文件，数据库等信息，共享意味着冲突和无序。</span><br><span class="line"></span><br><span class="line">操作系统主要使用来</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>记录哪个程序使用什么资源</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>对资源请求进行分配</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>为不同的程序和用户调解互相冲突的资源请求。</span><br><span class="line"></span><br><span class="line">我们可将上述操作系统的功能总结为：处理来自多个程序发起的多个（多个即多路）共享（共享即复用）资源的请求，简称多路复用</span><br><span class="line"></span><br><span class="line">多路复用有两种实现方式</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>时间上的复用</span><br><span class="line"></span><br><span class="line">当一个资源在时间上复用时，不同的程序或用户轮流使用它，第一个程序获取该资源使用结束后，在轮到第二个。。。第三个。。。</span><br><span class="line"></span><br><span class="line">例如：只有一个cpu，多个程序需要在该cpu上运行，操作系统先把cpu分给第一个程序，在这个程序运行的足够长的时间（时间长短由操作系统的算法说了算）或者遇到了I/O阻塞，操作系统则把cpu分配给下一个程序，以此类推，直到第一个程序重新被分配到了cpu然后再次运行，由于cpu的切换速度很快，给用户的感觉就是这些程序是同时运行的，或者说是并发的，或者说是伪并行的。至于资源如何实现时间复用，或者说谁应该是下一个要运行的程序，以及一个任务需要运行多长时间，这些都是操作系统的工作。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>空间上的复用</span><br><span class="line"></span><br><span class="line">每个客户都获取了一个大的资源中的一小部分资源，从而减少了排队等待资源的时间。</span><br><span class="line"></span><br><span class="line">例如：多个运行的程序同时进入内存，硬件层面提供保护机制来确保各自的内存是分割开的，且由操作系统控制，这比一个程序独占内存一个一个排队进入内存效率要高的多。</span><br><span class="line"></span><br><span class="line">有关空间复用的其他资源还有磁盘，在许多系统中，一个磁盘同时为许多用户保存文件。分配磁盘空间并且记录谁正在使用哪个磁盘块是操作系统资源管理的典型任务。</span><br><span class="line"></span><br><span class="line">这两种方式合起来便是多道技术</span><br></pre></td></tr></table></figure>



<p><img src="https://pic2.zhimg.com/80/v2-fb67806e24ae5472d9f9cfbb19a01855_720w.jpg" alt="img"></p>
<p> 图 2</p>
<h2 id="四-操作系统与普通软件的区别"><a href="#四-操作系统与普通软件的区别" class="headerlink" title="四 操作系统与普通软件的区别"></a>四 操作系统与普通软件的区别</h2><p>1.主要区别是：你不想用暴风影音了你可以选择用迅雷播放器或者干脆自己写一个，但是你无法写一个属于操作系统一部分的程序（时钟中断处理程序），操作系统由硬件保护，不能被用户修改。</p>
<p>2.操作系统与用户程序的差异并不在于二者所处的地位。特别地，操作系统是一个大型、复杂、长寿的软件，</p>
<ul>
<li>大型：linux或windows的源代码有五百万行数量级。按照每页50行共1000行的书来算，五百万行要有100卷，要用一整个书架子来摆置，这还仅仅是内核部分。用户程序，如GUI，库以及基本应用软件（如windows Explorer等），很容易就能达到这个数量的10倍或者20倍之多。</li>
<li>长寿：操作系统很难编写，如此大的代码量，一旦完成，操作系统所有者便不会轻易扔掉，再写一个。而是在原有的基础上进行改进。（基本上可以把windows95&#x2F;98&#x2F;Me看出一个操作系统，而windows NT&#x2F;2000&#x2F;XP&#x2F;Vista则是两位一个操作系统，对于用户来说它们十分相似。还有UNIX以及它的变体和克隆版本也演化了多年，如System V版，Solaris以及FreeBSD等都是Unix的原始版，不过尽管linux非常依照UNIX模式而仿制，并且与UNIX高度兼容，但是linux具有全新的代码基础）</li>
</ul>
<h2 id="五-操作系统发展史"><a href="#五-操作系统发展史" class="headerlink" title="五 操作系统发展史"></a>五 操作系统发展史</h2><p><strong>第一代计算机（1940~1955）：真空管和穿孔卡片</strong></p>
<p>第一代计算机的产生背景：</p>
<p>第一代之前人类是想用机械取代人力，第一代计算机的产生是计算机由机械时代进入电子时代的标志，从Babbage失败之后一直到第二次世界大战，数字计算机的建造几乎没有什么进展，第二次世界大战刺激了有关计算机研究的爆炸性进展。</p>
<p>lowa州立大学的john Atanasoff教授和他的学生Clifford Berry建造了据认为是第一台可工作的数字计算机。该机器使用300个真空管。大约在同时，Konrad Zuse在柏林用继电器构建了Z3计算机，英格兰布莱切利园的一个小组在1944年构建了Colossus，Howard Aiken在哈佛大学建造了Mark 1，宾夕法尼亚大学的William Mauchley和他的学生J.Presper Eckert建造了ENIAC。这些机器有的是二进制的，有的使用真空管，有的是可编程的，但都非常原始，设置需要花费数秒钟时间才能完成最简单的运算。</p>
<p>在这个时期，同一个小组里的工程师们，设计、建造、编程、操作及维护同一台机器，所有的程序设计是用纯粹的机器语言编写的，甚至更糟糕，需要通过成千上万根电缆接到插件板上连成电路来控制机器的基本功能。没有程序设计语言（汇编也没有），操作系统则是从来都没听说过。使用机器的过程更加原始，详见下‘工作过程’</p>
<p>特点： 没有操作系统的概念 所有的程序设计都是直接操控硬件</p>
<p>工作过程： 程序员在墙上的机时表预约一段时间，然后程序员拿着他的插件版到机房里，将自己的插件板街道计算机里，这几个小时内他独享整个计算机资源，后面的一批人都得等着(两万多个真空管经常会有被烧坏的情况出现)。</p>
<p>后来出现了穿孔卡片，可以将程序写在卡片上，然后读入机而不用插件板</p>
<p>优点：</p>
<p>程序员在申请的时间段内独享整个资源，可以即时地调试自己的程序（有bug可以立刻处理）</p>
<p>缺点：</p>
<p>浪费计算机资源，一个时间段内只有一个人用。 注意：同一时刻只有一个程序在内存中，被cpu调用执行，比方说10个程序的执行，是串行的</p>
<p>**第二代计算机*<em>（1955~1965）*<em>：晶体管和批处理系统</em></em></p>
<p>第二代计算机的产生背景：</p>
<p>由于当时的计算机非常昂贵，自认很自然的想办法较少机时的浪费。通常采用的方法就是批处理系统。</p>
<p>特点： 设计人员、生产人员、操作人员、程序人员和维护人员直接有了明确的分工，计算机被锁在专用空调房间中，由专业操作人员运行，这便是‘大型机’。</p>
<p>有了操作系统的概念</p>
<p>有了程序设计语言：FORTRAN语言或汇编语言，写到纸上，然后穿孔打成卡片，再讲卡片盒带到输入室，交给操作员，然后喝着咖啡等待输出接口</p>
<p>工作过程：插图</p>
<p><img src="https://pic3.zhimg.com/80/v2-342367e551bb23a7f1bceedd8a3cdf36_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-7e573545a6efac95f8d52717d2c74ffc_720w.jpg" alt="img"></p>
<p>第二代如何解决第一代的问题&#x2F;缺点： 1.把一堆人的输入攒成一大波输入， 2.然后顺序计算（这是有问题的，但是第二代计算也没有解决） 3.把一堆人的输出攒成一大波输出</p>
<p>现代操作系统的前身:(见图）</p>
<p>优点：批处理，节省了机时</p>
<p>缺点： <em>1.整个流程需要人参与控制，将磁带搬来搬去（中间俩小人）</em></p>
<p>2.计算的过程仍然是顺序计算-》串行</p>
<p>3.程序员原来独享一段时间的计算机，现在必须被统一规划到一批作业中，等待结果和重新调试的过程都需要等同批次的其他程序都运作完才可以（这极大的影响了程序的开发效率，无法及时调试程序）</p>
<p>**第三代计算机*<em>（1965~1980）*<em>：集成电路芯片和多道程序设计</em></em></p>
<p>第三代计算机的产生背景：</p>
<p>20世纪60年代初期，大多数计算机厂商都有两条完全不兼容的生产线。</p>
<p>一条是面向字的：大型的科学计算机，如IBM 7094，见上图，主要用于科学计算和工程计算</p>
<p>另外一条是面向字符的：商用计算机，如IBM 1401，见上图，主要用于银行和保险公司从事磁带归档和打印服务</p>
<p>开发和维护完全不同的产品是昂贵的，同时不同的用户对计算机的用途不同。</p>
<p>IBM公司试图通过引入system&#x2F;360系列来同时满足科学计算和商业计算，360系列低档机与1401相当，高档机比7094功能强很多，不同的性能卖不同的价格</p>
<p>360是第一个采用了（小规模）芯片（集成电路）的主流机型，与采用晶体管的第二代计算机相比，性价比有了很大的提高。这些计算机的后代仍在大型的计算机中心里使用，<strong>此乃现在服务器的前身</strong>，这些服务器每秒处理不小于千次的请求。</p>
<p>如何解决第二代计算机的问题1： 卡片被拿到机房后能够很快的将作业从卡片读入磁盘，于是任何时刻当一个作业结束时，操作系统就能将一个作业从磁带读出，装进空出来的内存区域运行，这种技术叫做 同时的外部设备联机操作：SPOOLING，该技术同时用于输出。当采用了这种技术后，就不在需要IBM1401机了，也不必将磁带搬来搬去了（中间俩小人不再需要）</p>
<p>如何解决第二代计算机的问题2：</p>
<p>第三代计算机的操作系统广泛应用了第二代计算机的操作系统没有的关键技术：多道技术</p>
<p>*<strong>cpu在执行一个任务的过程中，若需要操作硬盘，则发送操作硬盘的指令，指令一旦发出，硬盘上的机械手臂滑动读取数据到内存中，这一段时间，cpu需要等待，时间可能很短，但对于cpu来说已经很长很长，长到可以让cpu做很多其他的任务，如果我们让cpu在这段时间内切换到去做其他的任务，这样cpu不就充分利用了吗。这正是多道技术产生的技术背景*</strong></p>
<p><strong>多道技术：</strong></p>
<p>多道技术中的多道指的是多个程序，多道技术的实现是为了解决多个程序竞争或者说共享同一个资源（比如cpu）的有序调度问题，解决方式即多路复用，多路复用分为时间上的复用和空间上的复用。</p>
<p><strong>空间上的复用</strong>：将内存分为几部分，每个部分放入一个程序，这样，同一时间内存中就有了多道程序。</p>
<p><img src="https://pic4.zhimg.com/80/v2-668294576c0e934be21f7aebeb1ed45f_720w.jpg" alt="img"></p>
<p><strong>时间上的复用</strong>：当一个程序在等待I&#x2F;O时，另一个程序可以使用cpu，如果内存中可以同时存放足够多的作业，则cpu的利用率可以接近100%，类似于我们小学数学所学的<strong>统筹方法</strong>。（操作系统采用了多道技术后，可以控制进程的切换，或者说进程之间去争抢cpu的执行权限。这种切换不仅会在一个进程遇到io时进行，一个进程占用cpu时间过长也会切换，或者说被操作系统夺走cpu的执行权限）</p>
<p><img src="https://pic3.zhimg.com/80/v2-1c53668bcee393edac0d7b3b3daff1ae_720w.jpg" alt="img"></p>
<p>详解</p>
<p>空间上的复用最大的问题是：程序之间的内存必须分割，这种分割需要在硬件层面实现，由操作系统控制。如果内存彼此不分割，则一个程序可以访问另外一个程序的内存，</p>
<p>首先丧失的是安全性，比如你的qq程序可以访问操作系统的内存，这意味着你的qq可以拿到操作系统的所有权限。</p>
<p>其次丧失的是稳定性，某个程序崩溃时有可能把别的程序的内存也给回收了，比方说把操作系统的内存给回收了，则操作系统崩溃。</p>
<p>第三代计算机的操作系统仍然是批处理</p>
<p>许多程序员怀念第一代独享的计算机，可以即时调试自己的程序。为了满足程序员们很快可以得到响应，出现了分时操作系统</p>
<p>如何解决第二代计算机的问题3：</p>
<p>分时操作系统： 多个联机终端+多道技术</p>
<p>20个客户端同时加载到内存，有17在思考，3个在运行，cpu就采用多道的方式处理内存中的这3个程序，由于客户提交的一般都是简短的指令而且很少有耗时长的，索引计算机能够为许多用户提供快速的交互式服务，所有的用户都以为自己独享了计算机资源</p>
<p>CTTS：麻省理工（MIT）在一台改装过的7094机上开发成功的，CTSS兼容分时系统，<strong>第三代计算机广泛采用了必须的保护硬件（程序之间的内存彼此隔离）之后，分时系统才开始流行</strong></p>
<p>MIT，贝尔实验室和通用电气在CTTS成功研制后决定开发能够同时支持上百终端的MULTICS（其设计者着眼于建造满足波士顿地区所有用户计算需求的一台机器），很明显真是要上天啊，最后摔死了。</p>
<p>后来一位参加过MULTICS研制的贝尔实验室计算机科学家Ken Thompson开发了一个简易的，单用户版本的MULTICS，<strong>这就是后来的UNIX系统</strong>。基于它衍生了很多其他的Unix版本，为了使程序能在任何版本的unix上运行，IEEE提出了一个unix标准，即<strong>posix（可移植的操作系统接口Portable Operating System Interface）</strong></p>
<p>后来，在1987年，出现了一个UNIX的小型克隆，即minix，用于教学使用。芬兰学生Linus Torvalds基于它编写了Linux</p>
<p><strong>第四代计算机*<em>（1980~至今）：个人计算机*</em></strong></p>
<p>PS：即使可以利用的cpu只有一个（早期的计算机确实如此），也能保证支持（伪）并发的能力。将一个单独的cpu变成多个虚拟的cpu（多道技术：时间多路复用和空间多路复用+硬件上支持隔离），没有进程的抽象，现代计算机将不复存在。</p>
<h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六 总结"></a>六 总结</h2><p><strong>必备的理论基础：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一 操作系统的作用：</span></span><br><span class="line">    <span class="number">1</span>：隐藏丑陋复杂的硬件接口，提供良好的抽象接口</span><br><span class="line">    <span class="number">2</span>：管理、调度进程，并且将多个进程对硬件的竞争变得有序</span><br><span class="line"></span><br><span class="line"><span class="comment">#二 多道技术：</span></span><br><span class="line">    <span class="number">1.</span>产生背景：针对单核，实现并发</span><br><span class="line">    ps：</span><br><span class="line">    现在的主机一般是多核，那么每个核都会利用多道技术</span><br><span class="line">    有<span class="number">4</span>个cpu，运行于cpu1的某个程序遇到io阻塞，会等到io结束再重新调度，会被调度到<span class="number">4</span>个</span><br><span class="line">    cpu中的任意一个，具体由操作系统调度算法决定。</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>空间上的复用：如内存中同时有多道程序</span><br><span class="line">    <span class="number">3.</span>时间上的复用：复用一个cpu的时间片</span><br><span class="line">       强调：遇到io切，占用cpu时间过长也切，核心在于切之前将进程的状态保存下来，这样</span><br><span class="line">            才能保证下次切换回来时，能基于上次切走的位置继续运行</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=129">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=129<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>34-并发编程（三）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/34_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%88%E6%93%8D%E4%BD%9C%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="一-multiprocessing模块介绍"><a href="#一-multiprocessing模块介绍" class="headerlink" title="一 multiprocessing模块介绍"></a>一 multiprocessing模块介绍</h3><p>python中的多线程无法利用多核优势，如果想要充分地使用多核CPU的资源（os.cpu_count()查看），在python中大部分情况需要使用多进程。Python提供了multiprocessing。 multiprocessing模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块threading的编程接口类似。</p>
<p>multiprocessing模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。</p>
<p>需要再次强调的一点是：与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内。</p>
<h3 id="二-Process类的介绍"><a href="#二-Process类的介绍" class="headerlink" title="二 Process类的介绍"></a>二 Process类的介绍</h3><p><strong>创建进程的类</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])，由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line"><span class="number">1.</span> 需要使用关键字的方式来指定参数</span><br><span class="line"><span class="number">2.</span> args指定的为传给target函数的位置参数，是一个元组形式，必须有逗号</span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> group参数未使用，值始终为<span class="literal">None</span></span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> target表示调用对象，即子进程要执行的任务</span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> args表示调用对象的位置参数元组，args=(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;egon&#x27;</span>,)</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> kwargs表示调用对象的字典,kwargs=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="number">8</span> </span><br><span class="line"><span class="number">9</span> name为子进程的名称</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> p.start()：启动进程，并调用该子进程中的p.run() </span><br><span class="line"> <span class="number">2</span> p.run():进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法  </span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> p.terminate():强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</span><br><span class="line"> <span class="number">5</span> p.is_alive():如果p仍然运行，返回<span class="literal">True</span></span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> p.join([timeout]):主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程</span><br></pre></td></tr></table></figure>

<p><strong>属性介绍：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> p.daemon：默认值为<span class="literal">False</span>，如果设为<span class="literal">True</span>，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为<span class="literal">True</span>后，p不能创建自己的新进程，必须在p.start()之前设置</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> p.name:进程的名称</span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> p.pid：进程的pid</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> p.exitcode:进程在运行时为<span class="literal">None</span>、如果为–N，表示被信号N结束(了解即可)</span><br><span class="line"><span class="number">8</span> </span><br><span class="line"><span class="number">9</span> p.authkey:进程的身份验证键,默认是由os.urandom()随机生成的<span class="number">32</span>字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）</span><br></pre></td></tr></table></figure>

<h3 id="三-Process类的使用"><a href="#三-Process类的使用" class="headerlink" title="三 Process类的使用"></a>三 Process类的使用</h3><p><strong>注意：在windows中Process()必须放到# if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:下</strong></p>
<p>详细解释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Since Windows has no fork, the multiprocessing module starts a new Python process <span class="keyword">and</span> imports the calling module. </span><br><span class="line">If Process() gets called upon <span class="keyword">import</span>, then this sets off an infinite succession of new processes (<span class="keyword">or</span> until your machine runs out of resources). </span><br><span class="line">This <span class="keyword">is</span> the reason <span class="keyword">for</span> hiding calls to Process() inside</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span></span><br><span class="line">since statements inside this <span class="keyword">if</span>-statement will <span class="keyword">not</span> get called upon <span class="keyword">import</span>.</span><br><span class="line">由于Windows没有fork，多处理模块启动一个新的Python进程并导入调用模块。 </span><br><span class="line">如果在导入时调用Process（），那么这将启动无限继承的新进程（或直到机器耗尽资源）。 </span><br><span class="line">这是隐藏对Process（）内部调用的原，使用<span class="keyword">if</span> __name__ == “__main __”，这个<span class="keyword">if</span>语句中的语句将不会在导入时被调用。</span><br></pre></td></tr></table></figure>

<p><strong>创建并开启子进程的两种方式</strong></p>
<p>方法一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开进程的方法一:</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">piao</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s piaoing&#x27;</span> %name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s piao end&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=Process(target=piao,args=(<span class="string">&#x27;egon&#x27;</span>,)) <span class="comment">#必须加,号</span></span><br><span class="line">p2=Process(target=piao,args=(<span class="string">&#x27;alex&#x27;</span>,))</span><br><span class="line">p3=Process(target=piao,args=(<span class="string">&#x27;wupeqi&#x27;</span>,))</span><br><span class="line">p4=Process(target=piao,args=(<span class="string">&#x27;yuanhao&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开进程的方法二:</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s piaoing&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s piao end&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">p1=Piao(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">p2=Piao(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line">p3=Piao(<span class="string">&#x27;wupeiqi&#x27;</span>)</span><br><span class="line">p4=Piao(<span class="string">&#x27;yuanhao&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1.start() <span class="comment">#start会自动调用run</span></span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>进程直接的内存空间是隔离的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">n=<span class="number">100</span> <span class="comment">#在windows系统中应该把全局变量定义在if __name__ == &#x27;__main__&#x27;之上就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程内: &#x27;</span>,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程内: &#x27;</span>,n)</span><br></pre></td></tr></table></figure>

<p>练习1：把上周所学的socket通信变成并发的形式</p>
<p>server端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">conn,client_addr</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            msg=conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">break</span></span><br><span class="line">            conn.send(msg.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: <span class="comment">#windows下start进程一定要写到这下面</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,client_addr=server.accept()</span><br><span class="line">        p=Process(target=talk,args=(conn,client_addr))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>多个client端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    msg=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>这么实现有没有问题？？？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">每来一个客户端，都在服务端开启一个进程，如果并发来一个万个客户端，要开启一万个进程吗，你自己尝试着在你自己的机器上开启一万个，<span class="number">10</span>万个进程试一试。</span><br><span class="line">解决方法：进程池</span><br></pre></td></tr></table></figure>

<p><em><strong>*Process对象的join方法*</strong></em></p>
<p>join：主进程等，等待子进程结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piaoing&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piao end&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=Piao(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">p.start()</span><br><span class="line">p.join(<span class="number">0.0001</span>) <span class="comment">#等待p停止,等0.0001秒就不再等了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有了join，程序不就是串行了吗？？？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">piao</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is piaoing&#x27;</span> %name)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is piao end&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line">p1=Process(target=piao,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">p2=Process(target=piao,args=(<span class="string">&#x27;alex&#x27;</span>,))</span><br><span class="line">p3=Process(target=piao,args=(<span class="string">&#x27;yuanhao&#x27;</span>,))</span><br><span class="line">p4=Process(target=piao,args=(<span class="string">&#x27;wupeiqi&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#有的同学会有疑问:既然join是等待进程结束,那么我像下面这样写,进程不就又变成串行的了吗?</span></span><br><span class="line"><span class="comment">#当然不是了,必须明确：p.join()是让谁等？</span></span><br><span class="line"><span class="comment">#很明显p.join()是让主线程等待p的结束，卡住的是主线程而绝非进程p，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#详细解析如下：</span></span><br><span class="line"><span class="comment">#进程只要start就会在开始运行了,所以p1-p4.start()时,系统中已经有四个并发的进程了</span></span><br><span class="line"><span class="comment">#而我们p1.join()是在等p1结束,没错p1只要不结束主线程就会一直卡在原地,这也是问题的关键</span></span><br><span class="line"><span class="comment">#join是让主线程等,而p1-p4仍然是并发执行的,p1.join的时候,其余p2,p3,p4仍然在运行,等#p1.join结束,可能p2,p3,p4早已经结束了,这样p2.join,p3.join.p4.join直接通过检测，无需等待</span></span><br><span class="line"><span class="comment"># 所以4个join花费的总时间仍然是耗费时间最长的那个进程运行的时间</span></span><br><span class="line">p1.join()</span><br><span class="line">p2.join()</span><br><span class="line">p3.join()</span><br><span class="line">p4.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#上述启动进程与join进程可以简写为</span></span><br><span class="line"><span class="comment"># p_l=[p1,p2,p3,p4]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># for p in p_l:</span></span><br><span class="line"><span class="comment">#     p.start()</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># for p in p_l:</span></span><br><span class="line"><span class="comment">#     p.join()</span></span><br></pre></td></tr></table></figure>

<p><strong>Process对象的其他方法或属性（了解）</strong></p>
<p>terminate与is_alive</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进程对象的其他方法一:terminate,is_alive</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piaoing&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piao end&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=Piao(<span class="string">&#x27;egon1&#x27;</span>)</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line">p1.terminate()<span class="comment">#关闭进程,不会立即关闭,所以is_alive立刻查看的结果可能还是存活</span></span><br><span class="line"><span class="built_in">print</span>(p1.is_alive()) <span class="comment">#结果为True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.is_alive()) <span class="comment">#结果为False</span></span><br></pre></td></tr></table></figure>

<p>name与pid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        <span class="comment"># self.name=name</span></span><br><span class="line">        <span class="comment"># super().__init__() #Process的__init__方法会执行self.name=Piao-1,</span></span><br><span class="line">        <span class="comment">#                    #所以加到这里,会覆盖我们的self.name=name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#为我们开启的进程设置名字的做法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piaoing&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piao end&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">p=Piao(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">p.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.pid) <span class="comment">#查看pid</span></span><br></pre></td></tr></table></figure>

<p><strong><img src="https://pic4.zhimg.com/80/v2-1891198a21b860d672d8ac2fae66da97_720w.jpg" alt="img"></strong></p>
<p><strong>僵尸进程与孤儿进程（了解）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">参考博客：http://www.cnblogs.com/Anker/p/<span class="number">3271773.</span>html</span><br><span class="line"></span><br><span class="line">一：僵尸进程（有害）</span><br><span class="line">　　僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。详解如下</span><br><span class="line"></span><br><span class="line">我们知道在unix/linux中，正常情况下子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束，如果子进程一结束就立刻回收其全部资源，那么在父进程内将无法获取子进程的状态信息。</span><br><span class="line"></span><br><span class="line">因此，UNⅨ提供了一种机制可以保证父进程可以在任意时刻获取子进程结束时的状态信息：</span><br><span class="line"><span class="number">1</span>、在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）</span><br><span class="line"><span class="number">2</span>、直到父进程通过wait / waitpid来取时才释放. 但这样就导致了问题，如果进程不调用wait / waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</span><br><span class="line"></span><br><span class="line">　　任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。  如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</span><br><span class="line"></span><br><span class="line">二：孤儿进程（无害）</span><br><span class="line"></span><br><span class="line">　　孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为<span class="number">1</span>)所收养，并由init进程对它们完成状态收集工作。</span><br><span class="line"></span><br><span class="line">　　孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了init进程身上，init进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。</span><br><span class="line"></span><br><span class="line">我们来测试一下（创建完子进程后，主进程所在的这个脚本就退出了，当父进程先于子进程结束时，子进程会被init收养，成为孤儿进程，而非僵尸进程），文件内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pid = os.getpid()</span><br><span class="line">ppid = os.getppid()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;im father&#x27;</span>, <span class="string">&#x27;pid&#x27;</span>, pid, <span class="string">&#x27;ppid&#x27;</span>, ppid</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="comment">#执行pid=os.fork()则会生成一个子进程</span></span><br><span class="line"><span class="comment">#返回值pid有两种值：</span></span><br><span class="line"><span class="comment">#    如果返回的pid值为0，表示在子进程当中</span></span><br><span class="line"><span class="comment">#    如果返回的pid值&gt;0，表示在父进程当中</span></span><br><span class="line"><span class="keyword">if</span> pid &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;father died..&#x27;</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保证主线程退出完毕</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;im child&#x27;</span>, os.getpid(), os.getppid()</span><br><span class="line"></span><br><span class="line">执行文件，输出结果：</span><br><span class="line">im father pid <span class="number">32515</span> ppid <span class="number">32015</span></span><br><span class="line">father died..</span><br><span class="line">im child <span class="number">32516</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">看，子进程已经被pid为<span class="number">1</span>的init进程接收了，所以僵尸进程在这种情况下是不存在的，存在只有孤儿进程而已，孤儿进程声明周期结束自然会被init来销毁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三：僵尸进程危害场景：</span><br><span class="line"></span><br><span class="line">　　例如有个进程，它定期的产 生一个子进程，这个子进程需要做的事情很少，做完它该做的事情之后就退出了，因此这个子进程的生命周期很短，但是，父进程只管生成新的子进程，至于子进程 退出之后的事情，则一概不闻不问，这样，系统运行上一段时间之后，系统中就会存在很多的僵死进程，倘若用ps命令查看的话，就会看到很多状态为Z的进程。 严格地来说，僵死进程并不是问题的根源，罪魁祸首是产生出大量僵死进程的那个父进程。因此，当我们寻求如何消灭系统中大量的僵死进程时，答案就是把产生大 量僵死进程的那个元凶枪毙掉（也就是通过kill发送SIGTERM或者SIGKILL信号啦）。枪毙了元凶进程之后，它产生的僵死进程就变成了孤儿进 程，这些孤儿进程会被init进程接管，init进程会wait()这些孤儿进程，释放它们占用的系统进程表中的资源，这样，这些已经僵死的孤儿进程 就能瞑目而去了。</span><br><span class="line"></span><br><span class="line">四：测试</span><br><span class="line"><span class="comment">#1、产生僵尸进程的程序test.py内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Process(target=run)</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>,os.getpid())</span><br><span class="line">    time.sleep(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、在unix或linux系统上执行</span></span><br><span class="line">[root@vm172-<span class="number">31</span>-<span class="number">0</span>-<span class="number">19</span> ~]<span class="comment"># python3  test.py &amp;</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">18652</span></span><br><span class="line">[root@vm172-<span class="number">31</span>-<span class="number">0</span>-<span class="number">19</span> ~]<span class="comment"># 主 18652</span></span><br><span class="line">子 <span class="number">18653</span></span><br><span class="line"></span><br><span class="line">[root@vm172-<span class="number">31</span>-<span class="number">0</span>-<span class="number">19</span> ~]<span class="comment"># ps aux |grep Z</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root     <span class="number">18653</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> pts/<span class="number">0</span>    Z    <span class="number">20</span>:02   <span class="number">0</span>:<span class="number">00</span> [python3] &lt;defunct&gt; <span class="comment">#出现僵尸进程</span></span><br><span class="line">root     <span class="number">18656</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">112648</span>   <span class="number">952</span> pts/<span class="number">0</span>    S+   <span class="number">20</span>:02   <span class="number">0</span>:<span class="number">00</span> grep --color=auto Z</span><br><span class="line"></span><br><span class="line">[root@vm172-<span class="number">31</span>-<span class="number">0</span>-<span class="number">19</span> ~]<span class="comment"># top #执行top命令发现1zombie</span></span><br><span class="line">top - <span class="number">20</span>:03:<span class="number">42</span> up <span class="number">31</span> <span class="built_in">min</span>,  <span class="number">3</span> users,  load average: <span class="number">0.01</span>, <span class="number">0.06</span>, <span class="number">0.12</span></span><br><span class="line">Tasks:  <span class="number">93</span> total,   <span class="number">2</span> running,  <span class="number">90</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">1</span> zombie</span><br><span class="line">%Cpu(s):  <span class="number">0.0</span> us,  <span class="number">0.3</span> sy,  <span class="number">0.0</span> ni, <span class="number">99.7</span> <span class="built_in">id</span>,  <span class="number">0.0</span> wa,  <span class="number">0.0</span> hi,  <span class="number">0.0</span> si,  <span class="number">0.0</span> st</span><br><span class="line">KiB Mem :  <span class="number">1016884</span> total,    <span class="number">97184</span> free,    <span class="number">70848</span> used,   <span class="number">848852</span> buff/cache</span><br><span class="line">KiB Swap:        <span class="number">0</span> total,        <span class="number">0</span> free,        <span class="number">0</span> used.   <span class="number">782540</span> avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                                                        </span><br><span class="line">root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">29788</span>   <span class="number">1256</span>    <span class="number">988</span> S  <span class="number">0.3</span>  <span class="number">0.1</span>   <span class="number">0</span>:<span class="number">01.50</span> elfin                                                                                                                      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、</span></span><br><span class="line">等待父进程正常结束后会调用wait／waitpid去回收僵尸进程</span><br><span class="line">但如果父进程是一个死循环，永远不会结束，那么该僵尸进程就会一直存在，僵尸进程过多，就是有害的</span><br><span class="line">解决方法一：杀死父进程</span><br><span class="line">解决方法二：对开启的子进程应该记得使用join，join会回收僵尸进程</span><br><span class="line">参考python2源码注释</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span>(<span class="params">self, timeout=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Wait until child process terminates</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> self._parent_pid == os.getpid(), <span class="string">&#x27;can only join a child process&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> self._popen <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">&#x27;can only join a started process&#x27;</span></span><br><span class="line">        res = self._popen.wait(timeout)</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _current_process._children.discard(self)</span><br><span class="line"></span><br><span class="line">join方法中调用了wait，告诉系统释放僵尸进程。discard为从自己的children中剔除</span><br><span class="line"></span><br><span class="line">解决方法三：http://blog.csdn.net/u010571844/article/details/<span class="number">50419798</span></span><br></pre></td></tr></table></figure>

<p><strong>思考：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join() <span class="comment"># 等待进程p结束后，join函数内部会发送系统调用wait，去告诉操作系统回收掉进程p的id号</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(p.pid) <span class="comment">#？？？此时能否看到子进程p的id号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>答案</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#答案：可以</span></span><br><span class="line"><span class="comment">#分析：</span></span><br><span class="line">p.join()是像操作系统发送请求，告知操作系统p的<span class="built_in">id</span>号不需要再占用了，回收就可以，</span><br><span class="line">此时在父进程内还可以看到p.pid,但此时的p.pid是一个无意义的<span class="built_in">id</span>号，因为操作系统已经将该编号回收</span><br><span class="line"></span><br><span class="line">打个比方：</span><br><span class="line">我党相当于操作系统，控制着整个中国的硬件，每个人相当于一个进程，每个人都需要跟我党申请一个身份证号</span><br><span class="line">该号码就相当于进程的pid，人死后应该到我党那里注销身份证号，p.join()就相当于要求我党回收身份证号，但p的家人（相当于主进程）</span><br><span class="line">仍然持有p的身份证，但此刻的身份证已经没有意义</span><br></pre></td></tr></table></figure>

<h3 id="四-守护进程"><a href="#四-守护进程" class="headerlink" title="四 守护进程"></a>四 守护进程</h3><p>主进程创建守护进程</p>
<p>其一：守护进程会在主进程代码执行结束后就终止</p>
<p>其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p>
<p>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piaoing&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is piao end&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=Piao(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">p.daemon=<span class="literal">True</span> <span class="comment">#一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span></span><br><span class="line">p.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>迷惑人的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主进程代码运行完毕,守护进程就会结束</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end456&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=Process(target=foo)</span><br><span class="line">p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">p1.daemon=<span class="literal">True</span></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main-------&quot;</span>) <span class="comment">#打印该行则主进程代码结束,则守护进程p1应该被终止,可能会有p1任务执行的打印信息123,因为主进程打印main----时,p1也执行了,但是随即被终止</span></span><br></pre></td></tr></table></figure>

<h3 id="五-进程同步-锁"><a href="#五-进程同步-锁" class="headerlink" title="五 进程同步(锁)"></a>五 进程同步(锁)</h3><p>进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件,或同一个打印终端,是没有问题的,</p>
<p>而共享带来的是竞争，竞争带来的结果就是错乱，如何控制，就是加锁处理</p>
<p>part1：多个进程共享同一打印终端</p>
<p>并发运行,效率高,但竞争同一打印终端,带来了打印错乱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#并发运行,效率高,但竞争同一打印终端,带来了打印错乱</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is done&#x27;</span> %os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p=Process(target=work)</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>加锁：由并发变成了串行,牺牲了运行效率,但避免了竞争</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由并发变成了串行,牺牲了运行效率,但避免了竞争</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">lock</span>):</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is done&#x27;</span> %os.getpid())</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p=Process(target=work,args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>part2：多个进程共享同一文件</p>
<p>文件当数据库，模拟抢票</p>
<p>并发运行，效率高，但竞争写同一文件，数据写入错乱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件db的内容为：&#123;&quot;count&quot;:1&#125;</span></span><br><span class="line"><span class="comment">#注意一定要用双引号，不然json无法识别</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> time,json,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>) <span class="comment">#模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic,<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">lock</span>):</span></span><br><span class="line">    search()</span><br><span class="line">    get()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment">#模拟并发100个客户端抢票</span></span><br><span class="line">        p=Process(target=task,args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>加锁：购票行为由并发变成了串行，牺牲了运行效率，但保证了数据安全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件db的内容为：&#123;&quot;count&quot;:1&#125;</span></span><br><span class="line"><span class="comment">#注意一定要用双引号，不然json无法识别</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> time,json,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>) <span class="comment">#模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic,<span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">lock</span>):</span></span><br><span class="line">    search()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    get()</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment">#模拟并发100个客户端抢票</span></span><br><span class="line">        p=Process(target=task,args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加锁可以保证多个进程修改同一块数据时，同一时间只能有一个任务可以进行修改，即串行的修改，没错，速度是慢了，但牺牲了速度却保证了数据安全。</span></span><br><span class="line">虽然可以用文件共享数据实现进程间通信，但问题是：</span><br><span class="line"><span class="number">1.</span>效率低（共享数据基于文件，而文件是硬盘上的数据）</span><br><span class="line"><span class="number">2.</span>需要自己加锁处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#因此我们最好找寻一种解决方案能够兼顾：1、效率高（多个进程共享一块内存的数据）2、帮我们处理好锁问题。这就是mutiprocessing模块为我们提供的基于消息的IPC通信机制：队列和管道。</span></span><br><span class="line"><span class="number">1</span> 队列和管道都是将数据存放于内存中</span><br><span class="line"><span class="number">2</span> 队列又是基于（管道+锁）实现的，可以让我们从复杂的锁问题中解脱出来，</span><br><span class="line">我们应该尽量避免使用共享数据，尽可能使用消息传递和队列，避免处理复杂的同步和锁问题，而且在进程数目增多时，往往可以获得更好的可获展性。</span><br></pre></td></tr></table></figure>

<h3 id="六-队列（推荐使用）"><a href="#六-队列（推荐使用）" class="headerlink" title="六 队列（推荐使用）"></a>六 队列（推荐使用）</h3><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的</p>
<p><strong>创建队列的类（底层就是以管道和锁定的方式实现）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 Queue([maxsize]):创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。</span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 maxsize是队列中允许最大项数，省略则无大小限制。</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<p>主要方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> q.put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。如果blocked为<span class="literal">True</span>（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue.Full异常。如果blocked为<span class="literal">False</span>，但该Queue已满，会立即抛出Queue.Full异常。</span><br><span class="line"><span class="number">2</span> q.get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked为<span class="literal">True</span>（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue.Empty异常。如果blocked为<span class="literal">False</span>，有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出Queue.Empty异常.</span><br><span class="line"><span class="number">3</span>  </span><br><span class="line"><span class="number">4</span> q.get_nowait():同q.get(<span class="literal">False</span>)</span><br><span class="line"><span class="number">5</span> q.put_nowait():同q.put(<span class="literal">False</span>)</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> q.empty():调用此方法时q为空则返回<span class="literal">True</span>，该结果不可靠，比如在返回<span class="literal">True</span>的过程中，如果队列中又加入了项目。</span><br><span class="line"><span class="number">8</span> q.full()：调用此方法时q已满则返回<span class="literal">True</span>，该结果不可靠，比如在返回<span class="literal">True</span>的过程中，如果队列中的项目被取走。</span><br><span class="line"><span class="number">9</span> q.qsize():返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样</span><br></pre></td></tr></table></figure>

<p>其他方法(了解)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> q.cancel_join_thread():不会在进程退出时自动连接后台线程。可以防止join_thread()方法阻塞</span><br><span class="line"><span class="number">2</span> q.close():关闭队列，防止队列中加入更多数据。调用此方法，后台线程将继续写入那些已经入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将调用此方法。关闭队列不会在队列使用者中产生任何类型的数据结束信号或异常。例如，如果某个使用者正在被阻塞在get()操作上，关闭生产者中的队列不会导致get()方法返回错误。</span><br><span class="line"><span class="number">3</span> q.join_thread()：连接队列的后台线程。此方法用于在调用q.close()方法之后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread方法可以禁止这种行为</span><br></pre></td></tr></table></figure>

<p><strong>应用：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">multiprocessing模块支持进程间通信的两种主要形式:管道和队列</span></span><br><span class="line"><span class="string">都是基于消息传递实现的,但是队列接口</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">q=Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#put ,get ,put_nowait,get_nowait,full,empty</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment">#满了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.empty()) <span class="comment">#空了</span></span><br></pre></td></tr></table></figure>

<p><strong>生产者消费者模型</strong></p>
<p><em>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</em></p>
<p><strong>为什么要使用生产者和消费者模式</strong></p>
<p><em>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</em></p>
<p><strong>什么是生产者消费者模式</strong></p>
<p><em>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</em></p>
<p><em>基于队列实现生产者消费者模型</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[45m%s 吃 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;包子%s&#x27;</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 生产了 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>生产者消费者模型总结</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生产者消费者模型总结</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#程序中有两类角色</span></span><br><span class="line">        一类负责生产数据（生产者）</span><br><span class="line">        一类负责处理数据（消费者）</span><br><span class="line"></span><br><span class="line">    <span class="comment">#引入生产者消费者模型为了解决的问题是：</span></span><br><span class="line">        平衡生产者与消费者之间的工作能力，从而提高程序整体处理数据的速度</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如何实现：</span></span><br><span class="line">        生产者&lt;--&gt;队列&lt;——&gt;消费者</span><br><span class="line">    <span class="comment">#生产者消费者模型实现类程序的解耦和</span></span><br></pre></td></tr></table></figure>

<p>此时的问题是主进程永远不会结束，原因是：生产者p在生产完后就结束了，但是消费者c在取空了q之后，则一直处于死循环中且卡在q.get()这一步。</p>
<p>解决方式无非是让生产者在生产完毕后，往队列中再发一个结束信号，这样消费者在接收到结束信号后就可以break出死循环</p>
<p>生产者在生产完毕后发送结束信号None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:<span class="keyword">break</span> <span class="comment">#收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[45m%s 吃 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;包子%s&#x27;</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 生产了 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line">    q.put(<span class="literal">None</span>) <span class="comment">#发送结束信号</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意：结束信号None，不一定要由生产者发，主进程里同样可以发，但主进程需要等生产者结束后才应该发送该信号</p>
<p>主进程在生产者生产完毕后发送结束信号None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:<span class="keyword">break</span> <span class="comment">#收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[45m%s 吃 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;包子%s&#x27;</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 生产了 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    q.put(<span class="literal">None</span>) <span class="comment">#发送结束信号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但上述解决方式，在有多个生产者和多个消费者时，我们则需要用一个很low的方式去解决</p>
<p>有几个消费者就需要发送几次结束信号：相当low</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:<span class="keyword">break</span> <span class="comment">#收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[45m%s 吃 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">name,q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;%s%s&#x27;</span> %(name,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 生产了 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(<span class="string">&#x27;包子&#x27;</span>,q))</span><br><span class="line">    p2=Process(target=producer,args=(<span class="string">&#x27;骨头&#x27;</span>,q))</span><br><span class="line">    p3=Process(target=producer,args=(<span class="string">&#x27;泔水&#x27;</span>,q))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line">    c2=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    p1.join() <span class="comment">#必须保证生产者全部生产完毕,才应该发送结束信号</span></span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    q.put(<span class="literal">None</span>) <span class="comment">#有几个消费者就应该发送几次结束信号None</span></span><br><span class="line">    q.put(<span class="literal">None</span>) <span class="comment">#发送结束信号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>其实我们的思路无非是发送结束信号而已，有另外一种队列提供了这种机制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#JoinableQueue([maxsize])：这就像是一个Queue对象，但队列允许项目的使用者通知生成者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#参数介绍：</span></span><br><span class="line">    maxsize是队列中允许最大项数，省略则无大小限制。    </span><br><span class="line">　 <span class="comment">#方法介绍：</span></span><br><span class="line">    JoinableQueue的实例p除了与Queue对象相同的方法之外还具有：</span><br><span class="line">    q.task_done()：使用者使用此方法发出信号，表示q.get()的返回项目已经被处理。如果调用此方法的次数大于从队列中删除项目的数量，将引发ValueError异常</span><br><span class="line">    q.join():生产者调用此方法进行阻塞，直到队列中所有的项目均被处理。阻塞将持续到队列中的每个项目均调用q.task_done（）方法为止</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,JoinableQueue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[45m%s 吃 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line">        q.task_done() <span class="comment">#向q.join()发送一次信号,证明一个数据已经被取走了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">name,q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;%s%s&#x27;</span> %(name,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 生产了 %s\033[0m&#x27;</span> %(os.getpid(),res))</span><br><span class="line">    q.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=JoinableQueue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(<span class="string">&#x27;包子&#x27;</span>,q))</span><br><span class="line">    p2=Process(target=producer,args=(<span class="string">&#x27;骨头&#x27;</span>,q))</span><br><span class="line">    p3=Process(target=producer,args=(<span class="string">&#x27;泔水&#x27;</span>,q))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line">    c2=Process(target=consumer,args=(q,))</span><br><span class="line">    c1.daemon=<span class="literal">True</span></span><br><span class="line">    c2.daemon=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p_l=[p1,p2,p3,c1,c2]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#主进程等---&gt;p1,p2,p3等----&gt;c1,c2</span></span><br><span class="line">    <span class="comment">#p1,p2,p3结束了,证明c1,c2肯定全都收完了p1,p2,p3发到队列的数据</span></span><br><span class="line">    <span class="comment">#因而c1,c2也没有存在的价值了,应该随着主进程的结束而结束,所以设置成守护进程</span></span><br></pre></td></tr></table></figure>

<h3 id="七-管道"><a href="#七-管道" class="headerlink" title="七 管道"></a>七 管道</h3><p>进程间通信（IPC）方式二：管道（不推荐使用，了解即可）</p>
<p>介绍</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建管道的类：</span></span><br><span class="line">Pipe([duplex]):在进程之间创建一条管道，并返回元组（conn1,conn2）,其中conn1，conn2表示管道两端的连接对象，强调一点：必须在产生Process对象之前产生管道</span><br><span class="line"><span class="comment">#参数介绍：</span></span><br><span class="line">dumplex:默认管道是全双工的，如果将duplex射成<span class="literal">False</span>，conn1只能用于接收，conn2只能用于发送。</span><br><span class="line"><span class="comment">#主要方法：</span></span><br><span class="line">    conn1.recv():接收conn2.send(obj)发送的对象。如果没有消息可接收，recv方法会一直阻塞。如果连接的另外一端已经关闭，那么recv方法会抛出EOFError。</span><br><span class="line">    conn1.send(obj):通过连接发送对象。obj是与序列化兼容的任意对象</span><br><span class="line"> <span class="comment">#其他方法：</span></span><br><span class="line">conn1.close():关闭连接。如果conn1被垃圾回收，将自动调用此方法</span><br><span class="line">conn1.fileno():返回连接使用的整数文件描述符</span><br><span class="line">conn1.poll([timeout]):如果连接上的数据可用，返回<span class="literal">True</span>。timeout指定等待的最长时限。如果省略此参数，方法将立即返回结果。如果将timeout射成<span class="literal">None</span>，操作将无限期地等待数据到达。</span><br><span class="line"></span><br><span class="line">conn1.recv_bytes([maxlength]):接收c.send_bytes()方法发送的一条完整的字节消息。maxlength指定要接收的最大字节数。如果进入的消息，超过了这个最大值，将引发IOError异常，并且在连接上无法进行进一步读取。如果连接的另外一端已经关闭，再也不存在任何数据，将引发EOFError异常。</span><br><span class="line">conn.send_bytes(buffer [, offset [, size]])：通过连接发送字节数据缓冲区，buffer是支持缓冲区接口的任意对象，offset是缓冲区中的字节偏移量，而size是要发送字节数。结果数据以单条消息的形式发出，然后调用c.recv_bytes()函数进行接收    </span><br><span class="line"></span><br><span class="line">conn1.recv_bytes_into(buffer [, offset]):接收一条完整的字节消息，并把它保存在buffer对象中，该对象支持可写入的缓冲区接口（即<span class="built_in">bytearray</span>对象或类似的对象）。offset指定缓冲区中放置消息处的字节位移。返回值是收到的字节数。如果消息长度大于可用的缓冲区空间，将引发BufferTooShort异常。</span><br></pre></td></tr></table></figure>

<p>基于管道实现进程间通信（与队列的方式是类似的，队列就是管道加锁实现的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">p,name</span>):</span></span><br><span class="line">    left,right=p</span><br><span class="line">    left.close()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            baozi=right.recv()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s 收到包子:%s&#x27;</span> %(name,baozi))</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            right.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">seq,p</span>):</span></span><br><span class="line">    left,right=p</span><br><span class="line">    right.close()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> seq:</span><br><span class="line">        left.send(i)</span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    left,right=Pipe()</span><br><span class="line">    c1=Process(target=consumer,args=((left,right),<span class="string">&#x27;c1&#x27;</span>))</span><br><span class="line">    c1.start()</span><br><span class="line">    seq=(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    producer(seq,(left,right))</span><br><span class="line">    right.close()</span><br><span class="line">    left.close()</span><br><span class="line">    c1.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>*<em>注意：生产者和消费者都没有使用管道的某个端点，就应该将其关闭，如在生产者中关闭管道的右端，在消费者中关闭管道的左端。如果忘记执行这些步骤，程序可能再消费者中的recv*</em>()*<em>操作上挂起。管道是由操作系统进行引用计数的,必须在所有进程中关闭管道后才能生产EOFError异常。因此在生产者中关闭管道不会有任何效果，付费消费者中也关闭了相同的管道端点。</em>*</p>
<p>管道可以用于双向通信，利用通常在客户端&#x2F;服务器中使用的请求／响应模型或远程过程调用，就可以使用管道编写与进程交互的程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">p,name</span>):</span></span><br><span class="line">    server,client=p</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x,y=server.recv()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            server.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        res=x+y</span><br><span class="line">        server.send(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;server done&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server,client=Pipe()</span><br><span class="line"></span><br><span class="line">    c1=Process(target=adder,args=((server,client),<span class="string">&#x27;c1&#x27;</span>))</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    server.close()</span><br><span class="line"></span><br><span class="line">    client.send((<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">print</span>(client.recv())</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line">    c1.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程&#x27;</span>)</span><br><span class="line"><span class="comment">#注意：send()和recv()方法使用pickle模块对对象进行序列化。</span></span><br></pre></td></tr></table></figure>

<h3 id="八-共享数据"><a href="#八-共享数据" class="headerlink" title="八 共享数据"></a>八 共享数据</h3><p>展望未来，基于消息传递的并发编程是大势所趋</p>
<p>即便是使用线程，推荐做法也是将程序设计为大量独立的线程集合</p>
<p>通过消息队列交换数据。这样极大地减少了对使用锁定和其他同步手段的需求，</p>
<p>还可以扩展到分布式系统中</p>
<p><strong>进程间通信应该尽量避免使用本节所讲的共享数据的方式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">进程间数据是独立的，可以借助于队列或管道实现通信，二者都是基于消息传递的</span><br><span class="line"></span><br><span class="line">虽然进程间数据独立，但可以通过Manager实现数据共享，事实上Manager的功能远不止于此</span><br><span class="line"></span><br><span class="line">A manager <span class="built_in">object</span> returned by Manager() controls a server process which holds Python objects <span class="keyword">and</span> allows other processes to manipulate them using proxies.</span><br><span class="line"></span><br><span class="line">A manager returned by Manager() will support types <span class="built_in">list</span>, <span class="built_in">dict</span>, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Barrier, Queue, Value <span class="keyword">and</span> Array. For example,</span><br></pre></td></tr></table></figure>

<p>进程之间操作共享的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Process,Lock</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">d,lock</span>):</span></span><br><span class="line">    <span class="comment"># with lock: #不加锁而操作共享的数据,肯定会出现数据错乱</span></span><br><span class="line">        d[<span class="string">&#x27;count&#x27;</span>]-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> m:</span><br><span class="line">        dic=m.<span class="built_in">dict</span>(&#123;<span class="string">&#x27;count&#x27;</span>:<span class="number">100</span>&#125;)</span><br><span class="line">        p_l=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            p=Process(target=work,args=(dic,lock))</span><br><span class="line">            p_l.append(p)</span><br><span class="line">            p.start()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">            p.join()</span><br><span class="line">        <span class="built_in">print</span>(dic)</span><br><span class="line">        <span class="comment">#&#123;&#x27;count&#x27;: 94&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="九-信号量-了解）"><a href="#九-信号量-了解）" class="headerlink" title="九 信号量(了解）"></a>九 信号量(了解）</h3><p>信号量Semahpore（同线程一样）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有<span class="number">3</span>个坑，那最多只允许<span class="number">3</span>个人上厕所，后面的人只能等里面有人出来了才能再进去，如果指定信号量为<span class="number">3</span>，那么来一个人获得一把锁，计数加<span class="number">1</span>，当计数等于<span class="number">3</span>时，后面的人均需要等待。一旦释放，就有人可以获得一把锁</span><br><span class="line"></span><br><span class="line">    信号量与进程池的概念很像，但是要区分开，信号量涉及到加锁的概念</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Semaphore</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_wc</span>(<span class="params">sem,user</span>):</span></span><br><span class="line">    sem.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s 占到一个茅坑&#x27;</span> %user)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">3</span>)) <span class="comment">#模拟每个人拉屎速度不一样，0代表有的人蹲下就起来了</span></span><br><span class="line">    sem.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sem=Semaphore(<span class="number">5</span>)</span><br><span class="line">    p_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        p=Process(target=go_wc,args=(sem,<span class="string">&#x27;user%s&#x27;</span> %i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p_l.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p_l:</span><br><span class="line">        i.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;============》&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="十-事件-了解"><a href="#十-事件-了解" class="headerlink" title="十 事件(了解)"></a>十 事件(了解)</h3><p>Event（同线程一样）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python线程的事件用于主线程控制其他线程的执行，事件主要提供了三个方法 <span class="built_in">set</span>、wait、clear。</span><br><span class="line"></span><br><span class="line">    事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 <span class="literal">False</span>，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为<span class="literal">True</span>，那么event.wait 方法时便不再阻塞。</span><br><span class="line"></span><br><span class="line">clear：将“Flag”设置为<span class="literal">False</span></span><br><span class="line"><span class="built_in">set</span>：将“Flag”设置为<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Event</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> e.is_set(): <span class="comment">#Flase</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[31m红灯亮\033[0m，car%s等着&#x27;</span> %n)</span><br><span class="line">            e.wait()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[32m车%s 看见绿灯亮了\033[0m&#x27;</span> %n)</span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;走你,car&#x27;</span>, n)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">police_car</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[31m红灯亮\033[0m，car%s等着&#x27;</span> % n)</span><br><span class="line">            e.wait(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;灯的是%s，警车走了,car %s&#x27;</span> %(e.is_set(),n))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traffic_lights</span>(<span class="params">e,inverval</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(inverval)</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            e.clear() <span class="comment">#e.is_set() ----&gt;False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e=Event()</span><br><span class="line">    <span class="comment"># for i in range(10):</span></span><br><span class="line">    <span class="comment">#     p=Process(target=car,args=(e,i,))</span></span><br><span class="line">    <span class="comment">#     p.start()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = Process(target=police_car, args=(e, i,))</span><br><span class="line">        p.start()</span><br><span class="line">    t=Process(target=traffic_lights,args=(e,<span class="number">10</span>))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;============》&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="十一-进程池"><a href="#十一-进程池" class="headerlink" title="十一 进程池"></a>十一 进程池</h3><p>在利用Python进行系统管理的时候，特别是同时操作多个文件目录，或者远程控制多台主机，并行操作可以节约大量的时间。多进程是实现并发的手段之一，需要注意的问题是：</p>
<ol>
<li>很明显需要并发执行的任务通常要远大于核数</li>
<li>一个操作系统不可能无限开启进程，通常有几个核就开几个进程</li>
<li>进程开启过多，效率反而会下降（开启进程是需要占用系统资源的，而且开启多余核数目的进程也无法做到并行）</li>
</ol>
<p>例如当被操作对象数目不大时，可以直接利用multiprocessing中的Process动态成生多个进程，十几个还好，但如果是上百个，上千个。。。手动的去限制进程数量却又太过繁琐，此时可以发挥进程池的功效。</p>
<p>我们就可以通过维护一个进程池来控制进程数目，比如httpd的进程模式，规定最小进程数和最大进程数… <em>ps：对于远程过程调用的高级应用程序而言，应该使用进程池，Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，就重用进程池中的进程。</em></p>
<p><strong>创建进程池的类：如果指定numprocess为3，则进程池会从无到有创建三个进程，然后自始至终使用这三个进程去执行所有任务，不会开启其他进程</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> Pool([numprocess  [,initializer [, initargs]]]):创建进程池</span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</span><br><span class="line"><span class="number">2</span> initializer：是每个工作进程启动时要执行的可调用对象，默认为<span class="literal">None</span></span><br><span class="line"><span class="number">3</span> initargs：是要传给initializer的参数组</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<p>主要方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> p.apply(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用p.apply()函数或者使用p.apply_async()</span><br><span class="line"><span class="number">2</span> p.apply_async(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</span><br><span class="line"><span class="number">3</span>    </span><br><span class="line"><span class="number">4</span> p.close():关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</span><br><span class="line"><span class="number">5</span> P.jion():等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</span><br></pre></td></tr></table></figure>

<p>其他方法（了解部分）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</span><br><span class="line">obj.get():返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</span><br><span class="line">obj.ready():如果调用完成，返回<span class="literal">True</span></span><br><span class="line">obj.successful():如果调用完成且没有引发异常，返回<span class="literal">True</span>，如果在结果就绪之前调用此方法，引发异常</span><br><span class="line">obj.wait([timeout]):等待结果变为可用。</span><br><span class="line">obj.terminate()：立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</span><br></pre></td></tr></table></figure>

<p><strong>应用：</strong></p>
<p>同步调用apply</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s run&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Pool(<span class="number">3</span>) <span class="comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        res=p.apply(work,args=(i,)) <span class="comment">#同步调用，直到本次任务执行完毕拿到res，等待任务work执行的过程中可能有阻塞也可能没有阻塞，但不管该任务是否存在阻塞，同步调用都会在原地等着，只是等的过程中若是任务发生了阻塞就会被夺走cpu的执行权限</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line">    <span class="built_in">print</span>(res_l)</span><br></pre></td></tr></table></figure>

<p>异步调用apply_async</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s run&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Pool(<span class="number">3</span>) <span class="comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        res=p.apply_async(work,args=(i,)) <span class="comment">#同步运行,阻塞、直到本次任务执行完毕拿到res</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#异步apply_async用法：如果使用异步提交的任务，主进程需要使用jion，等待进程池内任务都处理完，然后可以用get收集结果，否则，主进程结束，进程池可能还没来得及执行，也就跟着一起结束了</span></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_l:</span><br><span class="line">        <span class="built_in">print</span>(res.get()) <span class="comment">#使用get来获取apply_aync的结果,如果是apply,则没有get方法,因为apply是同步执行,立刻获取结果,也根本无需get</span></span><br></pre></td></tr></table></figure>

<p>详解：apply_async与apply</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一：使用进程池（异步调用,apply_async）</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;msg:&quot;</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes = <span class="number">3</span>)</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">&quot;hello %d&quot;</span> %(i)</span><br><span class="line">        res=pool.apply_async(func, (msg, ))   <span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==============================&gt;&quot;</span>) <span class="comment">#没有后面的join，或get，则程序整体结束，进程池中的任务还没来得及全部执行完也都跟着主进程一起结束了</span></span><br><span class="line"></span><br><span class="line">    pool.close() <span class="comment">#关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</span></span><br><span class="line">    pool.join()   <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res_l) <span class="comment">#看到的是&lt;multiprocessing.pool.ApplyResult object at 0x10357c4e0&gt;对象组成的列表,而非最终的结果,但这一步是在join后执行的,证明结果已经计算完毕,剩下的事情就是调用每个对象下的get方法去获取结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l:</span><br><span class="line">        <span class="built_in">print</span>(i.get()) <span class="comment">#使用get来获取apply_aync的结果,如果是apply,则没有get方法,因为apply是同步执行,立刻获取结果,也根本无需get</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二：使用进程池（同步调用,apply）</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;msg:&quot;</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes = <span class="number">3</span>)</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">&quot;hello %d&quot;</span> %(i)</span><br><span class="line">        res=pool.apply(func, (msg, ))   <span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line">        res_l.append(res) <span class="comment">#同步执行，即执行完一个拿到结果，再去执行另外一个</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==============================&gt;&quot;</span>)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()   <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res_l) <span class="comment">#看到的就是最终的结果组成的列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l: <span class="comment">#apply是同步的，所以直接得到结果，没有get()方法</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p><strong>练习2：使用进程池维护固定数目的进程（重写练习1）</strong></p>
<p>server端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pool内的进程数默认是cpu核数，假设为4（查看方法os.cpu_count()）</span></span><br><span class="line"><span class="comment">#开启6个客户端，会发现2个客户端处于等待状态</span></span><br><span class="line"><span class="comment">#在每个进程内查看pid，会发现pid使用为4个，即多个客户端公用4个进程</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">conn,client_addr</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;进程pid: %s&#x27;</span> %os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            msg=conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">break</span></span><br><span class="line">            conn.send(msg.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Pool()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,client_addr=server.accept()</span><br><span class="line">        p.apply_async(talk,args=(conn,client_addr))</span><br><span class="line">        <span class="comment"># p.apply(talk,args=(conn,client_addr)) #同步的话，则同一时间只有一个客户端能访问</span></span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    msg=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>发现：并发开启多个客户端，服务端同一时间只有3个不同的pid，干掉一个客户端，另外一个客户端才会进来，被3个进程之一处理</p>
<p><strong>回掉函数：</strong></p>
<p><strong>需要回调函数的场景：进程池中任何一个任务一旦处理完了，就立即告知主进程：我好了额，你可以处理我的结果了。主进程则调用一个函数去处理该结果，该函数即回调函数</strong></p>
<p><strong>我们可以把耗时间（阻塞）的任务放到进程池中，然后指定回调函数（主进程负责执行），这样主进程在执行回调函数时就省去了I&#x2F;O的过程，直接拿到的是任务的结果。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; get %s&#x27;</span> %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;url&#x27;</span>:url,<span class="string">&#x27;text&#x27;</span>:respone.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasrse_page</span>(<span class="params">res</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; parse %s&#x27;</span> %(os.getpid(),res[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">    parse_res=<span class="string">&#x27;url:&lt;%s&gt; size:[%s]\n&#x27;</span> %(res[<span class="string">&#x27;url&#x27;</span>],<span class="built_in">len</span>(res[<span class="string">&#x27;text&#x27;</span>]))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls=[</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.python.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.openstack.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://help.github.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://www.sina.com.cn/&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    p=Pool(<span class="number">3</span>)</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        res=p.apply_async(get_page,args=(url,),callback=pasrse_page)</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>([res.get() <span class="keyword">for</span> res <span class="keyword">in</span> res_l]) <span class="comment">#拿到的是get_page的结果,其实完全没必要拿该结果,该结果已经传给回调函数处理了</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果:</span></span><br><span class="line"><span class="string">&lt;进程3388&gt; get https://www.baidu.com</span></span><br><span class="line"><span class="string">&lt;进程3389&gt; get https://www.python.org</span></span><br><span class="line"><span class="string">&lt;进程3390&gt; get https://www.openstack.org</span></span><br><span class="line"><span class="string">&lt;进程3388&gt; get https://help.github.com/</span></span><br><span class="line"><span class="string">&lt;进程3387&gt; parse https://www.baidu.com</span></span><br><span class="line"><span class="string">&lt;进程3389&gt; get http://www.sina.com.cn/</span></span><br><span class="line"><span class="string">&lt;进程3387&gt; parse https://www.python.org</span></span><br><span class="line"><span class="string">&lt;进程3387&gt; parse https://help.github.com/</span></span><br><span class="line"><span class="string">&lt;进程3387&gt; parse http://www.sina.com.cn/</span></span><br><span class="line"><span class="string">&lt;进程3387&gt; parse https://www.openstack.org</span></span><br><span class="line"><span class="string">[&#123;&#x27;url&#x27;: &#x27;https://www.baidu.com&#x27;, &#x27;text&#x27;: &#x27;&lt;!DOCTYPE html&gt;\r\n...&#x27;,...&#125;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>爬虫案例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url,pattern</span>):</span></span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> (response.text,pattern)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">info</span>):</span></span><br><span class="line">    page_content,pattern=info</span><br><span class="line">    res=re.findall(pattern,page_content)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">        dic=&#123;</span><br><span class="line">            <span class="string">&#x27;index&#x27;</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;actor&#x27;</span>:item[<span class="number">2</span>].strip()[<span class="number">3</span>:],</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>:item[<span class="number">3</span>][<span class="number">5</span>:],</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>:item[<span class="number">4</span>]+item[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(dic)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pattern1=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;.*?title=&quot;(.*?)&quot;.*?star.*?&gt;(.*?)&lt;.*?releasetime.*?&gt;(.*?)&lt;.*?integer.*?&gt;(.*?)&lt;.*?fraction.*?&gt;(.*?)&lt;&#x27;</span>,re.S)</span><br><span class="line"></span><br><span class="line">    url_dic=&#123;</span><br><span class="line">        <span class="string">&#x27;http://maoyan.com/board/7&#x27;</span>:pattern1,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p=Pool()</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> url,pattern <span class="keyword">in</span> url_dic.items():</span><br><span class="line">        res=p.apply_async(get_page,args=(url,pattern),callback=parse_page)</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l:</span><br><span class="line">        i.get()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># res=requests.get(&#x27;http://maoyan.com/board/7&#x27;)</span></span><br><span class="line">    <span class="comment"># print(re.findall(pattern,res.text))</span></span><br></pre></td></tr></table></figure>

<p><strong>如果在主进程中等待进程池中所有任务都执行完毕后，再统一处理结果，则无需回调函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">n</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Pool()</span><br><span class="line"></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        res=p.apply_async(work,args=(i,))</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line">    p.join() <span class="comment">#等待进程池中所有进程执行完毕</span></span><br><span class="line"></span><br><span class="line">    nums=[]</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_l:</span><br><span class="line">        nums.append(res.get()) <span class="comment">#拿到所有结果</span></span><br><span class="line">    <span class="built_in">print</span>(nums) <span class="comment">#主进程拿到所有的处理结果,可以在主进程中进行统一进行处理</span></span><br></pre></td></tr></table></figure>

<p><a href="https://link.zhihu.com/?target=https://docs.python.org/dev/library/concurrent.futures.html">进程池的其他实现方式：https://docs.python.org/dev/library/concurrent.futures.htmldocs.python.org/dev/library/concurrent.futures.html</a></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=131">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=131<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>37-并发编程（六）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/37_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="一-引子"><a href="#一-引子" class="headerlink" title="一 引子"></a>一 引子</h3><p>本节的主题是基于单线程来实现并发，即只用一个主线程（很明显可利用的cpu只有一个）情况下实现并发，为此我们需要先回顾下并发的本质：切换+保存状态</p>
<p>cpu正在运行一个任务，会在两种情况下切走去执行其他的任务（切换由操作系统强制控制），一种情况是该任务发生了阻塞，另外一种情况是该任务计算的时间过长或有一个优先级更高的程序替代了它</p>
<p><img src="https://pic1.zhimg.com/80/v2-1b816bea5d7900ca5faad9abdee1cec4_720w.jpg" alt="img"></p>
<p>ps：在介绍进程理论时，提及进程的三种执行状态，而线程才是执行单位，所以也可以将上图理解为线程的三种状态</p>
<p>一：其中第二种情况并不能提升效率，只是为了让cpu能够雨露均沾，实现看起来所有任务都被“同时”执行的效果，如果多个任务都是纯计算的，这种切换反而会降低效率。为此我们可以基于yield来验证。yield本身就是一种在单线程下可以保存任务运行状态的方法，我们来简单复习一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 yiled可以保存状态，yield的状态保存与操作系统的保存线程状态很像，但是yield是代码级别控制的，更轻量级</span></span><br><span class="line"><span class="comment">#2 send可以把一个函数的结果传给另外一个函数，以此实现单线程内程序之间的切换</span></span><br></pre></td></tr></table></figure>

<p>单纯地切换反而会降低运行效率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、协程：</span></span><br><span class="line"><span class="string">    单线程实现并发</span></span><br><span class="line"><span class="string">    在应用程序里控制多个任务的切换+保存状态</span></span><br><span class="line"><span class="string">    优点：</span></span><br><span class="line"><span class="string">        应用程序级别速度要远远高于操作系统的切换</span></span><br><span class="line"><span class="string">    缺点：</span></span><br><span class="line"><span class="string">        多个任务一旦有一个阻塞没有切，整个线程都阻塞在原地</span></span><br><span class="line"><span class="string">        该线程内的其他的任务都不能执行了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        一旦引入协程，就需要检测单线程下所有的IO行为,</span></span><br><span class="line"><span class="string">        实现遇到IO就切换,少一个都不行，以为一旦一个任务阻塞了，整个线程就阻塞了，</span></span><br><span class="line"><span class="string">        其他的任务即便是可以计算，但是也无法运行了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、协程序的目的：</span></span><br><span class="line"><span class="string">    想要在单线程下实现并发</span></span><br><span class="line"><span class="string">    并发指的是多个任务看起来是同时运行的</span></span><br><span class="line"><span class="string">    并发=切换+保存状态</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#串行执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br><span class="line">stop = time.time()</span><br><span class="line"><span class="built_in">print</span>(stop - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于yield并发执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    g=func1()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>(g)</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">func2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(stop-start)</span><br></pre></td></tr></table></figure>

<p>二：第一种情况的切换。在任务一遇到io情况下，切到任务二去执行，这样就可以利用任务一阻塞的时间完成任务二的计算，效率的提升就在于此。</p>
<p>yield不能检测IO，实现遇到IO自动切换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;func1&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    g=func1()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>(g)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line">start=time.time()</span><br><span class="line">func2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(stop-start)</span><br></pre></td></tr></table></figure>

<p><strong>对于单线程下，我们不可避免程序中出现io操作，但如果我们能在自己的程序中（即用户程序级别，而非操作系统级别）控制单线程下的多个任务能在一个任务遇到io阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度地处于就绪态，即随时都可以被cpu执行的状态，相当于我们在用户程序级别将自己的io操作最大限度地隐藏起来，从而可以迷惑操作系统，让其看到：该线程好像是一直在计算，io比较少，从而更多的将cpu的执行权限分配给我们的线程。</strong></p>
<p>协程的本质就是在单线程下，由用户自己控制一个任务遇到io阻塞了就切换另外一个任务去执行，以此来提升效率。为了实现它，我们需要找寻一种可以同时满足以下条件的解决方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停的位置继续执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 作为1的补充：可以检测io操作，在遇到io操作的情况下才发生切换</span></span><br></pre></td></tr></table></figure>

<h3 id="二-协程介绍"><a href="#二-协程介绍" class="headerlink" title="二 协程介绍"></a>二 协程介绍</h3><p>协程：是单线程下的并发，又称微线程，纤程。英文名Coroutine。一句话说明什么是线程：<strong>协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的。、</strong></p>
<p>需要强调的是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到io或执行时间过长就会被迫交出cpu执行权限，切换其他线程运行）</span></span><br><span class="line"><span class="comment">#2. 单线程内开启协程，一旦遇到io，就会从应用程序级别（而非操作系统）控制切换，以此来提升效率（！！！非io操作的切换与效率无关）</span></span><br></pre></td></tr></table></figure>

<p>对比操作系统控制线程的切换，用户在单线程内控制协程的切换</p>
<p>优点如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</span></span><br><span class="line"><span class="comment">#2. 单线程内就可以实现并发的效果，最大限度地利用cpu</span></span><br></pre></td></tr></table></figure>

<p>缺点如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程</span></span><br><span class="line"><span class="comment">#2. 协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程</span></span><br></pre></td></tr></table></figure>

<p>总结协程特点：</p>
<ol>
<li><strong>必须在只有一个单线程里实现并发</strong></li>
<li><strong>修改共享数据不需加锁</strong></li>
<li><strong>用户程序里自己保存多个控制流的上下文栈</strong></li>
<li><strong>附加：一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet都无法实现，就用到了gevent模块（select机制））</strong></li>
</ol>
<h3 id="三-Greenlet"><a href="#三-Greenlet" class="headerlink" title="三 Greenlet"></a>三 Greenlet</h3><p>如果我们在单个线程内有20个任务，要想实现在多个任务之间切换，使用yield生成器的方式过于麻烦（需要先得到初始化一次的生成器，然后再调用send。。。非常麻烦），而使用greenlet模块可以非常简单地实现这20个任务直接的切换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install greenlet</span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 1&#x27;</span> %name)</span><br><span class="line">    g2.switch(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 2&#x27;</span> %name)</span><br><span class="line">    g2.switch()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 1&#x27;</span> %name)</span><br><span class="line">    g1.switch()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line">g1=greenlet(eat)</span><br><span class="line">g2=greenlet(play)</span><br><span class="line"></span><br><span class="line">g1.switch(<span class="string">&#x27;egon&#x27;</span>)<span class="comment">#可以在第一次switch时传入参数，以后都不需要</span></span><br></pre></td></tr></table></figure>

<p>单纯的切换（在没有io的情况下或者没有重复开辟内存空间的操作），反而会降低程序的执行速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#顺序执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res+=i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start)) <span class="comment">#10.985628366470337</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换</span></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res+=i</span><br><span class="line">        g2.switch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line">        g1.switch()</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">g1=greenlet(f1)</span><br><span class="line">g2=greenlet(f2)</span><br><span class="line">g1.switch()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start)) <span class="comment"># 52.763017892837524</span></span><br></pre></td></tr></table></figure>

<p>greenlet只是提供了一种比generator更加便捷的切换方式，当切到一个任务执行时如果遇到io，那就原地阻塞，仍然是没有解决遇到IO自动切换来提升效率的问题。</p>
<p>单线程里的这20个任务的代码通常会既有计算操作又有阻塞操作，我们完全可以在执行任务1时遇到阻塞，就利用阻塞的时间去执行任务2。。。。如此，才能提高效率，这就用到了Gevent模块。</p>
<h3 id="四-Gevent介绍"><a href="#四-Gevent介绍" class="headerlink" title="四 Gevent介绍"></a>四 Gevent介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install gevent</span><br></pre></td></tr></table></figure>

<p>Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是<strong>Greenlet</strong>, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用法</span></span><br><span class="line">g1=gevent.spawn(func,<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)创建一个协程对象g1，spawn括号内第一个参数是函数名，如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><span class="line"></span><br><span class="line">g2=gevent.spawn(func2)</span><br><span class="line"></span><br><span class="line">g1.join() <span class="comment">#等待g1结束</span></span><br><span class="line"></span><br><span class="line">g2.join() <span class="comment">#等待g2结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者上述两步合作一步：gevent.joinall([g1,g2])</span></span><br><span class="line"></span><br><span class="line">g1.value<span class="comment">#拿到func1的返回值</span></span><br></pre></td></tr></table></figure>

<p><strong>遇到IO阻塞时会自动切换任务</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat,<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">g2=gevent.spawn(play,name=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line"><span class="comment">#或者gevent.joinall([g1,g2])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>上例gevent.sleep(2)模拟的是gevent可以识别的io阻塞,</strong></p>
<p><strong>而time.sleep(2)或其他的阻塞,gevent是不能直接识别的需要用下面一行代码,打补丁,就可以识别了</strong></p>
<p><strong>from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前</strong></p>
<p><strong>或者我们干脆记忆成：要用gevent，需要将from gevent import monkey;monkey.patch_all()放到文件的开头</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat)</span><br><span class="line">g2=gevent.spawn(play_phone)</span><br><span class="line">gevent.joinall([g1,g2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们可以用threading.current_thread().getName()来查看每个g1和g2，查看的结果为DummyThread-n，即假线程</p>
<h3 id="五-Gevent之同步与异步"><a href="#五-Gevent之同步与异步" class="headerlink" title="五 Gevent之同步与异步"></a>五 Gevent之同步与异步</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> spawn,joinall,monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">pid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Some non-deterministic task</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s done&#x27;</span> % pid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synchronous</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        task(i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">asynchronous</span>():</span></span><br><span class="line">    g_l=[spawn(task,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    joinall(g_l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Synchronous:&#x27;</span>)</span><br><span class="line">    synchronous()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Asynchronous:&#x27;</span>)</span><br><span class="line">    asynchronous()</span><br><span class="line"><span class="comment">#上面程序的重要部分是将task函数封装到Greenlet内部线程的gevent.spawn。 初始化的greenlet列表存放在数组threads中，此数组被传给gevent.joinall 函数，后者阻塞当前流程，并执行所有给定的greenlet。执行流程只会在 所有greenlet执行完后才会继续向下走。</span></span><br></pre></td></tr></table></figure>

<h3 id="六-Gevent之应用举例一"><a href="#六-Gevent之应用举例一" class="headerlink" title="六 Gevent之应用举例一"></a>六 Gevent之应用举例一</h3><p>协程应用：爬虫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> %url)</span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s&#x27;</span> %(<span class="built_in">len</span>(response.text),url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time=time.time()</span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://www.python.org/&#x27;</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://www.yahoo.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://github.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line">stop_time=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br></pre></td></tr></table></figure>

<h3 id="七-Gevent之应用举例二"><a href="#七-Gevent之应用举例二" class="headerlink" title="七 Gevent之应用举例二"></a>七 Gevent之应用举例二</h3><p>通过gevent实现单线程下的socket并发（from gevent import monkey;monkey.patch_all()一定要放到导入socket模块之前，否则gevent无法识别socket的阻塞）</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不想用money.patch_all()打补丁,可以用gevent自带的socket</span></span><br><span class="line"><span class="comment"># from gevent import socket</span></span><br><span class="line"><span class="comment"># s=socket.socket()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>(<span class="params">server_ip,port</span>):</span></span><br><span class="line">    s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    s.bind((server_ip,port))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line">        gevent.spawn(talk,conn,addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">conn,addr</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res=conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;client %s:%s msg: %s&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],res))</span><br><span class="line">            conn.send(res.upper())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    msg=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>多线程并发多个客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span>(<span class="params">server_ip,port</span>):</span></span><br><span class="line">    c=socket(AF_INET,SOCK_STREAM) <span class="comment">#套接字对象一定要加到函数内，即局部名称空间内，放在函数外则被所有线程共享，则大家公用一个套接字对象，那么客户端端口永远一样了</span></span><br><span class="line">    c.connect((server_ip,port))</span><br><span class="line"></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c.send((<span class="string">&#x27;%s say hello %s&#x27;</span> %(threading.current_thread().getName(),count)).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        msg=c.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        t=Thread(target=client,args=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=156">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=156<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>35-并发编程（四）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/35_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="一-什么是线程"><a href="#一-什么是线程" class="headerlink" title="一 什么是线程"></a>一 什么是线程</h3><p>在传统操作系统中，每个进程有一个地址空间，而且默认就有一个控制线程</p>
<p>线程顾名思义，就是一条流水线工作的过程，一条流水线必须属于一个车间，一个车间的工作过程是一个进程</p>
<p>车间负责把资源整合到一起，是一个资源单位，而一个车间内至少有一个流水线</p>
<p>流水线的工作需要电源，电源就相当于cpu</p>
<p>所以，<strong>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源集合），而线程才是cpu上的执行单位。</strong></p>
<p>多线程（即多个控制线程）的概念是，在一个进程中存在多个控制线程，多个控制线程共享该进程的地址空间，相当于一个车间内有多条流水线，都共用一个车间的资源。</p>
<p>例如，北京地铁与上海地铁是不同的进程，而北京地铁里的13号线是一个线程，北京地铁所有的线路共享北京地铁所有的资源，比如所有的乘客可以被所有线路拉。</p>
<h3 id="二-线程的创建开销小"><a href="#二-线程的创建开销小" class="headerlink" title="二 线程的创建开销小"></a>二 线程的创建开销小</h3><p>创建进程的开销要远大于线程？</p>
<p>如果我们的软件是一个工厂，该工厂有多条流水线，流水线工作需要电源，电源只有一个即cpu（单核cpu）</p>
<p>一个车间就是一个进程，一个车间至少一条流水线（一个进程至少一个线程）</p>
<p>创建一个进程，就是创建一个车间（申请空间，在该空间内建至少一条流水线）</p>
<p>而建线程，就只是在一个车间内造一条流水线，无需申请空间，所以创建开销小</p>
<p>进程之间是竞争关系，线程之间是协作关系？</p>
<p>车间直接是竞争&#x2F;抢电源的关系，竞争（不同的进程直接是竞争关系，是不同的程序员写的程序运行的，迅雷抢占其他进程的网速，360把其他进程当做病毒干死） 一个车间的不同流水线式协同工作的关系（同一个进程的线程之间是合作关系，是同一个程序写的程序内开启动，迅雷内的线程是合作关系，不会自己干自己）</p>
<h3 id="三-线程与进程的区别"><a href="#三-线程与进程的区别" class="headerlink" title="三 线程与进程的区别"></a>三 线程与进程的区别</h3><ol>
<li>Threads share the address space of the process that created it; processes have their own address space.</li>
<li>Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.</li>
<li>Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.</li>
<li>New threads are easily created; new processes require duplication of the parent process.</li>
<li>Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.</li>
<li>Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process does not affect child processes.</li>
</ol>
<h3 id="四-为何要用多线程"><a href="#四-为何要用多线程" class="headerlink" title="四 为何要用多线程"></a>四 为何要用多线程</h3><p>多线程指的是，在一个进程中开启多个线程，简单的讲：如果多个任务共用一块地址空间，那么必须在一个进程内开启多个线程。详细的讲分为4点：</p>
<p>\1. 多线程共享一个进程的地址空间</p>
<p>\2. 线程比进程更轻量级，线程比进程更容易创建可撤销，在许多操作系统中，创建一个线程比创建一个进程要快10-100倍，在有大量线程需要动态和快速修改时，这一特性很有用</p>
<p>\3. 若多个线程都是cpu密集型的，那么并不能获得性能上的增强，但是如果存在大量的计算和大量的I&#x2F;O处理，拥有多个线程允许这些活动彼此重叠运行，从而会加快程序执行的速度。</p>
<p>\4. 在多cpu系统中，为了最大限度的利用多核，可以开启多个线程，比开进程开销要小的多。（这一条并不适用于python）</p>
<h3 id="五-多线程的应用举例"><a href="#五-多线程的应用举例" class="headerlink" title="五 多线程的应用举例"></a>五 多线程的应用举例</h3><p><img src="https://pic4.zhimg.com/80/v2-23bf6d2fefc642b0e5e0beb35a1e0fb3_720w.jpg" alt="img"></p>
<p>开启一个字处理软件进程，该进程肯定需要办不止一件事情，比如监听键盘输入，处理文字，定时自动将文字保存到硬盘，这三个任务操作的都是同一块数据，因而不能用多进程。只能在一个进程里并发地开启三个线程,如果是单线程，那就只能是，键盘输入时，不能处理文字和自动保存，自动保存时又不能输入和处理文字。</p>
<h3 id="六-经典的线程模型（了解）"><a href="#六-经典的线程模型（了解）" class="headerlink" title="六 经典的线程模型（了解）"></a>六 经典的线程模型（了解）</h3><p>多个线程共享同一个进程的地址空间中的资源，是对一台计算机上多个进程的模拟，有时也称线程为轻量级的进程</p>
<p>而对一台计算机上多个进程，则共享物理内存、磁盘、打印机等其他物理资源。</p>
<p>多线程的运行也多进程的运行类似，是cpu在多个线程之间的快速切换。</p>
<p><img src="https://pic4.zhimg.com/80/v2-c4ada42e8dac0fd7a35dbca9a76221a7_720w.jpg" alt="img"></p>
<p>不同的进程之间是充满敌意的，彼此是抢占、竞争cpu的关系，如果迅雷会和QQ抢资源。而同一个进程是由一个程序员的程序创建，所以同一进程内的线程是合作关系，一个线程可以访问另外一个线程的内存地址，大家都是共享的，一个线程干死了另外一个线程的内存，那纯属程序员脑子有问题。</p>
<p>类似于进程，每个线程也有自己的堆栈</p>
<p><img src="https://pic1.zhimg.com/80/v2-c26f5bb3bb75125b6f9038b50152c924_720w.jpg" alt="img"></p>
<p>不同于进程，线程库无法利用时钟中断强制线程让出CPU，可以调用thread_yield运行线程自动放弃cpu，让另外一个线程运行。</p>
<p>线程通常是有益的，但是带来了不小程序设计难度，线程的问题是：</p>
<p>\1. 父进程有多个线程，那么开启的子线程是否需要同样多的线程</p>
<p>如果是，那么附近中某个线程被阻塞，那么copy到子进程后，copy版的线程也要被阻塞吗，想一想nginx的多线程模式接收用户连接。</p>
<p>\2. 在同一个进程中，如果一个线程关闭了问题，而另外一个线程正准备往该文件内写内容呢？</p>
<p> 如果一个线程注意到没有内存了，并开始分配更多的内存，在工作一半时，发生线程切换，新的线程也发现内存不够用了，又开始分配更多的内存，这样内存就被分配了多次，这些问题都是多线程编程的典型问题，需要仔细思考和设计。</p>
<h3 id="七-POSIX线程（了解）"><a href="#七-POSIX线程（了解）" class="headerlink" title="七 POSIX线程（了解）"></a>七 POSIX线程（了解）</h3><p>为了实现可移植的线程程序,IEEE在IEEE标准1003.1c中定义了线程标准，它定义的线程包叫Pthread。大部分UNIX系统都支持该标准，简单介绍如下</p>
<p><img src="https://pic4.zhimg.com/80/v2-855ddca7baa57baf9a5242a8167369b3_720w.jpg" alt="img"></p>
<h3 id="八-在用户空间实现的线程（了解）"><a href="#八-在用户空间实现的线程（了解）" class="headerlink" title="八 在用户空间实现的线程（了解）"></a>八 在用户空间实现的线程（了解）</h3><p>线程的实现可以分为两类：用户级线程(User-Level Thread)和内核线线程(Kernel-Level Thread)，后者又称为内核支持的线程或轻量级进程。在多线程操作系统中，各个系统的实现方式并不相同，在有的系统中实现了用户级线程，有的系统中实现了内核级线程。</p>
<p>用户级线程内核的切换由用户态程序自己控制内核切换,不需要内核干涉，少了进出内核态的消耗，但不能很好的利用多核Cpu,目前Linux pthread大体是这么做的。</p>
<p><img src="https://pic1.zhimg.com/80/v2-4d55e64ce7c111b39a037000248719c0_720w.jpg" alt="img"></p>
<p>在用户空间模拟操作系统对进程的调度，来调用一个进程中的线程，每个进程中都会有一个运行时系统，用来调度线程。此时当该进程获取cpu时，进程内再调度出一个线程去执行，同一时刻只有一个线程执行。</p>
<h3 id="九-在内核空间实现的线程（了解）"><a href="#九-在内核空间实现的线程（了解）" class="headerlink" title="九 在内核空间实现的线程（了解）"></a>九 在内核空间实现的线程（了解）</h3><p>内核级线程:切换由内核控制，当线程进行切换的时候，由用户态转化为内核态。切换完毕要从内核态返回用户态；可以很好的利用smp，即利用多核cpu。windows线程就是这样的。</p>
<p><img src="https://pic4.zhimg.com/80/v2-d9b31239c632ccb1f4b3c39679ee5c07_720w.jpg" alt="img"></p>
<h3 id="十-用户级与内核级线程的对比（了解）"><a href="#十-用户级与内核级线程的对比（了解）" class="headerlink" title="十 用户级与内核级线程的对比（了解）"></a>十 用户级与内核级线程的对比（了解）</h3><p><strong>一： 以下是用户级线程和内核级线程的区别：</strong></p>
<ol>
<li>内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</li>
<li>用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。</li>
<li>用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</li>
<li>在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</li>
<li>用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。</li>
</ol>
<p><strong>二： 内核线程的优缺点</strong></p>
<p><strong>优点：</strong></p>
<ol>
<li>当有多个处理机时，一个进程的多个线程可以同时执行。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>由内核进行调度。</li>
</ol>
<p><strong>三： 用户进程的*<em>优缺点*</em></strong></p>
<p><strong>优点：</strong></p>
<ol>
<li>线程的调度不需要内核直接参与，控制简单。</li>
<li>可以在不支持线程的操作系统中实现。</li>
<li>创建和销毁线程、线程切换代价等线程管理的代价比内核线程少得多。</li>
<li>允许每个进程定制自己的调度算法，线程管理比较灵活。</li>
<li>线程能够利用的表空间和堆栈空间比内核级线程多。</li>
<li>同一进程中只能同时有一个线程在运行，如果有一个线程使用了系统调用而阻塞，那么整个进程都会被挂起。另外，页面失效也会产生同样的问题。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>资源调度按照进程进行，多个处理机下，同一个进程中的线程只能在同一个处理机下分时复用</li>
</ol>
<h3 id="十一-混合实现（了解）"><a href="#十一-混合实现（了解）" class="headerlink" title="十一 混合实现（了解）"></a>十一 混合实现（了解）</h3><p>用户级与内核级的多路复用，内核同一调度内核线程，每个内核线程对应n个用户线程</p>
<p><img src="https://pic1.zhimg.com/80/v2-0b049f0e481ee80e53331194d7f2c044_720w.jpg" alt="img"></p>
<h3 id="十二-线程小故事"><a href="#十二-线程小故事" class="headerlink" title="十二 线程小故事"></a>十二 线程小故事</h3><p><a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?amp;srcid=0330UDNmQ&mid=403498894&__biz=MjM5NzA1MTcyMA==&idx=2&scene=2&sn=219c1a6001b5bb7e6bdc7963b1af8450">我是一个线程mp.weixin.qq.com&#x2F;s?amp;srcid&#x3D;0330UDNmQ&amp;mid&#x3D;403498894&amp;__biz&#x3D;MjM5NzA1MTcyMA%3D%3D&amp;idx&#x3D;2&amp;scene&#x3D;2&amp;sn&#x3D;219c1a6001b5bb7e6bdc7963b1af8450<img src="https://pic2.zhimg.com/v2-76083704a8583ebe0c3bc264e45cec4d_180x120.jpg" alt="img"></a></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=141">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=141<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>36-并发编程（五）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/36_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E6%93%8D%E4%BD%9C%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="一-threading模块介绍"><a href="#一-threading模块介绍" class="headerlink" title="一 threading模块介绍"></a>一 threading模块介绍</h3><p>multiprocess模块的完全模仿了threading模块的接口，二者在使用层面，有很大的相似性，因而不再详细介绍</p>
<p><a href="https://link.zhihu.com/?target=https://docs.python.org/3/library/threading.html?highlight=threading%23">官网链接：https://docs.python.org/3/library/threading.html?highlight=threading#</a></p>
<h3 id="二-开启线程的两种方式"><a href="#二-开启线程的两种方式" class="headerlink" title="二 开启线程的两种方式"></a>二 开启线程的两种方式</h3><p>方式一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>方式二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sayhi</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Sayhi(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://pic3.zhimg.com/80/v2-4f7843543503e3a1836297921f9bb69e_720w.jpg" alt="img"></p>
<h3 id="三-在一个进程下开启多个线程与在一个进程下开启多个子进程的区别"><a href="#三-在一个进程下开启多个线程与在一个进程下开启多个子进程的区别" class="headerlink" title="三 在一个进程下开启多个线程与在一个进程下开启多个子进程的区别"></a>三 在一个进程下开启多个线程与在一个进程下开启多个子进程的区别</h3><p>1 谁的开启速度快</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在主进程下开启子进程</span></span><br><span class="line">    t=Process(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2 瞅一瞅pid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span></span><br><span class="line">    t1=Thread(target=work)</span><br><span class="line">    t2=Thread(target=work)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2:开多个进程,每个进程都有不同的pid</span></span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br></pre></td></tr></table></figure>

<p>3 同一进程内的线程共享该进程的数据？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># n=100</span></span><br><span class="line">    <span class="comment"># p=Process(target=work)</span></span><br><span class="line">    <span class="comment"># p.start()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line">    <span class="comment"># print(&#x27;主&#x27;,n) #毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n=<span class="number">1</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>,n) <span class="comment">#查看结果为0,因为同一进程内的线程之间共享进程内的数据</span></span><br></pre></td></tr></table></figure>

<h3 id="四-练习"><a href="#四-练习" class="headerlink" title="四 练习"></a>四 练习</h3><p>练习一：</p>
<p>多线程并发的socket服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p=threading.Thread(target=action,args=(conn,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<p>练习二：三个任务，一个接收用户输入，一个将用户输入的内容格式化成大写，一个将格式化后的结果存入文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">msg_l=[]</span><br><span class="line">format_l=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">        msg_l.append(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_msg</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> msg_l:</span><br><span class="line">            res=msg_l.pop()</span><br><span class="line">            format_l.append(res.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> format_l:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                res=format_l.pop()</span><br><span class="line">                f.write(<span class="string">&#x27;%s\n&#x27;</span> %res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=Thread(target=talk)</span><br><span class="line">    t2=Thread(target=format_msg)</span><br><span class="line">    t3=Thread(target=save)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br></pre></td></tr></table></figure>

<h3 id="五-线程相关的其他方法"><a href="#五-线程相关的其他方法" class="headerlink" title="五 线程相关的其他方法"></a>五 线程相关的其他方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Thread实例对象的方法</span><br><span class="line">  <span class="comment"># isAlive(): 返回线程是否活动的。</span></span><br><span class="line">  <span class="comment"># getName(): 返回线程名。</span></span><br><span class="line">  <span class="comment"># setName(): 设置线程名。</span></span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">  <span class="comment"># threading.currentThread(): 返回当前的线程变量。</span></span><br><span class="line">  <span class="comment"># threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span></span><br><span class="line">  <span class="comment"># threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName())</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread()) <span class="comment">#主线程</span></span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>()) <span class="comment">#连同主线程在内有两个运行的线程</span></span><br><span class="line">    <span class="built_in">print</span>(threading.active_count())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    MainThread</span></span><br><span class="line"><span class="string">    &lt;_MainThread(MainThread, started 140735268892672)&gt;</span></span><br><span class="line"><span class="string">    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    Thread-1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>主线程等待子线程结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    egon say hello</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="六-守护线程"><a href="#六-守护线程" class="headerlink" title="六 守护线程"></a>六 守护线程</h3><p><strong>无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁</strong></p>
<p><strong>需要强调的是：运行完毕并非终止运行</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.对主进程来说，运行完毕指的是主进程代码运行完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</span></span><br></pre></td></tr></table></figure>

<p><strong>详细解释：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>) <span class="comment">#必须在t.start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>迷惑人的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end456&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=Thread(target=foo)</span><br><span class="line">t2=Thread(target=bar)</span><br><span class="line"></span><br><span class="line">t1.daemon=<span class="literal">True</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main-------&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="七-Python-GIL-Global-Interpreter-Lock"><a href="#七-Python-GIL-Global-Interpreter-Lock" class="headerlink" title="七 Python GIL(Global Interpreter Lock)"></a>七 Python GIL(Global Interpreter Lock)</h3><p><strong><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/7449853.html">链接：http://www.cnblogs.com/linhaifeng/articles/7449853.html</a></strong></p>
<h3 id="八-同步锁"><a href="#八-同步锁" class="headerlink" title="八 同步锁"></a>八 同步锁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">三个需要注意的点：</span><br><span class="line"><span class="comment">#1.线程抢的是GIL锁，GIL锁相当于执行权限，拿到执行权限后才能拿到互斥锁Lock，其他线程也可以抢到GIL，但如果发现Lock仍然没有被释放则阻塞，即便是拿到执行权限GIL也要立刻交出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.join是等待所有，即整体串行，而锁只是锁住修改共享数据的部分，即部分串行，要想保证数据安全的根本原理在于让并发变成串行，join与互斥锁都可以实现，毫无疑问，互斥锁的部分串行效率要更高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 一定要看本小节最后的GIL与互斥锁的经典分析</span></span><br></pre></td></tr></table></figure>

<p><strong>GIL VS Lock</strong></p>
<p><strong>机智的同学可能会问到这个问题，就是既然你之前说过了，Python已经有一个GIL来保证同一时间只能有一个线程来执行了，为什么这里还需要lock?</strong></p>
<p><strong>首先我们需要达成共识：锁的目的是为了保护共享的数据，同一时间只能有一个线程来修改共享的数据</strong></p>
<p><strong>然后，我们可以得出结论：保护不同的数据就应该加不同的锁。</strong></p>
<p><strong>最后，问题就很明朗了，GIL 与Lock是两把锁，保护的数据不一样，前者是解释器级别的（当然保护的就是解释器级别的数据，比如垃圾回收的数据），后者是保护用户自己开发的应用程序的数据，很明显GIL不负责这件事，只能用户自定义加锁处理，即Lock</strong></p>
<p><strong>过程分析：所有线程抢的是GIL锁，或者说所有线程抢的是执行权限</strong></p>
<p><strong>线程1抢到GIL锁，拿到执行权限，开始执行，然后加了一把Lock，还没有执行完毕，即线程1还未释放Lock，有可能线程2抢到GIL锁，开始执行，执行过程中发现Lock还没有被线程1释放，于是线程2进入阻塞，被夺走执行权限，有可能线程1拿到GIL，然后正常执行到释放Lock。。。这就导致了串行运行的效果</strong></p>
<p><strong>既然是串行，那我们执行</strong></p>
<p><strong>t1.start()</strong></p>
<p><strong>t1.join</strong></p>
<p><strong>t2.start()</strong></p>
<p><strong>t2.join()</strong></p>
<p><strong>这也是串行执行啊，为何还要加Lock呢，需知join是等待t1所有的代码执行完，相当于锁住了t1的所有代码，而Lock只是锁住一部分操作共享数据的代码。</strong></p>
<p>详细</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因为Python解释器帮你自动定期进行内存回收，你可以理解为python解释器里有一个独立的线程，每过一段时间它起wake up做一次全局轮询看看哪些内存数据是可以被清空的，此时你自己的程序 里的线程和 py解释器自己的线程是并发运行的，假设你的线程删除了一个变量，py解释器的垃圾回收线程在清空这个变量的过程中的clearing时刻，可能一个其它线程正好又重新给这个还没来及得清空的内存空间赋值了，结果就有可能新赋值的数据被删除了，为了解决类似的问题，python解释器简单粗暴的加了锁，即当一个线程运行时，其它人都不能动，这样就解决了上述的问题，  这可以说是Python早期版本的遗留问题。</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(n) <span class="comment">#结果可能为99</span></span><br></pre></td></tr></table></figure>

<p><strong>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">R=threading.Lock()</span><br><span class="line"></span><br><span class="line">R.acquire()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对公共数据的操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">R.release()</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(n) <span class="comment">#结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span></span><br></pre></td></tr></table></figure>

<p>GIL锁与互斥锁综合分析（重点！！！）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">分析：</span><br><span class="line">　　<span class="comment">#1.100个线程去抢GIL锁，即抢执行权限</span></span><br><span class="line">     <span class="comment">#2. 肯定有一个线程先抢到GIL（暂且称为线程1），然后开始执行，一旦执行就会拿到lock.acquire()</span></span><br><span class="line">     <span class="comment">#3. 极有可能线程1还未运行完毕，就有另外一个线程2抢到GIL，然后开始运行，但线程2发现互斥锁lock还未被线程1释放，于是阻塞，被迫交出执行权限，即释放GIL</span></span><br><span class="line">    <span class="comment">#4.直到线程1重新抢到GIL，开始从上次暂停的位置继续执行，直到正常释放互斥锁lock，然后其他的线程再重复2 3 4的过程</span></span><br></pre></td></tr></table></figure>

<p>互斥锁与join的区别（重点！！！）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不加锁:并发执行,速度快,数据不安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %current_thread().getName())</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:0.5216062068939209 n:99</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="comment">#未加锁的代码并发运行</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="comment">#加锁的代码串行运行</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:53.294203758239746 n:0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</span></span><br><span class="line"><span class="comment">#没错:在start之后立刻使用jion,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是安全的,但问题是</span></span><br><span class="line"><span class="comment">#start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串行的</span></span><br><span class="line"><span class="comment">#单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 start to run</span></span><br><span class="line"><span class="string">Thread-2 start to run</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 start to run</span></span><br><span class="line"><span class="string">主:350.6937336921692 n:0 #耗时是多么的恐怖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="九-死锁现象与递归锁"><a href="#九-死锁现象与递归锁" class="headerlink" title="九 死锁现象与递归锁"></a>九 死锁现象与递归锁</h3><p>进程也有死锁与递归锁，在进程那里忘记说了，放到这里一切说了额</p>
<p>所谓死锁： 是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexB=Lock()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[41m%s 拿到A锁\033[0m&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[42m%s 拿到B锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m%s 拿到B锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 拿到A锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 拿到A锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-2 拿到A锁</span></span><br><span class="line"><span class="string">然后就卡住，死锁了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</p>
<p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mutexA=mutexB=threading.RLock() <span class="comment">#一个线程拿到锁，counter加1,该线程内又碰到加锁的情况，则counter继续加1，这期间所有其他线程都只能等待，等待该线程释放所有锁，即counter递减到0为止</span></span><br></pre></td></tr></table></figure>

<h3 id="十-信号量Semaphore"><a href="#十-信号量Semaphore" class="headerlink" title="十 信号量Semaphore"></a>十 信号量Semaphore</h3><p>同进程的一样</p>
<p>Semaphore管理一个内置的计数器， 每当调用acquire()时内置计数器-1； 调用release() 时内置计数器+1； 计数器不能小于0；当计数器为0时，acquire()将阻塞线程直到其他线程调用release()。</p>
<p>实例：(同时只有5个线程可以获得semaphore,即可以限制最大连接数为5)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Semaphore</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     if sm.acquire():</span></span><br><span class="line"><span class="comment">#         print (threading.currentThread().getName() + &#x27; get semaphore&#x27;)</span></span><br><span class="line"><span class="comment">#         time.sleep(2)</span></span><br><span class="line"><span class="comment">#         sm.release()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    sm.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s get sm&#x27;</span> %threading.current_thread().getName())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    sm.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sm=Semaphore(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">        t=Thread(target=func)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<p><strong>与进程池是完全不同的概念，进程池Pool(4)，最大只能产生4个进程，而且从头到尾都只是这四个进程，不会产生新的，而信号量是产生一堆线程&#x2F;进程</strong></p>
<p><a href="https://link.zhihu.com/?target=http://url.cn/5DMsS9r">互斥锁与信号量推荐博客：http://url.cn/5DMsS9r</a></p>
<h3 id="十一-Event"><a href="#十一-Event" class="headerlink" title="十一 Event"></a>十一 Event</h3><p>同进程的一样</p>
<p>线程的一个关键特性是每个线程都是独立运行且状态不可预测。如果程序中的其 他线程需要通过判断某个线程的状态来确定自己下一步的操作,这时线程同步问题就会变得非常棘手。为了解决这些问题,我们需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。在 初始情况下,Event对象中的信号标志被设置为假。如果有线程等待一个Event对象, 而这个Event对象的标志为假,那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程。如果一个线程等待一个已经被设置为真的Event对象,那么它将忽略这个事件, 继续执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值；</span><br><span class="line"></span><br><span class="line">event.wait()：如果 event.isSet()==<span class="literal">False</span>将阻塞线程；</span><br><span class="line"></span><br><span class="line">event.<span class="built_in">set</span>()： 设置event的状态值为<span class="literal">True</span>，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line"></span><br><span class="line">event.clear()：恢复event的状态值为<span class="literal">False</span>。</span><br></pre></td></tr></table></figure>



<p><img src="https://pic4.zhimg.com/80/v2-9da62d0885d8f90d6d2959bd720feddb_720w.jpg" alt="img"></p>
<p>例如，有多个工作线程尝试链接MySQL，我们想要在链接前确保MySQL服务正常才让那些工作线程去连接MySQL服务器，如果连接不成功，都会去尝试重新连接。那么我们就可以采用threading.Event机制来协调各个工作线程的连接操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Event</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_mysql</span>():</span></span><br><span class="line">    count=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> event.is_set():</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError(<span class="string">&#x27;链接超时&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s&gt;第%s次尝试链接&#x27;</span> % (threading.current_thread().getName(), count))</span><br><span class="line">        event.wait(<span class="number">0.5</span>)</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s&gt;链接成功&#x27;</span> %threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_mysql</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[45m[%s]正在检查mysql\033[0m&#x27;</span> % threading.current_thread().getName())</span><br><span class="line">    time.sleep(random.randint(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event=Event()</span><br><span class="line">    conn1=Thread(target=conn_mysql)</span><br><span class="line">    conn2=Thread(target=conn_mysql)</span><br><span class="line">    check=Thread(target=check_mysql)</span><br><span class="line"></span><br><span class="line">    conn1.start()</span><br><span class="line">    conn2.start()</span><br><span class="line">    check.start()</span><br></pre></td></tr></table></figure>

<h3 id="十二-条件Condition（了解）"><a href="#十二-条件Condition（了解）" class="headerlink" title="十二 条件Condition（了解）"></a>十二 条件Condition（了解）</h3><p>使得线程等待，只有满足某条件时，才释放n个线程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">n</span>):</span></span><br><span class="line">    con.acquire()</span><br><span class="line">    con.wait()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run the thread: %s&quot;</span> %n)</span><br><span class="line">    con.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        inp = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> inp == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        con.acquire()</span><br><span class="line">        con.notify(<span class="built_in">int</span>(inp))</span><br><span class="line">        con.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">condition_func</span>():</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="literal">False</span></span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        ret = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">n</span>):</span></span><br><span class="line">    con.acquire()</span><br><span class="line">    con.wait_for(condition_func)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run the thread: %s&quot;</span> %n)</span><br><span class="line">    con.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<h3 id="十三-定时器"><a href="#十三-定时器" class="headerlink" title="十三 定时器"></a>十三 定时器</h3><p><strong>定时器，指定n秒后执行某操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line">t = Timer(<span class="number">1</span>, hello)</span><br><span class="line">t.start()  <span class="comment"># after 1 seconds, &quot;hello, world&quot; will be printed</span></span><br></pre></td></tr></table></figure>

<p>验证码定时器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> random,time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.make_cache()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cache</span>(<span class="params">self,interval=<span class="number">5</span></span>):</span></span><br><span class="line">        self.cache=self.make_code()</span><br><span class="line">        <span class="built_in">print</span>(self.cache)</span><br><span class="line">        self.t=Timer(interval,self.make_cache)</span><br><span class="line">        self.t.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_code</span>(<span class="params">self,n=<span class="number">4</span></span>):</span></span><br><span class="line">        res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            s1=<span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">            s2=<span class="built_in">chr</span>(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">            res+=random.choice([s1,s2])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> inp.upper() ==  self.cache:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;验证成功&#x27;</span>,end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                self.t.cancel()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj=Code()</span><br><span class="line">    obj.check()</span><br></pre></td></tr></table></figure>

<h3 id="十四-线程queue"><a href="#十四-线程queue" class="headerlink" title="十四 线程queue"></a>十四 线程queue</h3><p>queue队列 ：使用import queue，用法与进程Queue一样</p>
<p>queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p>
<ul>
<li>*<strong>class* <code>queue.``Queue</code>(*maxsize&#x3D;0*) #先进先出</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.Queue()</span><br><span class="line">q.put(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(先进先出):</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>*<strong>class* <code>queue.``LifoQueue</code>(*maxsize&#x3D;0*) #last in fisrt out</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line">q.put(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(后进先出):</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>*<strong>class* <code>queue.``PriorityQueue</code>(*maxsize&#x3D;0*) #存储数据时可设置优先级的队列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line"><span class="comment">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span></span><br><span class="line">q.put((<span class="number">20</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">q.put((<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">q.put((<span class="number">30</span>,<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(数字越小优先级越高,优先级高的优先出队):</span></span><br><span class="line"><span class="string">(10, &#x27;b&#x27;)</span></span><br><span class="line"><span class="string">(20, &#x27;a&#x27;)</span></span><br><span class="line"><span class="string">(30, &#x27;c&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>其他</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Constructor <span class="keyword">for</span> a priority queue. maxsize <span class="keyword">is</span> an integer that sets the upperbound limit on the number of items that can be placed <span class="keyword">in</span> the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize <span class="keyword">is</span> less than <span class="keyword">or</span> equal to zero, the queue size <span class="keyword">is</span> infinite.</span><br><span class="line"></span><br><span class="line">The lowest valued entries are retrieved first (the lowest valued entry <span class="keyword">is</span> the one returned by <span class="built_in">sorted</span>(<span class="built_in">list</span>(entries))[<span class="number">0</span>]). A typical pattern <span class="keyword">for</span> entries <span class="keyword">is</span> a <span class="built_in">tuple</span> <span class="keyword">in</span> the form: (priority_number, data).</span><br><span class="line"></span><br><span class="line">exception queue.Empty</span><br><span class="line">Exception raised when non-blocking get() (<span class="keyword">or</span> get_nowait()) <span class="keyword">is</span> called on a Queue <span class="built_in">object</span> which <span class="keyword">is</span> empty.</span><br><span class="line"></span><br><span class="line">exception queue.Full</span><br><span class="line">Exception raised when non-blocking put() (<span class="keyword">or</span> put_nowait()) <span class="keyword">is</span> called on a Queue <span class="built_in">object</span> which <span class="keyword">is</span> full.</span><br><span class="line"></span><br><span class="line">Queue.qsize()</span><br><span class="line">Queue.empty() <span class="comment">#return True if empty  </span></span><br><span class="line">Queue.full() <span class="comment"># return True if full </span></span><br><span class="line">Queue.put(item, block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br><span class="line">Put item into the queue. If optional args block <span class="keyword">is</span> true <span class="keyword">and</span> timeout <span class="keyword">is</span> <span class="literal">None</span> (the default), block <span class="keyword">if</span> necessary until a free slot <span class="keyword">is</span> available. If timeout <span class="keyword">is</span> a positive number, it blocks at most timeout seconds <span class="keyword">and</span> raises the Full exception <span class="keyword">if</span> no free slot was available within that time. Otherwise (block <span class="keyword">is</span> false), put an item on the queue <span class="keyword">if</span> a free slot <span class="keyword">is</span> immediately available, <span class="keyword">else</span> <span class="keyword">raise</span> the Full exception (timeout <span class="keyword">is</span> ignored <span class="keyword">in</span> that case).</span><br><span class="line"></span><br><span class="line">Queue.put_nowait(item)</span><br><span class="line">Equivalent to put(item, <span class="literal">False</span>).</span><br><span class="line"></span><br><span class="line">Queue.get(block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br><span class="line">Remove <span class="keyword">and</span> <span class="keyword">return</span> an item <span class="keyword">from</span> the queue. If optional args block <span class="keyword">is</span> true <span class="keyword">and</span> timeout <span class="keyword">is</span> <span class="literal">None</span> (the default), block <span class="keyword">if</span> necessary until an item <span class="keyword">is</span> available. If timeout <span class="keyword">is</span> a positive number, it blocks at most timeout seconds <span class="keyword">and</span> raises the Empty exception <span class="keyword">if</span> no item was available within that time. Otherwise (block <span class="keyword">is</span> false), <span class="keyword">return</span> an item <span class="keyword">if</span> one <span class="keyword">is</span> immediately available, <span class="keyword">else</span> <span class="keyword">raise</span> the Empty exception (timeout <span class="keyword">is</span> ignored <span class="keyword">in</span> that case).</span><br><span class="line"></span><br><span class="line">Queue.get_nowait()</span><br><span class="line">Equivalent to get(<span class="literal">False</span>).</span><br><span class="line"></span><br><span class="line">Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.</span><br><span class="line"></span><br><span class="line">Queue.task_done()</span><br><span class="line">Indicate that a formerly enqueued task <span class="keyword">is</span> complete. Used by queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task <span class="keyword">is</span> complete.</span><br><span class="line"></span><br><span class="line">If a join() <span class="keyword">is</span> currently blocking, it will resume when <span class="built_in">all</span> items have been processed (meaning that a task_done() call was received <span class="keyword">for</span> every item that had been put() into the queue).</span><br><span class="line"></span><br><span class="line">Raises a ValueError <span class="keyword">if</span> called more times than there were items placed <span class="keyword">in</span> the queue.</span><br><span class="line"></span><br><span class="line">Queue.join() block直到queue被消费完毕</span><br></pre></td></tr></table></figure>

<h3 id="十五-Python标准模块–concurrent-futures"><a href="#十五-Python标准模块–concurrent-futures" class="headerlink" title="十五 Python标准模块–concurrent.futures"></a>十五 Python标准模块–concurrent.futures</h3><p><strong><a href="https://link.zhihu.com/?target=https://docs.python.org/dev/library/concurrent.futures.html">https://docs.python.org/dev/library/concurrent.futures.html</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 介绍</span></span><br><span class="line">concurrent.futures模块提供了高度封装的异步调用接口</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">Both implement the same interface, which <span class="keyword">is</span> defined by the abstract Executor <span class="keyword">class</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 基本方法</span></span><br><span class="line"><span class="comment">#submit(fn, *args, **kwargs)</span></span><br><span class="line">异步提交任务</span><br><span class="line"></span><br><span class="line"><span class="comment">#map(func, *iterables, timeout=None, chunksize=1) </span></span><br><span class="line">取代<span class="keyword">for</span>循环submit的操作</span><br><span class="line"></span><br><span class="line"><span class="comment">#shutdown(wait=True) </span></span><br><span class="line">相当于进程池的pool.close()+pool.join()操作</span><br><span class="line">wait=<span class="literal">True</span>，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=<span class="literal">False</span>，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和<span class="built_in">map</span>必须在shutdown之前</span><br><span class="line"></span><br><span class="line"><span class="comment">#result(timeout=None)</span></span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_done_callback(fn)</span></span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure>

<p>ProcessPoolExecutor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">The ProcessPoolExecutor <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">an</span> <span class="title">Executor</span> <span class="title">subclass</span> <span class="title">that</span> <span class="title">uses</span> <span class="title">a</span> <span class="title">pool</span> <span class="title">of</span> <span class="title">processes</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">calls</span> <span class="title">asynchronously</span>. <span class="title">ProcessPoolExecutor</span> <span class="title">uses</span> <span class="title">the</span> <span class="title">multiprocessing</span> <span class="title">module</span>, <span class="title">which</span> <span class="title">allows</span> <span class="title">it</span> <span class="title">to</span> <span class="title">side</span>-<span class="title">step</span> <span class="title">the</span> <span class="title">Global</span> <span class="title">Interpreter</span> <span class="title">Lock</span> <span class="title">but</span> <span class="title">also</span> <span class="title">means</span> <span class="title">that</span> <span class="title">only</span> <span class="title">picklable</span> <span class="title">objects</span> <span class="title">can</span> <span class="title">be</span> <span class="title">executed</span> <span class="title">and</span> <span class="title">returned</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ProcessPoolExecutor</span>(<span class="params">max_workers=<span class="literal">None</span>, mp_context=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">An</span> <span class="title">Executor</span> <span class="title">subclass</span> <span class="title">that</span> <span class="title">executes</span> <span class="title">calls</span> <span class="title">asynchronously</span> <span class="title">using</span> <span class="title">a</span> <span class="title">pool</span> <span class="title">of</span> <span class="title">at</span> <span class="title">most</span> <span class="title">max_workers</span> <span class="title">processes</span>. <span class="title">If</span> <span class="title">max_workers</span> <span class="title">is</span> <span class="title">None</span> <span class="title">or</span> <span class="title">not</span> <span class="title">given</span>, <span class="title">it</span> <span class="title">will</span> <span class="title">default</span> <span class="title">to</span> <span class="title">the</span> <span class="title">number</span> <span class="title">of</span> <span class="title">processors</span> <span class="title">on</span> <span class="title">the</span> <span class="title">machine</span>. <span class="title">If</span> <span class="title">max_workers</span> <span class="title">is</span> <span class="title">lower</span> <span class="title">or</span> <span class="title">equal</span> <span class="title">to</span> 0, <span class="title">then</span> <span class="title">a</span> <span class="title">ValueError</span> <span class="title">will</span> <span class="title">be</span> <span class="title">raised</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#用法</span></span><br><span class="line"><span class="class"><span class="title">from</span> <span class="title">concurrent</span>.<span class="title">futures</span> <span class="title">import</span> <span class="title">ThreadPoolExecutor</span>,<span class="title">ProcessPoolExecutor</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">import</span> <span class="title">os</span>,<span class="title">time</span>,<span class="title">random</span></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ProcessPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    futures=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        future=executor.submit(task,i)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    executor.shutdown(<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        <span class="built_in">print</span>(future.result())</span><br></pre></td></tr></table></figure>

<p>ThreadPoolExecutor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">ThreadPoolExecutor <span class="keyword">is</span> an Executor subclass that uses a pool of threads to execute calls asynchronously.</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ThreadPoolExecutor</span>(<span class="params">max_workers=<span class="literal">None</span>, thread_name_prefix=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">An</span> <span class="title">Executor</span> <span class="title">subclass</span> <span class="title">that</span> <span class="title">uses</span> <span class="title">a</span> <span class="title">pool</span> <span class="title">of</span> <span class="title">at</span> <span class="title">most</span> <span class="title">max_workers</span> <span class="title">threads</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">calls</span> <span class="title">asynchronously</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Changed</span> <span class="title">in</span> <span class="title">version</span> 3.5:</span> If max_workers <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> given, it will default to the number of processors on the machine, multiplied by <span class="number">5</span>, assuming that ThreadPoolExecutor <span class="keyword">is</span> often used to overlap I/O instead of CPU work <span class="keyword">and</span> the number of workers should be higher than the number of workers <span class="keyword">for</span> ProcessPoolExecutor.</span><br><span class="line"></span><br><span class="line">New <span class="keyword">in</span> version <span class="number">3.6</span>: The thread_name_prefix argument was added to allow users to control the threading.Thread names <span class="keyword">for</span> worker threads created by the pool <span class="keyword">for</span> easier debugging.</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line">与ProcessPoolExecutor相同</span><br></pre></td></tr></table></figure>

<p>map的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(11):</span></span><br><span class="line">    <span class="comment">#     future=executor.submit(task,i)</span></span><br><span class="line"></span><br><span class="line">    executor.<span class="built_in">map</span>(task,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>)) <span class="comment">#map取代了for+submit</span></span><br></pre></td></tr></table></figure>

<p>回调函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; get %s&#x27;</span> %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;url&#x27;</span>:url,<span class="string">&#x27;text&#x27;</span>:respone.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">res</span>):</span></span><br><span class="line">    res=res.result()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; parse %s&#x27;</span> %(os.getpid(),res[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">    parse_res=<span class="string">&#x27;url:&lt;%s&gt; size:[%s]\n&#x27;</span> %(res[<span class="string">&#x27;url&#x27;</span>],<span class="built_in">len</span>(res[<span class="string">&#x27;text&#x27;</span>]))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls=[</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.python.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.openstack.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://help.github.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://www.sina.com.cn/&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p=Pool(3)</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     p.apply_async(get_page,args=(url,),callback=pasrse_page)</span></span><br><span class="line">    <span class="comment"># p.close()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line"></span><br><span class="line">    p=ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        p.submit(get_page,url).add_done_callback(parse_page) <span class="comment">#parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span></span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=142">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=142<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>39-数据库（一）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/39_%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="一-数据库管理软件的由来"><a href="#一-数据库管理软件的由来" class="headerlink" title="一 数据库管理软件的由来"></a>一 数据库管理软件的由来</h3><p>基于我们之前所学，数据要想永久保存，都是保存于文件中，毫无疑问，一个文件仅仅只能存在于某一台机器上。</p>
<p>如果我们暂且忽略直接基于文件来存取数据的效率问题，并且假设程序所有的组件都运行在一台机器上，那么用文件存取数据，并没有问题。</p>
<p>很不幸，这些假设都是你自己意淫出来的，上述假设存在以下几个问题。。。。。。</p>
<p><strong>1、程序所有的组件就不可能运行在一台机器上</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为这台机器一旦挂掉则意味着整个软件的崩溃，并且程序的执行效率依赖于承载它的硬件，而一台机器机器的性能总归是有限的，受限于目前的硬件水平，就一台机器的性能垂直进行扩展是有极限的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#于是我们只能通过水平扩展来增强我们系统的整体性能，这就需要我们将程序的各个组件分布于多台机器去执行。</span></span><br></pre></td></tr></table></figure>

<p><strong>2、数据安全问题</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据1的描述，我们将程序的各个组件分布到各台机器，但需知各组件仍然是一个整体，言外之意，所有组件的数据还是要共享的。但每台机器上的组件都只能操作本机的文件，这就导致了数据必然不一致。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#于是我们想到了将数据与应用程序分离：把文件存放于一台机器，然后将多台机器通过网络去访问这台机器上的文件（用socket实现），即共享这台机器上的文件,共享则意味着竞争，会发生数据不安全，需要加锁处理。。。。</span></span><br></pre></td></tr></table></figure>

<p><strong>3、并发</strong></p>
<p>根据2的描述，我们必须写一个socket服务端来管理这台机器（数据库服务器）上的文件，然后写一个socket客户端，完成如下功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.远程连接（支持并发）</span></span><br><span class="line"><span class="comment">#2.打开文件</span></span><br><span class="line"><span class="comment">#3.读写（加锁）</span></span><br><span class="line"><span class="comment">#4.关闭文件</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我们在编写任何程序之前，都需要事先写好基于网络操作一台主机上文件的程序（socket服务端与客户端程序），于是有人将此类程序写成一个专门的处理软件，这就是mysql等数据库管理软件的由来，但mysql解决的不仅仅是数据共享的问题，还有查询效率，安全性等一系列问题，总之，把程序员从数据管理中解脱出来，专注于自己的程序逻辑的编写。</span></span><br></pre></td></tr></table></figure>

<h3 id="二-数据库概述"><a href="#二-数据库概述" class="headerlink" title="二 数据库概述"></a>二 数据库概述</h3><p><strong>1 什么是数据（Data）</strong></p>
<p><em>描述事物的符号记录称为数据，描述事物的符号既可以是数字，也可以是文字、图片，图像、声音、语言等，数据由多种表现形式，它们都可以经过数字化后存入计算机</em></p>
<p><em>在计算机中描述一个事物，就需要抽取这一事物的典型特征，组成一条记录，就相当于文件里的一行内容，如：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> egon,male,<span class="number">18</span>,<span class="number">1999</span>,山东,计算机系,<span class="number">2017</span>,oldboy</span><br></pre></td></tr></table></figure>

<p><em>单纯的一条记录并没有任何意义，如果我们按逗号作为分隔，依次定义各个字段的意思，相当于定义表的标题</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> name,sex,age,birth,born_addr,major,entrance_time,school <span class="comment">#字段</span></span><br><span class="line"><span class="number">2</span> egon,male,<span class="number">18</span>,<span class="number">1999</span>,山东,计算机系,<span class="number">2017</span>,oldboy <span class="comment">#记录</span></span><br></pre></td></tr></table></figure>

<p><em>这样我们就可以了解egon，性别为男，年龄18岁，出生于1999年，出生地为山东，2017年考入老男孩计算机系</em></p>
<p><strong>2 什么是数据库（DataBase，简称DB）</strong></p>
<p><em>数据库即存放数据的仓库，只不过这个仓库是在计算机存储设备上，而且数据是按一定的格式存放的</em></p>
<p><em>过去人们将数据存放在文件柜里，现在数据量庞大，已经不再适用</em></p>
<p><em>数据库是长期存放在计算机内、有组织、可共享的数据即可。</em></p>
<p><em>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种 用户共享</em></p>
<p><strong>3 什么是数据库管理系统（DataBase Management System 简称DBMS）</strong></p>
<p><em>在了解了Data与DB的概念后，如何科学地组织和存储数据，如何高效获取和维护数据成了关键</em></p>
<p><em>这就用到了一个系统软件—数据库管理系统</em></p>
<p><em>如MySQL、Oracle、SQLite、Access、MS SQL Server</em></p>
<p><em>mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。</em> <em>oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。</em> <em>sql server是微软公司的产品，主要应用于大中型企业，如联想、方正等。</em></p>
<p><strong>4 数据库服务器、数据管理系统、数据库、表与记录的关系（重点理解！！！）</strong></p>
<p><strong>记录：1 刘海龙 324245234 22（多个字段的信息组成一条记录，即文件中的一行内容）</strong></p>
<p><strong>表：student,scholl,class_list（即文件）</strong></p>
<p><strong>数据库：oldboy_stu（即文件夹）</strong></p>
<p><strong>数据库管理系统：如mysql（是一个软件）</strong></p>
<p><strong>数据库服务器：一台计算机（对内存要求比较高）</strong></p>
<p><strong>总结：</strong></p>
<p><strong>数据库服务器-：运行数据库管理软件</strong></p>
<p><strong>数据库管理软件：管理-数据库</strong></p>
<p><strong>数据库：即文件夹，用来组织文件&#x2F;表</strong></p>
<p><strong>表：即文件，用来存放多行内容&#x2F;多条记录</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-bfdd92b482a8d0c473a92e1d2651f3aa_720w.jpg" alt="img"></p>
<p><strong>5 数据库管理技术的发展历程(了解)</strong></p>
<p><strong>一 人工管理阶段</strong></p>
<p><em>20世纪50年代中期以前，计算机主要用于科学计算。</em></p>
<p><em>当时的硬件水平：外存只有纸带、卡片、磁带，没有磁盘等直接存取的存储设备</em></p>
<p><em>当时的软件状况：没有操作系统，没有管理数据的软件，数据的处理方式是批处理。</em></p>
<p><em>人工管理数据具有以下特点：</em></p>
<p><em>1 数据不保存：计算机主要用于科学计算，数据临时用，临时输入，不保存</em></p>
<p><em>2 应用程序管理数据：数据要有应用程序自己管理，应用程序需要处理数据的逻辑+物理结构，开发负担很重</em></p>
<p><em>3 数据不共享：一组数据只对应一个程序，多个程序之间涉及相同数据时，必须各自定义，造成数据大量冗余</em></p>
<p><em>4 数据不具有独立性：数据的逻辑结构或物理结构发生变化后，必须对应用程序做出相应的修改，开发负担进一步加大</em></p>
<p><img src="https://pic3.zhimg.com/80/v2-c07e6699996fb0ba13b5a12452fa3e7a_720w.jpg" alt="img"></p>
<p><strong>二 文件系统阶段</strong></p>
<p><em>20世纪50年代后期到60年代中期</em></p>
<p><em>硬件水平：有了磁盘、磁鼓等可直接存取的存储设备</em></p>
<p><em>软件水平：有了操作系统，并且操作系统中已经有了专门的数据管理软件，即文件系统；处理方式上不仅有了批处理，而且能够联机实时处理</em></p>
<p><em>文件系统管理数据具有以下优点:</em></p>
<p><em>1 数据可以长期保存：计算机大量用于数据处理，因而数据需要长期保存，进行增删改查操作</em></p>
<p><em>2 由文件系统管理数据：文件系统这个软件，把数据组织成相对独立的数据文件，利用按文件名，按记录进行存取。实现了记录内的结构性，但整体无结构。并且程序与数据之间由文件系统提供存取方法进行转换，是应用程序与数据之间有了一定的独立性，程序员可以不必过多考虑物理细节。</em></p>
<p><em>文件系统管理数据具有以下缺点：</em></p>
<p><em>1 数据共享性差，冗余度大：一个文件对应一个应用程序，不同应用有相同数据时，也必须建立各自的文件，不能共享相同的数据，造成数据冗余，浪费空间，且相同的数据重复存储，各自管理，容易造成数据不一致性</em></p>
<p><em>2 数据独立性差：一旦数据的逻辑结构改变，必须修改应用程序，修改文件结构的定义。应用程序的改变，也将引起文件的数据结构的改变。因此数据与程序之间缺乏独立性。可见，文件系统仍然是一个不具有弹性的无结构的数据集合，即文件之间是孤立的，不能反映现实世界事物之间的内存联系。</em></p>
<p><img src="https://pic1.zhimg.com/80/v2-9a7bb3db950d69b1fbfc0346392adf54_720w.jpg" alt="img"></p>
<p><strong>三 数据系统阶段</strong></p>
<p><em>20世纪60年代后期以来，计算机用于管理的规模越来越大，应用越来越广泛，数据量急剧增长，同时多种应用，多种语言互相覆盖地共享数据结合要求越来越强烈</em></p>
<p><em>硬件水平：有了大容量磁盘，硬件架构下降</em></p>
<p><em>软件水平：软件价格上升（开发效率必须提升，必须将程序员从数据管理中解放出来），分布式的概念盛行。</em></p>
<p><em>数据库系统的特点：</em></p>
<p><em>1 数据结构化（如上图odboy_stu）</em></p>
<p><em>2 数据共享，冗余度低，易扩充</em></p>
<p><em>3 数据独立性高</em></p>
<p><em>4 数据由DBMS统一管理和控制</em></p>
<p><em>a：数据的安全性保护</em></p>
<p><em>b：数据的完整性检查</em></p>
<p><em>c：并发控制</em></p>
<p><em>d：数据库恢复</em></p>
<h3 id="三-mysql介绍"><a href="#三-mysql介绍" class="headerlink" title="三 mysql介绍"></a>三 mysql介绍</h3><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p><strong>mysql是什么</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql就是一个基于socket编写的C/S架构的软件</span></span><br><span class="line"><span class="comment">#客户端软件</span></span><br><span class="line">　　mysql自带：如mysql命令，mysqldump命令等</span><br><span class="line">　　python模块：如pymysql</span><br></pre></td></tr></table></figure>

<p><strong>数据库管理软件分类</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分两大类：</span></span><br><span class="line">　　关系型：如sqllite，db2，oracle，access，sql server，MySQL，注意：sql语句通用</span><br><span class="line">　　非关系型：mongodb，redis，memcache</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以简单的理解为：</span></span><br><span class="line">    关系型数据库需要有表结构</span><br><span class="line">    非关系型数据库是key-value存储的，没有表结构</span><br></pre></td></tr></table></figure>

<h3 id="四-下载安装"><a href="#四-下载安装" class="headerlink" title="四 下载安装"></a>四 下载安装</h3><p><strong>Linux版本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二进制rpm包安装</span></span><br><span class="line">yum -y install mysql-server mysql</span><br></pre></td></tr></table></figure>

<p>源码安装mysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>解压tar包</span><br><span class="line">cd /software</span><br><span class="line">tar -xzvf mysql-<span class="number">5.6</span><span class="number">.21</span>-linux-glibc2<span class="number">.5</span>-x86_64.tar.gz</span><br><span class="line">mv mysql-<span class="number">5.6</span><span class="number">.21</span>-linux-glibc2<span class="number">.5</span>-x86_64 mysql-<span class="number">5.6</span><span class="number">.21</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>添加用户与组</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">chown -R mysql:mysql mysql-<span class="number">5.6</span><span class="number">.21</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>安装数据库</span><br><span class="line">su mysql</span><br><span class="line">cd mysql-<span class="number">5.6</span><span class="number">.21</span>/scripts</span><br><span class="line">./mysql_install_db --user=mysql --basedir=/software/mysql-<span class="number">5.6</span><span class="number">.21</span> --datadir=/software/mysql-<span class="number">5.6</span><span class="number">.21</span>/data</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>配置文件</span><br><span class="line">cd /software/mysql-<span class="number">5.6</span><span class="number">.21</span>/support-files</span><br><span class="line">cp my-default.cnf /etc/my.cnf</span><br><span class="line">cp mysql.server /etc/init.d/mysql</span><br><span class="line">vim /etc/init.d/mysql   <span class="comment">#若mysql的安装目录是/usr/local/mysql,则可省略此步</span></span><br><span class="line">修改文件中的两个变更值</span><br><span class="line">basedir=/software/mysql-<span class="number">5.6</span><span class="number">.21</span></span><br><span class="line">datadir=/software/mysql-<span class="number">5.6</span><span class="number">.21</span>/data</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">export MYSQL_HOME=<span class="string">&quot;/software/mysql-5.6.21&quot;</span></span><br><span class="line">export PATH=<span class="string">&quot;$PATH:$MYSQL_HOME/bin&quot;</span></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>添加自启动服务</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig mysql on</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>启动mysql</span><br><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>登录mysql及改密码与配置远程访问</span><br><span class="line">mysqladmin -u root password <span class="string">&#x27;your_password&#x27;</span>     <span class="comment">#修改root用户密码</span></span><br><span class="line">mysql -u root -p     <span class="comment">#登录mysql,需要输入密码</span></span><br><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;your_password&#x27;</span> WITH GRANT OPTION;     <span class="comment">#允许root用户远程访问</span></span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;     <span class="comment">#刷新权限</span></span><br></pre></td></tr></table></figure>

<p>源码安装mariadb</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 解压</span><br><span class="line">tar zxvf  mariadb-<span class="number">5.5</span><span class="number">.31</span>-linux-x86_64.tar.gz   </span><br><span class="line">mv mariadb-<span class="number">5.5</span><span class="number">.31</span>-linux-x86_64 /usr/local/mysql //必需这样，很多脚本或可执行程序都会直接访问这个目录</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 权限</span><br><span class="line">groupadd mysql             //增加 mysql 属组 </span><br><span class="line">useradd -g mysql mysql     //增加 mysql 用户 并归于mysql 属组 </span><br><span class="line">chown mysql:mysql -Rf  /usr/local/mysql    // 设置 mysql 目录的用户及用户组归属。 </span><br><span class="line">chmod +x -Rf /usr/local/mysql    //赐予可执行权限 </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 拷贝配置文件</span><br><span class="line">cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf     //复制默认mysql配置 文件到/etc目录 </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 初始化</span><br><span class="line">/usr/local/mysql/scripts/mysql_install_db --user=mysql          //初始化数据库 </span><br><span class="line">cp  /usr/local/mysql/support-files/mysql.server    /etc/init.d/mysql    //复制mysql服务程序 到系统目录 </span><br><span class="line">chkconfig  mysql on     //添加mysql 至系统服务并设置为开机启动 </span><br><span class="line">service  mysql  start  //启动mysql</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 环境变量配置</span><br><span class="line">vim /etc/profile   //编辑profile,将mysql的可执行路径加入系统PATH</span><br><span class="line">export PATH=/usr/local/mysql/<span class="built_in">bin</span>:$PATH </span><br><span class="line">source /etc/profile  //使PATH生效。</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 账号密码</span><br><span class="line">mysqladmin -u root password <span class="string">&#x27;yourpassword&#x27;</span> //设定root账号及密码</span><br><span class="line">mysql -u root -p  //使用root用户登录mysql</span><br><span class="line">use mysql  //切换至mysql数据库。</span><br><span class="line">select user,host,password <span class="keyword">from</span> user; //查看系统权限</span><br><span class="line">drop user <span class="string">&#x27;&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; //删除不安全的账户</span><br><span class="line">drop user root@<span class="string">&#x27;::1&#x27;</span>;</span><br><span class="line">drop user root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;</span><br><span class="line">select user,host,password <span class="keyword">from</span> user; //再次查看系统权限，确保不安全的账户均被删除。</span><br><span class="line">flush privileges;  //刷新权限</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 一些必要的初始配置</span><br><span class="line"><span class="number">1</span>）修改字符集为UTF8</span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">在[client]下面添加 default-character-<span class="built_in">set</span> = utf8</span><br><span class="line">在[mysqld]下面添加 character_set_server = utf8</span><br><span class="line"><span class="number">2</span>）增加错误日志</span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">在[mysqld]下面添加：</span><br><span class="line">log-error = /usr/local/mysql/log/error.log</span><br><span class="line">general-log-file = /usr/local/mysql/log/mysql.log</span><br><span class="line"><span class="number">3</span>) 设置为不区分大小写，linux下默认会区分大小写。</span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">在[mysqld]下面添加：</span><br><span class="line">lower_case_table_name=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">修改完重启：<span class="comment">#service  mysql  restart</span></span><br></pre></td></tr></table></figure>

<p><strong>Window版本</strong></p>
<p>安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、下载：MySQL Community Server 5.7.16</span></span><br><span class="line">http://dev.mysql.com/downloads/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、解压</span></span><br><span class="line">如果想要让MySQL安装在指定目录，那么就将解压后的文件夹移动到指定目录，如：C:\mysql-<span class="number">5.7</span><span class="number">.16</span>-winx64</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、添加环境变量</span></span><br><span class="line">【右键计算机】--》【属性】--》【高级系统设置】--》【高级】--》【环境变量】--》【在第二个内容框中找到 变量名为Path 的一行，双击】 --&gt; 【将MySQL的<span class="built_in">bin</span>目录路径追加到变值值中，用 ； 分割】</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、初始化</span></span><br><span class="line">mysqld --initialize-insecure</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、启动MySQL服务</span></span><br><span class="line">mysqld <span class="comment"># 启动MySQL服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6、启动MySQL客户端并连接MySQL服务</span></span><br><span class="line">mysql -u root -p <span class="comment"># 连接MySQL服务器</span></span><br></pre></td></tr></table></figure>

<p>将MySQL服务制作成windows服务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">上一步解决了一些问题，但不够彻底，因为在执行【mysqd】启动MySQL服务器时，当前终端会被hang住，那么做一下设置即可解决此问题：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：--install前，必须用mysql启动命令的绝对路径</span><br><span class="line"><span class="comment"># 制作MySQL的Windows服务，在终端执行此命令：</span></span><br><span class="line"><span class="string">&quot;c:\mysql-5.7.16-winx64\bin\mysqld&quot;</span> --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除MySQL的Windows服务，在终端执行此命令：</span></span><br><span class="line"><span class="string">&quot;c:\mysql-5.7.16-winx64\bin\mysqld&quot;</span> --remove</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注册成服务之后，以后再启动和关闭MySQL服务时，仅需执行如下命令：</span><br><span class="line"><span class="comment"># 启动MySQL服务</span></span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭MySQL服务</span></span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<h3 id="五-mysql软件基本管理"><a href="#五-mysql软件基本管理" class="headerlink" title="五 mysql软件基本管理"></a>五 mysql软件基本管理</h3><p><strong>1. 启动查看</strong></p>
<p>linux平台下查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@egon ~]<span class="comment"># systemctl start mariadb #启动</span></span><br><span class="line">[root@egon ~]<span class="comment"># systemctl enable mariadb #设置开机自启动</span></span><br><span class="line">Created symlink <span class="keyword">from</span> /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br><span class="line">[root@egon ~]<span class="comment"># ps aux |grep mysqld |grep -v grep #查看进程，mysqld_safe为启动mysql的脚本文件，内部调用mysqld命令</span></span><br><span class="line">mysql     <span class="number">3329</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">113252</span>  <span class="number">1592</span> ?        Ss   <span class="number">16</span>:<span class="number">19</span>   <span class="number">0</span>:<span class="number">00</span> /<span class="built_in">bin</span>/sh /usr/<span class="built_in">bin</span>/mysqld_safe --basedir=/usr</span><br><span class="line">mysql     <span class="number">3488</span>  <span class="number">0.0</span>  <span class="number">2.3</span> <span class="number">839276</span> <span class="number">90380</span> ?        Sl   <span class="number">16</span>:<span class="number">19</span>   <span class="number">0</span>:<span class="number">00</span> /usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-<span class="built_in">dir</span>=/usr/lib64/mysql/plugin --log-error=/var/log/mariadb/mariadb.log --pid-file=/var/run/mariadb/mariadb.pid --socket=/var/lib/mysql/mysql.sock</span><br><span class="line">[root@egon ~]<span class="comment"># netstat -an |grep 3306 #查看端口</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3306</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN  </span><br><span class="line">[root@egon ~]<span class="comment"># ll -d /var/lib/mysql #权限不对，启动不成功，注意user和group</span></span><br><span class="line">drwxr-xr-x <span class="number">5</span> mysql mysql <span class="number">4096</span> Jul <span class="number">20</span> <span class="number">16</span>:<span class="number">28</span> /var/lib/mysql</span><br></pre></td></tr></table></figure>

<p>You must reset your password using ALTER USER statement before executing this statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">安装完mysql 之后，登陆以后，不管运行任何命令，总是提示这个</span><br><span class="line">mac mysql error You must reset your password using ALTER USER statement before executing this statement.</span><br><span class="line">解决方法：</span><br><span class="line">step <span class="number">1</span>: SET PASSWORD = PASSWORD(<span class="string">&#x27;your new password&#x27;</span>);</span><br><span class="line">step <span class="number">2</span>: ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">step <span class="number">3</span>: flush privileges;</span><br></pre></td></tr></table></figure>

<p><strong>2. 登录，设置密码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始状态下，管理员root，密码为空，默认只允许从本机登录localhost</span><br><span class="line">设置密码</span><br><span class="line">[root@egon ~]<span class="comment"># mysqladmin -uroot password &quot;123&quot;        设置初始密码 由于原密码为空，因此-p可以不用</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysqladmin -uroot -p&quot;123&quot; password &quot;456&quot;        修改mysql密码,因为已经有密码了，所以必须输入原密码才能设置新密码</span></span><br><span class="line"></span><br><span class="line">命令格式:</span><br><span class="line">[root@egon ~]<span class="comment"># mysql -h172.31.0.2 -uroot -p456</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysql                    以root用户登录本机，密码为空</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 忘记密码</strong></p>
<p><strong>linux平台下，破解密码的两种方式</strong></p>
<p>方法一：删除授权库mysql，重新初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@egon ~]<span class="comment"># rm -rf /var/lib/mysql/mysql #所有授权信息全部丢失！！！</span></span><br><span class="line">[root@egon ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysql</span></span><br></pre></td></tr></table></figure>

<p>方法二：启动时，跳过授权库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@egon ~]<span class="comment"># vim /etc/my.cnf    #mysql主配置文件</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-table</span><br><span class="line">[root@egon ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysql</span></span><br><span class="line">MariaDB [(none)]&gt; update mysql.user <span class="built_in">set</span> password=password(<span class="string">&quot;123&quot;</span>) where user=<span class="string">&quot;root&quot;</span> <span class="keyword">and</span> host=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">MariaDB [(none)]&gt; \q</span><br><span class="line">[root@egon ~]<span class="comment"># #打开/etc/my.cnf去掉skip-grant-table,然后重启</span></span><br><span class="line">[root@egon ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">[root@egon ~]<span class="comment"># mysql -u root -p123 #以新密码登录</span></span><br></pre></td></tr></table></figure>

<p><strong>windows平台下，5.7版本mysql，破解密码的两种方式：</strong></p>
<p>方式一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 关闭mysql</span></span><br><span class="line"><span class="comment">#2 在cmd中执行：mysqld --skip-grant-tables</span></span><br><span class="line"><span class="comment">#3 在cmd中执行：mysql</span></span><br><span class="line"><span class="comment">#4 执行如下sql：</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;&#x27;</span>) where user = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 tskill mysqld #或taskkill -f /PID 7832</span></span><br><span class="line"><span class="comment">#6 重新启动mysql</span></span><br></pre></td></tr></table></figure>

<p>方式二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 关闭mysql，可以用tskill mysqld将其杀死</span></span><br><span class="line"><span class="comment">#2. 在解压目录下，新建mysql配置文件my.ini</span></span><br><span class="line"><span class="comment">#3. my.ini内容,指定</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.启动mysqld</span></span><br><span class="line"><span class="comment">#5.在cmd里直接输入mysql登录，然后操作</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;&#x27;</span>) where user=<span class="string">&#x27;root and host=&#x27;</span>localhost<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#6.注释my.ini中的skip-grant-tables，然后启动myqsld，然后就可以以新密码登录了</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 在windows下，为mysql服务指定配置文件</strong></p>
<p><strong>强调：配置文件中的注释可以有中文，但是配置项中不能出现中文</strong></p>
<p>my.ini</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在mysql的解压目录下，新建my.ini,然后配置</span></span><br><span class="line"><span class="comment">#1. 在执行mysqld命令时，下列配置会生效，即mysql服务启动时生效</span></span><br><span class="line">[mysqld]</span><br><span class="line">;skip-grant-tables</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">default-storage-engine=innodb</span><br><span class="line">innodb_file_per_table=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解压的目录</span></span><br><span class="line">basedir=E:\mysql-<span class="number">5.7</span><span class="number">.19</span>-winx64</span><br><span class="line"><span class="comment">#data目录</span></span><br><span class="line">datadir=E:\my_data <span class="comment">#在mysqld --initialize时，就会将初始数据存入此处指定的目录，在初始化之后，启动mysql时，就会去这个目录里找数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 针对客户端命令的全局配置，当mysql客户端命令执行时，下列配置生效</span></span><br><span class="line">[client]</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">default-character-<span class="built_in">set</span>=utf8</span><br><span class="line">user=root</span><br><span class="line">password=<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 只针对mysql这个客户端的配置，2中的是全局配置，而此处的则是只针对mysql这个命令的局部配置</span></span><br><span class="line">[mysql]</span><br><span class="line">;port=<span class="number">3306</span></span><br><span class="line">;default-character-<span class="built_in">set</span>=utf8</span><br><span class="line">user=egon</span><br><span class="line">password=<span class="number">4573</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#！！！如果没有[mysql],则用户在执行mysql命令时的配置以[client]为准</span></span><br></pre></td></tr></table></figure>

<p><strong>5. 统一字符编码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 修改配置文件</span></span><br><span class="line">[mysqld]</span><br><span class="line">default-character-<span class="built_in">set</span>=utf8 </span><br><span class="line">[client]</span><br><span class="line">default-character-<span class="built_in">set</span>=utf8 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-<span class="built_in">set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql5.5以上：修改方式有所改动</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-<span class="built_in">set</span>-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line">default-character-<span class="built_in">set</span>=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-<span class="built_in">set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 重启服务</span></span><br><span class="line"><span class="comment">#3. 查看修改结果：</span></span><br><span class="line">\s</span><br><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="六-初识sql语句"><a href="#六-初识sql语句" class="headerlink" title="六 初识sql语句"></a>六 初识sql语句</h3><p>有了mysql这个数据库软件，就可以将程序员从对数据的管理中解脱出来，专注于对程序逻辑的编写</p>
<p>mysql服务端软件即mysqld帮我们管理好文件夹以及文件，前提是作为使用者的我们，需要下载mysql的客户端，或者其他模块来连接到mysqld，然后使用mysql软件规定的语法格式去提交自己命令，实现对文件夹或文件的管理。该语法即sql（Structured Query Language 即结构化查询语言）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQL语言主要用于存取数据、查询数据、更新数据和管理关系数据库系统,SQL语言由IBM开发。SQL语言分为<span class="number">3</span>种类型：</span><br><span class="line"><span class="comment">#1、DDL语句    数据库定义语言： 数据库、表、视图、索引、存储过程，例如CREATE DROP ALTER</span></span><br><span class="line"><span class="comment">#2、DML语句    数据库操纵语言： 插入数据INSERT、删除数据DELETE、更新数据UPDATE、查询数据SELECT</span></span><br><span class="line"><span class="comment">#3、DCL语句    数据库控制语言： 例如控制用户的访问权限GRANT、REVOKE</span></span><br><span class="line"><span class="comment">#1. 操作文件夹</span></span><br><span class="line">        增：create database db1 charset utf8;</span><br><span class="line">        查：show databases;</span><br><span class="line">        改：alter database db1 charset latin1;</span><br><span class="line">        删除: drop database db1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 操作文件</span></span><br><span class="line">    先切换到文件夹下：use db1</span><br><span class="line">        增：create table t1(<span class="built_in">id</span> <span class="built_in">int</span>,name char);</span><br><span class="line">        查：show tables</span><br><span class="line">        改：alter table t1 modify name char(<span class="number">3</span>);</span><br><span class="line">              alter table t1 change name name1 char(<span class="number">2</span>);</span><br><span class="line">        删：drop table t1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 操作文件中的内容/记录</span></span><br><span class="line">        增：insert into t1 values(<span class="number">1</span>,<span class="string">&#x27;egon1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;egon2&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;egon3&#x27;</span>);</span><br><span class="line">        查：select * <span class="keyword">from</span> t1;</span><br><span class="line">        改：update t1 <span class="built_in">set</span> name=<span class="string">&#x27;sb&#x27;</span> where <span class="built_in">id</span>=<span class="number">2</span>;</span><br><span class="line">        删：delete <span class="keyword">from</span> t1 where <span class="built_in">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        清空表：</span><br><span class="line">            delete <span class="keyword">from</span> t1; <span class="comment">#如果有自增id，新增的数据，仍然是以删除前的最后一样作为起始。</span></span><br><span class="line">            truncate table t1;数据量大，删除速度比上一条快，且直接从零开始，</span><br><span class="line"></span><br><span class="line">            auto_increment 表示：自增</span><br><span class="line">            primary key 表示：约束（不能重复且不能为空）；加速查找</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>38-并发编程（七）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/38_python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8BIO%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="一-IO模型介绍"><a href="#一-IO模型介绍" class="headerlink" title="一 IO模型介绍"></a>一 IO模型介绍</h3><p><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/7430066.html%23_label4">为了更好地了解IO模型，我们需要事先回顾下：同步、异步、阻塞、非阻塞</a></p>
<p>同步（synchronous） IO和异步（asynchronous） IO，阻塞（blocking） IO和非阻塞（non-blocking）IO分别是什么，到底有什么区别？这个问题其实不同的人给出的答案都可能不同，比如wiki，就认为asynchronous IO和non-blocking IO是一个东西。这其实是因为不同的人的知识背景不同，并且在讨论这个问题的时候上下文(context)也不相同。所以，为了更好的回答这个问题，我先限定一下本文的上下文。</p>
<p>本文讨论的背景是Linux环境下的network IO。本文最重要的参考文献是Richard Stevens的“UNIX® Network Programming Volume 1, Third Edition: The Sockets Networking ”，6.2节“I&#x2F;O Models ”，Stevens在这节中详细说明了各种IO的特点和区别，如果英文够好的话，推荐直接阅读。Stevens的文风是有名的深入浅出，所以不用担心看不懂。本文中的流程图也是截取自参考文献。</p>
<p>Stevens在文章中一共比较了五种IO Model： * blocking IO * nonblocking IO * IO multiplexing * signal driven IO * asynchronous IO 由signal driven IO（信号驱动IO）在实际中并不常用，所以主要介绍其余四种IO Model。</p>
<p>再说一下IO发生时涉及的对象和步骤。对于一个network IO (这里我们以read举例)，它会涉及到两个系统对象，一个是调用这个IO的process (or thread)，另一个就是系统内核(kernel)。当一个read操作发生时，该操作会经历两个阶段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1）等待数据准备 (Waiting for the data to be ready)</span></span><br><span class="line"><span class="comment">#2）将数据从内核拷贝到进程中(Copying the data from the kernel to the process)</span></span><br></pre></td></tr></table></figure>

<p>记住这两点很重要，因为这些IO模型的区别就是在两个阶段上各有不同的情况。</p>
<p>补充：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、输入操作：read、readv、recv、recvfrom、recvmsg共5个函数，如果会阻塞状态，则会经理wait data和copy data两个阶段，如果设置为非阻塞则在wait 不到data时抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、输出操作：write、writev、send、sendto、sendmsg共5个函数，在发送缓冲区满了会阻塞在原地，如果设置为非阻塞，则会抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、接收外来链接：accept，与输入操作类似</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、发起外出链接：connect，与输出操作类似</span></span><br></pre></td></tr></table></figure>

<h3 id="二-阻塞IO-blocking-IO"><a href="#二-阻塞IO-blocking-IO" class="headerlink" title="二 阻塞IO(blocking IO)"></a>二 阻塞IO(blocking IO)</h3><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p>
<p><img src="https://pic2.zhimg.com/80/v2-57c6feedfeb28710a17b925dd35066a1_720w.jpg" alt="img"></p>
<p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。</p>
<p>而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。 <strong>所以，blocking IO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。</strong></p>
<p>几乎所有的程序员第一次接触到的网络编程都是从listen()、send()、recv() 等接口开始的，使用这些接口可以很方便的构建服务器&#x2F;客户机的模型。然而大部分的socket接口都是阻塞型的。如下图</p>
<p>ps：所谓阻塞型接口是指系统调用（一般是IO接口）不返回调用结果并让当前线程一直阻塞，只有当该系统调用获得结果或者超时出错时才返回。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b349f2082980d93cf9e4682d56452071_720w.jpg" alt="img"></p>
<p>实际上，除非特别指定，几乎所有的IO接口 ( 包括socket接口 ) 都是阻塞型的。这给网络编程带来了一个很大的问题，如在调用recv(1024)的同时，线程将被阻塞，在此期间，线程将无法执行任何运算或响应任何的网络请求。</p>
<p>一个简单的解决方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在服务器端使用多线程（或多进程）。多线程（或多进程）的目的是让每个连接都拥有独立的线程（或进程），这样任何一个连接的阻塞都不会影响其他的连接。</span></span><br></pre></td></tr></table></figure>

<p>该方案的问题是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启多进程或都线程的方式，在遇到要同时响应成百上千路的连接请求，则无论多线程还是多进程都会严重占据系统资源，降低系统对外界响应效率，而且线程与进程本身也更容易进入假死状态。</span></span><br></pre></td></tr></table></figure>

<p>改进方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#很多程序员可能会考虑使用“线程池”或“连接池”。“线程池”旨在减少创建和销毁线程的频率，其维持一定合理数量的线程，并让空闲的线程重新承担新的执行任务。“连接池”维持连接的缓存池，尽量重用已有的连接、减少创建和关闭连接的频率。这两种技术都可以很好的降低系统开销，都被广泛应用很多大型系统，如websphere、tomcat和各种数据库等。</span></span><br></pre></td></tr></table></figure>

<p>改进后方案其实也存在着问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#“线程池”和“连接池”技术也只是在一定程度上缓解了频繁调用IO接口带来的资源占用。而且，所谓“池”始终有其上限，当请求大大超过上限时，“池”构成的系统对外界的响应并不比没有池的时候效果好多少。所以使用“池”必须考虑其面临的响应规模，并根据响应规模调整“池”的大小。</span></span><br></pre></td></tr></table></figure>

<p><strong>对应上例中的所面临的可能同时出现的上千甚至上万次的客户端请求，“线程池”或“连接池”或许可以缓解部分压力，但是不能解决所有问题。总之，多线程模型可以方便高效的解决小规模的服务请求，但面对大规模的服务请求，多线程模型也会遇到瓶颈，可以用非阻塞接口来尝试解决这个问题。</strong></p>
<h3 id="三-非阻塞IO-non-blocking-IO"><a href="#三-非阻塞IO-non-blocking-IO" class="headerlink" title="三 非阻塞IO(non-blocking IO)"></a>三 非阻塞IO(non-blocking IO)</h3><p>Linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p>
<p><img src="https://pic2.zhimg.com/80/v2-de6969a3184e17de058a61ab1f3f67cd_720w.jpg" alt="img"></p>
<p>从图中可以看出，当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是用户就可以在本次到下次再发起read询问的时间间隔内做其他事情，或者直接再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存（这一阶段仍然是阻塞的），然后返回。</p>
<p>也就是说非阻塞的recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为轮询。轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</p>
<p><strong>所以，在非阻塞式IO中，用户进程其实是需要不断的主动询问kernel数据准备好了没有。</strong></p>
<p>非阻塞IO示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">server=socket.socket()</span><br><span class="line">server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">server.setblocking(<span class="literal">False</span>)</span><br><span class="line">r_list=[]</span><br><span class="line">w_list=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn,addr=server.accept()</span><br><span class="line">        r_list.append(conn)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        <span class="comment"># 强调强调强调：！！！非阻塞IO的精髓在于完全没有阻塞！！！</span></span><br><span class="line">        <span class="comment"># time.sleep(0.5) # 打开该行注释纯属为了方便查看效果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在做其他的事情&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;rlist: &#x27;</span>,<span class="built_in">len</span>(r_list))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wlist: &#x27;</span>,<span class="built_in">len</span>(w_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历读列表，依次取出套接字读取内容</span></span><br><span class="line">        del_rlist=[]</span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> r_list:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    conn.close()</span><br><span class="line">                    del_rlist.append(conn)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                w_list[conn]=data.upper()</span><br><span class="line">            <span class="keyword">except</span> BlockingIOError: <span class="comment"># 没有收成功，则继续检索下一个套接字的接收</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError: <span class="comment"># 当前套接字出异常，则关闭，然后加入删除列表，等待被清除</span></span><br><span class="line">                conn.close()</span><br><span class="line">                del_rlist.append(conn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历写列表，依次取出套接字发送内容</span></span><br><span class="line">        del_wlist=[]</span><br><span class="line">        <span class="keyword">for</span> conn,data <span class="keyword">in</span> w_list.items():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                conn.send(data)</span><br><span class="line">                del_wlist.append(conn)</span><br><span class="line">            <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清理无用的套接字,无需再监听它们的IO操作</span></span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> del_rlist:</span><br><span class="line">            r_list.remove(conn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> del_wlist:</span><br><span class="line">            w_list.pop(conn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">client=socket.socket()</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res=(<span class="string">&#x27;%s hello&#x27;</span> %os.getpid()).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    client.send(res)</span><br><span class="line">    data=client.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>但是非阻塞IO模型绝不被推荐。</strong></p>
<p>我们不能否则其优点：能够在等待任务完成的时间里干其他活了（包括提交其他任务，也就是 “后台” 可以有多个任务在“”同时“”执行）。</p>
<p>但是也难掩其缺点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 循环调用recv()将大幅度推高CPU占用率；这也是我们在代码中留一句time.sleep(2)的原因,否则在低配主机下极容易出现卡机情况</span></span><br><span class="line"><span class="comment">#2. 任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意时间完成。这会导致整体数据吞吐量的降低。</span></span><br></pre></td></tr></table></figure>

<p><em><strong>*此外，在这个方案中recv()更多的是起到检测“操作是否完成”的作用，实际操作系统提供了更为高效的检测“操作是否完成“作用的接口，例如select()多路复用模式，可以一次检测多个连接是否活跃。*</strong></em></p>
<h3 id="四-多路复用IO-IO-multiplexing"><a href="#四-多路复用IO-IO-multiplexing" class="headerlink" title="四 多路复用IO(IO multiplexing)"></a>四 多路复用IO(IO multiplexing)</h3><p>IO multiplexing这个词可能有点陌生，但是如果我说select&#x2F;epoll，大概就都能明白了。有些地方也称这种IO方式为<strong>事件驱动IO</strong>(event driven IO)。我们都知道，select&#x2F;epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select&#x2F;epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。它的流程如图：</p>
<p><img src="https://pic2.zhimg.com/80/v2-2a460241583789b2d961f5f48b325779_720w.jpg" alt="img"></p>
<p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。 这个图和blocking IO的图其实并没有太大的不同，事实上还更差一些。因为这里需要使用两个系统调用(select和recvfrom)，而blocking IO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p>
<p><strong>强调：</strong></p>
<p><strong>1. 如果处理的连接数不是很高的话，使用select&#x2F;epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p>
<p><strong>2. 在多路复用模型中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</strong></p>
<p><strong>结论: select的优势在于可以处理多个连接，不适用于单个连接</strong></p>
<p>select网络IO模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line">server = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8093</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line">server.setblocking(<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rlist=[server,]</span><br><span class="line">wlist=[]</span><br><span class="line">wdata=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rl,wl,xl=select.select(rlist,wlist,[],<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(wl)</span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> rl:</span><br><span class="line">        <span class="keyword">if</span> sock == server:</span><br><span class="line">            conn,addr=sock.accept()</span><br><span class="line">            rlist.append(conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=sock.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    sock.close()</span><br><span class="line">                    rlist.remove(sock)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                wlist.append(sock)</span><br><span class="line">                wdata[sock]=data.upper()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                sock.close()</span><br><span class="line">                rlist.remove(sock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> wl:</span><br><span class="line">        sock.send(wdata[sock])</span><br><span class="line">        wlist.remove(sock)</span><br><span class="line">        wdata.pop(sock)</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8093</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p><strong>select监听fd变化的过程分析：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户进程创建socket对象，拷贝监听的fd到内核空间，每一个fd会对应一张系统文件表，内核空间的fd响应到数据后，就会发送信号给用户进程数据已到；</span></span><br><span class="line"><span class="comment">#用户进程再发送系统调用，比如（accept）将内核空间的数据copy到用户空间，同时作为接受数据端内核空间的数据清除，这样重新监听时fd再有新的数据又可以响应到了（发送端因为基于TCP协议所以需要收到应答后才会清除）。</span></span><br></pre></td></tr></table></figure>

<p><strong>该模型的优点：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相比其他模型，使用select() 的事件驱动模型只用单线程（进程）执行，占用资源少，不消耗太多 CPU，同时能够为多客户端提供服务。如果试图建立一个简单的事件驱动的服务器程序，这个模型有一定的参考价值。</span></span><br></pre></td></tr></table></figure>

<p><strong>该模型的缺点：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先select()接口并不是实现“事件驱动”的最好选择。因为当需要探测的句柄值较大时，select()接口本身需要消耗大量时间去轮询各个句柄。很多操作系统提供了更为高效的接口，如linux提供了epoll，BSD提供了kqueue，Solaris提供了/dev/poll，…。如果需要实现更高效的服务器程序，类似epoll这样的接口更被推荐。遗憾的是不同的操作系统特供的epoll接口有很大差异，所以使用类似于epoll的接口实现具有较好跨平台能力的服务器会比较困难。</span></span><br><span class="line"><span class="comment">#其次，该模型将事件探测和事件响应夹杂在一起，一旦事件响应的执行体庞大，则对整个模型是灾难性的。</span></span><br></pre></td></tr></table></figure>

<h3 id="五-异步IO-Asynchronous-I-x2F-O"><a href="#五-异步IO-Asynchronous-I-x2F-O" class="headerlink" title="五 异步IO(Asynchronous I&#x2F;O)"></a>五 异步IO(Asynchronous I&#x2F;O)</h3><p>Linux下的asynchronous IO其实用得不多，从内核2.6版本才开始引入。先看一下它的流程：</p>
<p><img src="https://pic2.zhimg.com/80/v2-ede97f17d1ca1e7f23bd62aae2548c55_720w.jpg" alt="img"></p>
<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>
<h3 id="六-IO模型比较分析"><a href="#六-IO模型比较分析" class="headerlink" title="六 IO模型比较分析"></a>六 IO模型比较分析</h3><p>到目前为止，已经将四个IO Model都介绍完了。现在回过头来回答最初的那几个问题：blocking和non-blocking的区别在哪，synchronous IO和asynchronous IO的区别在哪。 先回答最简单的这个：blocking vs non-blocking。前面的介绍中其实已经很明确的说明了这两者的区别。调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p>
<p>再说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。Stevens给出的定义（其实是POSIX的定义）是这样子的： A synchronous I&#x2F;O operation causes the requesting process to be blocked until that I&#x2F;O operationcompletes; An asynchronous I&#x2F;O operation does not cause the requesting process to be blocked; 两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，四个IO模型可以分为两大类，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO这一类，而 asynchronous I&#x2F;O后一类 。</p>
<p>有人可能会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p>
<p>各个IO Model的比较如图所示：</p>
<p><img src="https://pic1.zhimg.com/80/v2-627ffa49acfdc032a65dbe350b0ac444_720w.jpg" alt="img"></p>
<p>经过上面的介绍，会发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p>
<h3 id="七-selectors模块"><a href="#七-selectors模块" class="headerlink" title="七 selectors模块"></a>七 selectors模块</h3><p>select,poll,epoll</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IO复用：为了解释这个名词，首先来理解下复用这个概念，复用也就是共用的意思，这样理解还是有些抽象，为此，咱们来理解下复用在通信领域的使用，在通信领域中为了充分利用网络连接的物理介质，往往在同一条网络链路上采用时分复用或频分复用的技术使其在同一链路上传输多路信号，到这里我们就基本上理解了复用的含义，即公用某个“介质”来尽可能多的做同一类(性质)的事，那IO复用的“介质”是什么呢？为此我们首先来看看服务器编程的模型，客户端发来的请求服务端会产生一个进程来对其进行服务，每当来一个客户请求就产生一个进程来服务，然而进程不可能无限制的产生，因此为了解决大量客户端访问的问题，引入了IO复用技术，即：一个进程可以同时对多个客户请求进行服务。也就是说IO复用的“介质”是进程(准确的说复用的是select和poll，因为进程也是靠调用select和poll来实现的)，复用一个进程(select和poll)来对多个IO进行服务，虽然客户端发来的IO是并发的但是IO所需的读写数据多数情况下是没有准备好的，因此就可以利用一个函数(select和poll)来监听IO所需的这些数据的状态，一旦IO有数据可以进行读写了，进程就来对这样的IO进行服务。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">理解完IO复用后，我们在来看下实现IO复用中的三个API(select、poll和epoll)的区别和联系</span><br><span class="line"></span><br><span class="line">select，poll，epoll都是IO多路复用的机制，I/O多路复用就是通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知应用程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。三者的原型如下所示：</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> select(<span class="built_in">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> poll(struct pollfd *fds, nfds_t nfds, <span class="built_in">int</span> timeout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> epoll_wait(<span class="built_in">int</span> epfd, struct epoll_event *events, <span class="built_in">int</span> maxevents, <span class="built_in">int</span> timeout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span>select的第一个参数nfds为fdset集合中最大描述符值加<span class="number">1</span>，fdset是一个位数组，其大小限制为__FD_SETSIZE（<span class="number">1024</span>），位数组的每一位代表其对应的描述符是否需要被检查。第二三四参数表示需要关注读、写、错误事件的文件描述符位数组，这些参数既是输入参数也是输出参数，可能会被内核修改用于标示哪些描述符上发生了关注的事件，所以每次调用select前都需要重新初始化fdset。timeout参数为超时时间，该结构会被内核修改，其值为超时剩余的时间。</span><br><span class="line"></span><br><span class="line"> select的调用步骤如下：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）使用copy_from_user从用户空间拷贝fdset到内核空间</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）注册回调函数__pollwait</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）遍历所有fd，调用其对应的poll方法（对于socket，这个poll方法是sock_poll，sock_poll根据情况会调用到tcp_poll,udp_poll或者datagram_poll）</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。</span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）__pollwait的主要工作就是把current（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列，对于tcp_poll 来说，其等待队列是sk-&gt;sk_sleep（注意把进程挂到等待队列中并不代表进程已经睡眠了）。在设备收到一条消息（网络设备）或填写完文件数 据（磁盘设备）后，会唤醒设备等待队列上睡眠的进程，这时current便被唤醒了。</span><br><span class="line"></span><br><span class="line">（<span class="number">6</span>）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值。</span><br><span class="line"></span><br><span class="line">（<span class="number">7</span>）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout是调用select的进程（也就是 current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout 指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。</span><br><span class="line"></span><br><span class="line">（<span class="number">8</span>）把fd_set从内核空间拷贝到用户空间。</span><br><span class="line"></span><br><span class="line">总结下select的几大缺点：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）select支持的文件描述符数量太小了，默认是<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>．  poll与select不同，通过一个pollfd数组向内核传递需要关注的事件，故没有描述符个数的限制，pollfd中的events字段和revents分别用于标示关注的事件和发生的事件，故pollfd数组只需要被初始化一次。</span><br><span class="line"></span><br><span class="line"> poll的实现机制与select类似，其对应内核中的sys_poll，只不过poll向内核传递pollfd数组，然后对pollfd中的每个描述符进行poll，相比处理fdset来说，poll效率更高。poll返回后，需要对pollfd中的每个元素检查其revents值，来得指事件是否发生。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>．直到Linux2<span class="number">.6</span>才出现了由内核直接支持的实现方法，那就是epoll，被公认为Linux2<span class="number">.6</span>下性能最好的多路I/O就绪通知方法。epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。epoll同样只告知那些就绪的文件描述符，而且当我们调用epoll_wait()获得就绪文件描述符时，返回的不是实际的描述符，而是一个代表就绪描述符数量的值，你只需要去epoll指定的一个数组中依次取得相应数量的文件描述符即可，这里也使用了内存映射（mmap）技术，这样便彻底省掉了这些文件描述符在系统调用时复制的开销。另一个本质的改进在于epoll采用基于事件的就绪通知方式。在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epoll既然是对select和poll的改进，就应该能避免上述的三个缺点。那epoll都是怎么解决的呢？在此之前，我们先看一下epoll 和select和poll的调用接口上的不同，select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函 数，epoll_create,epoll_ctl和epoll_wait，epoll_create是创建一个epoll句柄；epoll_ctl是注 册要监听的事件类型；epoll_wait则是等待事件的产生。</span><br><span class="line"></span><br><span class="line">　　对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定 EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝 一次。</span><br><span class="line"></span><br><span class="line">　　对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在 epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调 函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用 schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第<span class="number">7</span>步是类似的）。</span><br><span class="line"></span><br><span class="line">　　对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于<span class="number">2048</span>,举个例子, 在1GB内存的机器上大约是<span class="number">10</span>万左右，具体数目可以cat /proc/sys/fs/file-<span class="built_in">max</span>察看,一般来说这个数目和系统内存关系很大。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用 epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在 epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的 时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间，这就是回调机制带来的性能提升。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要 一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内 部定义的等待队列），这也能节省不少的开销。</span><br></pre></td></tr></table></figure>

<p>这三种IO多路复用模型在不同的平台有着不同的支持，而epoll在windows下就不支持，好在我们有selectors模块，帮我们默认选择当前平台下最合适的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> selectors</span><br><span class="line"></span><br><span class="line">sel=selectors.DefaultSelector()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accept</span>(<span class="params">server_fileobj,mask</span>):</span></span><br><span class="line">    conn,addr=server_fileobj.accept()</span><br><span class="line">    sel.register(conn,selectors.EVENT_READ,read)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">conn,mask</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;closing&#x27;</span>,conn)</span><br><span class="line">            sel.unregister(conn)</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        conn.send(data.upper()+<span class="string">b&#x27;_SB&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;closing&#x27;</span>, conn)</span><br><span class="line">        sel.unregister(conn)</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_fileobj=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">server_fileobj.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server_fileobj.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8088</span>))</span><br><span class="line">server_fileobj.listen(<span class="number">5</span>)</span><br><span class="line">server_fileobj.setblocking(<span class="literal">False</span>) <span class="comment">#设置socket的接口为非阻塞</span></span><br><span class="line">sel.register(server_fileobj,selectors.EVENT_READ,accept) <span class="comment">#相当于网select的读列表里append了一个文件句柄server_fileobj,并且绑定了一个回调函数accept</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    events=sel.select() <span class="comment">#检测所有的fileobj，是否有完成wait data的</span></span><br><span class="line">    <span class="keyword">for</span> sel_obj,mask <span class="keyword">in</span> events:</span><br><span class="line">        callback=sel_obj.data <span class="comment">#callback=accpet</span></span><br><span class="line">        callback(sel_obj.fileobj,mask) <span class="comment">#accpet(server_fileobj,1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">c=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8088</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=c.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>作业:基于selectors模块实现并发的FTP</p>
<p><a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1qYPrHCg">参考:链接: https://pan.baidu.com/s/1qYPrHCg 密码: 9is4</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>40-数据库（二）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/40_%E5%BA%93%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="一-系统数据库"><a href="#一-系统数据库" class="headerlink" title="一 系统数据库"></a>一 系统数据库</h3><p>information_schema： 虚拟库，不占用磁盘空间，存储的是数据库启动后的一些参数，如用户表信息、列信息、权限信息、字符信息等 performance_schema： MySQL 5.5开始新增一个数据库：主要用于收集数据库服务器性能参数，记录处理查询请求时发生的各种事件、锁等现象 mysql： 授权库，主要存储系统用户的权限信息 test： MySQL数据库系统自动创建的测试数据库</p>
<h3 id="二-创建数据库"><a href="#二-创建数据库" class="headerlink" title="二 创建数据库"></a>二 创建数据库</h3><p>1 语法(help create database)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名 charset utf8;</span><br></pre></td></tr></table></figure>

<p>2 数据库命名规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以由字母、数字、下划线、＠、＃、＄</span><br><span class="line">区分大小写</span><br><span class="line">唯一性</span><br><span class="line">不能使用关键字如 create select</span><br><span class="line">不能单独使用数字</span><br><span class="line">最长<span class="number">128</span>位</span><br></pre></td></tr></table></figure>

<h3 id="三-数据库相关操作"><a href="#三-数据库相关操作" class="headerlink" title="三 数据库相关操作"></a>三 数据库相关操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 查看数据库</span><br><span class="line">show databases;</span><br><span class="line">show create database db1;</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 选择数据库</span><br><span class="line">USE 数据库名</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 删除数据库</span><br><span class="line">DROP DATABASE 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 修改数据库</span><br><span class="line">alter database db1 charset utf8;</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=163">
  </a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>41-数据库（三）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/41_%E8%A1%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="一-存储引擎介绍"><a href="#一-存储引擎介绍" class="headerlink" title="一 存储引擎介绍"></a>一 存储引擎介绍</h2><p>存储引擎即表类型，mysql根据不同的表类型会有不同的处理机制</p>
<p><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/7213670.html">详见：http://www.cnblogs.com/linhaifeng/articles/7213670.html</a></p>
<h2 id="二-表介绍"><a href="#二-表介绍" class="headerlink" title="二 表介绍"></a>二 表介绍</h2><p>表相当于文件，表中的一条记录就相当于文件的一行内容，不同的是，表中的一条记录有对应的标题，称为表的字段</p>
<p><img src="https://pic4.zhimg.com/80/v2-ca13535894233b7bc6a55484b9965ea3_720w.jpg" alt="img"></p>
<p>id，name，qq，age称为字段，其余的，一行内容称为一条记录</p>
<h2 id="三-创建表"><a href="#三-创建表" class="headerlink" title="三 创建表"></a>三 创建表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：</span></span><br><span class="line">create table 表名(</span><br><span class="line">字段名<span class="number">1</span> 类型[(宽度) 约束条件],</span><br><span class="line">字段名<span class="number">2</span> 类型[(宽度) 约束条件],</span><br><span class="line">字段名<span class="number">3</span> 类型[(宽度) 约束条件]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：</span></span><br><span class="line"><span class="number">1.</span> 在同一张表中，字段名是不能相同</span><br><span class="line"><span class="number">2.</span> 宽度和约束条件可选</span><br><span class="line"><span class="number">3.</span> 字段名和类型是必须的</span><br><span class="line">MariaDB [(none)]&gt; create database db1 charset utf8;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use db1;</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; create table t1(  </span><br><span class="line">    -&gt; <span class="built_in">id</span> <span class="built_in">int</span>, </span><br><span class="line">    -&gt; name varchar(<span class="number">50</span>),</span><br><span class="line">    -&gt; sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">    -&gt; age <span class="built_in">int</span>(<span class="number">3</span>)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; show tables; <span class="comment">#查看db1库下所有表名</span></span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; desc t1;</span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>                  | Null | Key | Default | Extra |</span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>)               | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(<span class="number">50</span>)           | YES  |     | NULL    |       |</span><br><span class="line">| sex   | enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) | YES  |     | NULL    |       |</span><br><span class="line">| age   | <span class="built_in">int</span>(<span class="number">3</span>)                | YES  |     | NULL    |       |</span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select <span class="built_in">id</span>,name,sex,age <span class="keyword">from</span> t1;</span><br><span class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t1;</span><br><span class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select <span class="built_in">id</span>,name <span class="keyword">from</span> t1;</span><br><span class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>往表中插入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; insert into t1 values</span><br><span class="line">    -&gt; (<span class="number">1</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="number">2</span>,<span class="string">&#x27;alex&#x27;</span>,<span class="number">81</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">    -&gt; ;</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t1;</span><br><span class="line">+------+------+------+--------+</span><br><span class="line">| <span class="built_in">id</span>   | name | age  | sex    |</span><br><span class="line">+------+------+------+--------+</span><br><span class="line">|    <span class="number">1</span> | egon |   <span class="number">18</span> | male   |</span><br><span class="line">|    <span class="number">2</span> | alex |   <span class="number">81</span> | female |</span><br><span class="line">+------+------+------+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; insert into t1(<span class="built_in">id</span>) values </span><br><span class="line">    -&gt; (<span class="number">3</span>),</span><br><span class="line">    -&gt; (<span class="number">4</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t1;</span><br><span class="line">+------+------+------+--------+</span><br><span class="line">| <span class="built_in">id</span>   | name | age  | sex    |</span><br><span class="line">+------+------+------+--------+</span><br><span class="line">|    <span class="number">1</span> | egon |   <span class="number">18</span> | male   |</span><br><span class="line">|    <span class="number">2</span> | alex |   <span class="number">81</span> | female |</span><br><span class="line">|    <span class="number">3</span> | NULL | NULL | NULL   |</span><br><span class="line">|    <span class="number">4</span> | NULL | NULL | NULL   |</span><br><span class="line">+------+------+------+--------+</span><br></pre></td></tr></table></figure>

<p>注意注意注意：表中的最后一个字段不要加逗号</p>
<h2 id="四-查看表结构"><a href="#四-查看表结构" class="headerlink" title="四 查看表结构"></a>四 查看表结构</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; describe t1; <span class="comment">#查看表结构，可简写为desc 表名</span></span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>                  | Null | Key | Default | Extra |</span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>)               | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(<span class="number">50</span>)           | YES  |     | NULL    |       |</span><br><span class="line">| sex   | enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) | YES  |     | NULL    |       |</span><br><span class="line">| age   | <span class="built_in">int</span>(<span class="number">3</span>)                | YES  |     | NULL    |       |</span><br><span class="line">+-------+-----------------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; show create table t1\G; <span class="comment">#查看表详细结构，可加\G</span></span><br></pre></td></tr></table></figure>

<h2 id="五-数据类型"><a href="#五-数据类型" class="headerlink" title="五 数据类型"></a>五 数据类型</h2><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><p>存储引擎决定了表的类型，而表内存放的数据也要有不同的类型，每种数据类型都有自己的宽度，但宽度是可选的</p>
<p>详细参考：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http://www.runoob.com/mysql/mysql-data-types.html">http://www.runoob.com/mysql/mysql-data-types.html</a></li>
<li><a href="https://link.zhihu.com/?target=http://dev.mysql.com/doc/refman/5.7/en/data-type-overview.html">http://dev.mysql.com/doc/refman/5.7/en/data-type-overview.html</a></li>
</ul>
<p>mysql常用数据类型概览</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 数字：</span></span><br><span class="line">    整型：tinyinit  <span class="built_in">int</span>  bigint</span><br><span class="line">    小数：</span><br><span class="line">        <span class="built_in">float</span> ：在位数比较短的情况下不精准</span><br><span class="line">        double ：在位数比较长的情况下不精准</span><br><span class="line">            <span class="number">0.000001230123123123</span></span><br><span class="line">            存成：<span class="number">0.000001230000</span></span><br><span class="line"></span><br><span class="line">        decimal：（如果用小数，则用推荐使用decimal）</span><br><span class="line">            精准</span><br><span class="line">            内部原理是以字符串形式去存</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 字符串：</span></span><br><span class="line">    char（<span class="number">10</span>）：简单粗暴，浪费空间，存取速度快</span><br><span class="line">        root存成root000000</span><br><span class="line">    varchar：精准，节省空间，存取速度慢</span><br><span class="line"></span><br><span class="line">    sql优化：创建表时，定长的类型往前放，变长的往后放</span><br><span class="line">                    比如性别           比如地址或描述信息</span><br><span class="line"></span><br><span class="line">    &gt;<span class="number">255</span>个字符，超了就把文件路径存放到数据库中。</span><br><span class="line">            比如图片，视频等找一个文件服务器，数据库中只存路径或url。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 时间类型：</span></span><br><span class="line">    最常用：datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 枚举类型与集合类型</span></span><br></pre></td></tr></table></figure>

<h3 id="二-数值类型"><a href="#二-数值类型" class="headerlink" title="二 数值类型"></a>二 数值类型</h3><p><strong>1、整数类型</strong></p>
<p>整数类型：TINYINT SMALLINT MEDIUMINT INT BIGINT</p>
<p>作用：存储年龄，等级，id，各种号码等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">========================================</span><br><span class="line">        tinyint[(m)] [unsigned] [zerofill]</span><br><span class="line"></span><br><span class="line">            小整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">            有符号：</span><br><span class="line">                -<span class="number">128</span> ～ <span class="number">127</span></span><br><span class="line">            无符号：</span><br><span class="line">                <span class="number">0</span> ～ <span class="number">255</span></span><br><span class="line"></span><br><span class="line">            PS： MySQL中无布尔值，使用tinyint(<span class="number">1</span>)构造。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========================================</span><br><span class="line">        <span class="built_in">int</span>[(m)][unsigned][zerofill]</span><br><span class="line"></span><br><span class="line">            整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">            有符号：</span><br><span class="line">                    -<span class="number">2147483648</span> ～ <span class="number">2147483647</span></span><br><span class="line">            无符号：</span><br><span class="line">                    <span class="number">0</span> ～ <span class="number">4294967295</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========================================</span><br><span class="line">        bigint[(m)][unsigned][zerofill]</span><br><span class="line">            大整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">            有符号：</span><br><span class="line">                    -<span class="number">9223372036854775808</span> ～ <span class="number">9223372036854775807</span></span><br><span class="line">            无符号：</span><br><span class="line">                    <span class="number">0</span>  ～  <span class="number">18446744073709551615</span></span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">=========有符号和无符号tinyint==========</span><br><span class="line"><span class="comment">#tinyint默认为有符号</span></span><br><span class="line">MariaDB [db1]&gt; create table t1(x tinyint); <span class="comment">#默认为有符号，即数字前有正负号</span></span><br><span class="line">MariaDB [db1]&gt; desc t1;</span><br><span class="line">MariaDB [db1]&gt; insert into t1 values</span><br><span class="line">    -&gt; (-<span class="number">129</span>),</span><br><span class="line">    -&gt; (-<span class="number">128</span>),</span><br><span class="line">    -&gt; (<span class="number">127</span>),</span><br><span class="line">    -&gt; (<span class="number">128</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t1;</span><br><span class="line">+------+</span><br><span class="line">| x    |</span><br><span class="line">+------+</span><br><span class="line">| -<span class="number">128</span> | <span class="comment">#-129存成了-128</span></span><br><span class="line">| -<span class="number">128</span> | <span class="comment">#有符号，最小值为-128</span></span><br><span class="line">|  <span class="number">127</span> | <span class="comment">#有符号，最大值127</span></span><br><span class="line">|  <span class="number">127</span> | <span class="comment">#128存成了127</span></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置无符号tinyint</span></span><br><span class="line">MariaDB [db1]&gt; create table t2(x tinyint unsigned);</span><br><span class="line">MariaDB [db1]&gt; insert into t2 values</span><br><span class="line">    -&gt; (-<span class="number">1</span>),</span><br><span class="line">    -&gt; (<span class="number">0</span>),</span><br><span class="line">    -&gt; (<span class="number">255</span>),</span><br><span class="line">    -&gt; (<span class="number">256</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t2;</span><br><span class="line">+------+</span><br><span class="line">| x    |</span><br><span class="line">+------+</span><br><span class="line">|    <span class="number">0</span> | -<span class="number">1</span>存成了<span class="number">0</span></span><br><span class="line">|    <span class="number">0</span> | <span class="comment">#无符号，最小值为0</span></span><br><span class="line">|  <span class="number">255</span> | <span class="comment">#无符号，最大值为255</span></span><br><span class="line">|  <span class="number">255</span> | <span class="comment">#256存成了255</span></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============有符号和无符号<span class="built_in">int</span>=============</span><br><span class="line"><span class="comment">#int默认为有符号</span></span><br><span class="line">MariaDB [db1]&gt; create table t3(x <span class="built_in">int</span>); <span class="comment">#默认为有符号整数</span></span><br><span class="line">MariaDB [db1]&gt; insert into t3 values</span><br><span class="line">    -&gt; (-<span class="number">2147483649</span>),</span><br><span class="line">    -&gt; (-<span class="number">2147483648</span>),</span><br><span class="line">    -&gt; (<span class="number">2147483647</span>),</span><br><span class="line">    -&gt; (<span class="number">2147483648</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t3;</span><br><span class="line">+-------------+</span><br><span class="line">| x           |</span><br><span class="line">+-------------+</span><br><span class="line">| -<span class="number">2147483648</span> | <span class="comment">#-2147483649存成了-2147483648</span></span><br><span class="line">| -<span class="number">2147483648</span> | <span class="comment">#有符号，最小值为-2147483648</span></span><br><span class="line">|  <span class="number">2147483647</span> | <span class="comment">#有符号，最大值为2147483647</span></span><br><span class="line">|  <span class="number">2147483647</span> | <span class="comment">#2147483648存成了2147483647</span></span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置无符号int</span></span><br><span class="line">MariaDB [db1]&gt; create table t4(x <span class="built_in">int</span> unsigned);</span><br><span class="line">MariaDB [db1]&gt; insert into t4 values</span><br><span class="line">    -&gt; (-<span class="number">1</span>),</span><br><span class="line">    -&gt; (<span class="number">0</span>),</span><br><span class="line">    -&gt; (<span class="number">4294967295</span>),</span><br><span class="line">    -&gt; (<span class="number">4294967296</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t4;</span><br><span class="line">+------------+</span><br><span class="line">| x          |</span><br><span class="line">+------------+</span><br><span class="line">|          <span class="number">0</span> | <span class="comment">#-1存成了0</span></span><br><span class="line">|          <span class="number">0</span> | <span class="comment">#无符号，最小值为0</span></span><br><span class="line">| <span class="number">4294967295</span> | <span class="comment">#无符号，最大值为4294967295</span></span><br><span class="line">| <span class="number">4294967295</span> | <span class="comment">#4294967296存成了4294967295</span></span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==============有符号和无符号bigint=============</span><br><span class="line">MariaDB [db1]&gt; create table t6(x bigint);</span><br><span class="line">MariaDB [db1]&gt; insert into t5 values  </span><br><span class="line">    -&gt; (-<span class="number">9223372036854775809</span>),</span><br><span class="line">    -&gt; (-<span class="number">9223372036854775808</span>),</span><br><span class="line">    -&gt; (<span class="number">9223372036854775807</span>),</span><br><span class="line">    -&gt; (<span class="number">9223372036854775808</span>);</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t5;</span><br><span class="line">+----------------------+</span><br><span class="line">| x                    |</span><br><span class="line">+----------------------+</span><br><span class="line">| -<span class="number">9223372036854775808</span> |</span><br><span class="line">| -<span class="number">9223372036854775808</span> |</span><br><span class="line">|  <span class="number">9223372036854775807</span> |</span><br><span class="line">|  <span class="number">9223372036854775807</span> |</span><br><span class="line">+----------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; create table t6(x bigint unsigned);</span><br><span class="line">MariaDB [db1]&gt; insert into t6 values  </span><br><span class="line">    -&gt; (-<span class="number">1</span>),</span><br><span class="line">    -&gt; (<span class="number">0</span>),</span><br><span class="line">    -&gt; (<span class="number">18446744073709551615</span>),</span><br><span class="line">    -&gt; (<span class="number">18446744073709551616</span>);</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t6;</span><br><span class="line">+----------------------+</span><br><span class="line">| x                    |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    <span class="number">0</span> |</span><br><span class="line">|                    <span class="number">0</span> |</span><br><span class="line">| <span class="number">18446744073709551615</span> |</span><br><span class="line">| <span class="number">18446744073709551615</span> |</span><br><span class="line">+----------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======用zerofill测试整数类型的显示宽度=============</span><br><span class="line">MariaDB [db1]&gt; create table t7(x <span class="built_in">int</span>(<span class="number">3</span>) zerofill);</span><br><span class="line">MariaDB [db1]&gt; insert into t7 values</span><br><span class="line">    -&gt; (<span class="number">1</span>),</span><br><span class="line">    -&gt; (<span class="number">11</span>),</span><br><span class="line">    -&gt; (<span class="number">111</span>),</span><br><span class="line">    -&gt; (<span class="number">1111</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t7;</span><br><span class="line">+------+</span><br><span class="line">| x    |</span><br><span class="line">+------+</span><br><span class="line">|  001 |</span><br><span class="line">|  011 |</span><br><span class="line">|  <span class="number">111</span> |</span><br><span class="line">| <span class="number">1111</span> | <span class="comment">#超过宽度限制仍然可以存</span></span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<p>注意：为该类型指定宽度时，仅仅只是指定查询结果的显示宽度，与存储范围无关，存储范围如下</p>
<p>其实我们完全没必要为整数类型指定显示宽度，使用默认的就可以了</p>
<p>默认的显示宽度，都是在最大值的基础上加1</p>
<p><img src="https://pic3.zhimg.com/80/v2-0d56854dc192d867ef52fddece40f7da_720w.jpg" alt="img"></p>
<p>int的存储宽度是4个Bytes，即32个bit，即2**32</p>
<p>无符号最大值为：4294967296-1</p>
<p>有符号最大值：2147483648-1</p>
<p>有符号和无符号的最大数字需要的显示宽度均为10，而针对有符号的最小值则需要11位才能显示完全，所以int类型默认的显示宽度为11是非常合理的</p>
<p>最后：整形类型，其实没有必要指定显示宽度，使用默认的就ok</p>
<p><strong>2、浮点型</strong></p>
<p>定点数类型 DEC等同于DECIMAL　　</p>
<p>浮点类型：FLOAT DOUBLE</p>
<p>作用：存储薪资、身高、体重、体质参数等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">======================================</span><br><span class="line"><span class="comment">#FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]</span></span><br><span class="line"></span><br><span class="line">定义：</span><br><span class="line">        单精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数。m最大值为<span class="number">255</span>，d最大值为<span class="number">30</span></span><br><span class="line"></span><br><span class="line">有符号：</span><br><span class="line">           -<span class="number">3.402823466E+38</span> to -<span class="number">1.175494351E-38</span>,</span><br><span class="line">           <span class="number">1.175494351E-38</span> to <span class="number">3.402823466E+38</span></span><br><span class="line">无符号：</span><br><span class="line">           <span class="number">1.175494351E-38</span> to <span class="number">3.402823466E+38</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">精确度： </span><br><span class="line">           **** 随着小数的增多，精度变得不准确 ****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"><span class="comment">#DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]</span></span><br><span class="line"></span><br><span class="line">定义：</span><br><span class="line">           双精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数。m最大值为<span class="number">255</span>，d最大值为<span class="number">30</span></span><br><span class="line"></span><br><span class="line">有符号：</span><br><span class="line">           -<span class="number">1.7976931348623157E+308</span> to -<span class="number">2.2250738585072014E-308</span></span><br><span class="line">           <span class="number">2.2250738585072014E-308</span> to <span class="number">1.7976931348623157E+308</span></span><br><span class="line"></span><br><span class="line">无符号：</span><br><span class="line">           <span class="number">2.2250738585072014E-308</span> to <span class="number">1.7976931348623157E+308</span></span><br><span class="line"></span><br><span class="line">精确度：</span><br><span class="line">           ****随着小数的增多，精度比<span class="built_in">float</span>要高，但也会变得不准确 ****</span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line">decimal[(m[,d])] [unsigned] [zerofill]</span><br><span class="line"></span><br><span class="line">定义：</span><br><span class="line">          准确的小数值，m是数字总个数（负号不算），d是小数点后个数。 m最大值为<span class="number">65</span>，d最大值为<span class="number">30</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">精确度：</span><br><span class="line">           **** 随着小数的增多，精度始终准确 ****</span><br><span class="line">           对于精确数值计算时需要用此类型</span><br><span class="line">           decaimal能够存储精确值的原因在于其内部按照字符串存储。</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(x <span class="built_in">float</span>(<span class="number">256</span>,<span class="number">31</span>));</span><br><span class="line">ERROR <span class="number">1425</span> (<span class="number">42000</span>): Too big scale <span class="number">31</span> specified <span class="keyword">for</span> column <span class="string">&#x27;x&#x27;</span>. Maximum <span class="keyword">is</span> <span class="number">30.</span></span><br><span class="line">mysql&gt; create table t1(x <span class="built_in">float</span>(<span class="number">256</span>,<span class="number">30</span>));</span><br><span class="line">ERROR <span class="number">1439</span> (<span class="number">42000</span>): Display width out of <span class="built_in">range</span> <span class="keyword">for</span> column <span class="string">&#x27;x&#x27;</span> (<span class="built_in">max</span> = <span class="number">255</span>)</span><br><span class="line">mysql&gt; create table t1(x <span class="built_in">float</span>(<span class="number">255</span>,<span class="number">30</span>)); <span class="comment">#建表成功</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t2(x double(<span class="number">255</span>,<span class="number">30</span>)); <span class="comment">#建表成功</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t3(x decimal(<span class="number">66</span>,<span class="number">31</span>));</span><br><span class="line">ERROR <span class="number">1425</span> (<span class="number">42000</span>): Too big scale <span class="number">31</span> specified <span class="keyword">for</span> column <span class="string">&#x27;x&#x27;</span>. Maximum <span class="keyword">is</span> <span class="number">30.</span></span><br><span class="line">mysql&gt; create table t3(x decimal(<span class="number">66</span>,<span class="number">30</span>));</span><br><span class="line">ERROR <span class="number">1426</span> (<span class="number">42000</span>): Too-big precision <span class="number">66</span> specified <span class="keyword">for</span> <span class="string">&#x27;x&#x27;</span>. Maximum <span class="keyword">is</span> <span class="number">65.</span></span><br><span class="line">mysql&gt; create table t3(x decimal(<span class="number">65</span>,<span class="number">30</span>)); <span class="comment">#建表成功</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_db1 |</span><br><span class="line">+---------------+</span><br><span class="line">| t1            |</span><br><span class="line">| t2            |</span><br><span class="line">| t3            |</span><br><span class="line">+---------------+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(<span class="number">1.1111111111111111111111111111111</span>); <span class="comment">#小数点后31个1</span></span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values(<span class="number">1.1111111111111111111111111111111</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t3 values(<span class="number">1.1111111111111111111111111111111</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t1; <span class="comment">#随着小数的增多，精度开始不准确</span></span><br><span class="line">+----------------------------------+</span><br><span class="line">| x                                |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| <span class="number">1.111111164093017600000000000000</span> |</span><br><span class="line">+----------------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t2; <span class="comment">#精度比float要准确点，但随着小数的增多，同样变得不准确</span></span><br><span class="line">+----------------------------------+</span><br><span class="line">| x                                |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| <span class="number">1.111111111111111200000000000000</span> |</span><br><span class="line">+----------------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t3; <span class="comment">#精度始终准确,d为30，于是只留了30位小数</span></span><br><span class="line">+----------------------------------+</span><br><span class="line">| x                                |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| <span class="number">1.111111111111111111111111111111</span> |</span><br><span class="line">+----------------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>3、位类型（了解）</strong></p>
<p>BIT(M)可以用来存放多位二进制数，M范围从1~64，如果不写默认为1位。 注意：对于位字段需要使用函数读取 bin()显示为二进制 hex()显示为十六进制</p>
<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; create table t9(<span class="built_in">id</span> bit);</span><br><span class="line">MariaDB [db1]&gt; desc t9; <span class="comment">#bit默认宽度为1</span></span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>   | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | bit(<span class="number">1</span>) | YES  |     | NULL    |       |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; insert into t9 values(<span class="number">8</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t9; <span class="comment">#直接查看是无法显示二进制位的</span></span><br><span class="line">+------+</span><br><span class="line">| <span class="built_in">id</span>   |</span><br><span class="line">+------+</span><br><span class="line">|     |</span><br><span class="line">+------+</span><br><span class="line">MariaDB [db1]&gt; select <span class="built_in">bin</span>(<span class="built_in">id</span>),<span class="built_in">hex</span>(<span class="built_in">id</span>) <span class="keyword">from</span> t9; <span class="comment">#需要转换才能看到</span></span><br><span class="line">+---------+---------+</span><br><span class="line">| <span class="built_in">bin</span>(<span class="built_in">id</span>) | <span class="built_in">hex</span>(<span class="built_in">id</span>) |</span><br><span class="line">+---------+---------+</span><br><span class="line">| <span class="number">1</span>       | <span class="number">1</span>       |</span><br><span class="line">+---------+---------+</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; alter table t9 modify <span class="built_in">id</span> bit(<span class="number">5</span>);</span><br><span class="line">MariaDB [db1]&gt; insert into t9 values(<span class="number">8</span>);</span><br><span class="line">MariaDB [db1]&gt; select <span class="built_in">bin</span>(<span class="built_in">id</span>),<span class="built_in">hex</span>(<span class="built_in">id</span>) <span class="keyword">from</span> t9;</span><br><span class="line">+---------+---------+</span><br><span class="line">| <span class="built_in">bin</span>(<span class="built_in">id</span>) | <span class="built_in">hex</span>(<span class="built_in">id</span>) |</span><br><span class="line">+---------+---------+</span><br><span class="line">| <span class="number">1</span>       | <span class="number">1</span>       |</span><br><span class="line">| <span class="number">1000</span>    | <span class="number">8</span>       |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure>

<h3 id="三-日期类型"><a href="#三-日期类型" class="headerlink" title="三 日期类型"></a>三 日期类型</h3><p>DATE TIME DATETIME TIMESTAMP YEAR</p>
<p>作用：存储用户注册时间，文章发布时间，员工入职时间，出生时间，过期时间等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YEAR</span><br><span class="line">            YYYY（<span class="number">1901</span>/<span class="number">2155</span>）</span><br><span class="line"></span><br><span class="line">        DATE</span><br><span class="line">            YYYY-MM-DD（<span class="number">1000</span>-01-01/<span class="number">9999</span>-<span class="number">12</span>-<span class="number">31</span>）</span><br><span class="line"></span><br><span class="line">        TIME</span><br><span class="line">            HH:MM:SS（<span class="string">&#x27;-838:59:59&#x27;</span>/<span class="string">&#x27;838:59:59&#x27;</span>）</span><br><span class="line"></span><br><span class="line">        DATETIME</span><br><span class="line"></span><br><span class="line">            YYYY-MM-DD HH:MM:SS（<span class="number">1000</span>-01-01 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>/<span class="number">9999</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span>    Y）</span><br><span class="line"></span><br><span class="line">        TIMESTAMP</span><br><span class="line"></span><br><span class="line">            YYYYMMDD HHMMSS（<span class="number">1970</span>-01-01 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>/<span class="number">2037</span> 年某时）</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">============year===========</span><br><span class="line">MariaDB [db1]&gt; create table t10(born_year year); <span class="comment">#无论year指定何种宽度，最后都默认是year(4)</span></span><br><span class="line">MariaDB [db1]&gt; insert into t10 values  </span><br><span class="line">    -&gt; (<span class="number">1900</span>),</span><br><span class="line">    -&gt; (<span class="number">1901</span>),</span><br><span class="line">    -&gt; (<span class="number">2155</span>),</span><br><span class="line">    -&gt; (<span class="number">2156</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t10;</span><br><span class="line">+-----------+</span><br><span class="line">| born_year |</span><br><span class="line">+-----------+</span><br><span class="line">|      <span class="number">0000</span> |</span><br><span class="line">|      <span class="number">1901</span> |</span><br><span class="line">|      <span class="number">2155</span> |</span><br><span class="line">|      <span class="number">0000</span> |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============date,time,datetime===========</span><br><span class="line">MariaDB [db1]&gt; create table t11(d date,t time,dt datetime);</span><br><span class="line">MariaDB [db1]&gt; desc t11;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| d     | date     | YES  |     | NULL    |       |</span><br><span class="line">| t     | time     | YES  |     | NULL    |       |</span><br><span class="line">| dt    | datetime | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; insert into t11 values(now(),now(),now());</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t11;</span><br><span class="line">+------------+----------+---------------------+</span><br><span class="line">| d          | t        | dt                  |</span><br><span class="line">+------------+----------+---------------------+</span><br><span class="line">| <span class="number">2017</span>-07-<span class="number">25</span> | <span class="number">16</span>:<span class="number">26</span>:<span class="number">54</span> | <span class="number">2017</span>-07-<span class="number">25</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">54</span> |</span><br><span class="line">+------------+----------+---------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============timestamp===========</span><br><span class="line">MariaDB [db1]&gt; create table t12(time timestamp);</span><br><span class="line">MariaDB [db1]&gt; insert into t12 values();</span><br><span class="line">MariaDB [db1]&gt; insert into t12 values(null);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t12;</span><br><span class="line">+---------------------+</span><br><span class="line">| time                |</span><br><span class="line">+---------------------+</span><br><span class="line">| <span class="number">2017</span>-07-<span class="number">25</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">17</span> |</span><br><span class="line">| <span class="number">2017</span>-07-<span class="number">25</span> <span class="number">16</span>:<span class="number">30</span>:01 |</span><br><span class="line">+---------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============注意啦，注意啦，注意啦===========</span><br><span class="line"><span class="number">1.</span> 单独插入时间时，需要以字符串的形式，按照对应的格式插入</span><br><span class="line"><span class="number">2.</span> 插入年份时，尽量使用<span class="number">4</span>位值</span><br><span class="line"><span class="number">3.</span> 插入两位年份时，&lt;=<span class="number">69</span>，以<span class="number">20</span>开头，比如<span class="number">50</span>,  结果<span class="number">2050</span>      </span><br><span class="line">                &gt;=<span class="number">70</span>，以<span class="number">19</span>开头，比如<span class="number">71</span>，结果<span class="number">1971</span></span><br><span class="line">MariaDB [db1]&gt; create table t12(y year);</span><br><span class="line">MariaDB [db1]&gt; insert into t12 values  </span><br><span class="line">    -&gt; (<span class="number">50</span>),</span><br><span class="line">    -&gt; (<span class="number">71</span>);</span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> t12;</span><br><span class="line">+------+</span><br><span class="line">| y    |</span><br><span class="line">+------+</span><br><span class="line">| <span class="number">2050</span> |</span><br><span class="line">| <span class="number">1971</span> |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============综合练习===========</span><br><span class="line">MariaDB [db1]&gt; create table student(</span><br><span class="line">    -&gt; <span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">    -&gt; name varchar(<span class="number">20</span>),</span><br><span class="line">    -&gt; born_year year,</span><br><span class="line">    -&gt; birth date,</span><br><span class="line">    -&gt; class_time time,</span><br><span class="line">    -&gt; reg_time datetime);</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; insert into student values</span><br><span class="line">    -&gt; (<span class="number">1</span>,<span class="string">&#x27;alex&#x27;</span>,<span class="string">&quot;1995&quot;</span>,<span class="string">&quot;1995-11-11&quot;</span>,<span class="string">&quot;11:11:11&quot;</span>,<span class="string">&quot;2017-11-11 11:11:11&quot;</span>),</span><br><span class="line">    -&gt; (<span class="number">2</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="string">&quot;1997&quot;</span>,<span class="string">&quot;1997-12-12&quot;</span>,<span class="string">&quot;12:12:12&quot;</span>,<span class="string">&quot;2017-12-12 12:12:12&quot;</span>),</span><br><span class="line">    -&gt; (<span class="number">3</span>,<span class="string">&#x27;wsb&#x27;</span>,<span class="string">&quot;1998&quot;</span>,<span class="string">&quot;1998-01-01&quot;</span>,<span class="string">&quot;13:13:13&quot;</span>,<span class="string">&quot;2017-01-01 13:13:13&quot;</span>);</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+------+------+-----------+------------+------------+---------------------+</span><br><span class="line">| <span class="built_in">id</span>   | name | born_year | birth      | class_time | reg_time            |</span><br><span class="line">+------+------+-----------+------------+------------+---------------------+</span><br><span class="line">|    <span class="number">1</span> | alex |      <span class="number">1995</span> | <span class="number">1995</span>-<span class="number">11</span>-<span class="number">11</span> | <span class="number">11</span>:<span class="number">11</span>:<span class="number">11</span>   | <span class="number">2017</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">11</span> |</span><br><span class="line">|    <span class="number">2</span> | egon |      <span class="number">1997</span> | <span class="number">1997</span>-<span class="number">12</span>-<span class="number">12</span> | <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span>   | <span class="number">2017</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span> |</span><br><span class="line">|    <span class="number">3</span> | wsb  |      <span class="number">1998</span> | <span class="number">1998</span>-01-01 | <span class="number">13</span>:<span class="number">13</span>:<span class="number">13</span>   | <span class="number">2017</span>-01-01 <span class="number">13</span>:<span class="number">13</span>:<span class="number">13</span> |</span><br><span class="line">+------+------+-----------+------------+------------+---------------------+</span><br></pre></td></tr></table></figure>

<p>datetime与timestamp的区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在实际应用的很多场景中，MySQL的这两种日期类型都能够满足我们的需要，存储精度都为秒，但在某些情况下，会展现出他们各自的优劣。下面就来总结一下两种日期类型的区别。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DATETIME的日期范围是<span class="number">1001</span>——<span class="number">9999</span>年，TIMESTAMP的时间范围是<span class="number">1970</span>——<span class="number">2038</span>年。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>DATETIME存储时间与时区无关，TIMESTAMP存储时间与时区有关，显示的值也依赖于时区。在mysql服务器，操作系统以及客户端连接都有时区的设置。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>DATETIME使用<span class="number">8</span>字节的存储空间，TIMESTAMP的存储空间为<span class="number">4</span>字节。因此，TIMESTAMP比DATETIME的空间利用率更高。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>DATETIME的默认值为null；TIMESTAMP的字段默认不为空（<span class="keyword">not</span> null）,默认值为当前时间（CURRENT_TIMESTAMP），如果不做特殊处理，并且update语句中没有指定该列的更新值，则默认更新为当前时间。</span><br><span class="line">mysql&gt; create table t1(x datetime <span class="keyword">not</span> null default now()); <span class="comment"># 需要指定传入空值时默认取当前时间</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t2(x timestamp); <span class="comment"># 无需任何设置，在传空值的情况下自动传入当前时间</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values();</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values();</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t1;</span><br><span class="line">+---------------------+</span><br><span class="line">| x                   |</span><br><span class="line">+---------------------+</span><br><span class="line">| <span class="number">2018</span>-07-07 01:<span class="number">26</span>:<span class="number">14</span> |</span><br><span class="line">+---------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t2;</span><br><span class="line">+---------------------+</span><br><span class="line">| x                   |</span><br><span class="line">+---------------------+</span><br><span class="line">| <span class="number">2018</span>-07-07 01:<span class="number">26</span>:<span class="number">17</span> |</span><br><span class="line">+---------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="四-字符串类型"><a href="#四-字符串类型" class="headerlink" title="四 字符串类型"></a>四 字符串类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网：https://dev.mysql.com/doc/refman/5.7/en/char.html</span></span><br><span class="line"><span class="comment">#注意：char和varchar括号内的参数指的都是字符的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#char类型：定长，简单粗暴，浪费空间，存取速度快</span></span><br><span class="line">    字符长度范围：<span class="number">0</span>-<span class="number">255</span>（一个中文是一个字符，是utf8编码的<span class="number">3</span>个字节）</span><br><span class="line">    存储：</span><br><span class="line">        存储char类型的值时，会往右填充空格来满足长度</span><br><span class="line">        例如：指定长度为<span class="number">10</span>，存&gt;<span class="number">10</span>个字符则报错，存&lt;<span class="number">10</span>个字符则用空格填充直到凑够<span class="number">10</span>个字符存储</span><br><span class="line"></span><br><span class="line">    检索：</span><br><span class="line">        在检索或者说查询时，查出的结果会自动删除尾部的空格，除非我们打开pad_char_to_full_length SQL模式（SET sql_mode = <span class="string">&#x27;PAD_CHAR_TO_FULL_LENGTH&#x27;</span>;）</span><br><span class="line"></span><br><span class="line"><span class="comment">#varchar类型：变长，精准，节省空间，存取速度慢</span></span><br><span class="line">    字符长度范围：<span class="number">0</span>-<span class="number">65535</span>（如果大于<span class="number">21845</span>会提示用其他类型 。mysql行最大限制为<span class="number">65535</span>字节，字符编码为utf-<span class="number">8</span>：https://dev.mysql.com/doc/refman/<span class="number">5.7</span>/en/column-count-limit.html）</span><br><span class="line">    存储：</span><br><span class="line">        varchar类型存储数据的真实内容，不会用空格填充，如果<span class="string">&#x27;ab  &#x27;</span>,尾部的空格也会被存起来</span><br><span class="line">        强调：varchar类型会在真实数据前加<span class="number">1</span>-2Bytes的前缀，该前缀用来表示真实数据的<span class="built_in">bytes</span>字节数（<span class="number">1</span>-2Bytes最大表示<span class="number">65535</span>个数字，正好符合mysql对row的最大字节限制，即已经足够使用）</span><br><span class="line">        如果真实的数据&lt;255<span class="built_in">bytes</span>则需要1Bytes的前缀（1Bytes=8bit <span class="number">2</span>**<span class="number">8</span>最大表示的数字为<span class="number">255</span>）</span><br><span class="line">        如果真实的数据&gt;255<span class="built_in">bytes</span>则需要2Bytes的前缀（2Bytes=16bit <span class="number">2</span>**<span class="number">16</span>最大表示的数字为<span class="number">65535</span>）</span><br><span class="line"></span><br><span class="line">    检索：</span><br><span class="line">        尾部有空格会保存下来，在检索或者说查询时，也会正常显示包含空格在内的内容</span><br></pre></td></tr></table></figure>

<p>官网详解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官网：https://dev.mysql.com/doc/refman/5.7/en/char.html</span></span><br><span class="line">CHAR 和 VARCHAR 是最常使用的两种字符串类型。</span><br><span class="line">一般来说</span><br><span class="line">CHAR(N)用来保存固定长度的字符串，对于 CHAR 类型,N 的范围 为 <span class="number">0</span> ~ <span class="number">255</span></span><br><span class="line">VARCHAR(N)用来保存变长字符类型，对于 VARCHAR 类型,N 的范围为 <span class="number">0</span> ~ <span class="number">65</span> <span class="number">535</span></span><br><span class="line">CHAR(N)和 VARCHAR(N) 中的 N 都代表字符长度,而非字节长度。</span><br><span class="line">ps：对于 MySQL <span class="number">4.1</span> 之前的版本,如 MySQL <span class="number">3.23</span> 和 MySQL <span class="number">4.0</span>,CHAR(N)和 VARCHAR (N)中的 N 代表字节长度。</span><br><span class="line"></span><br><span class="line"><span class="comment">#CHAR类型</span></span><br><span class="line">对于 CHAR 类型的字符串,MySQL 数据库会自动对存储列的右边进行填充(Right Padded)操作,直到字符串达到指定的长度 N。而在读取该列时,MySQL 数据库会自动将 填充的字符删除。有一种情况例外,那就是显式地将 SQL_MODE 设置为 PAD_CHAR_TO_ FULL_LENGTH,例如:</span><br><span class="line">mysql&gt; CREATE TABLE t ( a CHAR(<span class="number">10</span>));</span><br><span class="line">      Query OK, <span class="number">0</span> rows affected (<span class="number">0.03</span> sec)</span><br><span class="line">mysql&gt; INSERT INTO t SELECT <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">      Query OK, <span class="number">1</span> row affected (<span class="number">0.03</span> sec)</span><br><span class="line">      Records: <span class="number">1</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql&gt; SELECT a,HEX(a),LENGTH(a) FROM t\G;</span><br><span class="line">      *************************** <span class="number">1.</span> row ***************************</span><br><span class="line">              a: abc</span><br><span class="line">         HEX(a): <span class="number">616263</span></span><br><span class="line">      LENGTH (a): <span class="number">3</span></span><br><span class="line">      <span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">      mysql&gt; SET SQL_MODE=<span class="string">&#x27;PAD_CHAR_TO_FULL_LENGTH&#x27;</span>;</span><br><span class="line">      Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; SELECT a,HEX(a),LENGTH(a) FROM t\G;</span><br><span class="line">      *************************** <span class="number">1.</span> row ***************************</span><br><span class="line">              a: abc</span><br><span class="line">         HEX(a): <span class="number">61626320202020202020</span></span><br><span class="line">      LENGTH (a): <span class="number">10</span></span><br><span class="line">      <span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">在上述这个例子中,先创建了一张表 t,a 列的类型为 CHAR(<span class="number">10</span>)。然后通过 INSERT语句插入值“abc”,因为 a 列的类型为 CHAR 型,所以会自动在后面填充空字符串,使其长 度为 <span class="number">10</span>。接下来在通过 SELECT 语句取出数据时会将 a 列右填充的空字符移除,从而得到 值“abc”。通过 LENGTH 函数看到 a 列的字符长度为 <span class="number">3</span> 而非 <span class="number">10</span>。</span><br><span class="line">接着我们将 SQL_MODE 显式地设置为 PAD_CHAR_TO_FULL_LENGTH。这时再通过 SELECT 语句进行查询时,得到的结果是“abc ”,abc 右边有 <span class="number">7</span> 个填充字符 <span class="number">0x20</span>,并通 过 HEX 函数得到了验证。这次 LENGTH 函数返回的长度为 <span class="number">10</span>。需要注意的是,LENGTH 函数返回的是字节长度,而不是字符长度。对于多字节字符集,CHAR(N)长度的列最多 可占用的字节数为该字符集单字符最大占用字节数 *N。例如,对于 utf8 下,CHAR(<span class="number">10</span>)最 多可能占用 <span class="number">30</span> 个字节。通过对多字节字符串使用 CHAR_LENGTH 函数和 LENGTH 函数, 可以发现两者的不同,示例如下:</span><br><span class="line">mysql&gt; SET NAMES gbk;</span><br><span class="line">     Query OK, <span class="number">0</span> rows affected (<span class="number">0.03</span> sec)</span><br><span class="line">mysql&gt; SELECT @a:=<span class="string">&#x27;MySQL 技术内幕 &#x27;</span>; Query OK, <span class="number">0</span> rows affected (<span class="number">0.03</span> sec)</span><br><span class="line">mysql&gt; SELECT @a,HEX(@a),LENGTH(@a),CHAR_LENGTH(@a)\G; ***************************** <span class="number">1.</span> row **************************** a: MySQL 技术内幕</span><br><span class="line">HEX(a): 4D7953514CBCBCCAF5C4DAC4BB</span><br><span class="line">LENGTH (a): <span class="number">13</span></span><br><span class="line">CHAR_LENGTH(a): <span class="number">9</span></span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">变 量 @ a 是 g b k 字 符 集 的 字 符 串 类 型 , 值 为 “ M y S Q L 技 术 内 幕 ”, 十 六 进 制 为 <span class="number">0x4D7953514CBCBCCAF5C4DAC4BB</span>,LENGTH 函数返回 <span class="number">13</span>,即该字符串占用 <span class="number">13</span> 字节, 因为 gbk 字符集中的中文字符占用两个字节,因此一共占用 <span class="number">13</span> 字节。CHAR_LENGTH 函数 返回 <span class="number">9</span>,很显然该字符长度为 <span class="number">9</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#VARCHAR类型</span></span><br><span class="line">VARCHAR 类型存储变长字段的字符类型,与 CHAR 类型不同的是,其存储时需要在 前缀长度列表加上实际存储的字符,该字符占用 <span class="number">1</span> ~ <span class="number">2</span> 字节的空间。当存储的字符串长度小 于 <span class="number">255</span> 字节时,其需要 <span class="number">1</span> 字节的空间,当大于 <span class="number">255</span> 字节时,需要 <span class="number">2</span> 字节的空间。所以,对 于单字节的 latin1 来说,CHAR(<span class="number">10</span>)和 VARCHAR(<span class="number">10</span>)最大占用的存储空间是不同的, CHAR(<span class="number">10</span>)占用 <span class="number">10</span> 个字节这是毫无疑问的,而 VARCHAR(<span class="number">10</span>)的最大占用空间数是 <span class="number">11</span> 字节,因为其需要 <span class="number">1</span> 字节来存放字符长度。</span><br><span class="line">-------------------------------------------------</span><br><span class="line">注意 对于有些多字节的字符集类型,其 CHAR 和 VARCHAR 在存储方法上是一样的,同样 需要为长度列表加上字符串的值。对于 GBK 和 UTF-<span class="number">8</span> 这些字符类型,其有些字符是以 <span class="number">1</span> 字节 存放的,有些字符是按 <span class="number">2</span> 或 <span class="number">3</span> 字节存放的,因此同样需要 <span class="number">1</span> ~ <span class="number">2</span> 字节的空间来存储字符的长 度。</span><br><span class="line">-------------------------------------------------</span><br><span class="line">虽然 CHAR 和 VARCHAR 的存储方式不太相同,但是对于两个字符串的比较,都只比 较其值,忽略 CHAR 值存在的右填充,即使将 SQL _MODE 设置为 PAD_CHAR_TO_FULL_ LENGTH 也一样,例如:</span><br><span class="line">mysql&gt; CREATE TABLE t ( a CHAR(<span class="number">10</span>), b VARCHAR(<span class="number">10</span>));</span><br><span class="line">    Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line">mysql&gt; INSERT INTO t SELECT <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line">    Records: <span class="number">1</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql&gt; SELECT a=b FROM t\G;</span><br><span class="line">    *************************** <span class="number">1.</span> row ***************************</span><br><span class="line">    a=b: <span class="number">1</span></span><br><span class="line">    <span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">    mysql&gt; SET SQL_MODE=<span class="string">&#x27;PAD_CHAR_TO_FULL_LENGTH&#x27;</span>;</span><br><span class="line">    Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; SELECT a=b FROM t\G;</span><br><span class="line">    *************************** <span class="number">1.</span> row ***************************</span><br><span class="line">    a=b: <span class="number">1</span></span><br><span class="line">    <span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>| Value | <code>CHAR(4)</code> | Storage Required | <code>VARCHAR(4)</code> | Storage Required | | ———— | ——— | —————- | ———— | —————- | | <code>&#39;&#39;</code> | <code>&#39; &#39;</code> | 4 bytes | <code>&#39;&#39;</code> | 1 byte | | <code>&#39;ab&#39;</code> | <code>&#39;ab &#39;</code> | 4 bytes | <code>&#39;ab&#39;</code> | 3 bytes | | <code>&#39;abcd&#39;</code> | <code>&#39;abcd&#39;</code> | 4 bytes | <code>&#39;abcd&#39;</code> | 5 bytes | | <code>&#39;abcdefgh&#39;</code> | <code>&#39;abcd&#39;</code> | 4 bytes | <code>&#39;abcd&#39;</code> | 5 bytes |</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试前了解两个函数</span><br><span class="line">length：查看字节数</span><br><span class="line">char_length:查看字符数</span><br></pre></td></tr></table></figure>

<ol>
<li>char填充空格来满足固定长度，但是在查询时却会很不要脸地删除尾部的空格（装作自己好像没有浪费过空间一样），然后修改sql_mode让其现出原形</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(x <span class="type">char</span>(<span class="number">5</span>),y <span class="type">varchar</span>(<span class="number">5</span>));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.26</span> sec)</span><br><span class="line"></span><br><span class="line">#<span class="type">char</span>存<span class="number">5</span>个字符，而<span class="type">varchar</span>存<span class="number">4</span>个字符</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="string">&#x27;你瞅啥 &#x27;</span>,<span class="string">&#x27;你瞅啥 &#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> sql_mode<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#在检索时<span class="type">char</span>很不要脸地将自己浪费的<span class="number">2</span>个字符给删掉了，装的好像自己没浪费过空间一样，而<span class="type">varchar</span>很老实，存了多少，就显示多少</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> x,<span class="keyword">char_length</span>(x),y,<span class="keyword">char_length</span>(y) <span class="keyword">from</span> t1; </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> x         <span class="operator">|</span> <span class="keyword">char_length</span>(x) <span class="operator">|</span> y          <span class="operator">|</span> <span class="keyword">char_length</span>(y) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> 你瞅啥    <span class="operator">|</span>              <span class="number">3</span> <span class="operator">|</span> 你瞅啥     <span class="operator">|</span>              <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------------+------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#略施小计，让<span class="type">char</span>现出原形</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;PAD_CHAR_TO_FULL_LENGTH&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#这下子<span class="type">char</span>原形毕露了......</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> x,<span class="keyword">char_length</span>(x),y,<span class="keyword">char_length</span>(y) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> x           <span class="operator">|</span> <span class="keyword">char_length</span>(x) <span class="operator">|</span> y          <span class="operator">|</span> <span class="keyword">char_length</span>(y) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> 你瞅啥      <span class="operator">|</span>              <span class="number">5</span> <span class="operator">|</span> 你瞅啥     <span class="operator">|</span>              <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------------+------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="type">char</span>类型：<span class="number">3</span>个中文字符<span class="operator">+</span><span class="number">2</span>个空格<span class="operator">=</span><span class="number">11</span>Bytes</span><br><span class="line">#<span class="type">varchar</span>类型:<span class="number">3</span>个中文字符<span class="operator">+</span><span class="number">1</span>个空格<span class="operator">=</span><span class="number">10</span>Bytes</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> x,length(x),y,length(y) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> x           <span class="operator">|</span> length(x) <span class="operator">|</span> y          <span class="operator">|</span> length(y) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> 你瞅啥      <span class="operator">|</span>        <span class="number">11</span> <span class="operator">|</span> 你瞅啥     <span class="operator">|</span>        <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>了解concat</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> concat(<span class="string">&#x27;数据: &#x27;</span>,x,<span class="string">&#x27;长度: &#x27;</span>,<span class="keyword">char_length</span>(x)),concat(y,<span class="keyword">char_length</span>(y)</span><br><span class="line">) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat(<span class="string">&#x27;数据: &#x27;</span>,x,<span class="string">&#x27;长度: &#x27;</span>,<span class="keyword">char_length</span>(x))     <span class="operator">|</span> concat(y,<span class="keyword">char_length</span>(y)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> 数据: 你瞅啥  长度: <span class="number">5</span>                          <span class="operator">|</span> 你瞅啥 <span class="number">4</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------+--------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/8495101.html">点击查看关于sql_mode的详细介绍</a></strong></p>
</blockquote>
<ol>
<li>虽然 CHAR 和 VARCHAR 的存储方式不太相同,但是对于两个字符串的比较,都只比 较其值,忽略 CHAR 值存在的右填充,即使将 SQL <em>MODE 设置为 PAD_CHAR_TO_FULL</em> LENGTH 也一样,,但这不适用于like</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Values <span class="keyword">in</span> CHAR <span class="keyword">and</span> VARCHAR columns are <span class="built_in">sorted</span> <span class="keyword">and</span> compared according to the character <span class="built_in">set</span> collation assigned to the column.</span><br><span class="line"></span><br><span class="line">All MySQL collations are of <span class="built_in">type</span> PAD SPACE. This means that <span class="built_in">all</span> CHAR, VARCHAR, <span class="keyword">and</span> TEXT values are compared without regard to <span class="built_in">any</span> trailing spaces. “Comparison” <span class="keyword">in</span> this context does <span class="keyword">not</span> include the LIKE pattern-matching operator, <span class="keyword">for</span> which trailing spaces are significant. For example:</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE names (myname CHAR(<span class="number">10</span>));</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO names VALUES (<span class="string">&#x27;Monty&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT myname = <span class="string">&#x27;Monty&#x27;</span>, myname = <span class="string">&#x27;Monty  &#x27;</span> FROM names;</span><br><span class="line">+------------------+--------------------+</span><br><span class="line">| myname = <span class="string">&#x27;Monty&#x27;</span> | myname = <span class="string">&#x27;Monty  &#x27;</span> |</span><br><span class="line">+------------------+--------------------+</span><br><span class="line">|                <span class="number">1</span> |                  <span class="number">1</span> |</span><br><span class="line">+------------------+--------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT myname LIKE <span class="string">&#x27;Monty&#x27;</span>, myname LIKE <span class="string">&#x27;Monty  &#x27;</span> FROM names;</span><br><span class="line">+---------------------+-----------------------+</span><br><span class="line">| myname LIKE <span class="string">&#x27;Monty&#x27;</span> | myname LIKE <span class="string">&#x27;Monty  &#x27;</span> |</span><br><span class="line">+---------------------+-----------------------+</span><br><span class="line">|                   <span class="number">1</span> |                     <span class="number">0</span> |</span><br><span class="line">+---------------------+-----------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ol>
<li>总结</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#InnoDB存储引擎：建议使用<span class="type">VARCHAR</span>类型</span><br><span class="line">单从数据类型的实现机制去考虑，<span class="type">char</span>数据类型的处理速度更快，有时甚至可以超出<span class="type">varchar</span>处理速度的<span class="number">50</span><span class="operator">%</span>。</span><br><span class="line"></span><br><span class="line">但对于InnoDB数据表，内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），因此在本质上，使用固定长度的<span class="type">CHAR</span>列不一定比使用可变长度<span class="type">VARCHAR</span>列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于<span class="type">CHAR</span>平均占用的空间多于<span class="type">VARCHAR</span>，因此使用<span class="type">VARCHAR</span>来最小化需要处理的数据行的存储总量和磁盘I<span class="operator">/</span>O是比较好的。</span><br><span class="line"></span><br><span class="line">#其他字符串系列（效率：<span class="type">char</span><span class="operator">&gt;</span><span class="type">varchar</span><span class="operator">&gt;</span>text）</span><br><span class="line">TEXT系列 TINYTEXT TEXT MEDIUMTEXT LONGTEXT</span><br><span class="line"><span class="type">BLOB</span> 系列    TINYBLOB <span class="type">BLOB</span> MEDIUMBLOB LONGBLOB </span><br><span class="line"><span class="type">BINARY</span>系列 <span class="type">BINARY</span> <span class="type">VARBINARY</span></span><br><span class="line"></span><br><span class="line">text：text数据类型用于保存变长的大字符串，可以组多到<span class="number">65535</span> (<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">16</span> − <span class="number">1</span>)个字符。</span><br><span class="line">mediumtext：A TEXT <span class="keyword">column</span> <span class="keyword">with</span> a maximum length <span class="keyword">of</span> <span class="number">16</span>,<span class="number">777</span>,<span class="number">215</span> (<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">24</span> − <span class="number">1</span>) characters.</span><br><span class="line">longtext：A TEXT <span class="keyword">column</span> <span class="keyword">with</span> a maximum length <span class="keyword">of</span> <span class="number">4</span>,<span class="number">294</span>,<span class="number">967</span>,<span class="number">295</span> <span class="keyword">or</span> <span class="number">4</span>GB (<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">32</span> − <span class="number">1</span>) characters.</span><br></pre></td></tr></table></figure>

<h3 id="五-枚举类型与集合类型"><a href="#五-枚举类型与集合类型" class="headerlink" title="五 枚举类型与集合类型"></a>五 枚举类型与集合类型</h3><p>字段的值只能在给定范围中选择，如单选框，多选框 enum 单选 只能在给定的范围内选一个值，如性别 sex 男male&#x2F;女female set 多选 在给定的范围内可以选择一个或一个以上的值（爱好1,爱好2,爱好3…）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">枚举类型（enum）</span><br><span class="line">            An ENUM column can have a maximum of <span class="number">65</span>,<span class="number">535</span> distinct elements. (The practical limit <span class="keyword">is</span> less than <span class="number">3000.</span>)</span><br><span class="line">            示例：</span><br><span class="line">                CREATE TABLE shirts (</span><br><span class="line">                    name VARCHAR(<span class="number">40</span>),</span><br><span class="line">                    size ENUM(<span class="string">&#x27;x-small&#x27;</span>, <span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;x-large&#x27;</span>)</span><br><span class="line">                );</span><br><span class="line">                INSERT INTO shirts (name, size) VALUES (<span class="string">&#x27;dress shirt&#x27;</span>,<span class="string">&#x27;large&#x27;</span>), (<span class="string">&#x27;t-shirt&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>),(<span class="string">&#x27;polo shirt&#x27;</span>,<span class="string">&#x27;small&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            集合类型（<span class="built_in">set</span>）</span><br><span class="line">            A SET column can have a maximum of <span class="number">64</span> distinct members.</span><br><span class="line">            示例：</span><br><span class="line">                CREATE TABLE myset (col SET(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>));</span><br><span class="line">                INSERT INTO myset (col) VALUES (<span class="string">&#x27;a,d&#x27;</span>), (<span class="string">&#x27;d,a&#x27;</span>), (<span class="string">&#x27;a,d,a&#x27;</span>), (<span class="string">&#x27;a,d,d&#x27;</span>), (<span class="string">&#x27;d,a,d&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; create table consumer( </span><br><span class="line">    -&gt; name varchar(<span class="number">50</span>),</span><br><span class="line">    -&gt; sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">    -&gt; level enum(<span class="string">&#x27;vip1&#x27;</span>,<span class="string">&#x27;vip2&#x27;</span>,<span class="string">&#x27;vip3&#x27;</span>,<span class="string">&#x27;vip4&#x27;</span>,<span class="string">&#x27;vip5&#x27;</span>), <span class="comment">#在指定范围内，多选一</span></span><br><span class="line">    -&gt; hobby <span class="built_in">set</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;study&#x27;</span>) <span class="comment">#在指定范围内，多选多</span></span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; insert into consumer values  </span><br><span class="line">    -&gt; (<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;vip5&#x27;</span>,<span class="string">&#x27;read,study&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;vip1&#x27;</span>,<span class="string">&#x27;girl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">MariaDB [db1]&gt; select * <span class="keyword">from</span> consumer;</span><br><span class="line">+------+--------+-------+------------+</span><br><span class="line">| name | sex    | level | hobby      |</span><br><span class="line">+------+--------+-------+------------+</span><br><span class="line">| egon | male   | vip5  | read,study |</span><br><span class="line">| alex | female | vip1  |            |</span><br><span class="line">+------+--------+-------+------------+</span><br></pre></td></tr></table></figure>

<h2 id="六-表完整性约束"><a href="#六-表完整性约束" class="headerlink" title="六 表完整性约束"></a>六 表完整性约束</h2><h3 id="一-介绍-1"><a href="#一-介绍-1" class="headerlink" title="一 介绍"></a>一 介绍</h3><p>约束条件与数据类型的宽度一样，都是可选参数</p>
<p>作用：用于保证数据的完整性和一致性 主要分为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PRIMARY</span> KEY (PK)    标识该字段为该表的主键，可以唯一的标识记录</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (FK)    标识该字段为该表的外键</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">NULL</span>    标识该字段不能为空</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY (UK)    标识该字段的值是唯一的</span><br><span class="line">AUTO_INCREMENT    标识该字段的值自动增长（整数类型，而且为主键）</span><br><span class="line"><span class="keyword">DEFAULT</span>    为该字段设置默认值</span><br><span class="line"></span><br><span class="line">UNSIGNED 无符号</span><br><span class="line">ZEROFILL 使用<span class="number">0</span>填充</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 是否允许为空，默认<span class="keyword">NULL</span>，可设置<span class="keyword">NOT</span> <span class="keyword">NULL</span>，字段不允许为空，必须赋值</span><br><span class="line"><span class="number">2.</span> 字段是否有默认值，缺省的默认值是<span class="keyword">NULL</span>，如果插入记录时不给字段赋值，此字段使用默认值</span><br><span class="line">sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">age <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span> <span class="number">20</span> 必须为正值（无符号） 不允许为空 默认是<span class="number">20</span></span><br><span class="line"><span class="number">3.</span> 是否是key</span><br><span class="line">主键 <span class="keyword">primary</span> key</span><br><span class="line">外键 <span class="keyword">foreign</span> key</span><br><span class="line">索引 (index,unique...)</span><br></pre></td></tr></table></figure>

<h3 id="二-not-null与default"><a href="#二-not-null与default" class="headerlink" title="二 not null与default"></a>二 not null与default</h3><p>是否可空，null表示空，非字符串 not null - 不可空 null - 可空</p>
<p>默认值，创建列时可以指定默认值，当插入数据时如果未主动设置，则自动添加默认值 create table tb1( nid int not null defalut 2, num int not null )</p>
<p>验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">==================<span class="keyword">not</span> null====================</span><br><span class="line">mysql&gt; create table t1(<span class="built_in">id</span> <span class="built_in">int</span>); <span class="comment">#id字段默认可以插入空</span></span><br><span class="line">mysql&gt; desc t1;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">mysql&gt; insert into t1 values(); <span class="comment">#可以插入空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; create table t2(<span class="built_in">id</span> <span class="built_in">int</span> <span class="keyword">not</span> null); <span class="comment">#设置字段id不为空</span></span><br><span class="line">mysql&gt; desc t2;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>) | NO   |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">mysql&gt; insert into t2 values(); <span class="comment">#不能插入空</span></span><br><span class="line">ERROR <span class="number">1364</span> (HY000): Field <span class="string">&#x27;id&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==================default====================</span></span><br><span class="line"><span class="string">#设置id字段有默认值后，则无论id字段是null还是not null，都可以插入空，插入空默认填入default指定的默认值</span></span><br><span class="line"><span class="string">mysql&gt; create table t3(id int default 1);</span></span><br><span class="line"><span class="string">mysql&gt; alter table t3 modify id int not null default 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==================综合练习====================</span></span><br><span class="line"><span class="string">mysql&gt; create table student(</span></span><br><span class="line"><span class="string">    -&gt; name varchar(20) not null,</span></span><br><span class="line"><span class="string">    -&gt; age int(3) unsigned not null default 18,</span></span><br><span class="line"><span class="string">    -&gt; sex enum(&#x27;</span>male<span class="string">&#x27;,&#x27;</span>female<span class="string">&#x27;) default &#x27;</span>male<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    -&gt; hobby set(&#x27;</span>play<span class="string">&#x27;,&#x27;</span>study<span class="string">&#x27;,&#x27;</span>read<span class="string">&#x27;,&#x27;</span>music<span class="string">&#x27;) default &#x27;</span>play,music<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    -&gt; );</span></span><br><span class="line"><span class="string">mysql&gt; desc student;</span></span><br><span class="line"><span class="string">+-------+------------------------------------+------+-----+------------+-------+</span></span><br><span class="line"><span class="string">| Field | Type                               | Null | Key | Default    | Extra |</span></span><br><span class="line"><span class="string">+-------+------------------------------------+------+-----+------------+-------+</span></span><br><span class="line"><span class="string">| name  | varchar(20)                        | NO   |     | NULL       |       |</span></span><br><span class="line"><span class="string">| age   | int(3) unsigned                    | NO   |     | 18         |       |</span></span><br><span class="line"><span class="string">| sex   | enum(&#x27;</span>male<span class="string">&#x27;,&#x27;</span>female<span class="string">&#x27;)              | YES  |     | male       |       |</span></span><br><span class="line"><span class="string">| hobby | set(&#x27;</span>play<span class="string">&#x27;,&#x27;</span>study<span class="string">&#x27;,&#x27;</span>read<span class="string">&#x27;,&#x27;</span>music<span class="string">&#x27;) | YES  |     | play,music |       |</span></span><br><span class="line"><span class="string">+-------+------------------------------------+------+-----+------------+-------+</span></span><br><span class="line"><span class="string">mysql&gt; insert into student(name) values(&#x27;</span>egon<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">mysql&gt; select * from student;</span></span><br><span class="line"><span class="string">+------+-----+------+------------+</span></span><br><span class="line"><span class="string">| name | age | sex  | hobby      |</span></span><br><span class="line"><span class="string">+------+-----+------+------------+</span></span><br><span class="line"><span class="string">| egon |  18 | male | play,music |</span></span><br><span class="line"><span class="string">+------+-----+------+------------+</span></span><br></pre></td></tr></table></figure>

<h3 id="三-unique"><a href="#三-unique" class="headerlink" title="三 unique"></a>三 unique</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">============设置唯一约束 UNIQUE===============</span><br><span class="line">方法一：</span><br><span class="line">create table department1(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">name varchar(<span class="number">20</span>) unique,</span><br><span class="line">comment varchar(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">create table department2(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">comment varchar(<span class="number">100</span>),</span><br><span class="line">constraint uk_name unique(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into department1 values(<span class="number">1</span>,<span class="string">&#x27;IT&#x27;</span>,<span class="string">&#x27;技术&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; insert into department1 values(<span class="number">1</span>,<span class="string">&#x27;IT&#x27;</span>,<span class="string">&#x27;技术&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;IT&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>not null+unique的化学反应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(<span class="built_in">id</span> <span class="built_in">int</span> <span class="keyword">not</span> null unique);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc t1;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | <span class="type">Type</span>    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>) | NO   | PRI | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>联合唯一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table service(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">host varchar(<span class="number">15</span>) <span class="keyword">not</span> null,</span><br><span class="line">port <span class="built_in">int</span> <span class="keyword">not</span> null,</span><br><span class="line">unique(host,port) <span class="comment">#联合唯一</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service values</span><br><span class="line">    -&gt; (<span class="number">1</span>,<span class="string">&#x27;nginx&#x27;</span>,<span class="string">&#x27;192.168.0.10&#x27;</span>,<span class="number">80</span>),</span><br><span class="line">    -&gt; (<span class="number">2</span>,<span class="string">&#x27;haproxy&#x27;</span>,<span class="string">&#x27;192.168.0.20&#x27;</span>,<span class="number">80</span>),</span><br><span class="line">    -&gt; (<span class="number">3</span>,<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;192.168.0.30&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, <span class="number">3</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service(name,host,port) values(<span class="string">&#x27;nginx&#x27;</span>,<span class="string">&#x27;192.168.0.10&#x27;</span>,<span class="number">80</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;192.168.0.10-80&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;host&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="四-primary-key"><a href="#四-primary-key" class="headerlink" title="四 primary key"></a>四 primary key</h3><p>从约束角度看primary key字段的值不为空且唯一，那我们直接使用not null+unique不就可以了吗，要它干什么？</p>
<p>主键primary key是innodb存储引擎组织数据的依据，innodb称之为索引组织表，一张表中必须有且只有一个主键。</p>
<p>一个表中可以：</p>
<p>单列做主键 多列做主键（复合主键）</p>
<p>单列主键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">============单列做主键===============</span><br><span class="line"><span class="comment">#方法一：not null+unique</span></span><br><span class="line">create table department1(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> <span class="keyword">not</span> null unique, <span class="comment">#主键</span></span><br><span class="line">name varchar(<span class="number">20</span>) <span class="keyword">not</span> null unique,</span><br><span class="line">comment varchar(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; desc department1;</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field   | <span class="type">Type</span>         | Null | Key | Default | Extra |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | <span class="built_in">int</span>(<span class="number">11</span>)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(<span class="number">20</span>)  | NO   | UNI | NULL    |       |</span><br><span class="line">| comment | varchar(<span class="number">100</span>) | YES  |     | NULL    |       |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：在某一个字段后用primary key</span></span><br><span class="line">create table department2(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key, <span class="comment">#主键</span></span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">comment varchar(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; desc department2;</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field   | <span class="type">Type</span>         | Null | Key | Default | Extra |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | <span class="built_in">int</span>(<span class="number">11</span>)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(<span class="number">20</span>)  | YES  |     | NULL    |       |</span><br><span class="line">| comment | varchar(<span class="number">100</span>) | YES  |     | NULL    |       |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：在所有字段后单独定义primary key</span></span><br><span class="line">create table department3(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span>,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">comment varchar(<span class="number">100</span>),</span><br><span class="line">constraint pk_name primary key(<span class="built_in">id</span>); <span class="comment">#创建主键并为其命名pk_name</span></span><br><span class="line"></span><br><span class="line">mysql&gt; desc department3;</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field   | <span class="type">Type</span>         | Null | Key | Default | Extra |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | <span class="built_in">int</span>(<span class="number">11</span>)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(<span class="number">20</span>)  | YES  |     | NULL    |       |</span><br><span class="line">| comment | varchar(<span class="number">100</span>) | YES  |     | NULL    |       |</span><br><span class="line">+---------+--------------+------+-----+---------+-------+</span><br><span class="line">rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p>多列主键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">==================多列做主键================</span><br><span class="line">create table service(</span><br><span class="line">ip varchar(<span class="number">15</span>),</span><br><span class="line">port char(<span class="number">5</span>),</span><br><span class="line">service_name varchar(<span class="number">10</span>) <span class="keyword">not</span> null,</span><br><span class="line">primary key(ip,port)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; desc service;</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field        | <span class="type">Type</span>        | Null | Key | Default | Extra |</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line">| ip           | varchar(<span class="number">15</span>) | NO   | PRI | NULL    |       |</span><br><span class="line">| port         | char(<span class="number">5</span>)     | NO   | PRI | NULL    |       |</span><br><span class="line">| service_name | varchar(<span class="number">10</span>) | NO   |     | NULL    |       |</span><br><span class="line">+--------------+-------------+------+-----+---------+-------+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service values</span><br><span class="line">    -&gt; (<span class="string">&#x27;172.16.45.10&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>,<span class="string">&#x27;mysqld&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;172.16.45.11&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>,<span class="string">&#x27;mariadb&#x27;</span>)</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, <span class="number">2</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service values (<span class="string">&#x27;172.16.45.10&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>,<span class="string">&#x27;nginx&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;172.16.45.10-3306&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="五-auto-increment"><a href="#五-auto-increment" class="headerlink" title="五 auto_increment"></a>五 auto_increment</h3><p>约束字段为自动增长，被约束的字段必须同时被key约束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不指定id，则自动增长</span></span><br><span class="line">create table student(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) default <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+-----------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | <span class="type">Type</span>                  | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-----------------------+------+-----+---------+----------------+</span><br><span class="line">| <span class="built_in">id</span>    | <span class="built_in">int</span>(<span class="number">11</span>)               | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(<span class="number">20</span>)           | YES  |     | NULL    |                |</span><br><span class="line">| sex   | enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) | YES  |     | male    |                |</span><br><span class="line">+-------+-----------------------+------+-----+---------+----------------+</span><br><span class="line">mysql&gt; insert into student(name) values</span><br><span class="line">    -&gt; (<span class="string">&#x27;egon&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line">    -&gt; ;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+------+------+</span><br><span class="line">| <span class="built_in">id</span> | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  <span class="number">1</span> | egon | male |</span><br><span class="line">|  <span class="number">2</span> | alex | male |</span><br><span class="line">+----+------+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以指定id</span></span><br><span class="line">mysql&gt; insert into student values(<span class="number">4</span>,<span class="string">&#x27;asb&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(<span class="number">7</span>,<span class="string">&#x27;wsb&#x27;</span>,<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+------+--------+</span><br><span class="line">| <span class="built_in">id</span> | name | sex    |</span><br><span class="line">+----+------+--------+</span><br><span class="line">|  <span class="number">1</span> | egon | male   |</span><br><span class="line">|  <span class="number">2</span> | alex | male   |</span><br><span class="line">|  <span class="number">4</span> | asb  | female |</span><br><span class="line">|  <span class="number">7</span> | wsb  | female |</span><br><span class="line">+----+------+--------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于自增的字段，在用delete删除后，再插入值，该字段仍按照删除前的位置继续增长</span></span><br><span class="line">mysql&gt; delete <span class="keyword">from</span> student;</span><br><span class="line">Query OK, <span class="number">4</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student(name) values(<span class="string">&#x27;ysb&#x27;</span>);</span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+------+------+</span><br><span class="line">| <span class="built_in">id</span> | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  <span class="number">8</span> | ysb  | male |</span><br><span class="line">+----+------+------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#应该用truncate清空表，比起delete一条一条地删除记录，truncate是直接清空表，在删除大表时用它</span></span><br><span class="line">mysql&gt; truncate student;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student(name) values(<span class="string">&#x27;egon&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+------+------+</span><br><span class="line">| <span class="built_in">id</span> | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  <span class="number">1</span> | egon | male |</span><br><span class="line">+----+------+------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>了解知识</p>
<p>步长:auto_increment_increment,起始偏移量:auto_increment_offset</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在创建完表后，修改自增字段的起始值</span></span><br><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; <span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(<span class="number">20</span>),</span><br><span class="line">    -&gt; sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) default <span class="string">&#x27;male&#x27;</span></span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student auto_increment=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table student;</span><br><span class="line">.......</span><br><span class="line">ENGINE=InnoDB AUTO_INCREMENT=<span class="number">3</span> DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student(name) values(<span class="string">&#x27;egon&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+------+------+</span><br><span class="line">| <span class="built_in">id</span> | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  <span class="number">3</span> | egon | male |</span><br><span class="line">+----+------+------+</span><br><span class="line">row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table student;</span><br><span class="line">.......</span><br><span class="line">ENGINE=InnoDB AUTO_INCREMENT=<span class="number">4</span> DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以创建表时指定auto_increment的初始值，注意初始值的设置为表选项，应该放到括号外</span></span><br><span class="line">create table student(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) default <span class="string">&#x27;male&#x27;</span></span><br><span class="line">)auto_increment=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置步长</span></span><br><span class="line">sqlserver：自增步长</span><br><span class="line">    基于表级别</span><br><span class="line">    create table t1（</span><br><span class="line">        <span class="built_in">id</span> <span class="built_in">int</span>。。。</span><br><span class="line">    ）engine=innodb,auto_increment=<span class="number">2</span> 步长=<span class="number">2</span> default charset=utf8</span><br><span class="line"></span><br><span class="line">mysql自增的步长：</span><br><span class="line">    show session variables like <span class="string">&#x27;auto_inc%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#基于会话级别</span></span><br><span class="line">    <span class="built_in">set</span> session auth_increment_increment=<span class="number">2</span> <span class="comment">#修改会话级别的步长</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#基于全局级别的</span></span><br><span class="line">    <span class="built_in">set</span> <span class="keyword">global</span> auth_increment_increment=<span class="number">2</span> <span class="comment">#修改全局级别的步长（所有会话都生效）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#！！！注意了注意了注意了！！！</span></span><br><span class="line">If the value of auto_increment_offset <span class="keyword">is</span> greater than that of auto_increment_increment, the value of auto_increment_offset <span class="keyword">is</span> ignored. </span><br><span class="line">翻译：如果auto_increment_offset的值大于auto_increment_increment的值，则auto_increment_offset的值会被忽略 ，这相当于第一步步子就迈大了，扯着了蛋</span><br><span class="line">比如：设置auto_increment_offset=<span class="number">3</span>，auto_increment_increment=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> <span class="keyword">global</span> auto_increment_increment=<span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> <span class="keyword">global</span> auto_increment_offset=<span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;auto_incre%&#x27;</span>; <span class="comment">#需要退出重新登录</span></span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line">| auto_increment_increment | <span class="number">1</span>     |</span><br><span class="line">| auto_increment_offset    | <span class="number">1</span>     |</span><br><span class="line">+--------------------------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) default <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student(name) values(<span class="string">&#x27;egon1&#x27;</span>),(<span class="string">&#x27;egon2&#x27;</span>),(<span class="string">&#x27;egon3&#x27;</span>);</span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> student;</span><br><span class="line">+----+-------+------+</span><br><span class="line">| <span class="built_in">id</span> | name  | sex  |</span><br><span class="line">+----+-------+------+</span><br><span class="line">|  <span class="number">3</span> | egon1 | male |</span><br><span class="line">|  <span class="number">8</span> | egon2 | male |</span><br><span class="line">| <span class="number">13</span> | egon3 | male |</span><br><span class="line">+----+-------+------+</span><br></pre></td></tr></table></figure>

<h3 id="六-foreign-key"><a href="#六-foreign-key" class="headerlink" title="六 foreign key"></a>六 foreign key</h3><p><strong>一 快速理解foreign key</strong></p>
<p>员工信息表有三个字段：工号 姓名 部门</p>
<p>公司有3个部门，但是有1个亿的员工，那意味着部门这个字段需要重复存储，部门名字越长，越浪费</p>
<p>解决方法：</p>
<p>我们完全可以定义一个部门表</p>
<p>然后让员工信息表关联该表，如何关联，即foreign key</p>
<p>示范</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#表类型必须是innodb存储引擎，且被关联的字段，即<span class="keyword">references</span>指定的另外一个表的字段，必须保证唯一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br><span class="line"></span><br><span class="line">#dpt_id外键，关联父表（department主键id），同步更新，同步删除</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">dpt_id <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_name <span class="keyword">foreign</span> key(dpt_id)</span><br><span class="line"><span class="keyword">references</span> department(id)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> cascade</span><br><span class="line"><span class="keyword">on</span> update cascade </span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#先往父表department中插入记录</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> department <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;欧德博爱技术有限事业部&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;艾利克斯人力资源部&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#再往子表employee中插入记录</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;alex1&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;alex2&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;alex3&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;李坦克&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;刘飞机&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;张火箭&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;林子弹&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;加特林&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删父表department，子表employee中对应的记录跟着删</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> department <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> dpt_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> egon  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> alex1 <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> alex2 <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> alex3 <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新父表department，子表employee中对应的记录跟着改</span><br><span class="line">mysql<span class="operator">&gt;</span> update department <span class="keyword">set</span> id<span class="operator">=</span><span class="number">22222</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> dpt_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> egon  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> alex2 <span class="operator">|</span>  <span class="number">22222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> alex3 <span class="operator">|</span>  <span class="number">22222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> alex1 <span class="operator">|</span>  <span class="number">22222</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+</span></span><br></pre></td></tr></table></figure>

<p><strong>二 如何找出两张表之间的关系</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">分析步骤：</span><br><span class="line">#<span class="number">1</span>、先站在左表的角度去找</span><br><span class="line">是否左表的多条记录可以对应右表的一条记录，如果是，则证明左表的一个字段<span class="keyword">foreign</span> key 右表一个字段（通常是id）</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、再站在右表的角度去找</span><br><span class="line">是否右表的多条记录可以对应左表的一条记录，如果是，则证明右表的一个字段<span class="keyword">foreign</span> key 左表一个字段（通常是id）</span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、总结：</span><br><span class="line">#多对一：</span><br><span class="line">如果只有步骤<span class="number">1</span>成立，则是左表多对一右表</span><br><span class="line">如果只有步骤<span class="number">2</span>成立，则是右表多对一左表</span><br><span class="line"></span><br><span class="line">#多对多</span><br><span class="line">如果步骤<span class="number">1</span>和<span class="number">2</span>同时成立，则证明这两张表时一个双向的多对一，即多对多,需要定义一个这两张表的关系表来专门存放二者的关系</span><br><span class="line"></span><br><span class="line">#一对一:</span><br><span class="line">如果<span class="number">1</span>和<span class="number">2</span>都不成立，而是左表的一条记录唯一对应右表的一条记录，反之亦然。这种情况很简单，就是在左表<span class="keyword">foreign</span> key右表的基础上，将左表的外键字段设置成<span class="keyword">unique</span>即可</span><br></pre></td></tr></table></figure>

<p><strong>三 建立表之间的关系</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一对多或称为多对一</span></span><br><span class="line">三张表：出版社，作者信息，书</span><br><span class="line"></span><br><span class="line">一对多（或多对一）：一个出版社可以出版多本书</span><br><span class="line"></span><br><span class="line">关联方式：foreign key</span><br><span class="line">=====================多对一=====================</span><br><span class="line">create table press(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table book(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>),</span><br><span class="line">press_id <span class="built_in">int</span> <span class="keyword">not</span> null,</span><br><span class="line">foreign key(press_id) references press(<span class="built_in">id</span>)</span><br><span class="line">on delete cascade</span><br><span class="line">on update cascade</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into press(name) values</span><br><span class="line">(<span class="string">&#x27;北京工业地雷出版社&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;人民音乐不好听出版社&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;知识产权没有用出版社&#x27;</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">insert into book(name,press_id) values</span><br><span class="line">(<span class="string">&#x27;九阳神功&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;九阴真经&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;九阴白骨爪&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;独孤九剑&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;降龙十巴掌&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;葵花宝典&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>其他例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一夫多妻制</span><br><span class="line"></span><br><span class="line"><span class="comment">#妻子表的丈夫id外键到丈夫表的id</span></span><br><span class="line"><span class="comment">#多对多</span></span><br><span class="line">三张表：出版社，作者信息，书</span><br><span class="line"></span><br><span class="line">多对多：一个作者可以写多本书，一本书也可以有多个作者，双向的一对多，即多对多</span><br><span class="line">　　</span><br><span class="line">关联方式：foreign key+一张新的表</span><br><span class="line">=====================多对多=====================</span><br><span class="line">create table author(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这张表就存放作者表与书表的关系，即查询二者的关系查这表就可以了</span></span><br><span class="line">create table author2book(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> <span class="keyword">not</span> null unique auto_increment,</span><br><span class="line">author_id <span class="built_in">int</span> <span class="keyword">not</span> null,</span><br><span class="line">book_id <span class="built_in">int</span> <span class="keyword">not</span> null,</span><br><span class="line">constraint fk_author foreign key(author_id) references author(<span class="built_in">id</span>)</span><br><span class="line">on delete cascade</span><br><span class="line">on update cascade,</span><br><span class="line">constraint fk_book foreign key(book_id) references book(<span class="built_in">id</span>)</span><br><span class="line">on delete cascade</span><br><span class="line">on update cascade,</span><br><span class="line">primary key(author_id,book_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#插入四个作者，id依次排开</span></span><br><span class="line">insert into author(name) values(<span class="string">&#x27;egon&#x27;</span>),(<span class="string">&#x27;alex&#x27;</span>),(<span class="string">&#x27;yuanhao&#x27;</span>),(<span class="string">&#x27;wpq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个作者与自己的代表作如下</span></span><br><span class="line"><span class="number">1</span> egon: </span><br><span class="line">      <span class="number">1</span> 九阳神功</span><br><span class="line">      <span class="number">2</span> 九阴真经</span><br><span class="line">      <span class="number">3</span> 九阴白骨爪</span><br><span class="line">      <span class="number">4</span> 独孤九剑</span><br><span class="line">      <span class="number">5</span> 降龙十巴掌</span><br><span class="line">      <span class="number">6</span> 葵花宝典</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> alex: </span><br><span class="line">      <span class="number">1</span> 九阳神功</span><br><span class="line">      <span class="number">6</span> 葵花宝典</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> yuanhao:</span><br><span class="line">      <span class="number">4</span> 独孤九剑</span><br><span class="line">      <span class="number">5</span> 降龙十巴掌</span><br><span class="line">      <span class="number">6</span> 葵花宝典</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> wpq:</span><br><span class="line">      <span class="number">1</span> 九阳神功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into author2book(author_id,book_id) values</span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>其他例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">单张表：用户表+相亲关系表，相当于：用户表+相亲关系表+用户表</span><br><span class="line">多张表：用户表+用户与主机关系表+主机表</span><br><span class="line"></span><br><span class="line">中间那一张存放关系的表，对外关联的字段可以联合唯一</span><br><span class="line"><span class="comment">#一对一</span></span><br><span class="line">两张表：学生表和客户表</span><br><span class="line"></span><br><span class="line">一对一：一个学生是一个客户，一个客户有可能变成一个学校，即一对一的关系</span><br><span class="line"></span><br><span class="line">关联方式：foreign key+unique</span><br><span class="line"><span class="comment">#一定是student来foreign key表customer，这样就保证了：</span></span><br><span class="line"><span class="comment">#1 学生一定是一个客户，</span></span><br><span class="line"><span class="comment">#2 客户不一定是学生，但有可能成为一个学生</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table customer(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name varchar(<span class="number">20</span>) <span class="keyword">not</span> null,</span><br><span class="line">qq varchar(<span class="number">10</span>) <span class="keyword">not</span> null,</span><br><span class="line">phone char(<span class="number">16</span>) <span class="keyword">not</span> null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">class_name varchar(<span class="number">20</span>) <span class="keyword">not</span> null,</span><br><span class="line">customer_id <span class="built_in">int</span> unique, <span class="comment">#该字段一定要是唯一的</span></span><br><span class="line">foreign key(customer_id) references customer(<span class="built_in">id</span>) <span class="comment">#外键的字段一定要保证unique</span></span><br><span class="line">on delete cascade</span><br><span class="line">on update cascade</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#增加客户</span></span><br><span class="line">insert into customer(name,qq,phone) values</span><br><span class="line">(<span class="string">&#x27;李飞机&#x27;</span>,<span class="string">&#x27;31811231&#x27;</span>,<span class="number">13811341220</span>),</span><br><span class="line">(<span class="string">&#x27;王大炮&#x27;</span>,<span class="string">&#x27;123123123&#x27;</span>,<span class="number">15213146809</span>),</span><br><span class="line">(<span class="string">&#x27;守榴弹&#x27;</span>,<span class="string">&#x27;283818181&#x27;</span>,<span class="number">1867141331</span>),</span><br><span class="line">(<span class="string">&#x27;吴坦克&#x27;</span>,<span class="string">&#x27;283818181&#x27;</span>,<span class="number">1851143312</span>),</span><br><span class="line">(<span class="string">&#x27;赢火箭&#x27;</span>,<span class="string">&#x27;888818181&#x27;</span>,<span class="number">1861243314</span>),</span><br><span class="line">(<span class="string">&#x27;战地雷&#x27;</span>,<span class="string">&#x27;112312312&#x27;</span>,<span class="number">18811431230</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#增加学生</span></span><br><span class="line">insert into student(class_name,customer_id) values</span><br><span class="line">(<span class="string">&#x27;脱产3班&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;周末19期&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="string">&#x27;周末19期&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>其他例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例一：一个用户只有一个博客</span><br><span class="line"></span><br><span class="line">    用户表：</span><br><span class="line">    <span class="built_in">id</span>  name</span><br><span class="line">    <span class="number">1</span>    egon</span><br><span class="line">    <span class="number">2</span>    alex</span><br><span class="line">    <span class="number">3</span>    wupeiqi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    博客表   </span><br><span class="line">           fk+unique</span><br><span class="line">    <span class="built_in">id</span> url name_id</span><br><span class="line">    <span class="number">1</span>  xxxx   <span class="number">1</span></span><br><span class="line">    <span class="number">2</span>  yyyy   <span class="number">3</span></span><br><span class="line">    <span class="number">3</span>  zzz    <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例二：一个管理员唯一对应一个用户</span><br><span class="line">    用户表：</span><br><span class="line">    <span class="built_in">id</span> user  password</span><br><span class="line">    <span class="number">1</span>  egon    xxxx</span><br><span class="line">    <span class="number">2</span>  alex    yyyy</span><br><span class="line"></span><br><span class="line">    管理员表：</span><br><span class="line">       fk+unique</span><br><span class="line">    <span class="built_in">id</span> user_id password</span><br><span class="line">    <span class="number">1</span>   <span class="number">1</span>      xxxxx</span><br><span class="line">    <span class="number">2</span>   <span class="number">2</span>      yyyyy</span><br></pre></td></tr></table></figure>

<h3 id="七-作业"><a href="#七-作业" class="headerlink" title="七 作业"></a>七 作业</h3><p>练习：账号信息表，用户组，主机表，主机组</p>
<p>`&#96;&#96;sql</p>
<h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><p>create table user( id int not null unique auto_increment, username varchar(20) not null, password varchar(50) not null, primary key(username,password) );</p>
<p>insert into user(username,password) values (‘root’,’123’), (‘egon’,’456’), (‘alex’,’alex3714’) ;</p>
<h2 id="用户组表"><a href="#用户组表" class="headerlink" title="用户组表"></a>用户组表</h2><p>create table usergroup( id int primary key auto_increment, groupname varchar(20) not null unique );</p>
<p>insert into usergroup(groupname) values (‘IT’), (‘Sale’), (‘Finance’), (‘boss’) ;</p>
<h2 id="主机表"><a href="#主机表" class="headerlink" title="主机表"></a>主机表</h2><p>create table host( id int primary key auto_increment, ip char(15) not null unique default ‘127.0.0.1’ );</p>
<p>insert into host(ip) values (‘172.16.45.2’), (‘172.16.31.10’), (‘172.16.45.3’), (‘172.16.31.11’), (‘172.10.45.3’), (‘172.10.45.4’), (‘172.10.45.5’), (‘192.168.1.20’), (‘192.168.1.21’), (‘192.168.1.22’), (‘192.168.2.23’), (‘192.168.2.223’), (‘192.168.2.24’), (‘192.168.3.22’), (‘192.168.3.23’), (‘192.168.3.24’) ;</p>
<h2 id="业务线表"><a href="#业务线表" class="headerlink" title="业务线表"></a>业务线表</h2><p>create table business( id int primary key auto_increment, business varchar(20) not null unique ); insert into business(business) values (‘轻松贷’), (‘随便花’), (‘大富翁’), (‘穷一生’) ;</p>
<h2 id="建关系：user与usergroup"><a href="#建关系：user与usergroup" class="headerlink" title="建关系：user与usergroup"></a>建关系：user与usergroup</h2><p>create table user2usergroup( id int not null unique auto_increment, user_id int not null, group_id int not null, primary key(user_id,group_id), foreign key(user_id) references user(id), foreign key(group_id) references usergroup(id) );</p>
<p>insert into user2usergroup(user_id,group_id) values (1,1), (1,2), (1,3), (1,4), (2,3), (2,4), (3,4) ;</p>
<h2 id="建关系：host与business"><a href="#建关系：host与business" class="headerlink" title="建关系：host与business"></a>建关系：host与business</h2><p>create table host2business( id int not null unique auto_increment, host_id int not null, business_id int not null, primary key(host_id,business_id), foreign key(host_id) references host(id), foreign key(business_id) references business(id) );</p>
<p>insert into host2business(host_id,business_id) values (1,1), (1,2), (1,3), (2,2), (2,3), (3,4) ;</p>
<h2 id="建关系：user与host"><a href="#建关系：user与host" class="headerlink" title="建关系：user与host"></a>建关系：user与host</h2><p>create table user2host( id int not null unique auto_increment, user_id int not null, host_id int not null, primary key(user_id,host_id), foreign key(user_id) references user(id), foreign key(host_id) references host(id) );</p>
<p>insert into user2host(user_id,host_id) values (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14), (1,15), (1,16), (2,2), (2,3), (2,4), (2,5), (3,10), (3,11), (3,12) ; &#96;&#96;&#96;</p>
<p>作业：</p>
<p><img src="https://pic2.zhimg.com/80/v2-2d0503bf35edfd78af1ec5f7b7d4669d_720w.jpg" alt="img"></p>
<h2 id="七-修改表ALTER-TABLE"><a href="#七-修改表ALTER-TABLE" class="headerlink" title="七 修改表ALTER TABLE"></a>七 修改表ALTER TABLE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="number">1.</span> 修改表名</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">                          RENAME 新表名;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 增加字段</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">                          <span class="keyword">ADD</span> 字段名  数据类型 [完整性约束条件…],</span><br><span class="line">                          <span class="keyword">ADD</span> 字段名  数据类型 [完整性约束条件…];</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">                          <span class="keyword">ADD</span> 字段名  数据类型 [完整性约束条件…]  <span class="keyword">FIRST</span>;</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">                          <span class="keyword">ADD</span> 字段名  数据类型 [完整性约束条件…]  AFTER 字段名;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 删除字段</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">                          <span class="keyword">DROP</span> 字段名;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 修改字段</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">                          MODIFY  字段名 数据类型 [完整性约束条件…];</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">                          CHANGE 旧字段名 新字段名 旧数据类型 [完整性约束条件…];</span><br><span class="line">      <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">                          CHANGE 旧字段名 新字段名 新数据类型 [完整性约束条件…];</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="number">1.</span> 修改存储引擎</span><br><span class="line">mysql&gt; alter table service </span><br><span class="line">    -&gt; engine=innodb;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 添加字段</span><br><span class="line">mysql&gt; alter table student10</span><br><span class="line">    -&gt; add name varchar(<span class="number">20</span>) <span class="keyword">not</span> null,</span><br><span class="line">    -&gt; add age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">not</span> null default <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student10</span><br><span class="line">    -&gt; add stu_num varchar(<span class="number">10</span>) <span class="keyword">not</span> null after name;                //添加name字段之后</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student10                        </span><br><span class="line">    -&gt; add sex enum(<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>) default <span class="string">&#x27;male&#x27;</span> first;          //添加到最前面</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 删除字段</span><br><span class="line">mysql&gt; alter table student10</span><br><span class="line">    -&gt; drop sex;</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table service</span><br><span class="line">    -&gt; drop mac;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 修改字段类型modify</span><br><span class="line">mysql&gt; alter table student10</span><br><span class="line">    -&gt; modify age <span class="built_in">int</span>(<span class="number">3</span>);</span><br><span class="line">mysql&gt; alter table student10</span><br><span class="line">    -&gt; modify <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> null primary key auto_increment;    //修改为主键</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 增加约束（针对已有的主键增加auto_increment）</span><br><span class="line">mysql&gt; alter table student10 modify <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> null primary key auto_increment;</span><br><span class="line">ERROR <span class="number">1068</span> (<span class="number">42000</span>): Multiple primary key defined</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student10 modify <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> null auto_increment;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 对已经存在的表增加复合主键</span><br><span class="line">mysql&gt; alter table service2</span><br><span class="line">    -&gt; add primary key(host_ip,port);        </span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 增加主键</span><br><span class="line">mysql&gt; alter table student1</span><br><span class="line">    -&gt; modify name varchar(<span class="number">10</span>) <span class="keyword">not</span> null primary key;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 增加主键和自动增长</span><br><span class="line">mysql&gt; alter table student1</span><br><span class="line">    -&gt; modify <span class="built_in">id</span> <span class="built_in">int</span> <span class="keyword">not</span> null primary key auto_increment;</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 删除主键</span><br><span class="line">a. 删除自增约束</span><br><span class="line">mysql&gt; alter table student10 modify <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> null; </span><br><span class="line"></span><br><span class="line">b. 删除主键</span><br><span class="line">mysql&gt; alter table student10                                 </span><br><span class="line">    -&gt; drop primary key;</span><br></pre></td></tr></table></figure>

<h2 id="八-复制表"><a href="#八-复制表" class="headerlink" title="八 复制表"></a>八 复制表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">复制表结构＋记录 （key不会复制: 主键、外键和索引）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> new_service <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> service;</span><br><span class="line"></span><br><span class="line">只复制表结构</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> service <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;        <span class="operator">/</span><span class="operator">/</span>条件为假，查不到任何记录</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> new1_service <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> service <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;  </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t4 <span class="keyword">like</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="九-删除表"><a href="#九-删除表" class="headerlink" title="九 删除表"></a>九 删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73346821?p=7">https://ww</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>42-数据库（四）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/42_%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><p>MySQL数据操作： DML</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>在MySQL管理软件中，可以通过SQL语句中的DML语言来实现数据的操作，包括</p>
<ol>
<li><em>使用INSERT实现数据的插入</em></li>
<li><em>UPDATE实现数据的更新</em></li>
<li><em>使用DELETE实现数据的删除</em></li>
<li><em>使用SELECT查询数据以及。</em></li>
</ol>
<p><em>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</em></p>
<p>本节内容包括：</p>
<p>插入数据 更新数据 删除数据 查询数据</p>
<h3 id="二-插入数据INSERT"><a href="#二-插入数据INSERT" class="headerlink" title="二 插入数据INSERT"></a>二 插入数据INSERT</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 插入完整数据（顺序插入）</span><br><span class="line">    语法一：</span><br><span class="line">    INSERT INTO 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>…字段n) VALUES(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…值n);</span><br><span class="line"></span><br><span class="line">    语法二：</span><br><span class="line">    INSERT INTO 表名 VALUES (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…值n);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 指定字段插入数据</span><br><span class="line">    语法：</span><br><span class="line">    INSERT INTO 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>…) VALUES (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 插入多条记录</span><br><span class="line">    语法：</span><br><span class="line">    INSERT INTO 表名 VALUES</span><br><span class="line">        (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…值n),</span><br><span class="line">        (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…值n),</span><br><span class="line">        (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>…值n);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 插入查询结果</span><br><span class="line">    语法：</span><br><span class="line">    INSERT INTO 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>…字段n) </span><br><span class="line">                    SELECT (字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>…字段n) FROM 表<span class="number">2</span></span><br><span class="line">                    WHERE …;</span><br></pre></td></tr></table></figure>

<h3 id="三-更新数据UPDATE"><a href="#三-更新数据UPDATE" class="headerlink" title="三 更新数据UPDATE"></a>三 更新数据UPDATE</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">    UPDATE 表名 SET</span><br><span class="line">        字段<span class="number">1</span>=值<span class="number">1</span>,</span><br><span class="line">        字段<span class="number">2</span>=值<span class="number">2</span>,</span><br><span class="line">        WHERE CONDITION;</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    UPDATE mysql.user SET password=password(‘<span class="number">123</span>’) </span><br><span class="line">        where user=’root’ <span class="keyword">and</span> host=’localhost’;</span><br></pre></td></tr></table></figure>

<h3 id="四-删除数据DELETE"><a href="#四-删除数据DELETE" class="headerlink" title="四 删除数据DELETE"></a>四 删除数据DELETE</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">    DELETE FROM 表名 </span><br><span class="line">        WHERE CONITION;</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    DELETE FROM mysql.user </span><br><span class="line">        WHERE password=’’;</span><br><span class="line"></span><br><span class="line">练习：</span><br><span class="line">    更新MySQL root用户密码为mysql123</span><br><span class="line">    删除除从本地登录的root用户以外的所有用户</span><br></pre></td></tr></table></figure>

<h3 id="五-查询数据SELECT"><a href="#五-查询数据SELECT" class="headerlink" title="五 查询数据SELECT"></a>五 查询数据SELECT</h3><p><strong><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/7267592.html">单表查询：http://www.cnblogs.com/linhaifeng/articles/7267592.html</a></strong></p>
<p><strong><a href="https://link.zhihu.com/?target=http://www.cnblogs.com/linhaifeng/articles/7267596.html">多表查询：http://www.cnblogs.com/linhaifeng/articles/7267596.html</a></strong></p>
<h3 id="六-权限管理"><a href="#六-权限管理" class="headerlink" title="六 权限管理"></a>六 权限管理</h3><p><img src="https://pic4.zhimg.com/80/v2-be7593dce6e8e3a6f5cbf7c2b9c305db_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授权表</span></span><br><span class="line">user <span class="comment">#该表放行的权限，针对：所有数据，所有库下所有表，以及表下的所有字段</span></span><br><span class="line">db <span class="comment">#该表放行的权限，针对：某一数据库，该数据库下的所有表，以及表下的所有字段</span></span><br><span class="line">tables_priv <span class="comment">#该表放行的权限。针对：某一张表，以及该表下的所有字段</span></span><br><span class="line">columns_priv <span class="comment">#该表放行的权限，针对：某一个字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按图解释：</span></span><br><span class="line">user：放行db1，db2及其包含的所有</span><br><span class="line">db：放行db1，及其db1包含的所有</span><br><span class="line">tables_priv:放行db1.table1，及其该表包含的所有</span><br><span class="line">columns_prive:放行db1.table1.column1，只放行该字段</span><br></pre></td></tr></table></figure>

<p>权限相关操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">create user <span class="string">&#x27;egon&#x27;</span>@<span class="string">&#x27;1.1.1.1&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">create user <span class="string">&#x27;egon&#x27;</span>@<span class="string">&#x27;192.168.1.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">create user <span class="string">&#x27;egon&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#授权：对文件夹，对文件，对文件某一字段的权限</span></span><br><span class="line">查看帮助：<span class="built_in">help</span> grant</span><br><span class="line">常用权限有：select,update,alter,delete</span><br><span class="line"><span class="built_in">all</span>可以代表除了grant之外的所有权限</span><br><span class="line"></span><br><span class="line"><span class="comment">#针对所有库的授权:*.*</span></span><br><span class="line">grant select on *.* to <span class="string">&#x27;egon1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>; <span class="comment">#只在user表中可以查到egon1用户的select权限被设置为Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#针对某一数据库：db1.*</span></span><br><span class="line">grant select on db1.* to <span class="string">&#x27;egon2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>; <span class="comment">#只在db表中可以查到egon2用户的select权限被设置为Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#针对某一个表：db1.t1</span></span><br><span class="line">grant select on db1.t1 to <span class="string">&#x27;egon3&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;  <span class="comment">#只在tables_priv表中可以查到egon3用户的select权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#针对某一个字段：</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> t3;</span><br><span class="line">+------+-------+------+</span><br><span class="line">| <span class="built_in">id</span>   | name  | age  |</span><br><span class="line">+------+-------+------+</span><br><span class="line">|    <span class="number">1</span> | egon1 |   <span class="number">18</span> |</span><br><span class="line">|    <span class="number">2</span> | egon2 |   <span class="number">19</span> |</span><br><span class="line">|    <span class="number">3</span> | egon3 |   <span class="number">29</span> |</span><br><span class="line">+------+-------+------+</span><br><span class="line"></span><br><span class="line">grant select (<span class="built_in">id</span>,name),update (age) on db1.t3 to <span class="string">&#x27;egon4&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>; </span><br><span class="line"><span class="comment">#可以在tables_priv和columns_priv中看到相应的权限</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> tables_priv where user=<span class="string">&#x27;egon4&#x27;</span>\G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">       Host: localhost</span><br><span class="line">         Db: db1</span><br><span class="line">       User: egon4</span><br><span class="line"> Table_name: t3</span><br><span class="line">    Grantor: root@localhost</span><br><span class="line">  Timestamp: <span class="number">0000</span>-<span class="number">00</span>-<span class="number">00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"> Table_priv:</span><br><span class="line">Column_priv: Select,Update</span><br><span class="line">row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> columns_priv where user=<span class="string">&#x27;egon4&#x27;</span>\G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">       Host: localhost</span><br><span class="line">         Db: db1</span><br><span class="line">       User: egon4</span><br><span class="line"> Table_name: t3</span><br><span class="line">Column_name: <span class="built_in">id</span></span><br><span class="line">  Timestamp: <span class="number">0000</span>-<span class="number">00</span>-<span class="number">00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Column_priv: Select</span><br><span class="line">*************************** <span class="number">2.</span> row ***************************</span><br><span class="line">       Host: localhost</span><br><span class="line">         Db: db1</span><br><span class="line">       User: egon4</span><br><span class="line"> Table_name: t3</span><br><span class="line">Column_name: name</span><br><span class="line">  Timestamp: <span class="number">0000</span>-<span class="number">00</span>-<span class="number">00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Column_priv: Select</span><br><span class="line">*************************** <span class="number">3.</span> row ***************************</span><br><span class="line">       Host: localhost</span><br><span class="line">         Db: db1</span><br><span class="line">       User: egon4</span><br><span class="line"> Table_name: t3</span><br><span class="line">Column_name: age</span><br><span class="line">  Timestamp: <span class="number">0000</span>-<span class="number">00</span>-<span class="number">00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Column_priv: Update</span><br><span class="line">rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除权限</span></span><br><span class="line">revoke select on db1.* <span class="keyword">from</span> <span class="string">&#x27;egon&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;ji</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av76534734?p=1">https://www.bilibili.com/video/av76534734?p=1www.bilibili.com/video/av76534734?p=1</a></p>
<p>（b站视频链接p1-p12）</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>43-数据库（五）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/43_%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E3%80%81pymysql%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="一-IDE工具介绍"><a href="#一-IDE工具介绍" class="headerlink" title="一 IDE工具介绍"></a>一 IDE工具介绍</h3><p>生产环境还是推荐使用mysql命令行，但为了方便我们测试，可以使用IDE工具</p>
<p><a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1bpo5mqj">下载链接：https://pan.baidu.com/s/1bpo5mqj</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">掌握：</span><br><span class="line"><span class="comment">#1. 测试+链接数据库</span></span><br><span class="line"><span class="comment">#2. 新建库</span></span><br><span class="line"><span class="comment">#3. 新建表，新增字段+类型+约束</span></span><br><span class="line"><span class="comment">#4. 设计表：外键</span></span><br><span class="line"><span class="comment">#5. 新建查询</span></span><br><span class="line"><span class="comment">#6. 备份库/表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：</span></span><br><span class="line">批量加注释：ctrl+？键</span><br><span class="line">批量去注释：ctrl+shift+？键</span><br></pre></td></tr></table></figure>

<h3 id="二-MySQL数据备份"><a href="#二-MySQL数据备份" class="headerlink" title="二 MySQL数据备份"></a>二 MySQL数据备份</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 物理备份： 直接复制数据库文件，适用于大型数据库环境。但不能恢复到异构系统中如Windows。</span></span><br><span class="line"><span class="comment">#2. 逻辑备份： 备份的是建表、建库、插入等操作所执行SQL语句，适用于中小型数据库，效率相对较低。</span></span><br><span class="line"><span class="comment">#3. 导出表： 将表导入到文本文件中。</span></span><br></pre></td></tr></table></figure>

<p><strong>一、使用mysqldump实现逻辑备份</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：</span></span><br><span class="line"><span class="comment"># mysqldump -h 服务器 -u用户名 -p密码 数据库名 &gt; 备份文件.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="comment">#单库备份</span></span><br><span class="line">mysqldump -uroot -p123 db1 &gt; db1.sql</span><br><span class="line">mysqldump -uroot -p123 db1 table1 table2 &gt; db1-table1-table2.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#多库备份</span></span><br><span class="line">mysqldump -uroot -p123 --databases db1 db2 mysql db3 &gt; db1_db2_mysql_db3.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份所有库</span></span><br><span class="line">mysqldump -uroot -p123 --<span class="built_in">all</span>-databases &gt; <span class="built_in">all</span>.sql</span><br></pre></td></tr></table></figure>

<p><em><strong>*二、恢复逻辑备份*</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line">[root@egon backup]<span class="comment"># mysql -uroot -p123 &lt; /backup/all.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line">mysql&gt; use db1;</span><br><span class="line">mysql&gt; SET SQL_LOG_BIN=<span class="number">0</span>;</span><br><span class="line">mysql&gt; source /root/db1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#注：如果备份/恢复单个库时，可以修改sql文件</span></span><br><span class="line">DROP database <span class="keyword">if</span> exists school;</span><br><span class="line">create database school;</span><br><span class="line">use school;</span><br></pre></td></tr></table></figure>

<p><strong>三、备份&#x2F;恢复案例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库备份/恢复实验一：数据库损坏</span></span><br><span class="line">备份：</span><br><span class="line"><span class="number">1.</span> <span class="comment"># mysqldump -uroot -p123 --all-databases &gt; /backup/`date +%F`_all.sql</span></span><br><span class="line"><span class="number">2.</span> <span class="comment"># mysql -uroot -p123 -e &#x27;flush logs&#x27; //截断并产生新的binlog</span></span><br><span class="line"><span class="number">3.</span> 插入数据 //模拟服务器正常运行</span><br><span class="line"><span class="number">4.</span> mysql&gt; <span class="built_in">set</span> sql_log_bin=<span class="number">0</span>; //模拟服务器损坏</span><br><span class="line">mysql&gt; drop database db;</span><br><span class="line"></span><br><span class="line">恢复：</span><br><span class="line"><span class="number">1.</span> <span class="comment"># mysqlbinlog 最后一个binlog &gt; /backup/last_bin.log</span></span><br><span class="line"><span class="number">2.</span> mysql&gt; <span class="built_in">set</span> sql_log_bin=<span class="number">0</span>; </span><br><span class="line">mysql&gt; source /backup/<span class="number">2014</span>-02-13_<span class="built_in">all</span>.sql //恢复最近一次完全备份 </span><br><span class="line">mysql&gt; source /backup/last_bin.log //恢复最后个binlog文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库备份/恢复实验二：如果有误删除</span></span><br><span class="line">备份：</span><br><span class="line"><span class="number">1.</span> mysqldump -uroot -p123 --<span class="built_in">all</span>-databases &gt; /backup/`date +%F`_<span class="built_in">all</span>.sql</span><br><span class="line"><span class="number">2.</span> mysql -uroot -p123 -e <span class="string">&#x27;flush logs&#x27;</span> //截断并产生新的binlog</span><br><span class="line"><span class="number">3.</span> 插入数据 //模拟服务器正常运行</span><br><span class="line"><span class="number">4.</span> drop table db1.t1 //模拟误删除</span><br><span class="line"><span class="number">5.</span> 插入数据 //模拟服务器正常运行</span><br><span class="line"></span><br><span class="line">恢复：</span><br><span class="line"><span class="number">1.</span> <span class="comment"># mysqlbinlog 最后一个binlog --stop-position=260 &gt; /tmp/1.sql </span></span><br><span class="line"><span class="comment"># mysqlbinlog 最后一个binlog --start-position=900 &gt; /tmp/2.sql </span></span><br><span class="line"><span class="number">2.</span> mysql&gt; <span class="built_in">set</span> sql_log_bin=<span class="number">0</span>; </span><br><span class="line">mysql&gt; source /backup/<span class="number">2014</span>-02-13_<span class="built_in">all</span>.sql //恢复最近一次完全备份</span><br><span class="line">mysql&gt; source /tmp/<span class="number">1.</span>log //恢复最后个binlog文件</span><br><span class="line">mysql&gt; source /tmp/<span class="number">2.</span>log //恢复最后个binlog文件</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line"><span class="number">1.</span> 完全恢复到一个干净的环境（例如新的数据库或删除原有的数据库）</span><br><span class="line"><span class="number">2.</span> 恢复期间所有SQL语句不应该记录到binlog中</span><br></pre></td></tr></table></figure>

<p><em><strong>*四、实现自动化备份*</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">备份计划：</span><br><span class="line"><span class="number">1.</span> 什么时间 <span class="number">2</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2.</span> 对哪些数据库备份</span><br><span class="line"><span class="number">3.</span> 备份文件放的位置</span><br><span class="line"></span><br><span class="line">备份脚本：</span><br><span class="line">[root@egon ~]<span class="comment"># vim /mysql_back.sql</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">back_dir=/backup</span><br><span class="line">back_file=`date +%F`_<span class="built_in">all</span>.sql</span><br><span class="line">user=root</span><br><span class="line"><span class="keyword">pass</span>=<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d /backup ];then</span><br><span class="line">mkdir -p /backup</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份并截断日志</span></span><br><span class="line">mysqldump -u$&#123;user&#125; -p$&#123;<span class="keyword">pass</span>&#125; --events --<span class="built_in">all</span>-databases &gt; $&#123;back_dir&#125;/$&#123;back_file&#125;</span><br><span class="line">mysql -u$&#123;user&#125; -p$&#123;<span class="keyword">pass</span>&#125; -e <span class="string">&#x27;flush logs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只保留最近一周的备份</span></span><br><span class="line">cd $back_dir</span><br><span class="line">find . -mtime +<span class="number">7</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">手动测试：</span><br><span class="line">[root@egon ~]<span class="comment"># chmod a+x /mysql_back.sql </span></span><br><span class="line">[root@egon ~]<span class="comment"># chattr +i /mysql_back.sql</span></span><br><span class="line">[root@egon ~]<span class="comment"># /mysql_back.sql</span></span><br><span class="line"></span><br><span class="line">配置cron：</span><br><span class="line">[root@egon ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="number">2</span> * * * /mysql_back.sql</span><br></pre></td></tr></table></figure>

<p><strong>五、表的导出和导入</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT... INTO OUTFILE 导出文本文件</span><br><span class="line">示例：</span><br><span class="line">mysql&gt; SELECT * FROM school.student1</span><br><span class="line">INTO OUTFILE <span class="string">&#x27;student1.txt&#x27;</span></span><br><span class="line">FIELDS TERMINATED BY <span class="string">&#x27;,&#x27;</span> //定义字段分隔符</span><br><span class="line">OPTIONALLY ENCLOSED BY <span class="string">&#x27;”&#x27;</span> //定义字符串使用什么符号括起来</span><br><span class="line">LINES TERMINATED BY <span class="string">&#x27;\n&#x27;</span> ; //定义换行符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql 命令导出文本文件</span><br><span class="line">示例:</span><br><span class="line"><span class="comment"># mysql -u root -p123 -e &#x27;select * from student1.school&#x27; &gt; /tmp/student1.txt</span></span><br><span class="line"><span class="comment"># mysql -u root -p123 --xml -e &#x27;select * from student1.school&#x27; &gt; /tmp/student1.xml</span></span><br><span class="line"><span class="comment"># mysql -u root -p123 --html -e &#x27;select * from student1.school&#x27; &gt; /tmp/student1.html</span></span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE 导入文本文件</span><br><span class="line">mysql&gt; DELETE FROM student1;</span><br><span class="line">mysql&gt; LOAD DATA INFILE <span class="string">&#x27;/tmp/student1.txt&#x27;</span></span><br><span class="line">INTO TABLE school.student1</span><br><span class="line">FIELDS TERMINATED BY <span class="string">&#x27;,&#x27;</span></span><br><span class="line">OPTIONALLY ENCLOSED BY <span class="string">&#x27;”&#x27;</span></span><br><span class="line">LINES TERMINATED BY <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>报错：Variable ‘secure_file_priv’ is a read only</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可能会报错</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> db1.emp into outfile <span class="string">&#x27;C:\\db1.emp.txt&#x27;</span> fields terminated by <span class="string">&#x27;,&#x27;</span> lines terminated by <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">ERROR <span class="number">1238</span> (HY000): Variable <span class="string">&#x27;secure_file_priv&#x27;</span> <span class="keyword">is</span> a read only variable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库最关键的是数据，一旦数据库权限泄露，那么通过上述语句就可以轻松将数据导出到文件中然后下载拿走，因而mysql对此作了限制，只能将文件导出到指定目录</span></span><br><span class="line">在配置文件中</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv=<span class="string">&#x27;C:\\&#x27;</span> <span class="comment">#只能将数据导出到C:\\下</span></span><br><span class="line"></span><br><span class="line">重启mysql</span><br><span class="line">重新执行上述语句</span><br></pre></td></tr></table></figure>

<p><em><strong>*六、数据库迁移*</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">务必保证在相同版本之间迁移</span><br><span class="line"><span class="comment"># mysqldump -h 源IP -uroot -p123 --databases db1 | mysql -h 目标IP -uroot -p456</span></span><br></pre></td></tr></table></figure>

<h3 id="三-pymysql模块"><a href="#三-pymysql模块" class="headerlink" title="三 pymysql模块"></a>三 pymysql模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p><strong>一 链接、执行sql、关闭（游标）</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-0ecad411fee44008a38d8ad74af349de_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">user=<span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>).strip()</span><br><span class="line">pwd=<span class="built_in">input</span>(<span class="string">&#x27;密码: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor() <span class="comment">#执行完毕返回的结果集默认以元组显示</span></span><br><span class="line"><span class="comment">#cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo where name=&quot;%s&quot; and password=&quot;%s&quot;&#x27;</span> %(user,pwd) <span class="comment">#注意%s需要加引号</span></span><br><span class="line"><span class="built_in">print</span>(sql)</span><br><span class="line">res=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql查询成功的记录数目</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>二 execute()之sql注入</strong></p>
<p>注意：符号–会注释掉它之后的sql，正确的语法：–后至少有一个任意字符</p>
<p>根本原理：就根据程序的字符串拼接name&#x3D;’%s’，我们输入一个*<strong>xxx’ – haha*</strong>,用我们输入的xxx加’在程序中拼接成一个判断条件name&#x3D;’*<strong>xxx’ – haha*</strong>‘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最后那一个空格，在一条sql语句中如果遇到select * <span class="keyword">from</span> t1 where <span class="built_in">id</span> &gt; <span class="number">3</span> -- <span class="keyword">and</span> name=<span class="string">&#x27;egon&#x27;</span>;则--之后的条件被注释掉了</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、sql注入之：用户存在，绕过密码</span></span><br><span class="line">egon<span class="string">&#x27; -- 任意字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#2、sql注入之：用户不存在，绕过用户与密码</span></span><br><span class="line"><span class="string">xxx&#x27;</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span> -- 任意字符</span><br></pre></td></tr></table></figure>



<p><img src="https://pic2.zhimg.com/80/v2-7e693bfec8853740ed3d344102723171_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-d96619bb2e13f970947766a8fa76d586_720w.jpg" alt="img"></p>
<p><img src="https://pic3.zhimg.com/80/v2-f75e7408e0af88013f9b8f550957a512_720w.jpg" alt="img"></p>
<p>解决方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原来是我们对sql进行字符串拼接</span></span><br><span class="line"><span class="comment"># sql=&quot;select * from userinfo where name=&#x27;%s&#x27; and password=&#x27;%s&#x27;&quot; %(user,pwd)</span></span><br><span class="line"><span class="comment"># print(sql)</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改写为（execute帮我们做字符串拼接，我们无需且一定不能再为%s加引号了）</span></span><br><span class="line">sql=<span class="string">&quot;select * from userinfo where name=%s and password=%s&quot;</span> <span class="comment">#！！！注意%s需要去掉引号，因为pymysql会自动为我们加上</span></span><br><span class="line">res=cursor.execute(sql,[user,pwd]) <span class="comment">#pymysql模块自动帮我们解决sql注入的问题，只要我们按照pymysql的规矩来。</span></span><br></pre></td></tr></table></figure>

<p><strong>三 增、删、改：conn.commit()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line"><span class="comment"># sql=&#x27;insert into userinfo(name,password) values(&quot;root&quot;,&quot;123456&quot;);&#x27;</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql) #执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line"><span class="comment"># sql=&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql,(&quot;root&quot;,&quot;123456&quot;)) #执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line">res=cursor.executemany(sql,[(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>),(<span class="string">&quot;lhf&quot;</span>,<span class="string">&quot;12356&quot;</span>),(<span class="string">&quot;eee&quot;</span>,<span class="string">&quot;156&quot;</span>)]) <span class="comment">#执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p><strong>四 查：fetchone，fetchmany，fetchall</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-8094f598df5a07af99a762144606f5a3_720w.jpg" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo;&#x27;</span></span><br><span class="line">rows=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql影响成功的行数rows,将结果放入一个集合，等待被查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;absolute&#x27;) # 相对绝对位置移动</span></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;relative&#x27;) # 相对当前位置移动</span></span><br><span class="line">res1=cursor.fetchone()</span><br><span class="line">res2=cursor.fetchone()</span><br><span class="line">res3=cursor.fetchone()</span><br><span class="line">res4=cursor.fetchmany(<span class="number">2</span>)</span><br><span class="line">res5=cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"><span class="built_in">print</span>(res3)</span><br><span class="line"><span class="built_in">print</span>(res4)</span><br><span class="line"><span class="built_in">print</span>(res5)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s rows in set (0.00 sec)&#x27;</span> %rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(2, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(3, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">((4, &#x27;root&#x27;, &#x27;123456&#x27;), (5, &#x27;root&#x27;, &#x27;123456&#x27;))</span></span><br><span class="line"><span class="string">((6, &#x27;root&#x27;, &#x27;123456&#x27;), (7, &#x27;lhf&#x27;, &#x27;12356&#x27;), (8, &#x27;eee&#x27;, &#x27;156&#x27;))</span></span><br><span class="line"><span class="string">rows in set (0.00 sec)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>五 获取插入的最后一条数据的自增ID</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(&quot;xxx&quot;,&quot;123&quot;);&#x27;</span></span><br><span class="line">rows=cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(cursor.lastrowid) <span class="comment">#在插入语句后查看</span></span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>45-ORM框架</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/45_ORM%E6%A1%86%E6%9E%B6SQLAlchemy/</url>
    <content><![CDATA[<h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h2><p>SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p>
<p><strong>1、安装</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br></pre></td></tr></table></figure>

<p><strong>2、架构与流程</strong></p>
<p><strong><img src="https://pic2.zhimg.com/80/v2-3958cd0e7235308eb6cd19f9e2e8d1ad_720w.jpg" alt="img"></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、使用者通过ORM对象提交命令</span></span><br><span class="line"><span class="comment">#2、将命令交给SQLAlchemy Core（Schema/Types  SQL Expression Language）转换成SQL</span></span><br><span class="line"><span class="comment">#3、使用 Engine/ConnectionPooling/Dialect 进行数据库操作</span></span><br><span class="line"><span class="comment">#3.1、匹配使用者事先配置好的egine</span></span><br><span class="line"><span class="comment">#3.2、egine从连接池中取出一个链接</span></span><br><span class="line"><span class="comment">#3.3、基于该链接通过Dialect调用DB API，将SQL转交给它去执行</span></span><br></pre></td></tr></table></figure>

<p><strong>！！！上述流程分析，可以大致分为两个阶段！！！：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一个阶段（流程1-2）：将SQLAlchemy的对象换成可执行的sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个阶段（流程3）：将sql语句交给数据库执行</span></span><br></pre></td></tr></table></figure>

<p><strong>如果我们不依赖于SQLAlchemy的转换而自己写好sql语句，那是不是意味着可以直接从第二个阶段开始执行了，事实上正是如此，我们完全可以只用SQLAlchemy执行纯sql语句，如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 准备</span></span><br><span class="line"><span class="comment"># 需要事先安装好pymysql</span></span><br><span class="line"><span class="comment"># 需要事先创建好数据库:create database db1 charset utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 创建引擎</span></span><br><span class="line">egine=create_engine(<span class="string">&#x27;mysql+pymysql://root@127.0.0.1/db1?charset=utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 执行sql</span></span><br><span class="line"><span class="comment"># egine.execute(&#x27;create table if not EXISTS t1(id int PRIMARY KEY auto_increment,name char(32));&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cur=egine.execute(&#x27;insert into t1 values(%s,%s);&#x27;,[(1,&quot;egon1&quot;),(2,&quot;egon2&quot;),(3,&quot;egon3&quot;)]) #按位置传值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cur=egine.execute(&#x27;insert into t1 values(%(id)s,%(name)s);&#x27;,name=&#x27;egon4&#x27;,id=4) #按关键字传值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 新插入行的自增id</span></span><br><span class="line"><span class="comment"># print(cur.lastrowid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 查询</span></span><br><span class="line">cur=egine.execute(<span class="string">&#x27;select * from t1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cur.fetchone() <span class="comment">#获取一行</span></span><br><span class="line">cur.fetchmany(<span class="number">2</span>) <span class="comment">#获取多行</span></span><br><span class="line">cur.fetchall() <span class="comment">#获取所有行</span></span><br></pre></td></tr></table></figure>

<p><strong>3、DB API</strong></p>
<p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、MySQL-Python</span></span><br><span class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、pymysql</span></span><br><span class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、MySQL-Connector</span></span><br><span class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、cx_Oracle</span></span><br><span class="line">    oracle+cx_oracle://user:<span class="keyword">pass</span>@host:port/dbname[?key=value&amp;key=value...]</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://link.zhihu.com/?target=http://docs.sqlalchemy.org/en/latest/dialects/index.html">更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html</a></strong></p>
<h3 id="二-创建表"><a href="#二-创建表" class="headerlink" title="二 创建表"></a>二 创建表</h3><p>ORM中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类===&gt;表</span></span><br><span class="line"><span class="comment">#对象==&gt;表中的一行记录</span></span><br></pre></td></tr></table></figure>

<p>四张表:业务线,服务,用户,角色，利用ORM创建出它们，并建立好它们直接的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,Integer,String,DateTime,Enum,ForeignKey,UniqueConstraint,ForeignKeyConstraint,Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">egine=create_engine(<span class="string">&#x27;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&#x27;</span>,max_overflow=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Base=declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单表:业务线</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;business&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    bname=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多对一:多个服务可以属于一个业务线,多个业务线不能包含同一个服务</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;service&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    sname=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">    ip=Column(String(<span class="number">15</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    port=Column(Integer,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    business_id=Column(Integer,ForeignKey(<span class="string">&#x27;business.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    __table_args__=(</span><br><span class="line">        UniqueConstraint(ip,port,name=<span class="string">&#x27;uix_ip_port&#x27;</span>),</span><br><span class="line">        Index(<span class="string">&#x27;ix_id_sname&#x27;</span>,<span class="built_in">id</span>,sname)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">#一对一:一种角色只能管理一条业务线,一条业务线只能被一种角色管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;role&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    rname=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">    priv=Column(String(<span class="number">64</span>),nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    business_id=Column(Integer,ForeignKey(<span class="string">&#x27;business.id&#x27;</span>),unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多对多:多个用户可以是同一个role,多个role可以包含同一个用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    uname=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users2Role</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;users2role&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    uid=Column(Integer,ForeignKey(<span class="string">&#x27;users.id&#x27;</span>))</span><br><span class="line">    rid=Column(Integer,ForeignKey(<span class="string">&#x27;role.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    __table_args__=(</span><br><span class="line">        UniqueConstraint(uid,rid,name=<span class="string">&#x27;uix_uid_rid&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    Base.metadata.create_all(egine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    Base.metadata.drop_all(egine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure>

<p>注：设置外键的另一种方式 ForeignKeyConstraint([‘other_id’], [‘othertable.other_id’])</p>
<h3 id="三-增删改查"><a href="#三-增删改查" class="headerlink" title="三 增删改查"></a>三 增删改查</h3><p><strong>表结构</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,Integer,String,ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">egine=create_engine(<span class="string">&#x27;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&#x27;</span>,max_overflow=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Base=declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多对一:假设多个员工可以属于一个部门,而多个部门不能有同一个员工(只有创建公司才把员工当骆驼用,一个员工身兼数职)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;dep&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    dname=Column(String(<span class="number">64</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;emp&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    ename=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">    dep_id=Column(Integer,ForeignKey(<span class="string">&#x27;dep.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    Base.metadata.create_all(egine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    Base.metadata.drop_all(egine)</span><br><span class="line"></span><br><span class="line">drop_db()</span><br><span class="line">init_db()</span><br><span class="line">Session=sessionmaker(bind=egine)</span><br><span class="line">session=Session()</span><br></pre></td></tr></table></figure>

<p><strong>增</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增</span></span><br><span class="line">row_obj=Dep(dname=<span class="string">&#x27;销售&#x27;</span>) <span class="comment">#按关键字传参,无需指定id,因其是自增长的</span></span><br><span class="line">session.add(row_obj)</span><br><span class="line">session.add_all([</span><br><span class="line">    Dep(dname=<span class="string">&#x27;技术&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;运营&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;人事&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p><strong>删</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删</span></span><br><span class="line">session.query(Dep).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span> &gt; <span class="number">3</span>).delete()</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p><strong>改</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改</span></span><br><span class="line">session.query(Dep).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span> &gt; <span class="number">0</span>).update(&#123;<span class="string">&#x27;dname&#x27;</span>:<span class="string">&#x27;哇哈哈&#x27;</span>&#125;)</span><br><span class="line">session.query(Dep).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span> &gt; <span class="number">0</span>).update(&#123;<span class="string">&#x27;dname&#x27;</span>:Dep.dname+<span class="string">&#x27;_SB&#x27;</span>&#125;,synchronize_session=<span class="literal">False</span>)</span><br><span class="line">session.query(Dep).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span> &gt; <span class="number">0</span>).update(&#123;<span class="string">&#x27;id&#x27;</span>:Dep.<span class="built_in">id</span>*<span class="number">100</span>&#125;,synchronize_session=<span class="string">&#x27;evaluate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p><strong>查</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查所有,取所有字段</span></span><br><span class="line">res=session.query(Dep).<span class="built_in">all</span>() <span class="comment">#for row in res:print(row.id,row.dname)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查所有,取指定字段</span></span><br><span class="line">res=session.query(Dep.dname).order_by(Dep.<span class="built_in">id</span>).<span class="built_in">all</span>() <span class="comment">#for row in res:print(row.dname)</span></span><br><span class="line"></span><br><span class="line">res=session.query(Dep.dname).first()</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># (&#x27;哇哈哈_SB&#x27;,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤查</span></span><br><span class="line">res=session.query(Dep).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span> &gt; <span class="number">1</span>,Dep.<span class="built_in">id</span> &lt;<span class="number">1000</span>) <span class="comment">#逗号分隔,默认为and</span></span><br><span class="line"><span class="built_in">print</span>([(row.<span class="built_in">id</span>,row.dname) <span class="keyword">for</span> row <span class="keyword">in</span> res])</span><br></pre></td></tr></table></figure>

<h3 id="四-其他查询相关"><a href="#四-其他查询相关" class="headerlink" title="四 其他查询相关"></a>四 其他查询相关</h3><p><strong>一 准备表和数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,Integer,String,ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">egine=create_engine(<span class="string">&#x27;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&#x27;</span>,max_overflow=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Base=declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多对一:假设多个员工可以属于一个部门,而多个部门不能有同一个员工(只有创建公司才把员工当骆驼用,一个员工身兼数职)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;dep&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    dname=Column(String(<span class="number">64</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;emp&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    ename=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">    dep_id=Column(Integer,ForeignKey(<span class="string">&#x27;dep.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    Base.metadata.create_all(egine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    Base.metadata.drop_all(egine)</span><br><span class="line"></span><br><span class="line">drop_db()</span><br><span class="line">init_db()</span><br><span class="line">Session=sessionmaker(bind=egine)</span><br><span class="line">session=Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">session.add_all([</span><br><span class="line">    Dep(dname=<span class="string">&#x27;技术&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;销售&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;运营&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;人事&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">session.add_all([</span><br><span class="line">    Emp(ename=<span class="string">&#x27;林海峰&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李杰&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;武配齐&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;元昊&#x27;</span>,dep_id=<span class="number">2</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李钢弹&#x27;</span>,dep_id=<span class="number">3</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;张二丫&#x27;</span>,dep_id=<span class="number">4</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李坦克&#x27;</span>,dep_id=<span class="number">2</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;王大炮&#x27;</span>,dep_id=<span class="number">4</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;牛榴弹&#x27;</span>,dep_id=<span class="number">3</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p><strong>二 条件、通配符、limit、排序、分组、连表、组合</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一、条件</span></span><br><span class="line">sql=session.query(Emp).filter_by(ename=<span class="string">&#x27;林海峰&#x27;</span>) <span class="comment">#filter_by只能传参数:什么等于什么</span></span><br><span class="line">res=sql.<span class="built_in">all</span>() <span class="comment">#sql语句的执行结果</span></span><br><span class="line"></span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span>&gt;<span class="number">0</span>,Emp.ename == <span class="string">&#x27;林海峰&#x27;</span>).<span class="built_in">all</span>() <span class="comment">#filter内传的是表达式,逗号分隔,默认为and,</span></span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span>.between(<span class="number">1</span>,<span class="number">3</span>),Emp.ename == <span class="string">&#x27;林海峰&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">101</span>]),Emp.ename == <span class="string">&#x27;林海峰&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(~Emp.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">101</span>]),Emp.ename == <span class="string">&#x27;林海峰&#x27;</span>) <span class="comment">#~代表取反,转换成sql就是关键字not</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_,or_</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(and_(Emp.<span class="built_in">id</span> &gt; <span class="number">0</span>,Emp.ename==<span class="string">&#x27;林海峰&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(or_(Emp.<span class="built_in">id</span> &lt; <span class="number">2</span>,Emp.ename==<span class="string">&#x27;功夫熊猫&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Emp.dep_id == <span class="number">3</span>,</span><br><span class="line">        and_(Emp.<span class="built_in">id</span> &gt; <span class="number">1</span>,Emp.ename==<span class="string">&#x27;功夫熊猫&#x27;</span>),</span><br><span class="line">        Emp.ename != <span class="string">&#x27;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#二、通配符</span></span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(Emp.ename.like(<span class="string">&#x27;%海_%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).<span class="built_in">filter</span>(~Emp.ename.like(<span class="string">&#x27;%海_%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#三、limit</span></span><br><span class="line">res=session.query(Emp)[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#四、排序</span></span><br><span class="line">res=session.query(Emp).order_by(Emp.dep_id.desc()).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(Emp).order_by(Emp.dep_id.desc(),Emp.<span class="built_in">id</span>.asc()).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#五、分组</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">res=session.query(Emp.dep_id).group_by(Emp.dep_id).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Emp.dep_id),</span><br><span class="line">    func.<span class="built_in">min</span>(Emp.dep_id),</span><br><span class="line">    func.<span class="built_in">sum</span>(Emp.dep_id),</span><br><span class="line">    func.avg(Emp.dep_id),</span><br><span class="line">    func.count(Emp.dep_id),</span><br><span class="line">).group_by(Emp.dep_id).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res=session.query(</span><br><span class="line">    Emp.dep_id,</span><br><span class="line">    func.count(<span class="number">1</span>),</span><br><span class="line">).group_by(Emp.dep_id).having(func.count(<span class="number">1</span>) &gt; <span class="number">2</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#六、连表</span></span><br><span class="line"><span class="comment">#笛卡尔积</span></span><br><span class="line">res=session.query(Emp,Dep).<span class="built_in">all</span>() <span class="comment">#select * from emp,dep;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#where条件</span></span><br><span class="line">res=session.query(Emp,Dep).<span class="built_in">filter</span>(Emp.dep_id==Dep.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># for row in res:</span></span><br><span class="line"><span class="comment">#     emp_tb=row[0]</span></span><br><span class="line"><span class="comment">#     dep_tb=row[1]</span></span><br><span class="line"><span class="comment">#     print(emp_tb.id,emp_tb.ename,dep_tb.id,dep_tb.dname)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内连接</span></span><br><span class="line">res=session.query(Emp).join(Dep)</span><br><span class="line"><span class="comment">#join默认为内连接,SQLAlchemy会自动帮我们通过foreign key字段去找关联关系</span></span><br><span class="line"><span class="comment">#但是上述查询的结果均为Emp表的字段,这样链表还有毛线意义,于是我们修改为</span></span><br><span class="line">res=session.query(Emp.<span class="built_in">id</span>,Emp.ename,Emp.dep_id,Dep.dname).join(Dep).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#左连接:isouter=True</span></span><br><span class="line">res=session.query(Emp.<span class="built_in">id</span>,Emp.ename,Emp.dep_id,Dep.dname).join(Dep,isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#右连接:同左连接,只是把两个表的位置换一下</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#七、组合</span></span><br><span class="line">q1=session.query(Emp.<span class="built_in">id</span>,Emp.ename).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span> &gt; <span class="number">0</span>,Emp.<span class="built_in">id</span> &lt; <span class="number">5</span>)</span><br><span class="line">q2=session.query(Emp.<span class="built_in">id</span>,Emp.ename).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Emp.ename.like(<span class="string">&#x27;%海%&#x27;</span>),</span><br><span class="line">        Emp.ename.like(<span class="string">&#x27;%昊%&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">res1=q1.union(q2) <span class="comment">#组合+去重</span></span><br><span class="line">res2=q1.union_all(q2) <span class="comment">#组合,不去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> q1.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> q2.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> res1.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> res2.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;, &#x27;元昊&#x27;, &#x27;林海峰&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>三 子查询</strong></p>
<p><strong>有三种形式的子查询，注意：子查询的sql必须用括号包起来,尤其在形式三中需要注意这一点</strong></p>
<p>形式一:子查询当做一张表来用,调用subquery()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例:查出id大于2的员工,当做子查询的表使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原生SQL:</span></span><br><span class="line"><span class="comment"># select * from (select * from emp where id &gt; 2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ORM:</span></span><br><span class="line">res=session.query(</span><br><span class="line">    session.query(Emp).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span> &gt; <span class="number">8</span>).subquery()</span><br><span class="line">).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<p>形式二:子查询当做in的范围用,调用in_</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例:#查出销售部门的员工姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原生SQL:</span></span><br><span class="line"><span class="comment"># select ename from emp where dep_id in (select id from dep where dname=&#x27;销售&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ORM:</span></span><br><span class="line">res=session.query(Emp.ename).<span class="built_in">filter</span>(Emp.dep_id.in_(</span><br><span class="line">    session.query(Dep.<span class="built_in">id</span>).filter_by(dname=<span class="string">&#x27;销售&#x27;</span>), <span class="comment">#传的是参数</span></span><br><span class="line">    <span class="comment"># session.query(Dep.id).filter(Dep.dname==&#x27;销售&#x27;) #传的是表达式</span></span><br><span class="line">)).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<p>形式三:子查询当做select后的字段,调用as_scalar()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例:查询所有的员工姓名与部门名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原生SQL:</span></span><br><span class="line"><span class="comment"># select ename as 员工姓名,(select dname from dep where id = emp.dep_id) as 部门名 from emp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ORM:</span></span><br><span class="line">sub_sql=session.query(Dep.dname).<span class="built_in">filter</span>(Dep.<span class="built_in">id</span>==Emp.dep_id) <span class="comment">#SELECT dep.dname FROM dep, emp WHERE dep.id = emp.dep_id</span></span><br><span class="line">sub_sql.as_scalar() <span class="comment">#as_scalar的功能就是把上面的sub_sql加上了括号</span></span><br><span class="line"></span><br><span class="line">res=session.query(Emp.ename,sub_sql.as_scalar()).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<h3 id="五-正查、反查"><a href="#五-正查、反查" class="headerlink" title="五 正查、反查"></a>五 正查、反查</h3><p><strong>一 表修改</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,Integer,String,ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker,relationship</span><br><span class="line"></span><br><span class="line">egine=create_engine(<span class="string">&#x27;mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8&#x27;</span>,max_overflow=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Base=declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;dep&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    dname=Column(String(<span class="number">64</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__=<span class="string">&#x27;emp&#x27;</span></span><br><span class="line">    <span class="built_in">id</span>=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    ename=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">    dep_id=Column(Integer,ForeignKey(<span class="string">&#x27;dep.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#在ForeignKey所在的类内添加relationship的字段,注意:</span></span><br><span class="line">    <span class="comment">#1:Dep是类名</span></span><br><span class="line">    <span class="comment">#2:depart字段不会再数据库表中生成字段</span></span><br><span class="line">    <span class="comment">#3:depart用于Emp表查询Dep表(正向查询),而xxoo用于Dep表查询Emp表(反向查询),</span></span><br><span class="line">    depart=relationship(<span class="string">&#x27;Dep&#x27;</span>,backref=<span class="string">&#x27;xxoo&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    Base.metadata.create_all(egine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    Base.metadata.drop_all(egine)</span><br><span class="line"></span><br><span class="line">drop_db()</span><br><span class="line">init_db()</span><br><span class="line">Session=sessionmaker(bind=egine)</span><br><span class="line">session=Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">session.add_all([</span><br><span class="line">    Dep(dname=<span class="string">&#x27;技术&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;销售&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;运营&#x27;</span>),</span><br><span class="line">    Dep(dname=<span class="string">&#x27;人事&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">session.add_all([</span><br><span class="line">    Emp(ename=<span class="string">&#x27;林海峰&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李杰&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;武配齐&#x27;</span>,dep_id=<span class="number">1</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;元昊&#x27;</span>,dep_id=<span class="number">2</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李钢弹&#x27;</span>,dep_id=<span class="number">3</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;张二丫&#x27;</span>,dep_id=<span class="number">4</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;李坦克&#x27;</span>,dep_id=<span class="number">2</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;王大炮&#x27;</span>,dep_id=<span class="number">4</span>),</span><br><span class="line">    Emp(ename=<span class="string">&#x27;牛榴弹&#x27;</span>,dep_id=<span class="number">3</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<p><strong>二 标准连表查询</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例:查询员工名与其部门名</span></span><br><span class="line">res=session.query(Emp.ename,Dep.dname).join(Dep) <span class="comment">#迭代器</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(row[<span class="number">0</span>],row[<span class="number">1</span>]) <span class="comment">#等同于print(row.ename,row.dname)</span></span><br></pre></td></tr></table></figure>

<p><strong>三 基于relationship的正查、反查</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQLAlchemy的relationship在内部帮我们做好表的链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名与其部门名(正向查)</span></span><br><span class="line">res=session.query(Emp)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(row.ename,row.<span class="built_in">id</span>,row.depart.dname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门名以及该部门下的员工(反向查)</span></span><br><span class="line">res=session.query(Dep)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> res:</span><br><span class="line">    <span class="comment"># print(row.dname,row.xxoo)</span></span><br><span class="line">    <span class="built_in">print</span>(row.dname,[r.ename <span class="keyword">for</span> r <span class="keyword">in</span> row.xxoo])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>44-数据库（六）</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/44_%E8%A7%86%E5%9B%BE%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="一-视图"><a href="#一-视图" class="headerlink" title="一 视图"></a>一 视图</h3><p>视图是一个虚拟表（非真实存在），其本质是【根据SQL语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，可以将该结果集当做表来使用。</p>
<p>使用视图我们可以把查询过程中的临时表摘出来，用视图去实现，这样以后再想操作该临时表的数据时就无需重写复杂的sql了，直接去视图中查找即可，但视图有明显地效率问题，并且视图是存放在数据库中的，如果我们程序中使用的sql过分依赖数据库中的视图，即强耦合，那就意味着扩展sql极为不便，因此并不推荐使用</p>
<p>临时表应用举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#两张有关系的表</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> course;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   <span class="number">1</span> | 生物   |          <span class="number">1</span> |</span><br><span class="line">|   <span class="number">2</span> | 物理   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">3</span> | 体育   |          <span class="number">3</span> |</span><br><span class="line">|   <span class="number">4</span> | 美术   |          <span class="number">2</span> |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> teacher;</span><br><span class="line">+-----+-----------------+</span><br><span class="line">| tid | tname           |</span><br><span class="line">+-----+-----------------+</span><br><span class="line">|   <span class="number">1</span> | 张磊老师        |</span><br><span class="line">|   <span class="number">2</span> | 李平老师        |</span><br><span class="line">|   <span class="number">3</span> | 刘海燕老师      |</span><br><span class="line">|   <span class="number">4</span> | 朱云海老师      |</span><br><span class="line">|   <span class="number">5</span> | 李杰老师        |</span><br><span class="line">+-----+-----------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询李平老师教授的课程名</span></span><br><span class="line">mysql&gt; select cname <span class="keyword">from</span> course where teacher_id = (select tid <span class="keyword">from</span> teacher where tname=<span class="string">&#x27;李平老师&#x27;</span>);</span><br><span class="line">+--------+</span><br><span class="line">| cname  |</span><br><span class="line">+--------+</span><br><span class="line">| 物理   |</span><br><span class="line">| 美术   |</span><br><span class="line">+--------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#子查询出临时表，作为teacher_id等判断依据</span></span><br><span class="line">select tid <span class="keyword">from</span> teacher where tname=<span class="string">&#x27;李平老师&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>一 创建视图</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法：CREATE VIEW 视图名称 AS  SQL语句</span></span><br><span class="line">create view teacher_view <span class="keyword">as</span> select tid <span class="keyword">from</span> teacher where tname=<span class="string">&#x27;李平老师&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#于是查询李平老师教授的课程名的sql可以改写为</span></span><br><span class="line">mysql&gt; select cname <span class="keyword">from</span> course where teacher_id = (select tid <span class="keyword">from</span> teacher_view);</span><br><span class="line">+--------+</span><br><span class="line">| cname  |</span><br><span class="line">+--------+</span><br><span class="line">| 物理   |</span><br><span class="line">| 美术   |</span><br><span class="line">+--------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#！！！注意注意注意：</span></span><br><span class="line"><span class="comment">#1. 使用视图以后就无需每次都重写子查询的sql，但是这么效率并不高，还不如我们写子查询的效率高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 而且有一个致命的问题：视图是存放到数据库里的，如果我们程序中的sql过分依赖于数据库中存放的视图，那么意味着，一旦sql需要修改且涉及到视图的部分，则必须去数据库中进行修改，而通常在公司中数据库有专门的DBA负责，你要想完成修改，必须付出大量的沟通成本DBA可能才会帮你完成修改，极其地不方便</span></span><br></pre></td></tr></table></figure>

<p><strong>二 使用视图</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改视图，原始表也跟着改</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> course;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   <span class="number">1</span> | 生物   |          <span class="number">1</span> |</span><br><span class="line">|   <span class="number">2</span> | 物理   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">3</span> | 体育   |          <span class="number">3</span> |</span><br><span class="line">|   <span class="number">4</span> | 美术   |          <span class="number">2</span> |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create view course_view <span class="keyword">as</span> select * <span class="keyword">from</span> course; <span class="comment">#创建表course的视图</span></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.52</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> course_view;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   <span class="number">1</span> | 生物   |          <span class="number">1</span> |</span><br><span class="line">|   <span class="number">2</span> | 物理   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">3</span> | 体育   |          <span class="number">3</span> |</span><br><span class="line">|   <span class="number">4</span> | 美术   |          <span class="number">2</span> |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update course_view <span class="built_in">set</span> cname=<span class="string">&#x27;xxx&#x27;</span>; <span class="comment">#更新视图中的数据</span></span><br><span class="line">Query OK, <span class="number">4</span> rows affected (<span class="number">0.04</span> sec)</span><br><span class="line">Rows matched: <span class="number">4</span>  Changed: <span class="number">4</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into course_view values(<span class="number">5</span>,<span class="string">&#x27;yyy&#x27;</span>,<span class="number">2</span>); <span class="comment">#往视图中插入数据</span></span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> course; <span class="comment">#发现原始表的记录也跟着修改了</span></span><br><span class="line">+-----+-------+------------+</span><br><span class="line">| cid | cname | teacher_id |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">|   <span class="number">1</span> | xxx   |          <span class="number">1</span> |</span><br><span class="line">|   <span class="number">2</span> | xxx   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">3</span> | xxx   |          <span class="number">3</span> |</span><br><span class="line">|   <span class="number">4</span> | xxx   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">5</span> | yyy   |          <span class="number">2</span> |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>我们不应该修改视图中的记录，而且在涉及多个表的情况下是根本无法修改视图中的记录的，如下图</p>
<p><img src="https://pic4.zhimg.com/80/v2-fa5be8e9a1447a73fee8484d77811c9f_720w.jpg" alt="img"></p>
<p><strong>三 修改视图</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：ALTER VIEW 视图名称 AS SQL语句</span><br><span class="line">mysql&gt; alter view teacher_view <span class="keyword">as</span> select * <span class="keyword">from</span> course where cid&gt;<span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> teacher_view;</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">| cid | cname | teacher_id |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">|   <span class="number">4</span> | xxx   |          <span class="number">2</span> |</span><br><span class="line">|   <span class="number">5</span> | yyy   |          <span class="number">2</span> |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>四 删除视图</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：DROP VIEW 视图名称</span><br><span class="line"></span><br><span class="line">DROP VIEW teacher_view</span><br></pre></td></tr></table></figure>

<h3 id="二-触发器"><a href="#二-触发器" class="headerlink" title="二 触发器"></a>二 触发器</h3><p>使用触发器可以定制用户对表进行【增、删、改】操作时前后的行为，注意：没有查询</p>
<p><strong>一 创建触发器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入前</span></span><br><span class="line">CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入后</span></span><br><span class="line">CREATE TRIGGER tri_after_insert_tb1 AFTER INSERT ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除前</span></span><br><span class="line">CREATE TRIGGER tri_before_delete_tb1 BEFORE DELETE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后</span></span><br><span class="line">CREATE TRIGGER tri_after_delete_tb1 AFTER DELETE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新前</span></span><br><span class="line">CREATE TRIGGER tri_before_update_tb1 BEFORE UPDATE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新后</span></span><br><span class="line">CREATE TRIGGER tri_after_update_tb1 AFTER UPDATE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>插入后触发触发器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#准备表</span></span><br><span class="line">CREATE TABLE cmd (</span><br><span class="line">    <span class="built_in">id</span> INT PRIMARY KEY auto_increment,</span><br><span class="line">    USER CHAR (<span class="number">32</span>),</span><br><span class="line">    priv CHAR (<span class="number">10</span>),</span><br><span class="line">    cmd CHAR (<span class="number">64</span>),</span><br><span class="line">    sub_time datetime, <span class="comment">#提交时间</span></span><br><span class="line">    success enum (<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>) <span class="comment">#0代表执行失败</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE errlog (</span><br><span class="line">    <span class="built_in">id</span> INT PRIMARY KEY auto_increment,</span><br><span class="line">    err_cmd CHAR (<span class="number">64</span>),</span><br><span class="line">    err_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建触发器</span></span><br><span class="line">delimiter //</span><br><span class="line">CREATE TRIGGER tri_after_insert_cmd AFTER INSERT ON cmd FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    IF NEW.success = <span class="string">&#x27;no&#x27;</span> THEN <span class="comment">#等值判断只有一个等号</span></span><br><span class="line">            INSERT INTO errlog(err_cmd, err_time) VALUES(NEW.cmd, NEW.sub_time) ; <span class="comment">#必须加分号</span></span><br><span class="line">      END IF ; <span class="comment">#必须加分号</span></span><br><span class="line">END//</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#往表cmd中插入记录，触发触发器，根据IF的条件决定是否插入错误日志</span></span><br><span class="line">INSERT INTO cmd (</span><br><span class="line">    USER,</span><br><span class="line">    priv,</span><br><span class="line">    cmd,</span><br><span class="line">    sub_time,</span><br><span class="line">    success</span><br><span class="line">)</span><br><span class="line">VALUES</span><br><span class="line">    (<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;0755&#x27;</span>,<span class="string">&#x27;ls -l /etc&#x27;</span>,NOW(),<span class="string">&#x27;yes&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;0755&#x27;</span>,<span class="string">&#x27;cat /etc/passwd&#x27;</span>,NOW(),<span class="string">&#x27;no&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;0755&#x27;</span>,<span class="string">&#x27;useradd xxx&#x27;</span>,NOW(),<span class="string">&#x27;no&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;0755&#x27;</span>,<span class="string">&#x27;ps aux&#x27;</span>,NOW(),<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询错误日志，发现有两条</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> errlog;</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line">| <span class="built_in">id</span> | err_cmd         | err_time            |</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> | cat /etc/passwd | <span class="number">2017</span>-09-<span class="number">14</span> <span class="number">22</span>:<span class="number">18</span>:<span class="number">48</span> |</span><br><span class="line">|  <span class="number">2</span> | useradd xxx     | <span class="number">2017</span>-09-<span class="number">14</span> <span class="number">22</span>:<span class="number">18</span>:<span class="number">48</span> |</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>特别的：NEW表示即将插入的数据行，OLD表示即将删除的数据行。</strong></p>
<p><strong>二 使用触发器</strong></p>
<p>触发器无法由用户直接调用，而知由于对表的【增&#x2F;删&#x2F;改】操作被动引发的。</p>
<p><strong>三 删除触发器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop trigger tri_after_insert_cmd;</span><br></pre></td></tr></table></figure>

<h3 id="三-事务"><a href="#三-事务" class="headerlink" title="三 事务"></a>三 事务</h3><p>事务用于将某些操作的多个SQL作为原子性操作，一旦有某一个出现错误，即可回滚到原来的状态，从而保证数据库数据完整性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line"><span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">name char(<span class="number">32</span>),</span><br><span class="line">balance <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into user(name,balance)</span><br><span class="line">values</span><br><span class="line">(<span class="string">&#x27;wsb&#x27;</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">&#x27;egon&#x27;</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">&#x27;ysb&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#原子操作</span></span><br><span class="line">start transaction;</span><br><span class="line">update user <span class="built_in">set</span> balance=<span class="number">900</span> where name=<span class="string">&#x27;wsb&#x27;</span>; <span class="comment">#买支付100元</span></span><br><span class="line">update user <span class="built_in">set</span> balance=<span class="number">1010</span> where name=<span class="string">&#x27;egon&#x27;</span>; <span class="comment">#中介拿走10元</span></span><br><span class="line">update user <span class="built_in">set</span> balance=<span class="number">1090</span> where name=<span class="string">&#x27;ysb&#x27;</span>; <span class="comment">#卖家拿到90元</span></span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"><span class="comment">#出现异常，回滚到初始状态</span></span><br><span class="line">start transaction;</span><br><span class="line">update user <span class="built_in">set</span> balance=<span class="number">900</span> where name=<span class="string">&#x27;wsb&#x27;</span>; <span class="comment">#买支付100元</span></span><br><span class="line">update user <span class="built_in">set</span> balance=<span class="number">1010</span> where name=<span class="string">&#x27;egon&#x27;</span>; <span class="comment">#中介拿走10元</span></span><br><span class="line">uppdate user <span class="built_in">set</span> balance=<span class="number">1090</span> where name=<span class="string">&#x27;ysb&#x27;</span>; <span class="comment">#卖家拿到90元,出现异常没有拿到</span></span><br><span class="line">rollback;</span><br><span class="line">commit;</span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> user;</span><br><span class="line">+----+------+---------+</span><br><span class="line">| <span class="built_in">id</span> | name | balance |</span><br><span class="line">+----+------+---------+</span><br><span class="line">|  <span class="number">1</span> | wsb  |    <span class="number">1000</span> |</span><br><span class="line">|  <span class="number">2</span> | egon |    <span class="number">1000</span> |</span><br><span class="line">|  <span class="number">3</span> | ysb  |    <span class="number">1000</span> |</span><br><span class="line">+----+------+---------+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="四-存储过程"><a href="#四-存储过程" class="headerlink" title="四 存储过程"></a>四 存储过程</h3><p><strong>一 介绍</strong></p>
<p>存储过程包含了一系列可执行的sql语句，存储过程存放于MySQL中，通过调用它的名字可以执行其内部的一堆sql</p>
<p>使用存储过程的优点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 用于替代程序写的SQL语句，实现程序与sql解耦</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 基于网络传输，传别名的数据量小，而直接传sql数据量大</span></span><br></pre></td></tr></table></figure>

<p>使用存储过程的缺点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 程序员扩展功能不方便</span></span><br></pre></td></tr></table></figure>

<p><strong>补充：程序与数据库结合使用的三种方式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一：</span></span><br><span class="line">    MySQL：存储过程</span><br><span class="line">    程序：调用存储过程</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line">    MySQL：</span><br><span class="line">    程序：纯SQL语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三：</span></span><br><span class="line">    MySQL:</span><br><span class="line">    程序：类和对象，即ORM（本质还是纯SQL语句）</span><br></pre></td></tr></table></figure>

<p><strong>二 创建简单存储过程（无参）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create procedure p1()</span><br><span class="line">BEGIN</span><br><span class="line">    select * <span class="keyword">from</span> blog;</span><br><span class="line">    INSERT into blog(name,sub_time) values(<span class="string">&quot;xxx&quot;</span>,now());</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用</span></span><br><span class="line">call p1() </span><br><span class="line"></span><br><span class="line"><span class="comment">#在python中基于pymysql调用</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p1&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p><strong>三 创建存储过程（有参）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于存储过程，可以接收参数，其参数有三类：</span><br><span class="line"></span><br><span class="line"><span class="comment">#in          仅用于传入参数用</span></span><br><span class="line"><span class="comment">#out        仅用于返回值用</span></span><br><span class="line"><span class="comment">#inout     既可以传入又可以当作返回值</span></span><br></pre></td></tr></table></figure>

<p>in:传入参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create procedure p2(</span><br><span class="line">    <span class="keyword">in</span> n1 <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">in</span> n2 <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    select * <span class="keyword">from</span> blog where <span class="built_in">id</span> &gt; n1;</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用</span></span><br><span class="line">call p2(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在python中基于pymysql调用</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p2&#x27;</span>,(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p>out：返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create procedure p3(</span><br><span class="line">    <span class="keyword">in</span> n1 <span class="built_in">int</span>,</span><br><span class="line">    out res <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    select * <span class="keyword">from</span> blog where <span class="built_in">id</span> &gt; n1;</span><br><span class="line">    <span class="built_in">set</span> res = <span class="number">1</span>;</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用</span></span><br><span class="line"><span class="built_in">set</span> @res=<span class="number">0</span>; <span class="comment">#0代表假（执行失败），1代表真（执行成功）</span></span><br><span class="line">call p3(<span class="number">3</span>,@res);</span><br><span class="line">select @res;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在python中基于pymysql调用</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p3&#x27;</span>,(<span class="number">3</span>,<span class="number">0</span>)) <span class="comment">#0相当于set @res=0</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall()) <span class="comment">#查询select的查询结果</span></span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;select @_p3_0,@_p3_1;&#x27;</span>) <span class="comment">#@p3_0代表第一个参数，@p3_1代表第二个参数，即返回值</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p>inout:既可以传入又可以返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create procedure p4(</span><br><span class="line">    inout n1 <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    select * <span class="keyword">from</span> blog where <span class="built_in">id</span> &gt; n1;</span><br><span class="line">    <span class="built_in">set</span> n1 = <span class="number">1</span>;</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用</span></span><br><span class="line"><span class="built_in">set</span> @x=<span class="number">3</span>;</span><br><span class="line">call p4(@x);</span><br><span class="line">select @x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在python中基于pymysql调用</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p4&#x27;</span>,(<span class="number">3</span>,))</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall()) <span class="comment">#查询select的查询结果</span></span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;select @_p4_0;&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p>事务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">delimiter //</span><br><span class="line">            create procedure p4(</span><br><span class="line">                out status <span class="built_in">int</span></span><br><span class="line">            )</span><br><span class="line">            BEGIN</span><br><span class="line">                <span class="number">1.</span> 声明如果出现异常则执行&#123;</span><br><span class="line">                    <span class="built_in">set</span> status = <span class="number">1</span>;</span><br><span class="line">                    rollback;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                开始事务</span><br><span class="line">                    -- 由秦兵账户减去<span class="number">100</span></span><br><span class="line">                    -- 方少伟账户加<span class="number">90</span></span><br><span class="line">                    -- 张根账户加<span class="number">10</span></span><br><span class="line">                    commit;</span><br><span class="line">                结束</span><br><span class="line"></span><br><span class="line">                <span class="built_in">set</span> status = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            END //</span><br><span class="line">            delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现</span></span><br><span class="line">delimiter //</span><br><span class="line">create PROCEDURE p5(</span><br><span class="line">    OUT p_return_code tinyint</span><br><span class="line">)</span><br><span class="line">BEGIN </span><br><span class="line">    DECLARE exit handler <span class="keyword">for</span> sqlexception </span><br><span class="line">    BEGIN </span><br><span class="line">        -- ERROR </span><br><span class="line">        <span class="built_in">set</span> p_return_code = <span class="number">1</span>; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line"></span><br><span class="line">    DECLARE exit handler <span class="keyword">for</span> sqlwarning </span><br><span class="line">    BEGIN </span><br><span class="line">        -- WARNING </span><br><span class="line">        <span class="built_in">set</span> p_return_code = <span class="number">2</span>; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line"></span><br><span class="line">    START TRANSACTION; </span><br><span class="line">        DELETE <span class="keyword">from</span> tb1; <span class="comment">#执行失败</span></span><br><span class="line">        insert into blog(name,sub_time) values(<span class="string">&#x27;yyy&#x27;</span>,now());</span><br><span class="line">    COMMIT; </span><br><span class="line"></span><br><span class="line">    -- SUCCESS </span><br><span class="line">    <span class="built_in">set</span> p_return_code = <span class="number">0</span>; <span class="comment">#0代表执行成功</span></span><br><span class="line"></span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在mysql中调用存储过程</span></span><br><span class="line"><span class="built_in">set</span> @res=<span class="number">123</span>;</span><br><span class="line">call p5(@res);</span><br><span class="line">select @res;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在python中基于pymysql调用存储过程</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p5&#x27;</span>,(<span class="number">123</span>,))</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall()) <span class="comment">#查询select的查询结果</span></span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;select @_p5_0;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p><strong>四 执行存储过程</strong></p>
<p>在MySQL中执行存储过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- 无参数</span><br><span class="line">call proc_name()</span><br><span class="line"></span><br><span class="line">-- 有参数，全<span class="keyword">in</span></span><br><span class="line">call proc_name(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">-- 有参数，有<span class="keyword">in</span>，out，inout</span><br><span class="line"><span class="built_in">set</span> @t1=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">set</span> @t2=<span class="number">3</span>;</span><br><span class="line">call proc_name(<span class="number">1</span>,<span class="number">2</span>,@t1,@t2)</span><br><span class="line"></span><br><span class="line">执行存储过程</span><br></pre></td></tr></table></figure>

<p>在python中基于pymysql执行存储过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123&#x27;</span>, db=<span class="string">&#x27;t1&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 执行存储过程</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p1&#x27;</span>, args=(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 获取执行完存储的参数</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select @_p1_0,@_p1_1,@_p1_2,@_p1_3&quot;</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><strong>五 删除存储过程</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop procedure proc_name;</span><br></pre></td></tr></table></figure>

<h3 id="五-函数"><a href="#五-函数" class="headerlink" title="五 函数"></a>五 函数</h3><p>MySQL中提供了许多内置函数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一、数学函数</span><br><span class="line">    ROUND(x,y)</span><br><span class="line">        返回参数x的四舍五入的有y位小数的值</span><br><span class="line"></span><br><span class="line">    RAND()</span><br><span class="line">        返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line"></span><br><span class="line">二、聚合函数(常用于GROUP BY从句的SELECT查询中)</span><br><span class="line">    AVG(col)返回指定列的平均值</span><br><span class="line">    COUNT(col)返回指定列中非NULL值的个数</span><br><span class="line">    MIN(col)返回指定列的最小值</span><br><span class="line">    MAX(col)返回指定列的最大值</span><br><span class="line">    SUM(col)返回指定列的所有值之和</span><br><span class="line">    GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果    </span><br><span class="line"></span><br><span class="line">三、字符串函数</span><br><span class="line"></span><br><span class="line">    CHAR_LENGTH(<span class="built_in">str</span>)</span><br><span class="line">        返回值为字符串<span class="built_in">str</span> 的长度，长度的单位为字符。一个多字节字符算作一个单字符。</span><br><span class="line">    CONCAT(str1,str2,...)</span><br><span class="line">        字符串拼接</span><br><span class="line">        如有任何一个参数为NULL ，则返回值为 NULL。</span><br><span class="line">    CONCAT_WS(separator,str1,str2,...)</span><br><span class="line">        字符串拼接（自定义连接符）</span><br><span class="line">        CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</span><br><span class="line"></span><br><span class="line">    CONV(N,from_base,to_base)</span><br><span class="line">        进制转换</span><br><span class="line">        例如：</span><br><span class="line">            SELECT CONV(<span class="string">&#x27;a&#x27;</span>,<span class="number">16</span>,<span class="number">2</span>); 表示将 a 由<span class="number">16</span>进制转换为<span class="number">2</span>进制字符串表示</span><br><span class="line"></span><br><span class="line">    FORMAT(X,D)</span><br><span class="line">        将数字X 的格式写为<span class="string">&#x27;#,###,###.##&#x27;</span>,以四舍五入的方式保留小数点后 D 位， 并将结果以字符串的形式返回。若  D 为 <span class="number">0</span>, 则返回结果不带有小数点，或不含小数部分。</span><br><span class="line">        例如：</span><br><span class="line">            SELECT FORMAT(<span class="number">12332.1</span>,<span class="number">4</span>); 结果为： <span class="string">&#x27;12,332.1000&#x27;</span></span><br><span class="line">    INSERT(<span class="built_in">str</span>,pos,<span class="built_in">len</span>,newstr)</span><br><span class="line">        在<span class="built_in">str</span>的指定位置插入字符串</span><br><span class="line">            pos：要替换位置其实位置</span><br><span class="line">            <span class="built_in">len</span>：替换的长度</span><br><span class="line">            newstr：新字符串</span><br><span class="line">        特别的：</span><br><span class="line">            如果pos超过原字符串长度，则返回原字符串</span><br><span class="line">            如果<span class="built_in">len</span>超过原字符串长度，则由新字符串完全替换</span><br><span class="line">    INSTR(<span class="built_in">str</span>,substr)</span><br><span class="line">        返回字符串 <span class="built_in">str</span> 中子字符串的第一个出现位置。</span><br><span class="line"></span><br><span class="line">    LEFT(<span class="built_in">str</span>,<span class="built_in">len</span>)</span><br><span class="line">        返回字符串<span class="built_in">str</span> 从开始的<span class="built_in">len</span>位置的子序列字符。</span><br><span class="line"></span><br><span class="line">    LOWER(<span class="built_in">str</span>)</span><br><span class="line">        变小写</span><br><span class="line"></span><br><span class="line">    UPPER(<span class="built_in">str</span>)</span><br><span class="line">        变大写</span><br><span class="line"></span><br><span class="line">    REVERSE(<span class="built_in">str</span>)</span><br><span class="line">        返回字符串 <span class="built_in">str</span> ，顺序和字符顺序相反。</span><br><span class="line"></span><br><span class="line">    SUBSTRING(<span class="built_in">str</span>,pos) , SUBSTRING(<span class="built_in">str</span> FROM pos) SUBSTRING(<span class="built_in">str</span>,pos,<span class="built_in">len</span>) , SUBSTRING(<span class="built_in">str</span> FROM pos FOR <span class="built_in">len</span>)</span><br><span class="line">        不带有<span class="built_in">len</span> 参数的格式从字符串<span class="built_in">str</span>返回一个子字符串，起始于位置 pos。带有<span class="built_in">len</span>参数的格式从字符串<span class="built_in">str</span>返回一个长度同<span class="built_in">len</span>字符相同的子字符串，起始于位置 pos。 使用 FROM的格式为标准 SQL 语法。也可能对pos使用一个负值。假若这样，则子字符串的位置起始于字符串结尾的pos 字符，而不是字符串的开头位置。在以下格式的函数中可以对pos 使用一个负值。</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;Quadratically&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;ratically&#x27;</span></span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;foobarbar&#x27;</span> FROM <span class="number">4</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;barbar&#x27;</span></span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;Quadratically&#x27;</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;ratica&#x27;</span></span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;Sakila&#x27;</span>, -<span class="number">3</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;ila&#x27;</span></span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;Sakila&#x27;</span>, -<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;aki&#x27;</span></span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(<span class="string">&#x27;Sakila&#x27;</span> FROM -<span class="number">4</span> FOR <span class="number">2</span>);</span><br><span class="line">            -&gt; <span class="string">&#x27;ki&#x27;</span></span><br><span class="line"></span><br><span class="line">四、日期和时间函数</span><br><span class="line">    CURDATE()或CURRENT_DATE() 返回当前的日期</span><br><span class="line">    CURTIME()或CURRENT_TIME() 返回当前的时间</span><br><span class="line">    DAYOFWEEK(date)   返回date所代表的一星期中的第几天(<span class="number">1</span>~<span class="number">7</span>)</span><br><span class="line">    DAYOFMONTH(date)  返回date是一个月的第几天(<span class="number">1</span>~<span class="number">31</span>)</span><br><span class="line">    DAYOFYEAR(date)   返回date是一年的第几天(<span class="number">1</span>~<span class="number">366</span>)</span><br><span class="line">    DAYNAME(date)   返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);</span><br><span class="line">    FROM_UNIXTIME(ts,fmt)  根据指定的fmt格式，格式化UNIX时间戳ts</span><br><span class="line">    HOUR(time)   返回time的小时值(<span class="number">0</span>~<span class="number">23</span>)</span><br><span class="line">    MINUTE(time)   返回time的分钟值(<span class="number">0</span>~<span class="number">59</span>)</span><br><span class="line">    MONTH(date)   返回date的月份值(<span class="number">1</span>~<span class="number">12</span>)</span><br><span class="line">    MONTHNAME(date)   返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);</span><br><span class="line">    NOW()    返回当前的日期和时间</span><br><span class="line">    QUARTER(date)   返回date在一年中的季度(<span class="number">1</span>~<span class="number">4</span>)，如SELECT QUARTER(CURRENT_DATE);</span><br><span class="line">    WEEK(date)   返回日期date为一年中第几周(<span class="number">0</span>~<span class="number">53</span>)</span><br><span class="line">    YEAR(date)   返回日期date的年份(<span class="number">1000</span>~<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    重点:</span><br><span class="line">    DATE_FORMAT(date,<span class="built_in">format</span>) 根据<span class="built_in">format</span>字符串格式化date值</span><br><span class="line"></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2009-10-04 22:23:00&#x27;</span>, <span class="string">&#x27;%W %M %Y&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;Sunday October 2009&#x27;</span></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2007-10-04 22:23:00&#x27;</span>, <span class="string">&#x27;%H:%i:%s&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;22:23:00&#x27;</span></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1900-10-04 22:23:00&#x27;</span>,</span><br><span class="line">        -&gt;                 <span class="string">&#x27;%D %y %a %d %m %b %j&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;4th 00 Thu 04 10 Oct 277&#x27;</span></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1997-10-04 22:23:00&#x27;</span>,</span><br><span class="line">        -&gt;                 <span class="string">&#x27;%H %k %I %r %T %S %w&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;22 22 10 10:23:00 PM 22:23:00 00 6&#x27;</span></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1999-01-01&#x27;</span>, <span class="string">&#x27;%X %V&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;1998 52&#x27;</span></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2006-06-00&#x27;</span>, <span class="string">&#x27;%d&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;00&#x27;</span></span><br><span class="line"></span><br><span class="line">五、加密函数</span><br><span class="line">    MD5()    </span><br><span class="line">        计算字符串<span class="built_in">str</span>的MD5校验和</span><br><span class="line">    PASSWORD(<span class="built_in">str</span>)   </span><br><span class="line">        返回字符串<span class="built_in">str</span>的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</span><br><span class="line"></span><br><span class="line">六、控制流函数            </span><br><span class="line">    CASE WHEN[test1] THEN [result1]...ELSE [default] END</span><br><span class="line">        如果testN是真，则返回resultN，否则返回default</span><br><span class="line">    CASE [test] WHEN[val1] THEN [result]...ELSE [default]END  </span><br><span class="line">        如果test和valN相等，则返回resultN，否则返回default</span><br><span class="line"></span><br><span class="line">    IF(test,t,f)   </span><br><span class="line">        如果test是真，返回t；否则返回f</span><br><span class="line"></span><br><span class="line">    IFNULL(arg1,arg2) </span><br><span class="line">        如果arg1不是空，返回arg1，否则返回arg2</span><br><span class="line"></span><br><span class="line">    NULLIF(arg1,arg2) </span><br><span class="line">        如果arg1=arg2返回NULL；否则返回arg1        </span><br><span class="line"></span><br><span class="line">七、控制流函数小练习</span><br><span class="line"><span class="comment">#7.1、准备表</span></span><br><span class="line">/*</span><br><span class="line">Navicat MySQL Data Transfer</span><br><span class="line"></span><br><span class="line">Source Server         : localhost_3306</span><br><span class="line">Source Server Version : <span class="number">50720</span></span><br><span class="line">Source Host           : localhost:<span class="number">3306</span></span><br><span class="line">Source Database       : student</span><br><span class="line"></span><br><span class="line">Target Server <span class="type">Type</span>    : MYSQL</span><br><span class="line">Target Server Version : <span class="number">50720</span></span><br><span class="line">File Encoding         : <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">Date: <span class="number">2018</span>-01-02 <span class="number">12</span>:05:<span class="number">30</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> course</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `course`;</span><br><span class="line">CREATE TABLE `course` (</span><br><span class="line">  `c_id` <span class="built_in">int</span>(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  `c_name` varchar(<span class="number">255</span>) DEFAULT NULL,</span><br><span class="line">  `t_id` <span class="built_in">int</span>(<span class="number">11</span>) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`c_id`),</span><br><span class="line">  KEY `t_id` (`t_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of course</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `course` VALUES (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">INSERT INTO `course` VALUES (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">INSERT INTO `course` VALUES (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;linux&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">INSERT INTO `course` VALUES (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> score</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `score`;</span><br><span class="line">CREATE TABLE `score` (</span><br><span class="line">  `<span class="built_in">id</span>` <span class="built_in">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `s_id` <span class="built_in">int</span>(<span class="number">10</span>) DEFAULT NULL,</span><br><span class="line">  `c_id` <span class="built_in">int</span>(<span class="number">11</span>) DEFAULT NULL,</span><br><span class="line">  `num` double DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">12</span> DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of score</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;79&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;78&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;35&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;32&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;66&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;77&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;68&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;66&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;69&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;75&#x27;</span>);</span><br><span class="line">INSERT INTO `score` VALUES (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;66.7&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> student</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `student`;</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `s_id` varchar(<span class="number">20</span>) NOT NULL,</span><br><span class="line">  `s_name` varchar(<span class="number">255</span>) DEFAULT NULL,</span><br><span class="line">  `s_age` <span class="built_in">int</span>(<span class="number">10</span>) DEFAULT NULL,</span><br><span class="line">  `s_sex` char(<span class="number">1</span>) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`s_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of student</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `student` VALUES (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;鲁班&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">INSERT INTO `student` VALUES (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;貂蝉&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">INSERT INTO `student` VALUES (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">INSERT INTO `student` VALUES (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;34&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">INSERT INTO `student` VALUES (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> teacher</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `teacher`;</span><br><span class="line">CREATE TABLE `teacher` (</span><br><span class="line">  `t_id` <span class="built_in">int</span>(<span class="number">10</span>) NOT NULL,</span><br><span class="line">  `t_name` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`t_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of teacher</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `teacher` VALUES (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;大王&#x27;</span>);</span><br><span class="line">INSERT INTO `teacher` VALUES (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>);</span><br><span class="line">INSERT INTO `teacher` VALUES (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;egon&#x27;</span>);</span><br><span class="line">INSERT INTO `teacher` VALUES (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;peiqi&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.2、统计各科各分数段人数.显示格式:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60]</span></span><br><span class="line"></span><br><span class="line">select  score.c_id,</span><br><span class="line">          course.c_name, </span><br><span class="line">      <span class="built_in">sum</span>(CASE WHEN num BETWEEN <span class="number">85</span> <span class="keyword">and</span> <span class="number">100</span> THEN <span class="number">1</span> ELSE <span class="number">0</span> END) <span class="keyword">as</span> <span class="string">&#x27;[100-85]&#x27;</span>,</span><br><span class="line">      <span class="built_in">sum</span>(CASE WHEN num BETWEEN <span class="number">70</span> <span class="keyword">and</span> <span class="number">85</span> THEN <span class="number">1</span> ELSE <span class="number">0</span> END) <span class="keyword">as</span> <span class="string">&#x27;[85-70]&#x27;</span>,</span><br><span class="line">      <span class="built_in">sum</span>(CASE WHEN num BETWEEN <span class="number">60</span> <span class="keyword">and</span> <span class="number">70</span> THEN <span class="number">1</span> ELSE <span class="number">0</span> END) <span class="keyword">as</span> <span class="string">&#x27;[70-60]&#x27;</span>,</span><br><span class="line">      <span class="built_in">sum</span>(CASE WHEN num &lt; <span class="number">60</span> THEN <span class="number">1</span> ELSE <span class="number">0</span> END) <span class="keyword">as</span> <span class="string">&#x27;[ &lt;60]&#x27;</span></span><br><span class="line"><span class="keyword">from</span> score,course where score.c_id=course.c_id GROUP BY score.c_id;</span><br></pre></td></tr></table></figure>

<p>需要掌握函数：date_format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 基本使用</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2009-10-04 22:23:00&#x27;</span>, <span class="string">&#x27;%W %M %Y&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;Sunday October 2009&#x27;</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2007-10-04 22:23:00&#x27;</span>, <span class="string">&#x27;%H:%i:%s&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;22:23:00&#x27;</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1900-10-04 22:23:00&#x27;</span>,</span><br><span class="line">    -&gt;                 <span class="string">&#x27;%D %y %a %d %m %b %j&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;4th 00 Thu 04 10 Oct 277&#x27;</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1997-10-04 22:23:00&#x27;</span>,</span><br><span class="line">    -&gt;                 <span class="string">&#x27;%H %k %I %r %T %S %w&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;22 22 10 10:23:00 PM 22:23:00 00 6&#x27;</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;1999-01-01&#x27;</span>, <span class="string">&#x27;%X %V&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;1998 52&#x27;</span></span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(<span class="string">&#x27;2006-06-00&#x27;</span>, <span class="string">&#x27;%d&#x27;</span>);</span><br><span class="line">        -&gt; <span class="string">&#x27;00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 准备表和记录</span></span><br><span class="line">CREATE TABLE blog (</span><br><span class="line">    <span class="built_in">id</span> INT PRIMARY KEY auto_increment,</span><br><span class="line">    NAME CHAR (<span class="number">32</span>),</span><br><span class="line">    sub_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO blog (NAME, sub_time)</span><br><span class="line">VALUES</span><br><span class="line">    (<span class="string">&#x27;第1篇&#x27;</span>,<span class="string">&#x27;2015-03-01 11:31:21&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第2篇&#x27;</span>,<span class="string">&#x27;2015-03-11 16:31:21&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第3篇&#x27;</span>,<span class="string">&#x27;2016-07-01 10:21:31&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第4篇&#x27;</span>,<span class="string">&#x27;2016-07-22 09:23:21&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第5篇&#x27;</span>,<span class="string">&#x27;2016-07-23 10:11:11&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第6篇&#x27;</span>,<span class="string">&#x27;2016-07-25 11:21:31&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第7篇&#x27;</span>,<span class="string">&#x27;2017-03-01 15:33:21&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第8篇&#x27;</span>,<span class="string">&#x27;2017-03-01 17:32:21&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;第9篇&#x27;</span>,<span class="string">&#x27;2017-03-01 18:31:21&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 提取sub_time字段的值，按照格式后的结果即&quot;年月&quot;来分组</span></span><br><span class="line">SELECT DATE_FORMAT(sub_time,<span class="string">&#x27;%Y-%m&#x27;</span>),COUNT(<span class="number">1</span>) FROM blog GROUP BY DATE_FORMAT(sub_time,<span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">+-------------------------------+----------+</span><br><span class="line">| DATE_FORMAT(sub_time,<span class="string">&#x27;%Y-%m&#x27;</span>) | COUNT(<span class="number">1</span>) |</span><br><span class="line">+-------------------------------+----------+</span><br><span class="line">| <span class="number">2015</span>-03                       |        <span class="number">2</span> |</span><br><span class="line">| <span class="number">2016</span>-07                       |        <span class="number">4</span> |</span><br><span class="line">| <span class="number">2017</span>-03                       |        <span class="number">3</span> |</span><br><span class="line">+-------------------------------+----------+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>更多函数：<a href="https://link.zhihu.com/?target=http://doc.mysql.cn/mysql5/refman-5.1-zh.html-chapter/functions.html%23encryption-functions">中文猛击这里</a> OR <a href="https://link.zhihu.com/?target=https://dev.mysql.com/doc/refman/5.7/en/functions.html">官方猛击这里</a></p>
<p><strong>一 自定义函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！！！注意！！！</span></span><br><span class="line"><span class="comment">#函数中不要写sql语句（否则会报错），函数仅仅只是一个功能，是一个在sql中被应用的功能</span></span><br><span class="line"><span class="comment">#若要想在begin...end...中写sql，请用存储过程</span></span><br><span class="line">delimiter //</span><br><span class="line">create function f1(</span><br><span class="line">    i1 <span class="built_in">int</span>,</span><br><span class="line">    i2 <span class="built_in">int</span>)</span><br><span class="line">returns <span class="built_in">int</span></span><br><span class="line">BEGIN</span><br><span class="line">    declare num <span class="built_in">int</span>;</span><br><span class="line">    <span class="built_in">set</span> num = i1 + i2;</span><br><span class="line">    <span class="keyword">return</span>(num);</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br><span class="line">delimiter //</span><br><span class="line">create function f5(</span><br><span class="line">    i <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line">returns <span class="built_in">int</span></span><br><span class="line">begin</span><br><span class="line">    declare res <span class="built_in">int</span> default <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> i = <span class="number">10</span> then</span><br><span class="line">        <span class="built_in">set</span> res=<span class="number">100</span>;</span><br><span class="line">    elseif i = <span class="number">20</span> then</span><br><span class="line">        <span class="built_in">set</span> res=<span class="number">200</span>;</span><br><span class="line">    elseif i = <span class="number">30</span> then</span><br><span class="line">        <span class="built_in">set</span> res=<span class="number">300</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">set</span> res=<span class="number">400</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p><strong>二 删除函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop function func_name;</span><br></pre></td></tr></table></figure>

<p><strong>三 执行函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取返回值</span></span><br><span class="line">select UPPER(<span class="string">&#x27;egon&#x27;</span>) into @res;</span><br><span class="line">SELECT @res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在查询中使用</span></span><br><span class="line">select f1(<span class="number">11</span>,nid) ,name <span class="keyword">from</span> tb2;</span><br></pre></td></tr></table></figure>

<h3 id="六-流程控制"><a href="#六-流程控制" class="headerlink" title="六 流程控制"></a>六 流程控制</h3><p><strong>一 条件语句</strong></p>
<p>if条件语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE proc_if ()</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    declare i <span class="built_in">int</span> default <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> i = <span class="number">1</span> THEN</span><br><span class="line">        SELECT <span class="number">1</span>;</span><br><span class="line">    ELSEIF i = <span class="number">2</span> THEN</span><br><span class="line">        SELECT <span class="number">2</span>;</span><br><span class="line">    ELSE</span><br><span class="line">        SELECT <span class="number">7</span>;</span><br><span class="line">    END IF;</span><br><span class="line"></span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p><strong>二 循环语句</strong></p>
<p>while循环</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_while ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">DECLARE</span> num <span class="type">INT</span> ;</span><br><span class="line">    <span class="keyword">SET</span> num <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    WHILE num <span class="operator">&lt;</span> <span class="number">10</span> DO</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            num ;</span><br><span class="line">        <span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">END</span> WHILE ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_repeat ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> ;</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">select</span> i;</span><br><span class="line">        <span class="keyword">set</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        until i <span class="operator">&gt;=</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>loop</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    loop_label: loop</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        if i<span class="operator">&lt;</span><span class="number">8</span> <span class="keyword">then</span></span><br><span class="line">            iterate loop_label;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">        if i<span class="operator">&gt;=</span><span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">            leave loop_label;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">        <span class="keyword">select</span> i;</span><br><span class="line">    <span class="keyword">end</span> loop loop_label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av76534734?p=17">mysql数据库_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av76534734?p=17<img src="https://pic2.zhimg.com/v2-ff5ea9d7a1a90eefeb918c9be2ba7c99_180x120.jpg" alt="img"></a></p>
<p>b站视频p17-p22</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>46-附录一：PEPB规范</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/46_%E9%99%84%E5%BD%95%E4%B8%80%EF%BC%9APEP8%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="一-PEP8规范是什么？"><a href="#一-PEP8规范是什么？" class="headerlink" title="一 PEP8规范是什么？"></a><strong>一 PEP8规范是什么？</strong></h2><p> PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。</p>
<p> 每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。</p>
<p> 尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。</p>
<h2 id="二-PEP8规范相关内容"><a href="#二-PEP8规范相关内容" class="headerlink" title="二 PEP8规范相关内容"></a><strong>二 PEP8规范相关内容</strong></h2><p> 我们可以从Python官方网站的**<a href="https://link.zhihu.com/?target=https://www.python.org/dev/peps/pep-0008/">PEP 8链接</a>**中找到该文档，下面我们对该文档的关键部分做一个简单的总结。</p>
<h3 id="2-1-空格的使用"><a href="#2-1-空格的使用" class="headerlink" title="2.1 空格的使用"></a><strong>2.1 空格的使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、使用空格来表示缩进而不要用制表符（Tab）。这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。</span><br><span class="line"></span><br><span class="line">#2、和语法相关的每一层缩进都用4个空格来表示。</span><br><span class="line"></span><br><span class="line">#3、每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</span><br><span class="line"></span><br><span class="line">#4、函数和类的定义，代码前后都要用两个空行进行分隔。</span><br><span class="line"></span><br><span class="line">#5、在同一个类中，各个方法之间应该用一个空行进行分隔。</span><br><span class="line"></span><br><span class="line">#6、二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</span><br></pre></td></tr></table></figure>

<h3 id="2-2-标识符命名"><a href="#2-2-标识符命名" class="headerlink" title="2.2 标识符命名"></a><strong>2.2 标识符命名</strong></h3><p> PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</span><br><span class="line"></span><br><span class="line">#2、类中受保护的实例属性，应该以一个下划线开头。</span><br><span class="line"></span><br><span class="line">#3、类中私有的实例属性，应该以两个下划线开头。</span><br><span class="line"></span><br><span class="line">#4、类和异常的命名，应该每个单词首字母大写。</span><br><span class="line"></span><br><span class="line">#5、模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</span><br><span class="line"></span><br><span class="line">#6、类的实例方法，应该把第一个参数命名为self以表示对象自身。</span><br><span class="line"></span><br><span class="line">#7、类的类方法，应该把第一个参数命名为cls以表示该类自身。</span><br></pre></td></tr></table></figure>

<h3 id="2-3-表达式和语句"><a href="#2-3-表达式和语句" class="headerlink" title="2.3 表达式和语句"></a><strong>2.3 表达式和语句</strong></h3><p> 在Python之禅（可以使用import this查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如if a is not b就比if not a is b更容易让人理解。</span><br><span class="line"></span><br><span class="line">#2、不要用检查长度的方式来判断字符串、列表等是否为None或者没有元素，应该用if not x这样的写法来检查它。</span><br><span class="line"></span><br><span class="line">#3、就算if分支、for循环、except异常捕获等中只有一行代码，也不要将代码和if、for、except等写在一起，分开写才会让代码更清晰。</span><br><span class="line"></span><br><span class="line">#4、import语句总是放在文件开头的地方。</span><br><span class="line"></span><br><span class="line">#5、引入模块的时候，from math import sqrt比import math更好。</span><br><span class="line"></span><br><span class="line">#6、如果有多个import语句，应该将其分为三部分，从上到下分别是Python标准模块、第三方模块和自定义模块，每个部分内部应该</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>48-附录三：Python是解释型的强类型动态语言</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/48_%E9%99%84%E5%BD%95%E4%B8%89%EF%BC%9APython%E6%98%AF%E8%A7%A3%E9%87%8A%E5%9E%8B%E7%9A%84%E5%BC%BA%E7%B1%BB%E5%9E%8B%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="一、-编译型or解释型"><a href="#一、-编译型or解释型" class="headerlink" title="一、 编译型or解释型"></a><strong>一、 编译型or解释型</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.1 编译型</span><br><span class="line">略</span><br><span class="line"></span><br><span class="line">#1.2 解释型（python属于解释型）</span><br><span class="line">略</span><br></pre></td></tr></table></figure>

<h2 id="二、强类型or弱类型"><a href="#二、强类型or弱类型" class="headerlink" title="二、强类型or弱类型"></a><strong>二、强类型or弱类型</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2.1 强类型语言（python属于强类型） </span><br><span class="line">  数据类型不可以被忽略的语言 即变量的数据类型一旦被定义，那就不会再改变，除非进行强转。 在python中，例如：name = &#x27;egon&#x27;，这个变量name在被赋值的那一刻，数据类型就被确定死了，是字符型，值为&#x27;egon&#x27;。 </span><br><span class="line"></span><br><span class="line">#2.2 弱类型语言：</span><br><span class="line">  数据类型可以被忽略的语言 比如linux中的shell中定义一个变量，是随着调用方式的不同，数据类型可随意切换的那种。  </span><br></pre></td></tr></table></figure>

<h2 id="三、动态型or静态型"><a href="#三、动态型or静态型" class="headerlink" title="三、动态型or静态型"></a><strong>三、动态型or静态型</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#3.1 动态语言（python属于动态语言）</span><br><span class="line">  运行时才进行数据类型检查 即在变量赋值时，就确定了变量的数据类型，不用事先给变量指定数据类型  </span><br><span class="line"></span><br><span class="line">#3.2 静态语言</span><br><span class="line">  需要事先给变量进行数据类型定义  </span><br></pre></td></tr></table></figure>

<p>所以综上所述，Python是一门解释型的强类型动态语言</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>47-附录二：GIL新解</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/47_%E9%99%84%E5%BD%95%E4%BA%8C%EF%BC%9AGIL%E6%96%B0%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="一：cpu和GIL必须都具备才可以执行代码；"><a href="#一：cpu和GIL必须都具备才可以执行代码；" class="headerlink" title="一：cpu和GIL必须都具备才可以执行代码；"></a><strong>一：cpu和GIL必须都具备才可以执行代码；</strong></h2><p> 拿到cpu权限-》拿到GIL解释器锁-》执行代码</p>
<p> 在python3.2之后GIL有了新的实现，目的是为了解决that GIL thrashing问题，这是Antoine Pitrou的功劳</p>
<h2 id="二：GIL解释器锁会在两种情况下释放"><a href="#二：GIL解释器锁会在两种情况下释放" class="headerlink" title="二：GIL解释器锁会在两种情况下释放"></a><strong>二：GIL解释器锁会在两种情况下释放</strong></h2><h3 id="2-1、主动释放：自己主动交出来"><a href="#2-1、主动释放：自己主动交出来" class="headerlink" title="2.1、主动释放：自己主动交出来"></a><strong>2.1、主动释放：自己主动交出来</strong></h3><p>遇到IO操作或者分配的cpu时间片到时间了</p>
<p>注意，GIL存在的意义在于维护线程安全，x&#x3D;10涉及到io操作，如果也被当成普通的io操作，主动交出GIL，那么一定会出现数据不安全问题，所以x&#x3D;10一定是被区分对待了</p>
<p>至于x&#x3D;10如何实现的被区分对待，这其实很好理解，任何的io操作都是向操作系统发送系统调用，即调用操作系统的某一接口实现的，比如变量赋值操作肯定是调用了一种接口，文件读写操作肯定也是调用了一种接口，网络io也是调用了某一种接口，这就给区分对待提供了实现的依据，即变量赋值操作并不属于主动释放的范畴，这样GIL在线程安全方面才会有所作为</p>
<h3 id="2-2、被动释放"><a href="#2-2、被动释放" class="headerlink" title="2.2、被动释放"></a><strong>2.2、被动释放</strong></h3><p>python3.2之后定义了一个全局变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Python/ceval.c */</span><br><span class="line">...</span><br><span class="line">static volatile int gil_drop_request = 0;</span><br></pre></td></tr></table></figure>

<p>注意当只有一个线程时，该线程会一直运行，不会释放GIL，当有多个线程时</p>
<p>例如thead1，thread2</p>
<p>如果thread1一直没有主动释放掉GIL，那肯定不会让他一直运行下去啊</p>
<p>实际上在thread1运行的过程时，thread2就会执行一个cv_wait(gil,TIMEOUT)的函数</p>
<p>（默认TIMEOUT值为5milliseconds，但是可以修改），一旦到了时间，就会将全局变量</p>
<p>gil_drop_request &#x3D; 1;，线程thread1就会被强制释放GIL，然后线程thread2开始运行并</p>
<p>返回一个ack给线程thread1，线程thread1开始调用cv_wait(gil,TIMEOUT)</p>
<h2 id="三：详见图解"><a href="#三：详见图解" class="headerlink" title="三：详见图解"></a><strong>三：详见图解</strong></h2><p>见Part4</p>
<p><strong><a href="https://link.zhihu.com/?target=http://www.dabeaz.com/python/UnderstandingGIL.pdf">http://www.dabeaz.com/python/Under</a></strong></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>52-附录七：Collections之OrderedDict</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/52_%E9%99%84%E5%BD%95%E4%B8%83%EF%BC%9Acollections%E4%B9%8BOrderedDict/</url>
    <content><![CDATA[<h2 id="collections之OrderedDict😀"><a href="#collections之OrderedDict😀" class="headerlink" title="collections之OrderedDict😀"></a><strong>collections之OrderedDict</strong>😀</h2><p> 如果想让字典有序，可以使用collections.OrderedDict，它现在在C中实现，这使其快4到100倍。</p>
<p>##1、collections.OrderedDict的基本使用  将类OrderedDict实例化会得到一个dict子类的实例，支持通常的dict方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">od=OrderedDict()</span><br><span class="line">print(isinstance(od,OrderedDict)) # True</span><br><span class="line">print(isinstance(od,dict)) # True</span><br></pre></td></tr></table></figure>

<p> OrderedDict是记住键首次插入顺序的字典。如果新条目覆盖现有条目，则原始插入位置保持不变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">od[&#x27;name&#x27;] = &#x27;egon&#x27;</span><br><span class="line">od[&#x27;age&#x27;] = 18</span><br><span class="line">od[&#x27;gender&#x27;] = &#x27;male&#x27;</span><br><span class="line">print(od) # OrderedDict([(&#x27;name&#x27;, &#x27;egon&#x27;), (&#x27;age&#x27;, 18), (&#x27;gender&#x27;, &#x27;male&#x27;)])</span><br><span class="line"></span><br><span class="line">od[&#x27;age&#x27;]=19</span><br><span class="line">print(od) # OrderedDict([(&#x27;name&#x27;, &#x27;egon&#x27;), (&#x27;age&#x27;, 19), (&#x27;gender&#x27;, &#x27;male&#x27;)])</span><br></pre></td></tr></table></figure>

<p> 删除条目并重新插入会将其移动到末尾。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del od[&#x27;age&#x27;]</span><br><span class="line"></span><br><span class="line">od[&#x27;age&#x27;]=20</span><br><span class="line">print(od) # OrderedDict([(&#x27;name&#x27;, &#x27;egon&#x27;), (&#x27;gender&#x27;, &#x27;male&#x27;), (&#x27;age&#x27;, 20)])</span><br></pre></td></tr></table></figure>

<h2 id="2、方法popitem-last-x3D-True"><a href="#2、方法popitem-last-x3D-True" class="headerlink" title="2、方法popitem(last&#x3D;True)"></a><strong>2、方法popitem(last&#x3D;True)</strong></h2><p> 调用有序字典的popitem()方法会删除并返回(key, value)对。如果last为真，则以LIFO(后进先出)顺序返回这些键值对，如果为假，则以FIFO(先进先出)顺序返回。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">od=OrderedDict()</span><br><span class="line"></span><br><span class="line">od[&#x27;k1&#x27;]=&#x27;egon&#x27;</span><br><span class="line">od[&#x27;k2&#x27;]=&#x27;tom&#x27;</span><br><span class="line">od[&#x27;k3&#x27;]=&#x27;jack&#x27;</span><br><span class="line"></span><br><span class="line">print(od.popitem(last=False))</span><br><span class="line">print(od.popitem(last=False))</span><br><span class="line">print(od.popitem(last=False))</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">(&#x27;k1&#x27;, &#x27;egon&#x27;)</span><br><span class="line">(&#x27;k2&#x27;, &#x27;tom&#x27;)</span><br><span class="line">(&#x27;k3&#x27;, &#x27;jack&#x27;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="3、方法move-to-end-key-last-x3D-True"><a href="#3、方法move-to-end-key-last-x3D-True" class="headerlink" title="3、方法move_to_end(key, last&#x3D;True)"></a><strong>3、方法move_to_end(key, last&#x3D;True)</strong></h2><p> 该方法用于将一个已存在的key移动到有序字典的任一端。如果last为True（默认值），则移动到末尾，如果last为False，则移动到开头。如果key不存在，引发KeyError</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">od = OrderedDict()</span><br><span class="line"></span><br><span class="line">od = OrderedDict.fromkeys(&#x27;abcde&#x27;)</span><br><span class="line">od.move_to_end(&#x27;b&#x27;)</span><br><span class="line">print(&#x27;&#x27;.join(od.keys())) # acdeb</span><br><span class="line"></span><br><span class="line">od.move_to_end(&#x27;b&#x27;, last=False)</span><br><span class="line">print(&#x27;&#x27;.join(od.keys())) # bacde</span><br></pre></td></tr></table></figure>

<h2 id="4、OrderDict对象之间的相等性判断"><a href="#4、OrderDict对象之间的相等性判断" class="headerlink" title="4、OrderDict对象之间的相等性判断"></a><strong>4、OrderDict对象之间的相等性判断</strong></h2><p> OrderedDict对象之间的相等性判断是顺序敏感的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断：od1 == od2</span><br><span class="line">底层实现相当于：list(od1.items()) == list(od2.items())</span><br></pre></td></tr></table></figure>

<p>OrderedDict对象与其他映射对象之间的相等性测试与常规字典类似，对顺序不敏感，所以我们可以在使用常规字典的任何位置替换为OrderedDict对象，并不会影响使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">od1=OrderedDict()</span><br><span class="line">od2=OrderedDict()</span><br><span class="line">od3=OrderedDict()</span><br><span class="line"></span><br><span class="line">od1[&#x27;k1&#x27;]=111</span><br><span class="line">od1[&#x27;k2&#x27;]=222</span><br><span class="line">od1[&#x27;k3&#x27;]=333</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">od2[&#x27;k1&#x27;]=111</span><br><span class="line">od2[&#x27;k2&#x27;]=222</span><br><span class="line">od2[&#x27;k3&#x27;]=333</span><br><span class="line"></span><br><span class="line">od3[&#x27;k1&#x27;]=111</span><br><span class="line">od3[&#x27;k3&#x27;]=333</span><br><span class="line">od3[&#x27;k2&#x27;]=222</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(od1 == od2) # OrderDict之间的相等判断，即list(od1.items())==list(od2.items())，所以结果为True</span><br><span class="line">print(od1 == od3) # OrderDict之间的相等判断，即list(od1.items())==list(od3.items())，所以结果为False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d=&#123;&#x27;k1&#x27;:111,&#x27;k3&#x27;:333,&#x27;k2&#x27;:222&#125; # 定义常规字典</span><br><span class="line"></span><br><span class="line">print(od1 == d) # OrderDict对象与常规字典比较，对顺序不敏感，所以结果为True</span><br></pre></td></tr></table></figure>

<h2 id="5、OrderedDict构造函数和update"><a href="#5、OrderedDict构造函数和update" class="headerlink" title="5、OrderedDict构造函数和update()"></a><strong>5、OrderedDict构造函数和update()</strong></h2><p> OrderedDict构造函数和update()方法都可以接受关键字参数，但是它们的顺序丢失，因为OrderedDict构造函数和update()方法都属于Python的函数调用，而Python的函数调用语义使用常规无序字典传递关键字参数。请在python2中测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">od1=OrderedDict(x=1,y=2,z=3)</span><br><span class="line">print(od1) # 顺序错乱：OrderedDict([(&#x27;y&#x27;, 2), (&#x27;x&#x27;, 1), (&#x27;z&#x27;, 3)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">od2=OrderedDict()</span><br><span class="line">od2.update(a=1)</span><br><span class="line">od2.update(b=2)</span><br><span class="line">od2.update(c=3)</span><br><span class="line">print(od2) # 顺序正常：OrderedDict([(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">od3=OrderedDict()</span><br><span class="line">od3.update(d=4,e=5,f=6)</span><br><span class="line">print(od3) # 顺序错乱：OrderedDict([(&#x27;e&#x27;, 5), (&#x27;d&#x27;, 4), (&#x27;f&#x27;, 6)])</span><br></pre></td></tr></table></figure>

<h2 id="6、OrderedDict与sort结合"><a href="#6、OrderedDict与sort结合" class="headerlink" title="6、OrderedDict与sort结合"></a><strong>6、OrderedDict与sort结合</strong></h2><p> 由于有序字典会记住其插入顺序，因此可以与排序结合使用以创建排序字典：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; # 标准未排序的常规字典</span><br><span class="line">&gt;&gt;&gt; d = &#123;&#x27;banana&#x27;: 3, &#x27;apple&#x27;: 4, &#x27;pear&#x27;: 1, &#x27;orange&#x27;: 2&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # 按照key排序的字典</span><br><span class="line">&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0]))</span><br><span class="line">OrderedDict([(&#x27;apple&#x27;, 4), (&#x27;banana&#x27;, 3), (&#x27;orange&#x27;, 2), (&#x27;pear&#x27;, 1)])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # 按照value排序的字典</span><br><span class="line">&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))</span><br><span class="line">OrderedDict([(&#x27;pear&#x27;, 1), (&#x27;orange&#x27;, 2), (&#x27;banana&#x27;, 3), (&#x27;apple&#x27;, 4)])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # 按照key的长度排序的字典</span><br><span class="line">&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))</span><br><span class="line">OrderedDict([(&#x27;pear&#x27;, 1), (&#x27;apple&#x27;, 4), (&#x27;orange&#x27;, 2), (&#x27;banana&#x27;, 3)])</span><br></pre></td></tr></table></figure>

<h2 id="7、自定义OrderDict变体"><a href="#7、自定义OrderDict变体" class="headerlink" title="7、自定义OrderDict变体"></a><strong>7、自定义OrderDict变体</strong></h2><p> 我们通过继承OrderDict类来实现在原有的基础之上上定制化我们的子类（即OrderDict变体）。</p>
<p> 比如我们在用新条目覆盖现有条目时，我们不想像OrderDict原先那样保留原始的插入位置，而是将覆盖的条目移动到结尾，实现如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class LastUpdatedOrderedDict(OrderedDict):</span><br><span class="line">    &#x27;Store items in the order the keys were last added&#x27;</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        if key in self:</span><br><span class="line">            del self[key]</span><br><span class="line">        OrderedDict.__setitem__(self, key, value)</span><br><span class="line"></span><br><span class="line">od5=LastUpdatedOrderedDict()</span><br><span class="line">od5[&#x27;k1&#x27;]=111</span><br><span class="line">od5[&#x27;k2&#x27;]=222</span><br><span class="line">od5[&#x27;k3&#x27;]=333</span><br><span class="line">print(od5) # LastUpdatedOrderedDict([(&#x27;k1&#x27;, 111), (&#x27;k2&#x27;, 222), (&#x27;k3&#x27;, 333)])</span><br><span class="line"></span><br><span class="line">od5[&#x27;k2&#x27;]=2222222222</span><br><span class="line">print(od5) # 覆盖的值跑到末尾，LastUpdatedOrderedDict([(&#x27;k1&#x27;, 111), (&#x27;k3&#x27;, 333), (&#x27;k2&#x27;, 2222222222)])</span><br></pre></td></tr></table></figure>

<p>##8、OrderDict与collections.Counter结合</p>
<p> 有序字典可以与Counter类结合，以便计数器记住首次遇到的顺序元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import OrderedDict,Counter</span><br><span class="line"></span><br><span class="line">class OrderedCounter(Counter, OrderedDict):</span><br><span class="line">    &#x27;Counter that remembers the order elements are first encountered&#x27;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        print(&#x27;====&gt;&#x27;)</span><br><span class="line">        return &#x27;%s(%r)&#x27; % (self.__class__.__name__, OrderedDict(self))</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return self.__class__, (OrderedDict(self),)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = Counter([&#x27;bbb&#x27;,&#x27;ccc&#x27;,&#x27;aaa&#x27;,&#x27;aaa&#x27;,&#x27;ccc&#x27;])</span><br><span class="line">print(c1)  # 顺序错乱：Counter(&#123;&#x27;ccc&#x27;: 2, &#x27;aaa&#x27;: 2, &#x27;bbb&#x27;: 1&#125;)</span><br><span class="line"></span><br><span class="line">c2=OrderedCounter([&#x27;bbb&#x27;,&#x27;ccc&#x27;,&#x27;aaa&#x27;,&#x27;aaa&#x27;,&#x27;ccc&#x27;])</span><br><span class="line">print(c2)  # 顺序保持原有：OrderedCounter(OrderedDict([(&#x27;bbb&#x27;, 1), (&#x27;ccc&#x27;, 2), (&#x27;aaa&#x27;, 2)]))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>50-附录五：性能测试之timeit</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/50_%E9%99%84%E5%BD%95%E4%BA%94%EF%BC%9A%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B9%8Btimeit/</url>
    <content><![CDATA[<h2 id="一、timeit模块的使用"><a href="#一、timeit模块的使用" class="headerlink" title="一、timeit模块的使用"></a><strong>一、timeit模块的使用</strong></h2><p>timeit模块下主要有两个函数十分有用，分别为timeit.timeit、timeit.repeat</p>
<h3 id="1-1-timeit-timeit的使用"><a href="#1-1-timeit-timeit的使用" class="headerlink" title="1.1 timeit.timeit的使用"></a><strong>1.1 timeit.timeit的使用</strong></h3><p> timeit.timeit参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># stmt</span><br><span class="line">指定要执行的语句/statement,值可以是字符串形式的表达式，也可以是一个函数，或者是一个变量的形式。</span><br><span class="line"></span><br><span class="line"># number</span><br><span class="line">指定stmt语句执行的次数，默认值为一百万次</span><br><span class="line"></span><br><span class="line"># setup</span><br><span class="line">这个参数可以将stmt的环境传进去。比如各种import以及参数。多个值用分号；分隔开</span><br><span class="line"></span><br><span class="line"># timer </span><br><span class="line">指定计数器函数，使用默认time.perf_counter就好，详见下一小节</span><br></pre></td></tr></table></figure>

<p> stmt参数使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from timeit import timeit, repeat</span><br><span class="line"></span><br><span class="line"># 1、stmt值为字符串表达式</span><br><span class="line">res1 = timeit(stmt=&quot;[i for i in range(1000)]&quot;, number=100)</span><br><span class="line"></span><br><span class="line">#2、stmt值为一个变量</span><br><span class="line">statement = &quot;&quot;&quot;</span><br><span class="line">l = []</span><br><span class="line">for i in range(1000):</span><br><span class="line">    l.append(i)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">res2 = timeit(stmt=statement, number=100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3、stmt值为一个函数</span><br><span class="line">def foo():</span><br><span class="line">    l = []</span><br><span class="line">    for i in range(1000):</span><br><span class="line">        l.append(i)</span><br><span class="line"></span><br><span class="line">res3 = timeit(stmt=foo, number=100)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">注意：如果stmt=&quot;foo()&quot;，那么必须通过setupo来导入from __main__ import foo如下</span><br><span class="line">res3=timeit(stmt=&quot;foo()&quot;,setup=&#x27;from __main__ import foo&#x27;,number=10)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(res1)  # 0.003296864000731148</span><br><span class="line">print(res2)  # 0.008153499999025371</span><br><span class="line">print(res3)  # 0.008153499999025371</span><br></pre></td></tr></table></figure>

<p> setup参数使用示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from timeit import timeit</span><br><span class="line"></span><br><span class="line">res=timeit(stmt=&quot;json.loads(json_data)&quot;,number=1000,</span><br><span class="line">           setup=&quot;import json;data=&#123;&#x27;name&#x27;:&#x27;egon&#x27;,&#x27;age&#x27;:18&#125;;json_data=json.dumps(data)&quot;</span><br><span class="line">           )</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>###1.2 timeit.repeat</p>
<p> 其实repeat就比timeit多了一个参数，参数名与函数名一致，也叫repeat，用来指定重复的次数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from timeit import timeit, repeat</span><br><span class="line"></span><br><span class="line">res = repeat(stmt=&quot;[i for i in range(1000)]&quot;, number=100,repeat=3)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"># repeat=3，所以返回的列表中包含三个元素，所代表的含义依次为：</span><br><span class="line"># 1、第一个100次执行指定语句所耗费时间</span><br><span class="line"># 2、第二个100次执行指定语句所耗费时间</span><br><span class="line"># 3、第三个100次执行指定语句所耗费时间</span><br><span class="line">[0.0033898779984156135, 0.003476719997706823, 0.00342772699877969]</span><br></pre></td></tr></table></figure>

<p>##二、编写通用计时装饰器</p>
<p> python2和python3里面的计时函数是不一样的，所以推荐建议使用timeit模块中的timeit.default_timer()，它会根据平台不同选取合适的计时函数，详解如下</p>
<p> 由timeit.default_timer()的官方文档可知，计时时间精度和平台以及使用的函数有关：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Define a default timer, in a platform-specific manner. On Windows, time.clock() has microsecond granularity, but time.time()’s granularity is 1/60th of a second. On Unix, time.clock() has 1/100th of a second granularity, and time.time() is much more precise. On either platform, default_timer() measures wall clock time, not the CPU time. This means that other processes running on the same computer may interfere with the timing.&quot;</span><br><span class="line"></span><br><span class="line">翻译过来就是：</span><br><span class="line">“定义在默认的计时器中，针对不同平台采用不同方式。在Windows上，time.clock()具有微秒精度，但是time.time()精度是1/60s。在Unix上，time.clock()有1/100s精度，而且time.time()精度远远更高。在另外的平台上，default_timer()测量的是墙上时钟时间，不是CPU时间。这意味着同一计算机的其他进程可能影响计时。”</span><br></pre></td></tr></table></figure>

<p> 具体区别可以查看python2和3中timeit的实现</p>
<p> 在python2中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if sys.platform == &quot;win32&quot;:</span><br><span class="line">    # On Windows, the best timer is time.clock()</span><br><span class="line">    default_timer = time.clock</span><br><span class="line">else:</span><br><span class="line">    # On most other platforms the best timer is time.time()</span><br><span class="line">    default_timer = time.time</span><br></pre></td></tr></table></figure>

<p>在python3中：default_timer &#x3D; time.perf_counter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由time.clock()的官方文档可以看出：</span><br><span class="line"></span><br><span class="line">&quot;Deprecated since version 3.3: The behaviour of this function depends on the platform: use perf_counter() or process_time() instead, depending on your requirements, to have a well defined behaviour.&quot;</span><br><span class="line"></span><br><span class="line">翻译过来就是：</span><br><span class="line">“python3.3版本后time.clock()就过时了：这个函数的行为受平台影响，用time.perf_counter()”或者time.process_time()代替来得到一个定义更好的行为，具体取决于你的需求。”</span><br></pre></td></tr></table></figure>

<p> 更多详细信息请看官方文档中的time.get_clock_info()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.python.org/3/library/time.html#time.get_clock_info</span><br></pre></td></tr></table></figure>

<p> 综上，我们可以定一个同时适用于Python2和Python3解释器的通用计时装饰器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import timeit</span><br><span class="line"></span><br><span class="line">def clock(func):</span><br><span class="line">    def clocked(*args, **kwargs):</span><br><span class="line">        start = timeit.default_timer()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        run_time = timeit.default_timer() - start</span><br><span class="line">        func_name = func.__name__</span><br><span class="line">        arg_str = &#x27;, &#x27;.join(repr(arg) for arg in args)</span><br><span class="line">        print(&#x27;调用&gt;&gt;&gt;%s(%s)   返回值&gt;&gt;&gt;%r   耗时&gt;&gt;&gt;%0.8fs&#x27; % (func_name, arg_str, res, run_time))</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">    return clocked</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@clock</span><br><span class="line">def func(n):</span><br><span class="line">    &quot;&quot;&quot;累计加1&quot;&quot;&quot;</span><br><span class="line">    res=0</span><br><span class="line">    for i in range(n):</span><br><span class="line">        res+=1</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    func(10000000)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>49-附录四：Python格式化字符串的4种方式</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/49_%E9%99%84%E5%BD%95%E5%9B%9B%EF%BC%9APython%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%844%E4%B8%AD%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Python格式化字符串的4中方式"><a href="#Python格式化字符串的4中方式" class="headerlink" title="Python格式化字符串的4中方式"></a><strong>Python格式化字符串的4中方式</strong></h2><h2 id="一：-号"><a href="#一：-号" class="headerlink" title="一：%号"></a><strong>一：%号</strong></h2><p> %号格式化字符串的方式从Python诞生之初就已经存在，时至今日，python官方也并未弃用%号，但也并不推荐这种格式化方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、格式的字符串（即%s）与被格式化的字符串（即传入的值）必须按照位置一一对应</span><br><span class="line"># ps：当需格式化的字符串过多时，位置极容易搞混</span><br><span class="line">print(&#x27;%s asked %s to do something&#x27; % (&#x27;egon&#x27;, &#x27;lili&#x27;))  # egon asked lili to do something</span><br><span class="line">print(&#x27;%s asked %s to do something&#x27; % (&#x27;lili&#x27;, &#x27;egon&#x27;))  # lili asked egon to do something</span><br><span class="line"></span><br><span class="line"># 2、可以通过字典方式格式化，打破了位置带来的限制与困扰</span><br><span class="line">print(&#x27;我的名字是 %(name)s, 我的年龄是 %(age)s.&#x27; % &#123;&#x27;name&#x27;: &#x27;egon&#x27;, &#x27;age&#x27;: 18&#125;)</span><br><span class="line"></span><br><span class="line">kwargs=&#123;&#x27;name&#x27;: &#x27;egon&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">print(&#x27;我的名字是 %(name)s, 我的年龄是 %(age)s.&#x27; % kwargs)</span><br></pre></td></tr></table></figure>

<h2 id="二：str-format"><a href="#二：str-format" class="headerlink" title="二：str.format"></a><strong>二：str.format</strong></h2><p> 该<code>format</code>方法是在Python 2.6中引入的，是字符串类型的内置方法。因为str.format的方式在性能和使用的灵活性上都比%号更胜一筹，所以推荐使用</p>
<p><em>2.1 使用位置参数</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按照位置一一对应</span><br><span class="line">print(&#x27;&#123;&#125; asked &#123;&#125; to do something&#x27;.format(&#x27;egon&#x27;, &#x27;lili&#x27;))  # egon asked lili to do something</span><br><span class="line">print(&#x27;&#123;&#125; asked &#123;&#125; to do something&#x27;.format(&#x27;lili&#x27;, &#x27;egon&#x27;))  # lili asked egon to do something</span><br></pre></td></tr></table></figure>

<p><em>2.2 使用索引</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用索引取对应位置的值</span><br><span class="line">print(&#x27;&#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;0&#125;&#x27;.format(&#x27;x&#x27;,&#x27;y&#x27;)) # xxyx</span><br></pre></td></tr></table></figure>

<p><em>2.3 使用关键字参数or字典</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可以通过关键字or字典方式的方式格式化，打破了位置带来的限制与困扰</span><br><span class="line">print(&#x27;我的名字是 &#123;name&#125;, 我的年龄是 &#123;age&#125;.&#x27;.format(age=18, name=&#x27;egon&#x27;))</span><br><span class="line"></span><br><span class="line">kwargs = &#123;&#x27;name&#x27;: &#x27;egon&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">print(&#x27;我的名字是 &#123;name&#125;, 我的年龄是 &#123;age&#125;.&#x27;.format(**kwargs)) # 使用**进行解包操作</span><br></pre></td></tr></table></figure>

<p><em>2.4 填充与格式化</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先取到值,然后在冒号后设定填充格式：[填充字符][对齐方式][宽度]</span><br><span class="line"></span><br><span class="line"># *&lt;10：左对齐，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*&lt;10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # 开始执行******</span><br><span class="line"></span><br><span class="line"># *&gt;10：右对齐，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*&gt;10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # ******开始执行</span><br><span class="line"></span><br><span class="line"># *^10：居中显示，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*^10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # ***开始执行***</span><br></pre></td></tr></table></figure>

<p><em>2.5 精度与进制</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;&#123;salary:.3f&#125;&#x27;.format(salary=1232132.12351))  #精确到小数点后3位，四舍五入，结果为：1232132.124</span><br><span class="line">print(&#x27;&#123;0:b&#125;&#x27;.format(123))  # 转成二进制，结果为：1111011</span><br><span class="line">print(&#x27;&#123;0:o&#125;&#x27;.format(9))  # 转成八进制，结果为：11</span><br><span class="line">print(&#x27;&#123;0:x&#125;&#x27;.format(15))  # 转成十六进制，结果为：f</span><br><span class="line">print(&#x27;&#123;0:,&#125;&#x27;.format(99812939393931))  # 千分位格式化，结果为：99,812,939,393,931</span><br></pre></td></tr></table></figure>

<h2 id="三：f-Strings"><a href="#三：f-Strings" class="headerlink" title="三：f-Strings"></a><strong>三：f-Strings</strong></h2><p>str.format() 比 %格式化高级了一些，但是它还是有自己的缺陷。当需要传入的字符串过多时，仍然会显得非常冗长。与在Python 3.6中引入 了f-strings，不仅比str.format更简洁，性能上也更胜一筹</p>
<p> f<code>-</code>string是以f或F开头的字符串， 核心在于字符串中符号{}的使用</p>
<p><em>3.1 {}中可以是变量名</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &#x27;egon&#x27;</span><br><span class="line">age = 18</span><br><span class="line">print(f&#x27;&#123;name&#125; &#123;age&#125;&#x27;)  # egon 18</span><br><span class="line">print(F&#x27;&#123;age&#125; &#123;name&#125;&#x27;)  # 18 egon</span><br></pre></td></tr></table></figure>

<p><em>3.2 {}中可以是表达式</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可以在&#123;&#125;中放置任意合法的Python表达式，会在运行时计算</span><br><span class="line"># 比如：数学表达式</span><br><span class="line">print(f&#x27;&#123;3*3/2&#125;&#x27;) # 4.5</span><br><span class="line"></span><br><span class="line"># 比如：函数的调用</span><br><span class="line">def foo(n):</span><br><span class="line">    print(&#x27;foo say hello&#x27;)</span><br><span class="line">    return n</span><br><span class="line"></span><br><span class="line">print(f&#x27;&#123;foo(10)&#125;&#x27;) # 会调用foo(10),然后打印其返回值</span><br><span class="line"></span><br><span class="line"># 比如：调用对象的方法</span><br><span class="line">name=&#x27;EGON&#x27;</span><br><span class="line">print(f&#x27;&#123;name.lower()&#125;&#x27;) # egon</span><br></pre></td></tr></table></figure>

<p><em>3.3 在类中的使用</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Person(object):</span><br><span class="line">...     def __init__(self, name, age):</span><br><span class="line">...         self.name = name</span><br><span class="line">...         self.age = age</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...         return f&#x27;&#123;self.name&#125;:&#123;self.age&#125;&#x27;</span><br><span class="line">...     def __repr__(self):</span><br><span class="line">...         return f&#x27;===&gt;&#123;self.name&#125;:&#123;self.age&#125;&lt;===&#x27;</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; obj=Person(&#x27;egon&#x27;,18)</span><br><span class="line">&gt;&gt;&gt; print(obj) # 触发__str__</span><br><span class="line">egon:18</span><br><span class="line">&gt;&gt;&gt; obj        # 触发__repr__</span><br><span class="line">===&gt;egon:18&lt;===</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; # 在f-Strings中的使用</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;obj&#125;&#x27;   # 触发__str__</span><br><span class="line">&#x27;egon:18&#x27;</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;obj!r&#125;&#x27; # 触发__repr__</span><br><span class="line">&#x27;===&gt;egon:18&lt;===&#x27;  </span><br></pre></td></tr></table></figure>

<p><em>3.3 多行f-Stings</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当格式化字符串过长时，如下列表info</span><br><span class="line">name = &#x27;Egon&#x27;</span><br><span class="line">age = 18</span><br><span class="line">gender = &#x27;male&#x27;</span><br><span class="line">hobbie1=&#x27;play&#x27;</span><br><span class="line">hobbie2=&#x27;music&#x27;</span><br><span class="line">hobbie3=&#x27;read&#x27;</span><br><span class="line">info = [f&#x27;名字：&#123;name&#125;年龄：&#123;age&#125;性别：&#123;gender&#125;&#x27;,f&#x27;第一个爱好：&#123;hobbie1&#125;第二个爱好：&#123;hobbie2&#125;第三个爱好：&#123;hobbie3&#125;&#x27;] </span><br><span class="line"></span><br><span class="line"># 我们可以回车分隔到多行，注意每行前都有一个f</span><br><span class="line">info = [</span><br><span class="line">    # 第一个元素</span><br><span class="line">    f&#x27;名字：&#123;name&#125;&#x27;</span><br><span class="line">    f&#x27;年龄：&#123;age&#125;&#x27;</span><br><span class="line">    f&#x27;性别：&#123;gender&#125;&#x27;,</span><br><span class="line"></span><br><span class="line">    # 第二个元素</span><br><span class="line">    f&#x27;第一个爱好：&#123;hobbie1&#125;&#x27;</span><br><span class="line">    f&#x27;第二个爱好：&#123;hobbie2&#125;&#x27;</span><br><span class="line">    f&#x27;第三个爱好：&#123;hobbie3&#125;&#x27;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(info)</span><br><span class="line"># [&#x27;名字：Egon年龄：18性别：male&#x27;, &#x27;第一个爱好：play第二个爱好：music第三个爱好：read&#x27;]</span><br></pre></td></tr></table></figure>

<p><em>3.4 引号的嵌套</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当字符串嵌套发送冲突时，与正常的字符串处理方式是一样的</span><br><span class="line"># 1、外层为单引号，内层嵌套也为单引号，并且想要输入的内容也为单引号，那么外层需要改用双引号</span><br><span class="line">print(&quot;my name is &#x27;egon&#x27;&quot;)</span><br><span class="line"></span><br><span class="line"># 2、外层为单引号，内层嵌套也为单引号，并且想要输入的内容也为单引号，需要用到转义</span><br><span class="line">print(&#x27;my name is \&#x27;egon\&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p><em>3.5注意</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、反斜杠可以用来进行字符转义，但不能用在&#123;&#125;的表达式中</span><br><span class="line">f&#x27;&#123;1\2&#125;&#x27; # 语法错误</span><br><span class="line"></span><br><span class="line">#2、注释#号也不能出现在&#123;&#125;的表达式中</span><br><span class="line">f&#x27;&#123;x#&#125;&#x27; # 语法错误</span><br></pre></td></tr></table></figure>

<p><em>3.6 括号的处理</em></p>
<p>基于3.5我们得知，不能在{}内出现反斜杠\，所以，当我们的输出的结果中需要包含{}时，下面的做法就是错误的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(f&#x27;\&#123;天王盖地虎\&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>类似于输出%号的做法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;%s%%&#x27; %30)</span><br><span class="line">30%</span><br></pre></td></tr></table></figure>

<p>若想输出{},那么需要在原有的基础上再套一层，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(f&#x27;&#123;&#123;天王盖地虎&#125;&#125;&#x27;) # &#123;天王盖地虎&#125;</span><br><span class="line"></span><br><span class="line">print(f&#x27;&#123;&#123;&#123;&#123;天王盖地虎&#125;&#125;&#125;&#125;&#x27;) # &#123;&#123;天王盖地虎&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>性能对比&#x3D;&gt;f_Stings性能最高</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from timeit import timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_s():</span><br><span class="line">    name = &#x27;Egon&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return &#x27;%s:%s.&#x27; % (name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_format():</span><br><span class="line">    name = &#x27;Egon&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return &#x27;&#123;&#125;:&#123;&#125;.&#x27;.format(name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_f_strings():</span><br><span class="line">    name = &#x27;Egon&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return f&#x27;&#123;name&#125;:&#123;age&#125;.&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res1 = timeit(test_s, number=1000000)</span><br><span class="line">res2 = timeit(test_format, number=1000000)</span><br><span class="line">res3 = timeit(test_f_strings, number=1000000)</span><br><span class="line">print(res1) # 0.3709844550030539</span><br><span class="line">print(res2) # 0.47834375899401493</span><br><span class="line">print(res3) # 0.3111891380031011, 最快</span><br></pre></td></tr></table></figure>

<p>##四：标准库模板</p>
<p> 从Python 2.4起，Python标准库string引入了Template也可以用来格式化字符串，所以说，与前三种方式的一个显著区别就是：Template并属于python语言的核心语法特征，使用方式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from string import Template</span><br><span class="line"></span><br><span class="line">name=&#x27;EGON&#x27;</span><br><span class="line">t = Template(&#x27;Hello $name!&#x27;)</span><br><span class="line">res=t.substitute(name=name)</span><br><span class="line"></span><br><span class="line">print(res)  # Hello EGON!</span><br></pre></td></tr></table></figure>

<p>另外一个不同的地方是这个模板字符串不支持类似str.format那样的进制转换，需要我们自己处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from string import Template</span><br><span class="line"></span><br><span class="line">name=&#x27;EGON&#x27;</span><br><span class="line">templ_string = &#x27;Hello $name, there is a $error error!!!&#x27;</span><br><span class="line">res=Template(templ_string).substitute(name=name, error=hex(12345))</span><br><span class="line"></span><br><span class="line">print(res) # Hello EGON, there is a 0x3039 error!!!</span><br></pre></td></tr></table></figure>

<p>使用模板字符串Template的最佳的时机就是当你的程序需要处理由用户提供的输入内容时。模板字符串是最保险的选择，因为可以降低复杂性。</p>
<p>其他一些复杂的字符串格式化技巧的可能会给你的程序带来安全漏洞</p>
<h2 id="五：总结四种方式的应用场景"><a href="#五：总结四种方式的应用场景" class="headerlink" title="五：总结四种方式的应用场景"></a><strong>五：总结四种方式的应用场景</strong></h2><p>1、如果格式化的字符串是由用户输入的，那么基于安全性考虑，推荐使用Template</p>
<p>2、如果使用的python3.6+版本的解释器，推荐使用f-Stings</p>
<p>3、如果要兼容python2.x版本的python解释器，推荐使用str.format</p>
<p>4、如果不是测试的代码，不推荐使用%</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>53-附录八：Collections之容器数据类型</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/53_%E9%99%84%E5%BD%95%E5%85%AB%EF%BC%9Acollections--%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>collections模块：<a href="https://link.zhihu.com/?target=https://yiyibooks.cn/xx/python_352/library/collections.html">https://yiyibooks.cn/xx/python_</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>51-附录六：轻松搞定位运算</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/51_%E9%99%84%E5%BD%95%E5%85%AD%EF%BC%9A%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a><strong>一 前言</strong></h2><p> 位运算，一个极容易被低端码农忽视的地带，因为它略微需要用一丢丢智商，真的只有那么一丢丢，但高手与low手的差距往往就是长这么一丢丢，能达到的深度就截然不同了，今天egon就来给大家聊一聊位运算那些风骚且高级的操作，但要理解位运算，得从机器数与真值说起，请看大屏幕</p>
<h2 id="二-真值、机器数-原码、反码、补码"><a href="#二-真值、机器数-原码、反码、补码" class="headerlink" title="二 真值、机器数(原码、反码、补码)"></a><strong>二 真值、机器数(原码、反码、补码)</strong></h2><p> “真值”指的就是数本身，例如-10，真值就是-10</p>
<p> 一个数在计算机中的二进制表示形式，叫做这个数的机器数</p>
<p> 在计算机中，用来表示有符号数的机器数有三种，即原码、反码、补码</p>
<p> 三种表示方法均有“符号位”和“数值位”两部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、符号位都是占据最高位，用0表示“正数”，用1表示“负数”</span><br><span class="line">2、数值位，三种表示方法各不相同</span><br></pre></td></tr></table></figure>

<p> 整型数字有8位、16位、32位、64位几种，篇幅问题，我们先单以8位整型为例来介绍</p>
<p> 在介绍之前，egon先来先扫一下盲，估计会扫死99%的人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：8位二进制数可以表示的数值范围是多少，99%的人张口就来：-128~127</span><br><span class="line"></span><br><span class="line">ok，8位二进制数，最高位需要用来表示符号，那么剩下的7位用来表示数值</span><br><span class="line"></span><br><span class="line">于是，最大数为1111 1111=&gt;+127，最小0111 1111=&gt;-127，卧槽，得出的结论是8位二进制数可以表示的数值范围是-127到+127，傻逼了吧你，哈哈哈</span><br><span class="line"></span><br><span class="line">灵魂拷问：-128到底怎么来的？？？</span><br><span class="line"></span><br><span class="line"> 真相是这样的：</span><br><span class="line">  8位二进制数用7位表示数值，那么7位2进制数000 0000的值为0</span><br><span class="line">  那么,它前面加上符号位0,还表示0吧?</span><br><span class="line">  那好,如果它前面加上1呢,仍然表示0?这不是重复了么?</span><br><span class="line">  一个0,怎么用两个值来表示呢！！！</span><br><span class="line">  所以1000 0000就表示-128啦，</span><br></pre></td></tr></table></figure>

<p> ok，我们接下来就在8位二进制数，即-128~127的范围内取值来介绍它的原码、反码、补码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、正数：原码、反码、补码都一样</span><br><span class="line">   真值：3</span><br><span class="line">   原码：0000 0011   最高位为0，表示正数</span><br><span class="line">   反码：0000 0011</span><br><span class="line">   补码：0000 0011</span><br><span class="line"></span><br><span class="line">2、负数：原码、反码、补码不同</span><br><span class="line">   真值：-3</span><br><span class="line">   原码：1000 0011   最高位为1，表示负数</span><br><span class="line">   反码：1111 1100   由原码演变而来，原码的符号位不变，数值位全部取反</span><br><span class="line">   补码：1111 1101   在反码的基础上+1</span><br></pre></td></tr></table></figure>

<p> 为了大家能够清晰地看到”真值“与”补码“之间的相互转换，egon画了如下两幅图</p>
<p><img src="https://pic4.zhimg.com/80/v2-d9ef172e92108c6f76749ae4cf4b49d7_720w.jpg" alt="img"></p>
<p> 在计算机系统中，数值一律用补码来存储 ！！！  主要原因：使用补码，可以将符号位和其它位统一处理；同时，减法也可按加法来处理，需要注意的是两个用 补码表示的数相加时，如果最高位（符号位）有进位，则进位被舍弃，处理完后我们如上图所示用补码反推出真值即可，例如计算机在计算8-3的时候，会这么做8+（-3），具体如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;反码-&gt;补码</span><br><span class="line">    真值：8</span><br><span class="line">    原码：0000 1000  </span><br><span class="line">    反码：0000 1000</span><br><span class="line">    补码：0000 1000</span><br><span class="line"></span><br><span class="line">    真值：-3</span><br><span class="line">    原码：1000 0011  </span><br><span class="line">    反码：1111 1100</span><br><span class="line">    补码：1111 1101</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为相加</span><br><span class="line">    8的补码：0000 1000</span><br><span class="line">   -3的补码：1111 1101</span><br><span class="line">  相加得补码：0000 0101 # 补码相加，高位有进位会被舍弃</span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line">    上一步得到的补码结果：0000 0101</span><br><span class="line">    符号位是0，为正数，那么就简单了，正数的原、反、补码都一样，所以一步到位</span><br><span class="line">    补码-&gt;反码-&gt;原码：0000 0101</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：5</span><br></pre></td></tr></table></figure>

<p>练习：8+（-9）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：8</span><br><span class="line">    原码：0000 1000  </span><br><span class="line">    反码：0000 1000</span><br><span class="line">    补码：0000 1000</span><br><span class="line"></span><br><span class="line">    真值：-9</span><br><span class="line">    原码：1000 1001  </span><br><span class="line">    反码：1111 0110</span><br><span class="line">    补码：1111 0111</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为相加</span><br><span class="line">    8的补码：0000 1000</span><br><span class="line">   -9的补码：1111 0111</span><br><span class="line">  相加得补码：1111 1111 </span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1111 1111</span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1111 1110</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1000 0001</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-1</span><br></pre></td></tr></table></figure>

<p> 非常震撼人心的设计，有了补码以后，减法都可以当做加法去运算，你可知道，这将极大地简化计算机的运算设计。不仅如此！！！</p>
<p> 我们即将介绍的位运算也都是基于补码进行的，所以，你还会觉得egon在啰嗦吗？呵呵</p>
<h2 id="三-位运算"><a href="#三-位运算" class="headerlink" title="三 位运算"></a><strong>三 位运算</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按位与&amp;：两位全为1，结果才为1，否则为0</span><br><span class="line">按位或|：两位只要存在一个1，结果就为1，否则为0</span><br><span class="line">按位异或^：只有在两位不相同，即一个为0一个为1的情况下，结果才为1，否则为0</span><br><span class="line">&lt;&lt; n：各二进制位全部左移n位，高位丢弃，低位补0</span><br><span class="line">&gt;&gt; n: 各二进制位全部右移n位，如果是正数，则高位补0，如果是负数则高位补1</span><br></pre></td></tr></table></figure>

<p>####3.1 按位与&amp;</p>
<p>示例1：8 &amp; -3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;反码-&gt;补码</span><br><span class="line">    真值：8</span><br><span class="line">    原码：0000 1000  </span><br><span class="line">    反码：0000 1000</span><br><span class="line">    补码：0000 1000</span><br><span class="line"></span><br><span class="line">    真值：-3</span><br><span class="line">    原码：1000 0011  </span><br><span class="line">    反码：1111 1100</span><br><span class="line">    补码：1111 1101</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为&amp;</span><br><span class="line">    8的补码：0000 1000</span><br><span class="line">   -3的补码：1111 1101</span><br><span class="line">    &amp;得补码：0000 1000</span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line">    上一步得到的补码结果：0000 1000</span><br><span class="line">    符号位是0，为正数，那么就简单了，正数的原、反、补码都一样，所以一步到位</span><br><span class="line">    补码-&gt;反码-&gt;原码：0000 1000</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：8</span><br></pre></td></tr></table></figure>

<p>示例2：-8 &amp; -9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">    真值：-9</span><br><span class="line">    原码：1000 1001  </span><br><span class="line">    反码：1111 0110</span><br><span class="line">    补码：1111 0111</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为&amp;</span><br><span class="line">   -8的补码：1111 1000</span><br><span class="line">   -9的补码：1111 0111</span><br><span class="line">    &amp;得补码：1111 0000 </span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1111 0000 </span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1110 1111</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1001 0000</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-16</span><br></pre></td></tr></table></figure>

<p>####3.2 按位或|</p>
<p>示例1：-8 | -9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">    真值：-9</span><br><span class="line">    原码：1000 1001  </span><br><span class="line">    反码：1111 0110</span><br><span class="line">    补码：1111 0111</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为|</span><br><span class="line">   -8的补码：1111 1000</span><br><span class="line">   -9的补码：1111 0111</span><br><span class="line">    |得补码：1111 1111 </span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1111 1111 </span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1111 1110</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1000 0001</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-1</span><br></pre></td></tr></table></figure>

<p>####3.3 按位异或^</p>
<p>示例1：-8 ^ -9</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">    真值：-9</span><br><span class="line">    原码：1000 1001  </span><br><span class="line">    反码：1111 0110</span><br><span class="line">    补码：1111 0111</span><br><span class="line"></span><br><span class="line">第二步：补码之间的运算，此处为^</span><br><span class="line">   -8的补码：1111 1000</span><br><span class="line">   -9的补码：1111 0111</span><br><span class="line">    ^得补码：0000 1111 </span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line">    上一步得到的补码结果：0000 1111</span><br><span class="line">    符号位是0，为正数，那么就简单了，正数的原、反、补码都一样，所以一步到位</span><br><span class="line">    补码-&gt;反码-&gt;原码：0000 1111</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：15</span><br></pre></td></tr></table></figure>

<p>示例2：^ -8 单独一个^代表取反的意思(适用于go，不适用于python)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">   -8的补码：1111 1000</span><br><span class="line"> ^取反得补码：0000 0111 </span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line">    上一步得到的补码结果：0000 0111</span><br><span class="line">    符号位是0，为正数，那么就简单了，正数的原、反、补码都一样，所以一步到位</span><br><span class="line">    补码-&gt;反码-&gt;原码：0000 0111</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：7</span><br></pre></td></tr></table></figure>

<p>####3.4 向左位移&lt;&lt; n</p>
<p>示范1：-8 &lt;&lt; 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">第二步：&lt;&lt; n 各二进制位全部左移n位，高位丢弃，低位补0</span><br><span class="line">    补码：1111 1000</span><br><span class="line">    &lt;&lt;3: 1100 0000</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1100 0000</span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1011 1111</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1100 0000</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-64</span><br></pre></td></tr></table></figure>

<p>####3.5 向右位移&gt;&gt; n</p>
<p>示范1：-8 &gt;&gt; 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-8</span><br><span class="line">    原码：1000 1000  </span><br><span class="line">    反码：1111 0111</span><br><span class="line">    补码：1111 1000</span><br><span class="line"></span><br><span class="line">第二步：&gt;&gt; n 各二进制位全部右移n位，如果是正数，则高位补0，如果是负数则高位补1</span><br><span class="line">    补码：1111 1000</span><br><span class="line">    &gt;&gt;3: 1111 1111</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1111 1111</span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1111 1110</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1000 0001</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-1</span><br></pre></td></tr></table></figure>

<p>示范2：8 &gt;&gt; 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：8</span><br><span class="line">    原码：0000 1000  </span><br><span class="line">    反码：0000 1000</span><br><span class="line">    补码：0000 1000</span><br><span class="line"></span><br><span class="line">第二步：&gt;&gt; n 各二进制位全部右移n位，如果是正数，则高位补0，如果是负责则高位补1</span><br><span class="line">    补码：0000 1000</span><br><span class="line">    &gt;&gt;3: 0000 0001</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line">    上一步得到的补码结果：0000 0001</span><br><span class="line">    符号位是0，为正数，那么就简单了，正数的原、反、补码都一样，所以一步到位</span><br><span class="line">    补码-&gt;反码-&gt;原码：0000 0001</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：1</span><br></pre></td></tr></table></figure>

<p>示范3：-300 &gt;&gt; 8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步：真值-&gt;原码-&gt;补码</span><br><span class="line">    真值：-300  </span><br><span class="line">    原码：1000 0001 0010 1100 # -300 已经超过了8位二进制能表示的范围，需要用16位表示</span><br><span class="line">    反码：1111 1110 1101 0011</span><br><span class="line">    补码：1111 1110 1101 0100</span><br><span class="line"></span><br><span class="line">第二步：&gt;&gt; n 各二进制位全部右移n位，如果是正数，则高位补0，如果是负责则高位补1</span><br><span class="line">    补码：1111 1110 1101 0100</span><br><span class="line">    &gt;&gt;8: 1111 1111 1111 1110</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">第三步：补码-&gt;反码-&gt;原码-&gt;真值</span><br><span class="line"> 补码-&gt;反码</span><br><span class="line">        补码结果：1111 1111 1111 1110</span><br><span class="line">        符号位是1，为负数，参照上图2的步骤</span><br><span class="line"></span><br><span class="line">        补码-&gt;反码：-1，得到反码：1111 1111 1111 1101</span><br><span class="line">    </span><br><span class="line">    反码-&gt;原码：符号位不变，其余位取反，得到原码：1000 0000 0000 0010</span><br><span class="line">    </span><br><span class="line">    原码-&gt;真值：-2</span><br></pre></td></tr></table></figure>

<h2 id="四-位运算高级操作"><a href="#四-位运算高级操作" class="headerlink" title="四 位运算高级操作"></a><strong>四 位运算高级操作</strong></h2><p>位运算是 cpu 直接支持的，效率最高，位运算可能在平常的编程中使用的并不多，但涉及到底层优化，一些算法及源码可能会经常遇见，下面来介绍一下风骚的操作</p>
<p>####4.1 用位运算 &amp; 取代 % 取模</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X % 2^n = X &amp; (2^n – 1)</span><br><span class="line">注意：用位运算 &amp; 来取代 % 取模需要被取模的数必须是2的幂才成立</span><br></pre></td></tr></table></figure>

<p>示范1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 % (2^3) 等于 10 &amp; (2^3-1)</span><br><span class="line">即</span><br><span class="line">10 % 8 等于 10 &amp; 7</span><br></pre></td></tr></table></figure>

<p>示范2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 % (2^2) 等于 10 &amp; (2^2-1)</span><br><span class="line">即</span><br><span class="line">10 % 4 等于 10 &amp; 3</span><br></pre></td></tr></table></figure>

<p>####4.2 将一个数左移 n 位，相当于乘以了 2 的 n 次方，右移n位，相当于除以2的n次方取整</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 &lt;&lt; 3 等同于10 * 2^3 </span><br><span class="line">10 &gt;&gt; 3 等同于10 / 3</span><br></pre></td></tr></table></figure>

<h3 id="4-3-判断奇偶"><a href="#4-3-判断奇偶" class="headerlink" title="4.3 判断奇偶"></a><strong>4.3 判断奇偶</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们可以利用 &amp; 运算符的特性，来判断二进制数第一位是0还是1。</span><br><span class="line">用if ((a &amp; 1) == 0) 代替 if (a % 2 == 0)来判断a是不是偶数。</span><br></pre></td></tr></table></figure>

<h3 id="4-4-交互数值"><a href="#4-4-交互数值" class="headerlink" title="4.4 交互数值"></a><strong>4.4 交互数值</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、借助临时变量来交互数值</span><br><span class="line"></span><br><span class="line">    a:=10</span><br><span class="line">    b:=20</span><br><span class="line"></span><br><span class="line">    temp:=a</span><br><span class="line">    a=b</span><br><span class="line">    b=temp</span><br><span class="line"></span><br><span class="line"> fmt.Println(a,b) // 结果20 10</span><br><span class="line">2、借助累加和</span><br><span class="line">如果考虑到内存，不希望使用临时变量（其实就是为了炫酷），可以这样实现：</span><br><span class="line"></span><br><span class="line">    a:=10</span><br><span class="line">    b:=20</span><br><span class="line"></span><br><span class="line">    a = a + b</span><br><span class="line">    b = a - b</span><br><span class="line">    a = a - b</span><br><span class="line">    fmt.Println(a,b) // 结果20 10</span><br><span class="line">    </span><br><span class="line">从数学角度来分析一下</span><br><span class="line">- 第一步：a = a + b</span><br><span class="line">- 第二步：b = a - b = (a + b) - b = a</span><br><span class="line">- 第三步：a = a - b = (a + b) - b = (a + b) - a = b</span><br><span class="line"></span><br><span class="line">3、使用 ^ 位运算符</span><br><span class="line">如果想要更炫酷一点可以使用 ^ 来帮忙实现：</span><br><span class="line">先来了解一下 ^ 的几个特性：</span><br><span class="line">a ^ a = 0</span><br><span class="line">a ^ 0 = a</span><br><span class="line">(a ^ b) ^ c = a ^ (b ^ c)</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">    a:=10</span><br><span class="line">    b:=20</span><br><span class="line"></span><br><span class="line">    a ^= b;</span><br><span class="line">    b ^= a;</span><br><span class="line">    a ^= b;</span><br><span class="line">    fmt.Println(a,b) // 结果20 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从数学角度来分析一下：</span><br><span class="line">- 第一步：a = a ^ b</span><br><span class="line">- 第二步：b = a ^ b = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a</span><br><span class="line">- 第三步：a = a ^ b = (a ^ b) ^ b = (a ^ a) ^ b = b ^ 0 = b</span><br></pre></td></tr></table></figure>

<p>####4.5 项目中的应用</p>
<p>在项目中可以用位运算进行一些状态的运算，效率极其高，例如：现在我们有一些爱好需求，这些爱好有 足球 羽毛球 乒乓球 篮球 游泳 如果按照整数的形式去定义，那就有无数多种情况，毕竟可以两两组合嘛，python中的列表、go中的数组都不是最佳选择</p>
<p>可以直接用二进制位表示，1代表爱好，0代表没有该爱好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爱好：只有足球</span><br><span class="line">表示：1 0 0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">爱好：乒乓球、游泳</span><br><span class="line">表示：0 0 1 0 1</span><br></pre></td></tr></table></figure>

<p>接下来就可以用位运算进行一些风骚的操作啦，例如</p>
<p>#####应用1：检查是否存在某个爱好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">喜欢足球的状态是：1 0 0 0 0 </span><br><span class="line">     小明的喜好：0 1 0 1 0</span><br><span class="line"> 与&amp;计算的结果为：0 0 0 0 0，返回位false，所以小明不存在喜好足球的状态</span><br></pre></td></tr></table></figure>

<p>#####应用2：添加某个爱好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">喜欢足球：   1 0 0 0 0</span><br><span class="line">小明的喜好： 0 1 0 1 0 </span><br><span class="line">或|运算之后： 1 1 0 1 0</span><br></pre></td></tr></table></figure>

<h3 id="应用3：移除某个爱好"><a href="#应用3：移除某个爱好" class="headerlink" title="应用3：移除某个爱好"></a><strong>应用3：移除某个爱好</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（传入）喜好足球 ： 1 0 0 0 0</span><br><span class="line"></span><br><span class="line">    小明的喜好：   1 0 1 0 1</span><br><span class="line">先将足球取反^ ：   0 1 1 1 1</span><br><span class="line">   再进与&amp;运算：   0 0 1 0 1</span><br></pre></td></tr></table></figure>

<p>以上风骚操作均适用于python！！！egon忙忙叨叨写了一天，希望能够帮助到你</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--虚拟机安装</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day01-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="day01-课堂笔记"><a href="#day01-课堂笔记" class="headerlink" title="day01 : 课堂笔记"></a>day01 : 课堂笔记</h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p><strong>1、安装虚拟机</strong></p>
<p><img src="/.%5Cassets%5Cimage-20210302121236930.png" alt="image-20210302121236930"></p>
<p>解压上述软件，创建vmware.exe快捷方式，然后用快捷方式打开。</p>
<p><img src="/.%5Cassets%5Cimage-20210302121408360.png" alt="image-20210302121408360"></p>
<p><strong>2、创建虚拟机</strong></p>
<p><img src="/.%5Cassets%5Cimage-20210302121456338.png" alt="image-20210302121456338"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121550128.png" alt="image-20210302121550128"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121622000.png" alt="image-20210302121622000"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121745568.png" alt="image-20210302121745568"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122035359.png" alt="image-20210302122035359"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122256831.png" alt="image-20210302122256831"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122359568.png" alt="image-20210302122359568"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122603313.png" alt="image-20210302122603313"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122657199.png" alt="image-20210302122657199"></p>
<p><img src="/.%5Cassets%5Cimage-20210302123826623.png" alt="image-20210302123826623"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124229475.png" alt="image-20210302124229475"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124308081.png" alt="image-20210302124308081"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124327456.png" alt="image-20210302124327456"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124404318.png" alt="image-20210302124404318"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124713502.png" alt="image-20210302124713502"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124741038.png" alt="image-20210302124741038"></p>
<p><img src="/.%5Cassets%5Cimage-20210302125049653.png" alt="image-20210302125049653"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>54-附录九：Type Hinting</title>
    <url>/2022/07/18/03_Python/01_Python%E5%85%A5%E9%97%A8/54_%E9%99%84%E5%BD%95%E4%B9%9D%EF%BC%9ATypeHinting/</url>
    <content><![CDATA[<p>类型提示 <strong>Type hinting</strong>（最低Python版本为3.5）</p>
<p>python3新增类型提示功能，例如我们可以为函数增加类型提示信息，而不影响函数本身的执行：</p>
<p>注释的一般规则是参数名后跟一个冒号（：），然后再跟一个expression，这个expression可以是任何形式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def func(a: &#x27;spam&#x27;, b: (1, 10), c: float) -&gt; int:</span><br><span class="line">    return a + b + c</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; func(1, 2, 3)</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>返回值的形式是 -&gt; int，annotation可被保存为函数的attributes。查看所有的annotation，可通过如下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; func.__annotations__</span><br><span class="line">&#123;&#x27;c&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;a&#x27;: &#x27;spam&#x27;, &#x27;b&#x27;: (1, 10), &#x27;return&#x27;: &lt;class &#x27;int&#x27;&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>如果为函数增加了注释，可不可以继续使用默认参数呢？答案是肯定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def func(a: &#x27;spam&#x27; = 4, b: (1, 10) = 5, c: float = 6) -&gt; int:</span><br><span class="line">...   return a + b + c</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; func(1, 2, 3)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; func()</span><br><span class="line">15</span><br><span class="line">&gt;&gt;&gt; func(1, c=10)</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; func.__annotations__</span><br><span class="line">&#123;&#x27;c&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;a&#x27;: &#x27;spam&#x27;, &#x27;b&#x27;: (1, 10), &#x27;return&#x27;: &lt;class &#x27;int&#x27;&gt;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--打包与压缩</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day08-%E6%89%93%E5%8C%85%E4%B8%8E%E5%8E%8B%E7%BC%A9/%E6%89%93%E5%8C%85%E4%B8%8E%E5%8E%8B%E7%BC%A9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h1><blockquote>
<p>将文件或文件夹合并成一个包，然后通过压缩算法进行数据压缩，减小包的体积，方便网络传输。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windows：</span><br><span class="line">	zip</span><br><span class="line">	rar</span><br><span class="line"></span><br><span class="line">linux:</span><br><span class="line">	zip</span><br><span class="line">	tar</span><br><span class="line">	gz</span><br><span class="line">	bz2</span><br><span class="line">	tar.gz</span><br><span class="line">	tar.bz2</span><br><span class="line"></span><br><span class="line">压缩算法：</span><br><span class="line">	gzip</span><br><span class="line">	bzip2</span><br></pre></td></tr></table></figure>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote>
<p>是一个Windows和Linux中常用打包压缩工具，支持的压缩算法是zip。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip工具需要安装</span><br><span class="line">	yum install zip unzip -y</span><br></pre></td></tr></table></figure>

<h3 id="zip压缩一个文件"><a href="#zip压缩一个文件" class="headerlink" title="zip压缩一个文件"></a>zip压缩一个文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">	zip [参数] 压缩包名称  文件路径</span><br><span class="line"></span><br><span class="line">[root@abc ~]<span class="comment"># zip 123.zip 123.log </span></span><br><span class="line">  adding: 123.log (deflated 87%)</span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4732</span><br><span class="line">-rw-r--r--  1 root root  646165 Mar  9 10:31 123.log</span><br><span class="line">-rw-r--r--  1 root root   85296 Mar 11 11:58 123.zip</span><br></pre></td></tr></table></figure>

<h3 id="zip压缩文件夹"><a href="#zip压缩文件夹" class="headerlink" title="zip压缩文件夹"></a>zip压缩文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要一个-r参数去递归压缩文件夹下的所有内容</span></span><br><span class="line">[root@abc ~]<span class="comment"># zip -r dir.zip dir/</span></span><br><span class="line">  adding: dir/ (stored 0%)</span><br><span class="line">  adding: dir/one/ (stored 0%)</span><br><span class="line">  adding: dir/123.log (deflated 87%)</span><br></pre></td></tr></table></figure>

<h3 id="zip的静默输出"><a href="#zip的静默输出" class="headerlink" title="zip的静默输出"></a>zip的静默输出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -q：参数就是不输出任何打包信息</span></span><br><span class="line">[root@abc opt]<span class="comment"># zip -r -q etc.zip /etc/</span></span><br><span class="line">[root@abc opt]<span class="comment"># ls -l</span></span><br><span class="line">total 14200</span><br><span class="line">-rw-r--r-- 1 root root 13674457 Mar 11 12:15 etc.zip</span><br></pre></td></tr></table></figure>

<h3 id="zip解压命令（unzip）"><a href="#zip解压命令（unzip）" class="headerlink" title="zip解压命令（unzip）"></a>zip解压命令（unzip）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">	unzip [参数] 压缩包路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># unzip解压命令只能解压由zip打包的压缩文件</span></span><br><span class="line">[root@abc ~]<span class="comment"># unzip dir.zip </span></span><br><span class="line">Archive:  dir.zip</span><br><span class="line">  inflating: dir/123.log             </span><br><span class="line">[root@abc ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他压缩包由unzip解压时随即报错。</span></span><br><span class="line">[root@abc opt]<span class="comment"># unzip nginx-.tar.gz</span></span><br><span class="line">Archive:  nginx-.tar.gz</span><br><span class="line">  End-of-central-directory signature not found.  Either this file is not</span><br><span class="line">  a zipfile, or it constitutes one disk of a multi-part archive.  In the</span><br><span class="line">  latter <span class="keyword">case</span> the central directory and zipfile comment will be found on</span><br><span class="line">  the last disk(s) of this archive.</span><br><span class="line">unzip:  cannot find zipfile directory <span class="keyword">in</span> one of nginx-.tar.gz or</span><br><span class="line">        nginx-.tar.gz.zip, and cannot find nginx-.tar.gz.ZIP, period.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩包中压缩那些内容，不解压？</span></span><br><span class="line"><span class="comment"># 只查看压缩包内容不解压需要使用 -l 参数</span></span><br><span class="line">[root@abc opt]<span class="comment"># unzip -l dir.zip </span></span><br><span class="line">Archive:  dir.zip</span><br><span class="line">  Length      Date    Time    Name</span><br><span class="line">---------  ---------- -----   ----</span><br><span class="line">        0  03-11-2021 12:04   dir/</span><br><span class="line">---------                     -------</span><br><span class="line">        0                     1 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压到指定目录（-d）</span></span><br><span class="line">[root@abc ~]<span class="comment"># unzip -d /root/  etc.zip </span></span><br><span class="line">[root@abc opt]<span class="comment"># cd /root/</span></span><br><span class="line">[root@abc ~]<span class="comment"># ls</span></span><br><span class="line">]        anaconda-ks.cfg  dir.zip  index.html           test.pdf.gz  xxxeth0xxx           系统优化.md</span><br><span class="line">123.log  demo.txt         etc      nginx-0.1.22.tar.gz  test.txt     上传与下载.md</span><br><span class="line">123.zip  dir              eth0xxx  <span class="built_in">test</span>                 xxxeth0      文件管理_(高级).pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静默输出(-q)</span></span><br><span class="line">[root@abc ~]<span class="comment"># rm -rf etc</span></span><br><span class="line">[root@abc ~]<span class="comment"># unzip -q -d /root/ /opt/etc.zip </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4828</span><br><span class="line">drwxr-xr-x  91 root root    8192 Mar 11 11:16 etc</span><br></pre></td></tr></table></figure>

<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><blockquote>
<p>tar压缩支持多种压缩算法</p>
<p>tar.gz   gzip (用的最多)</p>
<p>tar.bz2 bzip2</p>
</blockquote>
<h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><blockquote>
<p>通过gzip压缩算法，将文件压缩一定体积，有利于传输, 不支持打包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4828</span><br><span class="line">-rw-r--r--   1 root root  244977 Mar 10 12:12 index.html</span><br><span class="line">[root@abc ~]<span class="comment"># gzip index.html </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4612</span><br><span class="line">-rw-r--r--   1 root root   22652 Mar 10 12:12 index.html.gz</span><br></pre></td></tr></table></figure>

<h4 id="gzip压缩一个目录"><a href="#gzip压缩一个目录" class="headerlink" title="gzip压缩一个目录"></a>gzip压缩一个目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc etc]<span class="comment"># gzip -r /etc</span></span><br><span class="line">[root@abc etc]<span class="comment"># ls </span></span><br><span class="line">abrt                        GREP_COLORS.gz               my.cnf.d                 security</span><br><span class="line">adjtime.gz                  groff                        my.cnf.gz                selinux</span><br><span class="line">aliases.db.gz               group-.gz                    NetworkManager           services.gz</span><br><span class="line">aliases.gz                  group.gz                     networks.gz              sestatus.conf.gz</span><br><span class="line">alternatives                grub2.cfg                    nsswitch.conf.bak.gz     sgml</span><br><span class="line">anacrontab.gz               grub.d                       nsswitch.conf.gz         shadow</span><br></pre></td></tr></table></figure>

<h3 id="gzip解压-d"><a href="#gzip解压-d" class="headerlink" title="gzip解压(-d)"></a>gzip解压(-d)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--   1 0 0   22652 Mar 10 12:12 index.html.gz</span><br><span class="line">[root@abc ~]<span class="comment"># gzip -d index.html.gz </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4828</span><br><span class="line">-rw-r--r--   1 0 0  244977 Mar 10 12:12 index.html</span><br></pre></td></tr></table></figure>

<h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><blockquote>
<p>使用bzip2 压缩算法来压缩一定体积的文件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4828</span><br><span class="line">-rw-r--r--   1 root root  646165 Mar  9 10:31 123.log     </span><br><span class="line">[root@abc ~]<span class="comment"># bzip2 123.log </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4240</span><br><span class="line">-rw-r--r--   1 root root       0 Mar 10 12:04 ]</span><br><span class="line">-rw-r--r--   1 root root   42210 Mar  9 10:31 123.log.bz2</span><br></pre></td></tr></table></figure>

<h3 id="bzip2解压（-d）"><a href="#bzip2解压（-d）" class="headerlink" title="bzip2解压（-d）"></a>bzip2解压（-d）</h3><blockquote>
<p>bzip2解压是针对于bzip2压缩的压缩包来进行解压。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4240</span><br><span class="line">-rw-r--r--   1 root root   42210 Mar  9 10:31 123.log.bz2</span><br><span class="line">[root@abc ~]<span class="comment"># bzip2 -d 123.log.bz2 </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 4828</span><br><span class="line">-rw-r--r--   1 root root  646165 Mar  9 10:31 123.log</span><br></pre></td></tr></table></figure>

<h3 id="tar-1"><a href="#tar-1" class="headerlink" title="tar"></a>tar</h3><blockquote>
<p>tar其实是一个打包工具，不具备压缩功能，但是可以使用参数调用压缩工具来进行解压。</p>
</blockquote>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><p>-c : 创建压缩包</p>
</li>
<li><p>-f : 指定压缩包名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -c -f test.tar 123.log </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 5468</span><br><span class="line">-rw-r--r--   1 root root  655360 Mar 11 15:49 test.tar</span><br></pre></td></tr></table></figure>
</li>
<li><p>-z ： 指定使用gzip压缩工具进行压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar  -c -z -f test-one.tar 123.log </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l </span></span><br><span class="line">total 5084</span><br><span class="line">-rw-r--r--   1 root root   85279 Mar 11 15:56 test-one.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：使用-z参数，不会自动添加.gz后缀</span></span><br><span class="line"></span><br><span class="line">[root@abc ~]<span class="comment"># tar -c -z -f anaconda.tar.gz  anaconda-ks.cfg </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 5084</span><br><span class="line">-rw-r--r--   1 root root    1010 Mar 11 15:58 anaconda.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>-j : 指定使用bzip2压缩工具进行压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -c -j -f 123-bask-one.tar 123.log </span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">total 5172</span><br><span class="line">-rw-r--r--   1 root root   42328 Mar 11 16:00 123-bak.tar.bz2</span><br><span class="line">-rw-r--r--   1 root root   42328 Mar 11 16:01 123-bask-one.tar</span><br></pre></td></tr></table></figure>
</li>
<li><p>-J : 指定使用xz压缩工具进行压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc test-tar]<span class="comment"># tar -c -J  -f etc.tar.xz /etc/</span></span><br><span class="line">[root@abc ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r-- 1 root root 9493376 Mar 11 17:00 etc.tar.xz</span><br></pre></td></tr></table></figure>
</li>
<li><p>-t : 查看压缩包内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -t -f 123-bak.tar.bz2 </span></span><br><span class="line">123.log</span><br><span class="line">[root@abc ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>-v ： 显示压缩包压缩过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -x -v -f etc.tar -C /opt/</span></span><br><span class="line">/etc/centos-release</span><br><span class="line">/etc/DIR_COLORS.lightbgcolor</span><br><span class="line">/etc/libaudit.conf</span><br><span class="line">/etc/mail.rc</span><br></pre></td></tr></table></figure>
</li>
<li><p>-P : 允许使用绝对路径进行打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -c -P -f 123-three.tar /etc/passwd</span></span><br><span class="line">[root@abc ~]<span class="comment"># tar -c -f 123-three.tar /etc/passwd</span></span><br><span class="line">tar: Removing leading `/<span class="string">&#x27; from member names</span></span><br><span class="line"><span class="string">[root@abc ~]# </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>-x ： 解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar解压是按照原来的路径进行解压</span></span><br><span class="line">[root@abc <span class="built_in">test</span>]<span class="comment"># tar -x -f etc.tar </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar会自动识别压缩功能</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>-C ： 指定解压路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc ~]<span class="comment"># tar -x -f etc.tar -C /opt/</span></span><br><span class="line">tar: Removing leading `/<span class="string">&#x27; from member names</span></span><br><span class="line"><span class="string">[root@abc ~]# cd /opt/</span></span><br><span class="line"><span class="string">[root@abc opt]# ls</span></span><br><span class="line"><span class="string">abc23  dir  dir.zip  etc  nginx-0.1.22.tar.gz  nginx-.tar.gz  xxx</span></span><br><span class="line"><span class="string">[root@abc opt]# </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>–exclude : 排除某些文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc test-tar]<span class="comment"># tar -c -f abc.tar ./* --exclude=abc7 --exclude=abc5   --exclude=abc1 </span></span><br><span class="line">[root@abc test-tar]<span class="comment"># tar -t -f abc.tar </span></span><br><span class="line">./abc2</span><br><span class="line">./abc3</span><br><span class="line">./abc4</span><br><span class="line">./abc6</span><br><span class="line">./abc8</span><br><span class="line">./abc9</span><br><span class="line">[root@abc test-tar]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>–exclude-from : 根据某个文件列表排除多个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc test-tar]<span class="comment"># cat list.txt </span></span><br><span class="line">abc995</span><br><span class="line">abc996</span><br><span class="line">abc997</span><br><span class="line">abc998</span><br><span class="line">abc999</span><br><span class="line">[root@abc test-tar]<span class="comment"># tar -c -f abc.tar ./* --exclude-from=list.txt </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>-h : 打包软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc test-tar]<span class="comment"># tar -c -h -f bin-h.tar /bin</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar参数</span><br><span class="line">	-c : 创建压缩</span><br><span class="line">	-f ； 指定压缩包名称</span><br><span class="line">	-z : 使用gzip压缩工具进行压缩</span><br><span class="line">	-j : 使用bzip2压缩工具进行压缩</span><br><span class="line">	-J : 使用xz压缩工具进行压缩</span><br><span class="line">	-t : 显示压缩包内容，不解压</span><br><span class="line">	-v : 显示压缩过程</span><br><span class="line">	-P : 允许使用绝对路径进行压缩</span><br><span class="line">	-x : 解压</span><br><span class="line">	-C : 指定解压路径</span><br><span class="line">	-h : 打包软连接</span><br><span class="line">	--exclude : 排除某些文件</span><br><span class="line">	--exclude-from : 根据文件列表排除多个文件</span><br></pre></td></tr></table></figure>





<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.linux下常见的压缩包类型有哪些</span><br><span class="line">zip </span><br><span class="line">gz </span><br><span class="line">bz2 </span><br><span class="line">tar.gz </span><br><span class="line">tar.bz </span><br><span class="line">tar</span><br><span class="line"></span><br><span class="line">2.将/etc/hosts文件用tar格式打包。</span><br><span class="line">tar -c -P -f hosts.tar /etc/hosts</span><br><span class="line"></span><br><span class="line">3.查看打包之后的/etc/hosts的文件内容，在不解压的情况下查看。</span><br><span class="line">tar -t -f hosts.tar</span><br><span class="line"></span><br><span class="line">4.使用tar打包/var/<span class="built_in">log</span>/目录。</span><br><span class="line">tar -c -P -f hosts.tar /var/<span class="built_in">log</span>/</span><br><span class="line"></span><br><span class="line">5.使用zip打包/etc目录。</span><br><span class="line">zip -r etc.zip /etc</span><br><span class="line"></span><br><span class="line">6.查看/var/<span class="built_in">log</span>/abc.zip目录的压缩包中有哪些内容。</span><br><span class="line">unzip -l /var/<span class="built_in">log</span>/abc.zip</span><br><span class="line"></span><br><span class="line">7.将/var/<span class="built_in">log</span>/abc.zip目录解压到/opt目录中。</span><br><span class="line">unzip -d /opt /var/<span class="built_in">log</span>/abc.zip</span><br><span class="line"></span><br><span class="line">10.解压/etc/abc.tar.gz目录到/opt目录中。</span><br><span class="line">tar -xf /etc/abc.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line">11.用zip打包/opt目录，要求不显示打包过程。</span><br><span class="line">zip -q opt.zip /opt</span><br><span class="line"></span><br><span class="line">zip [参数] 压缩包名称  压缩文件路径</span><br><span class="line"> </span><br><span class="line">12.打包/etc/目录，要求是.bz2格式</span><br><span class="line">tar -c -j -f etc.tar /etc</span><br><span class="line"></span><br><span class="line">13.打包/var/<span class="built_in">log</span>目录，要求是.xz格式</span><br><span class="line">tar -c -J -f log.tar.xz /var/<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">14.使用tar命令打包/etc/时，会出现一个删根的操作，怎样打包不会进行删根的操作</span><br><span class="line">tar -c -P -f etc.tar /etc</span><br><span class="line"></span><br><span class="line">15.打包/etc/目录，要求不打包/etc/hosts这个文件。</span><br><span class="line"></span><br><span class="line">16.打包/etc/目录，要求不打包/etc/hosts和/etc/hostname这两个文件。</span><br><span class="line"></span><br><span class="line">17.打包/etc/目录，但要排除passwd,shadow,group,gshadow,hosts,hostname这些文件。(你能用两种方法实现吗)</span><br><span class="line"></span><br><span class="line">18.已知/etc/grub2.cfg文件是个软连接文件，在你不知道的情况下，请问怎么打包该文件的真实文件。</span><br><span class="line"></span><br><span class="line">19.把/var/<span class="built_in">log</span>/目录中所有.<span class="built_in">log</span>的文件进行打包成一个压缩包，名称定义为log.tar.gz的压缩包。</span><br><span class="line"></span><br><span class="line">20.已知文件oldboy.gz,请问在不解压的情况下，怎样查看该文件的内容。</span><br><span class="line"></span><br><span class="line">21.打包/etc/目录，当前时间方式的压缩包:比如: 2019-12-24_etc.tar.gz</span><br><span class="line"></span><br><span class="line">22.创建/data/bak目录，然后复制如下文件到/data/bak目录下</span><br><span class="line"></span><br><span class="line">23.接22题，使用tar命令对/data/bak目录下的文件及目录以gzip的格式进行归档压缩到/data目录下（压缩包的名字以自己名字命名）</span><br><span class="line"></span><br><span class="line">24.使用tar命令查看上题/data目录下压缩包内的内容。</span><br><span class="line"></span><br><span class="line">25.把第23题/data目录下的压缩包，解压到/backup目录下</span><br><span class="line"></span><br><span class="line">26.再次使用tar命令把/data/bak目录下的文件及目录以gzip的格式进行归档压缩到/data目录下，但是在进行归档压缩时，排除文件“sudoers”，然后查看该压缩包内容是否存在文件“sudoers”（压缩包名自行拟定）</span><br><span class="line"></span><br><span class="line">27.打包/etc目录下所有普通文件到root用户家目录。</span><br><span class="line"></span><br><span class="line">28.打包/etc/目录到/opt/目录下，名称要求以当前主机名和ip地址命名，例：oldboy_10.0.0.100.tar.gz</span><br><span class="line"></span><br><span class="line">29.如何使用gzip命令对文件进行压缩、解压</span><br><span class="line"></span><br><span class="line">30.如何用zip命令对文件以及目录进行压缩、解压</span><br><span class="line"></span><br><span class="line">32.打包opt整个目录，并命名test_opt.tar.gz</span><br><span class="line"></span><br><span class="line">33.查看打包好的test_opt.tar.gz里的文件</span><br><span class="line"></span><br><span class="line">34.将打包好的test_opt.tar.gz内容指定解压至/tmp目录</span><br><span class="line"></span><br><span class="line">35.打包etc目录下的所有文件，不要目录只要文件</span><br><span class="line"></span><br><span class="line">36.打包etc目录下的所有文件，排除passwd，shadow</span><br><span class="line"></span><br><span class="line">37.打包etc目录下的所有以p开头的文件</span><br><span class="line"></span><br><span class="line">38.打包etc目录下所有大于1M的文件</span><br></pre></td></tr></table></figure>







<h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2.权限中的rwx-，每个字符所代表什么意思？对应的数字是什么？</span><br><span class="line"></span><br><span class="line">r		可读		4</span><br><span class="line"></span><br><span class="line">w		可写		2</span><br><span class="line"></span><br><span class="line">x		可执行		1</span><br><span class="line"></span><br><span class="line">-		没有权限	0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.-rwxr-xr-x，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.-rwxr--r--，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.-r-xr-x--x，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.-rw-r-xr-x，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7.-r--r--r--，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.-r-xr-----，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9.---x-w-r--，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10.-rwxr--rw-，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11.-rw-r--r--，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12.---xr--rwx，写出对应数字权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13.777，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14.545，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15.744，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">16.600，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17.641，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18.711，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">19.700，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20.555，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21.733，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">22.713，写出对应字母权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">23.建一个目录/<span class="built_in">test</span>,查看这个目录的默认权限是?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">24.进入/<span class="built_in">test</span>目录中,建一个文件abc,查看其默认的权限为？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">25.创建一个文件test.txt,并其将权限改为600.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">26.将test.txt文件的权限改为755.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">27.将test.txt文件的权限改为000.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">28.修改test.txt文件的权限为644.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">29.给test.txt文件的属主加上x权限。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">30.给test.txt文件的其他用户加上x权限。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">31.去除test.txt文件的所有执行权限。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">32.给/<span class="built_in">test</span>目录及目录下的所有文件或目录的权限统一改为744。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--文件ACL</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day11-sudo%E4%B8%8Esu/facl/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><blockquote>
<p>补充：</p>
<p>​	权限的归属</p>
<p>​		a : 属组、属主以及其他人的权限一起设置。</p>
<p>​		o : 其他人</p>
<p>​		g : 属组</p>
<p>​		u : 属主</p>
</blockquote>
<h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><blockquote>
<p>就是解决目录及文件的默认权限。</p>
</blockquote>
<ul>
<li>文件的最高权限是多少     777</li>
<li>文件夹的最高权限是多少  777</li>
</ul>
<h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><blockquote>
<p>ACL是为了解决某种特殊环境下的，用户权限需求。</p>
</blockquote>
<ul>
<li>setfacl ： 设置acl权限</li>
<li>getfacl ：查看ACL权限</li>
</ul>
<h3 id="acl权限归属"><a href="#acl权限归属" class="headerlink" title="acl权限归属"></a>acl权限归属</h3><ul>
<li>u : 指定用户</li>
<li>g : 指定组</li>
<li>o : 修改其他用户权限</li>
<li>m : 指定mask权限</li>
</ul>
<p>注：默认情况下，ACL权限跟普通权限保持一致。</p>
<h2 id="ACL-的流程"><a href="#ACL-的流程" class="headerlink" title="ACL 的流程"></a>ACL 的流程</h2><ul>
<li><p>1、创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod o+x /root</span><br><span class="line">chmod o+x /root/xiaochen</span><br><span class="line"><span class="built_in">cd</span> xiaochen</span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># touch abc.txt</span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># chmod 000 abc.txt </span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">---------- 1 root root 0 Mar 16 11:39 abc.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost xiaochen]<span class="comment"># echo 111 &gt; abc.txt </span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># cat abc.txt </span></span><br><span class="line">111</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置ACL权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost xiaochen]<span class="comment"># useradd xiaozhang</span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># setfacl -m u:xiaozhang:r abc.txt </span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">user:xiaozhang:r--</span><br><span class="line">group::---</span><br><span class="line">mask::r--</span><br><span class="line">other::---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line">setfacl -m u:用户名称:权限(rwx) 文件名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># su - xiaozhang</span></span><br><span class="line">[xiaozhang@localhost ~]$ cat /root/xiaochen/abc.txt</span><br><span class="line">111</span><br></pre></td></tr></table></figure></li>
</ul>
<p>mask :  rw-</p>
<p>xxxx :   -w-</p>
<p>-w-</p>
<h2 id="ACL权限的删除"><a href="#ACL权限的删除" class="headerlink" title="ACL权限的删除"></a>ACL权限的删除</h2><ul>
<li><p>删除某个权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">user:xiaozhang:r--</span><br><span class="line">group::---</span><br><span class="line">group:xiaochen:r-x		<span class="comment">#effective:r--</span></span><br><span class="line">mask::rw-</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># setfacl -x u:xiaozhang abc.txt</span></span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">group::---</span><br><span class="line">group:xiaochen:r-x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">group::---</span><br><span class="line">group:xiaochen:r-x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># setfacl -x g:xiaochen abc.txt </span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">group::---</span><br><span class="line">mask::---</span><br><span class="line">other::r--</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>清空acl权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">user:xiaochen:rw-</span><br><span class="line">user:xiaocao:rw-</span><br><span class="line">group::---</span><br><span class="line">group:xiaochen:rw-</span><br><span class="line">group:xiaocao:rw-</span><br><span class="line">mask::rw-</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># setfacl -b abc.txt </span></span><br><span class="line">[root@localhost xiaochen]<span class="comment"># getfacl abc.txt </span></span><br><span class="line"><span class="comment"># file: abc.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::---</span><br><span class="line">group::---</span><br><span class="line">other::r--</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ACL继承"><a href="#ACL继承" class="headerlink" title="ACL继承"></a>ACL继承</h2><blockquote>
<p>默认情况下，ACL是不会继承上层目录的权限的。只有目录设置可继承子集文件才可以继承ACL权限。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost linux12]<span class="comment"># setfacl -m d:u:xiaochen:w ../linux12</span></span><br><span class="line">[root@localhost linux12]<span class="comment"># touch bcd.txt</span></span><br><span class="line">[root@localhost linux12]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--  1 root root 0 Mar 16 15:40 abc.txt</span><br><span class="line">-rw-rw-r--+ 1 root root 0 Mar 16 15:43 bcd.txt</span><br><span class="line">[root@localhost linux12]<span class="comment"># getfacl bcd.txt </span></span><br><span class="line"><span class="comment"># file: bcd.txt</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">user:xiaochen:-w-</span><br><span class="line">group::r-x			<span class="comment">#effective:r--</span></span><br><span class="line">mask::rw-</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line">[root@localhost linux12]<span class="comment"># </span></span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--用户组管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day09-%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="linux中用户介绍"><a href="#linux中用户介绍" class="headerlink" title="linux中用户介绍"></a>linux中用户介绍</h2><p>什么是用户？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户其实就是相当于权限的化身，</span><br><span class="line">处于安全考虑</span><br><span class="line">所以，我们在进入系统之前都需要登录，根据用户给相应权限</span><br></pre></td></tr></table></figure>

<p>Linux系统中用户角色</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uid : Linux系统当中用户ID（相当于身份证号）</span><br><span class="line">gid : ANTA20163307</span><br><span class="line"></span><br><span class="line">用户组其实是统一某一类用户权限</span><br><span class="line"></span><br><span class="line">需求：</span><br><span class="line">	大项目 ： </span><br><span class="line">		开发者：a b c d</span><br><span class="line">		运维 ： e f</span><br><span class="line">		测试：g</span><br><span class="line">	共同的权限：</span><br></pre></td></tr></table></figure>

<p>超级用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linux当中的老大（皇帝）: root</span><br><span class="line">Windows当中的老大：administrator</span><br></pre></td></tr></table></figure>

<h2 id="用户与组相关的文件"><a href="#用户与组相关的文件" class="headerlink" title="用户与组相关的文件"></a>用户与组相关的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">用户名称   是否存在密码   uid  gid  组名称/注释信息 家目录  默认解析器 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--sudo和su</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day11-sudo%E4%B8%8Esu/sudo%20and%20su/</url>
    <content><![CDATA[<h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><blockquote>
<p>用于普通用提升权限的。</p>
</blockquote>
<ul>
<li><p>相关的文件：<code>/etc/sudoers</code></p>
</li>
<li><p>检查<code>/etc/sudoers</code>是否修改正确：visudo -c</p>
</li>
<li><p>sudoers文件格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tom       ALL=           (ALL)          ALL</span><br><span class="line">用户名称   所有机器可登陆    所有IP或主机名   所有的指令</span><br></pre></td></tr></table></figure>
</li>
<li><p>指令编写格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须写全路径：which查看命令全路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 只支持vim命令提权</span></span><br><span class="line">xianchen ALL=(ALL)  /usr/bin/vim</span><br><span class="line"></span><br><span class="line"><span class="comment">## 支持所有的命令提权</span></span><br><span class="line">tom ALL=(ALL)  ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">## 不支持某个命令提权</span></span><br><span class="line">tom ALL=(ALL) ALL, !/usr/bin/vim</span><br><span class="line"></span><br><span class="line"><span class="comment">## 不支持某个命令的部分功能</span></span><br><span class="line">xiaochen ALL=(ALL)   ALL, !/usr/bin/vim /root/123.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><ul>
<li><p>su - xxx  和 su xxx之间区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、su - xxx ：相当于切换一个窗口，su xxx 仅仅切换了用户</span><br><span class="line"></span><br><span class="line">2、su - xxx ： 切换用户执行的系统文件要多于 su xxx</span><br><span class="line"></span><br><span class="line">3、su - xxx 是登录</span><br><span class="line">   su  xxx  切换用户</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--用户权限</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day10-Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="修改用户信息-usermod"><a href="#修改用户信息-usermod" class="headerlink" title="修改用户信息(usermod)"></a>修改用户信息(usermod)</h1><blockquote>
<p>修改用户信息最主要的命令是usermod命令，其参数跟useradd基本一致。</p>
</blockquote>
<ul>
<li><p>修改UID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2002:2002::/home/xiaoyu:/bin/bash</span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -u 2302 xiaoyu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2002::/home/xiaoyu:/bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改基本组及附加组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本组 : 一个用户必须拥有的哪个组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2002::/home/xiaoyu:/bin/bash</span><br><span class="line">[root@localhost ~]<span class="comment"># id xiaoyu</span></span><br><span class="line">uid=2302(xiaoyu) gid=2002(xiaoyu) groups=2002(xiaoyu)</span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -g group1 xiaoyu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># id xiaoyu</span></span><br><span class="line">uid=2302(xiaoyu) gid=2003(group1) groups=2003(group1)</span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2003::/home/xiaoyu:/bin/bash</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 附加组 ： 用户加入的其他用户组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd group1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1000(oldboy),1001(sssssssssssssssssssssss),1002(<span class="built_in">test</span>)</span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -G group1 root</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/group</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">group1:x:2003:root</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># usermod  -d /home/xiaoyu123 xiaoyu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：修改家目录仅仅修改了配置，而原来的家目录文件没有迁移</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户描述信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2003::/home/xiaoyu123:/bin/bash</span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -c &quot;这是一个甩锅&quot; xiaoyu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户默认解析器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># usermod -s /bin/sh xiaoyu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">xiaoyu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>锁定与解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># usermod -L xiaoyu</span></span><br><span class="line">[root@localhost home]<span class="comment"># usermod -U xiaoyu</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改登录名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># usermod -l dayu xiaoyu</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">dayu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),1000(oldboy)</span><br><span class="line">[root@localhost home]<span class="comment"># usermod -G root dayu</span></span><br><span class="line">[root@localhost home]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),0(root)</span><br><span class="line">[root@localhost home]<span class="comment"># usermod -G oldboy dayu</span></span><br><span class="line">[root@localhost home]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),1000(oldboy)</span><br><span class="line">[root@localhost home]<span class="comment"># usermod -a -G root dayu</span></span><br><span class="line">[root@localhost home]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),0(root),1000(oldboy)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="密码（passwd）"><a href="#密码（passwd）" class="headerlink" title="密码（passwd）"></a>密码（passwd）</h1><blockquote>
<p>修改或添加Linux普通用户的密码。直接影响的文件是&#x2F;etc&#x2F;shadow</p>
</blockquote>
<ul>
<li><p>增加或修改密码</p>
<p>当用户密码不存在的时候即为增加密码，当用户密码存在时即为修改密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># useradd password</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">password:x:2303:2303::/home/password:/bin/bash</span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/shadow</span></span><br><span class="line">password:!!:18701:0:99999:7:::</span><br><span class="line">[root@localhost home]<span class="comment"># passwd password</span></span><br><span class="line">Changing password <span class="keyword">for</span> user password.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is a palindrome</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">password:x:2303:2303::/home/password:/bin/bash</span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/shadow</span></span><br><span class="line">password:$6$.EmM.4Bl<span class="variable">$f</span>.LimfvMsxxFZq6yFklfyk08JKQORdQovlk2a2dtrpkP31lAMLQpezFqLheBYOTm4Sur9aAqZlC/6MN6wHFBM1:18701:0:99999:7:::</span><br><span class="line">[root@localhost home]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>免交互修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># echo &quot;123&quot; | passwd --stdin dayu</span></span><br><span class="line">Changing password <span class="keyword">for</span> user dayu.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><blockquote>
<p>就类似于班级，是某个同权限用户的集合。</p>
</blockquote>
<h2 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupadd group2</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">group2:x:2304:</span><br><span class="line">[root@localhost home]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定gid</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupadd -g 2204 group3</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">group3:x:2204:</span><br></pre></td></tr></table></figure>

<ul>
<li>创建系统组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupadd -r group4</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">group4:x:996:</span><br></pre></td></tr></table></figure>

<h2 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h2><ul>
<li><p>修改名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># tail -8 /etc/group</span></span><br><span class="line">girl:x:2001:</span><br><span class="line">[root@localhost home]<span class="comment"># groupmod -n boy girl</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -8 /etc/group</span></span><br><span class="line">boy:x:2001:</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改gid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupmod -g 2021 boy</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -8 /etc/group</span></span><br><span class="line">boy:x:2021:</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h2><blockquote>
<p>用户组在系统中删除，如果一个组被用户占用则不能删除。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupdel group4</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -8 /etc/group</span></span><br><span class="line">dajige:x:1003:</span><br><span class="line">abc:x:2000:</span><br><span class="line">xiaoyu:x:2002:</span><br><span class="line">group1:x:2003:root</span><br><span class="line">password:x:2303:</span><br><span class="line">group2:x:2304:</span><br><span class="line">group3:x:2204:</span><br><span class="line">boy:x:2021:</span><br><span class="line">[root@localhost home]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：用户被删除，用户基本组也会被删除</span></span><br><span class="line">[root@localhost home]<span class="comment"># useradd test-group-del</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">test-group-del:x:2304:2305::/home/test-group-del:/bin/bash</span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">test-group-del:x:2305:</span><br><span class="line">[root@localhost home]<span class="comment"># userdel -r test-group-del</span></span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/passwd</span></span><br><span class="line">password:x:2303:2303::/home/password:/bin/bash</span><br><span class="line">[root@localhost home]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">boy:x:2021:</span><br><span class="line">[root@localhost home]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h2 id="组成员管理"><a href="#组成员管理" class="headerlink" title="组成员管理"></a>组成员管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个组到用户</span></span><br><span class="line">[root@localhost home]<span class="comment"># useradd gtest</span></span><br><span class="line">[root@localhost home]<span class="comment"># vim /etc/group</span></span><br><span class="line">[root@localhost home]<span class="comment"># id gtest</span></span><br><span class="line">uid=2304(gtest) gid=2305(gtest) groups=2305(gtest),2204(group3)</span><br><span class="line">[root@localhost home]<span class="comment"># gpasswd -a gtest group2</span></span><br><span class="line">Adding user gtest to group group2</span><br><span class="line">[root@localhost home]<span class="comment"># id gtest</span></span><br><span class="line">uid=2304(gtest) gid=2305(gtest) groups=2305(gtest),2304(group2),2204(group3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个组到用户</span></span><br><span class="line">[root@localhost home]<span class="comment"># gpasswd -M gtest,root,dayu group</span></span><br><span class="line">gpasswd: group <span class="string">&#x27;group&#x27;</span> does not exist <span class="keyword">in</span> /etc/group</span><br><span class="line">[root@localhost home]<span class="comment"># gpasswd -M gtest,root,dayu group3</span></span><br><span class="line">[root@localhost home]<span class="comment"># id root</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),2000(abc),2003(group1),2204(group3)</span><br><span class="line">[root@localhost home]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),0(root),1000(oldboy),2204(group3)</span><br><span class="line">[root@localhost home]<span class="comment"># id gtest</span></span><br><span class="line">uid=2304(gtest) gid=2305(gtest) groups=2305(gtest),2304(group2),2204(group3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为一个组添加组长(组长有权限向组内添加用户，其他用户[除root外]没有权限添加用户到该组)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -A dayu group3</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gshadow</span></span><br><span class="line">group3:!:dayu:gtest,dayu,oldboy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># id dayu</span></span><br><span class="line">uid=2302(dayu) gid=2003(group1) groups=2003(group1),1000(oldboy),2204(group3)</span><br><span class="line">[root@localhost ~]<span class="comment"># chown .group3 /tmp/12.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /tmp/12.txt</span></span><br><span class="line">-rw-r--r-- 1 root group3 4 Mar 15 11:35 /tmp/12.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># chmod g+w /tmp/12.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /tmp/12.txt</span></span><br><span class="line">-rw-rw-r-- 1 root group3 4 Mar 15 11:35 /tmp/12.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># su - dayu</span></span><br><span class="line">Last login: Mon Mar 15 11:37:05 CST 2021 on pts/3</span><br><span class="line">[dayu@localhost ~]$ <span class="built_in">echo</span> <span class="string">&quot;456&quot;</span> &gt; /tmp/12.txt </span><br><span class="line">[dayu@localhost ~]$ cat /tmp/12.txt</span><br><span class="line">456</span><br><span class="line">[dayu@localhost ~]$ </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--yum仓库</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day13-yum%E4%BB%93%E5%BA%93/yum%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="yum仓库"><a href="#yum仓库" class="headerlink" title="yum仓库"></a>yum仓库</h1><p>1、克隆两台主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum仓库主机</span><br><span class="line">	外网地址：192.168.15.30</span><br><span class="line">	内网地址：172.16.1.30</span><br><span class="line"></span><br><span class="line">yum测试主机</span><br><span class="line">	外网地址：192.168.15.31</span><br><span class="line">	内网地址：172.16.1.31</span><br><span class="line"></span><br><span class="line">修改的命令：</span><br><span class="line">	vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">	vim /etc/sysconfig/network-scripts/ifcfg-eth1</span><br><span class="line">	</span><br><span class="line">	重启网卡：systemctl restart network</span><br><span class="line">	</span><br><span class="line">	修改主机名：</span><br><span class="line">		yum仓库主机：hostnamectl set-hostname warehouse</span><br><span class="line">		yum测试主机：hostnamectl set-hostname yum-test</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p>2、配置yum仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、需要有一个软件包目录，存放软件包的</span><br><span class="line">[root@warehouse ~]<span class="comment"># mkdir /backup</span></span><br><span class="line">	</span><br><span class="line">	1.1、缓存yum安装下载的软件包</span><br><span class="line">	[root@warehouse 7]<span class="comment"># vim /etc/yum.conf</span></span><br><span class="line">	[main]</span><br><span class="line">    cachedir=/var/cache/yum/<span class="variable">$basearch</span>/<span class="variable">$releasever</span></span><br><span class="line">    keepcache=1</span><br><span class="line">    [root@warehouse ~]<span class="comment"># yum install mariadb -y</span></span><br><span class="line">	</span><br><span class="line">	1.2、将缓存的软件包复制到yum仓库目录</span><br><span class="line">	[root@warehouse ~]<span class="comment"># cd /var/cache/yum/x86_64/7/base/packages/</span></span><br><span class="line">	[root@warehouse packages]<span class="comment"># cp -rp ./* /backup/</span></span><br><span class="line">    [root@warehouse packages]<span class="comment"># cd /backup/</span></span><br><span class="line">    [root@warehouse backup]<span class="comment"># ll</span></span><br><span class="line">    total 8964</span><br><span class="line">    -rw-r--r-- 1 root root 9175948 Oct 15 02:55 mariadb-5.5.68-1.el7.x86_64.rpm</span><br><span class="line">	</span><br><span class="line">2、建立软件包依赖关系</span><br><span class="line">	[root@warehouse backup]<span class="comment"># yum install createrepo -y</span></span><br><span class="line">	[root@warehouse backup]<span class="comment"># createrepo /backup/</span></span><br><span class="line">    Spawning worker 0 with 1 pkgs</span><br><span class="line">    Spawning worker 1 with 0 pkgs</span><br><span class="line">    Workers Finished</span><br><span class="line">    Saving Primary metadata</span><br><span class="line">    Saving file lists metadata</span><br><span class="line">    Saving other metadata</span><br><span class="line">    Generating sqlite DBs</span><br><span class="line">    Sqlite DBs complete</span><br><span class="line">    [root@warehouse backup]<span class="comment"># ll</span></span><br><span class="line">    total 8968</span><br><span class="line">    -rw-r--r-- 1 root root 9175948 Oct 15 02:55 mariadb-5.5.68-1.el7.x86_64.rpm</span><br><span class="line">    drwxr-xr-x 2 root root    4096 Mar 18 08:54 repodata</span><br><span class="line">    [root@warehouse backup]<span class="comment"># ll repodata/</span></span><br><span class="line">    total 28</span><br><span class="line">    -rw-r--r-- 1 root root 1970 Mar 18 08:54 5d54624b2aa7a1fe974ff5553a9a78289683189c6a7b60c8c1421ecf011d270f-other.sqlite.bz2</span><br><span class="line">    -rw-r--r-- 1 root root 3449 Mar 18 08:54 5e68ee34f7e8f1a11a039f55c990bcc044f16bceb6af7f4486b55d518ad91346-primary.sqlite.bz2</span><br><span class="line">    -rw-r--r-- 1 root root  539 Mar 18 08:54 6e94b0fa1d98955542fb8238348ea171be7a130ba97573eb3ac756e1aadcec50-filelists.xml.gz</span><br><span class="line">    -rw-r--r-- 1 root root 1291 Mar 18 08:54 a9afb0b2457f41f5c2d64744a07d5d12599e6c2588c870ae73568cf345a0abca-other.xml.gz</span><br><span class="line">    -rw-r--r-- 1 root root 1333 Mar 18 08:54 cf41627875b17ef4bea5f0ea566ac63a5c83adc606d3ca730a74944ceb969028-primary.xml.gz</span><br><span class="line">    -rw-r--r-- 1 root root 1158 Mar 18 08:54 f34cbfd9e5608e8402041e98100f853e913f3df04d6946874c73ba31a78969ba-filelists.sqlite.bz2</span><br><span class="line">    -rw-r--r-- 1 root root 2969 Mar 18 08:54 repomd.xml</span><br><span class="line">    [root@warehouse backup]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>3、测试连接（本地版本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、备份系统所有的yum源</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># mkdir backup1</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># mv *.repo backup1</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># vim local.repo</span></span><br><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">name=<span class="string">&quot;This is xxx&quot;</span></span><br><span class="line">baseurl=file:///backup</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">[root@warehouse ~]<span class="comment"># yum clean all</span></span><br><span class="line">[root@warehouse ~]<span class="comment"># rm -rf /var/cache/yum/x86_64/7/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的yum缓存</span></span><br><span class="line">[root@warehouse ~]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连接</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># rpm -e mariadb</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># rpm -ql mariadb</span></span><br><span class="line">package mariadb is not installed</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># yum install mariadb</span></span><br></pre></td></tr></table></figure>



<p>4、测试连接（远程版本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################  yum仓库机器上执行  ###################################</span></span><br><span class="line">1、备份系统所有的yum源</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># mkdir local</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># mv *.repo local</span></span><br><span class="line"></span><br><span class="line">2、安装远程访问软件</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># mv backup1/*  .</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># yum install vsftpd -y</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># systemctl enable --now vsftpd </span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.</span><br><span class="line"></span><br><span class="line">3、配置系统yum仓库</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># cd /var/ftp</span></span><br><span class="line">[root@warehouse ftp]<span class="comment"># mkdir yum_warehouse</span></span><br><span class="line"></span><br><span class="line">4、将软件包复制到yum仓库目录</span><br><span class="line">[root@warehouse ftp]<span class="comment"># cp -rp /backup/* /var/ftp/yum_warehouse/</span></span><br><span class="line">[root@warehouse ftp]<span class="comment"># ll yum_warehouse/</span></span><br><span class="line">total 8968</span><br><span class="line">-rw-r--r-- 1 root root 9175948 Oct 15 02:55 mariadb-5.5.68-1.el7.x86_64.rpm</span><br><span class="line">drwxr-xr-x 2 root root    4096 Mar 18 08:54 repodata</span><br><span class="line"></span><br><span class="line">5、建立yum软件包依赖关系</span><br><span class="line">[root@warehouse ftp]<span class="comment"># createrepo /var/ftp/yum_warehouse/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################  yum测试机器上执行  ###################################</span></span><br><span class="line">1、本机测试网络连接</span><br><span class="line">    1、备份系统所有的yum源</span><br><span class="line">    [root@warehouse ftp]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># mv *.repo backup1</span></span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># vim local.repo</span></span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># cat local.repo </span></span><br><span class="line">    [local-ftp]</span><br><span class="line">    name=<span class="string">&quot;This is ftp server&quot;</span></span><br><span class="line">    baseurl=ftp://172.16.1.30/yum_warehouse</span><br><span class="line">    gpgcheck=0</span><br><span class="line">    enabled=1</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清理yum缓存</span></span><br><span class="line">    [root@warehouse ~]<span class="comment"># yum clean all</span></span><br><span class="line">    [root@warehouse ~]<span class="comment"># rm -rf /var/cache/yum/x86_64/7/*</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成新的yum缓存</span></span><br><span class="line">    [root@warehouse ~]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试连接</span></span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># rpm -e mariadb</span></span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># rpm -ql mariadb</span></span><br><span class="line">    package mariadb is not installed</span><br><span class="line">    [root@warehouse yum.repos.d]<span class="comment"># yum install mariadb</span></span><br><span class="line"></span><br><span class="line">2、yum测试机器执行</span><br><span class="line">	1、备份yum仓库内容</span><br><span class="line">	[root@yum-test ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># mkdir backup1</span></span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># mv *.repo backup1</span></span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># ll</span></span><br><span class="line">    total 0</span><br><span class="line">    drwxr-xr-x. 2 root root 187 Mar  4 09:55 backup</span><br><span class="line">    drwxr-xr-x  2 root root 220 Mar 18 09:20 backup1</span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># </span></span><br><span class="line">    </span><br><span class="line">    2、编写本地yum源配置文件</span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># vim local.repo</span></span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># cat local.repo </span></span><br><span class="line">    [loacl-ftp-30]</span><br><span class="line">    name=<span class="string">&quot;This is 30 ftp server&quot;</span></span><br><span class="line">    baseurl=ftp://172.16.1.30/yum_warehouse</span><br><span class="line">    gpgcheck=0</span><br><span class="line">    enabled=1</span><br><span class="line">    </span><br><span class="line">    3、清理yum缓存</span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># yum clean all</span></span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># rm -rf /var/cache/yum/x86_64/7/*</span></span><br><span class="line">    </span><br><span class="line">    4、生成yum缓存</span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># yum makecache</span></span><br><span class="line">    </span><br><span class="line">    5、测试安装</span><br><span class="line">    [root@yum-test yum.repos.d]<span class="comment"># yum install mariadb</span></span><br></pre></td></tr></table></figure>



<p>4、同步远程yum仓库内容到本机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装华为云镜像仓库</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># rm -rf /etc/yum.repos.d/*</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span></span><br><span class="line"></span><br><span class="line">2、生成yum缓存</span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># yum clean all</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># rm -rf /var/cache/yum/x86_64/7/*</span></span><br><span class="line">[root@warehouse yum.repos.d]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line">3、同步华为云镜像站软件包到本地yum仓库</span><br><span class="line">[root@warehouse ftp]<span class="comment"># yum install yum-utils -y</span></span><br><span class="line">[root@warehouse ftp]<span class="comment"># reposync -r (仓库名称：yum repolist)</span></span><br><span class="line"></span><br><span class="line">4、建立依赖关系</span><br><span class="line">[root@warehouse ftp]<span class="comment"># createrepo base</span></span><br><span class="line"></span><br><span class="line">5、测试</span><br><span class="line">    [loacl-ftp-30]</span><br><span class="line">    name=<span class="string">&quot;This is 30 ftp server&quot;</span></span><br><span class="line">    baseurl=ftp://172.16.1.30/base</span><br><span class="line">    gpgcheck=0</span><br><span class="line">    enabled=1</span><br></pre></td></tr></table></figure>

<p><img src="/.%5Cassets%5Cimage-20210318112338781.png" alt="image-20210318112338781"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--进程管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day16-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序：安装包</p>
<p>进程：正在运行的实例</p>
<p>CPU：计算</p>
<p>内存：存储CPU计算使用的临时数据</p>
<p>存储：</p>
<p>进程和线程</p>
<p>僵尸进程和孤儿进程</p>
<p>僵尸进程：进程生命周期结束了，但是PID未被回收</p>
<p>孤儿进程：父进程生命周期结束了，但是子进程未结束，子进程被系统进程接收</p>
<p>1、查看进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：ps, 默认查看当前进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">-a : 查询所有进程</span><br><span class="line">-x : 查看后台所有的进程</span><br><span class="line">-u : 查看进程的用户</span><br><span class="line"></span><br><span class="line">USER ： 开启当前进程的用户</span><br><span class="line">PID  ： 当前进程的ID号</span><br><span class="line">%CPU ： CPU的使用率</span><br><span class="line">%MEM ： 内存使用率</span><br><span class="line">VSZ  ： 进程启动时默认向计算机申请的内存</span><br><span class="line">RSS  ： 进程运行时实际使用的内存</span><br><span class="line">TTY  ： 进程运行的终端</span><br><span class="line">	？： 后台运行（没有终端）</span><br><span class="line">	tty：使用系统终端</span><br><span class="line">	pts：使用虚拟终端</span><br><span class="line">STAT ：进程运行状态</span><br><span class="line">	R ： 正在运行中的进程</span><br><span class="line">	+ ： 在前台运行</span><br><span class="line">	S ： 睡眠中状态</span><br><span class="line">	D ： 不可中断睡眠</span><br><span class="line">	T ： 停止状态</span><br><span class="line">	Z :  僵尸状态</span><br><span class="line">	X ： 死掉的进程</span><br><span class="line">	&lt; : 优先级较高的进程</span><br><span class="line">	N ：优先级较低的进程</span><br><span class="line">	s : 包含子进程       yum install psmisc -y </span><br><span class="line">	l : 已线程的方式运行</span><br><span class="line">	| ： 代表管道</span><br><span class="line">START ： 进程的启动时间</span><br><span class="line">TIME  ： 占用CPU的时间</span><br><span class="line">COMMAND ： 进程执行的命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-e : 显示所有的进程</span><br><span class="line">-f : 格式化输出同时显示PPID</span><br><span class="line"></span><br><span class="line">PPID ： 父进程ID</span><br></pre></td></tr></table></figure>

<p>2、top</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据一定频率的去监控系统</span></span><br><span class="line"></span><br><span class="line">up前是系统时间</span><br><span class="line">up后是开启的时间</span><br><span class="line"></span><br><span class="line">load average: 0.01, 0.42, 0.73</span><br><span class="line">0.01  ： 一分钟平均负载</span><br><span class="line">0.42  ： 五分钟平均负载</span><br><span class="line">0.73  ： 十五分钟平均负载</span><br><span class="line"></span><br><span class="line">平均负载：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU加压工具</span></span><br><span class="line">stress --cpu [需要加压的系统核心数] --timeout [加压的时间]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU 性能加压工具</span></span><br><span class="line"><span class="comment">## 添加epel源（epel源主要用来安装红帽系列操作系统附加软件）</span></span><br><span class="line">yum install stress -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU 性能分析工具</span></span><br><span class="line">yum install sysstat -y</span><br><span class="line"></span><br><span class="line">mpstat -P ALL 3   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程性能分析⼯具</span></span><br><span class="line">pidstat -u 1 5  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tasks</span><br><span class="line">Tasks: 125 total,   1 running, 124 sleeping,   0 stopped,   0 zombie</span><br><span class="line"></span><br><span class="line">total : 当前系统一共运行的是125个进程</span><br><span class="line">running : 正在运行的是1个</span><br><span class="line">sleeping : 124个处于睡眠状态</span><br><span class="line">stopped : 停止运行的进程数</span><br><span class="line">zombie  ：僵尸进程数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"></span><br><span class="line">us ：在单位时间进程使用CPU所占用的时间百分比</span><br><span class="line">sy : 在单位时间内系统进程占用CPU时间百分比</span><br><span class="line">ni : 在单位时间内优先使用CPU所占时间百分比</span><br><span class="line">id ：在单位时间内CPU空闲所占时间百分比</span><br><span class="line">wa : 在单位时间内CPU阻塞态所占CPU时间的百分比</span><br><span class="line">hi : 硬件中断</span><br><span class="line">si : 软件中断</span><br><span class="line">st : 其他占用CPU时间百分比</span><br><span class="line"></span><br><span class="line">KiB Mem :  2027892 total,  1234180 free,   176352 used,   617360 buff/cache</span><br><span class="line"></span><br><span class="line">total ：系统总内存</span><br><span class="line">free  ：系统空闲内存</span><br><span class="line">used  : 系统使用内存</span><br><span class="line">buff/cache ： 缓存使用内存</span><br><span class="line">avail Mem ：</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND  </span><br><span class="line">  </span><br><span class="line">PID ： 进程编号</span><br><span class="line">USER ： 启动进程的用户</span><br><span class="line">PR : 优先级</span><br><span class="line">NI ：nice值</span><br><span class="line">VIRT ： 虚拟内存</span><br><span class="line">RES  ： 使用内存</span><br><span class="line">SHR  ： 共享内存</span><br><span class="line">%CPU ： cpu使用率</span><br><span class="line">%MEM ：内存使用率</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、top快捷键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">按1 : 展示所有的CPU的详情</span><br><span class="line">按s : 设置top监控频率（默认3秒）</span><br><span class="line">按m : 按照内存排序 </span><br><span class="line">按z : 添加颜色</span><br><span class="line">按p : 按照CPU排序</span><br><span class="line">按l : 展示CPU总负载（默认显示）</span><br></pre></td></tr></table></figure>

<p>4、top的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-d ： 设置top的刷新频率</span><br><span class="line">-p :  设置查看的进程PID</span><br><span class="line">	top -d 1 -p `pgrep nginx | head -1`</span><br><span class="line"></span><br><span class="line">-u :  查询指定用户的经常的进程</span><br><span class="line">	top -u oldboy</span><br><span class="line"></span><br><span class="line">-n : 表示查询n次</span><br><span class="line">	 top -d 0.1 -u oldboy -n 20</span><br></pre></td></tr></table></figure>







<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Debug</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="variable">$basearch</span>/debug</span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - <span class="variable">$basearch</span> - Source</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS</span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--软件包管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day12-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%8C%85/</url>
    <content><![CDATA[<h1 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h1><ul>
<li><p>rpm包来源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、来源网络下载</span><br><span class="line">2、来源本地：自己的镜像自带的rpm包</span><br></pre></td></tr></table></figure>




</li>
<li><p>rpm命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">rpm -ivh xxx.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://nginx.org/packages/centos/7/x86_64/RPMS/</span></span><br><span class="line"></span><br><span class="line">-v : 显示安装过程</span><br><span class="line">-i ：显示安装包的详细信息</span><br><span class="line">-h : 安装包哈希标记</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Nginx rpm安装包的全名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.18.0-1.el7.ngx.x86_64.rpm</span></span><br><span class="line">--2021-03-17 12:16:47--  http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.18.0-1.el7.ngx.x86_64.rpm</span><br><span class="line">Resolving nginx.org (nginx.org)... 52.58.199.22, 3.125.197.172, 2a05:d014:edb:5702::6, ...</span><br><span class="line">Connecting to nginx.org (nginx.org)|52.58.199.22|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 790284 (772K) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘nginx-1.18.0-1.el7.ngx.x86_64.rpm’</span><br><span class="line"></span><br><span class="line">100%[====================================================&gt;] 790,284      339KB/s   <span class="keyword">in</span> 2.3s   </span><br><span class="line"></span><br><span class="line">2021-03-17 12:16:51 (339 KB/s) - ‘nginx-1.18.0-1.el7.ngx.x86_64.rpm’ saved [790284/790284]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装rpm安装包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh nginx-1.18.0-1.el7.ngx.x86_64.rpm </span></span><br><span class="line">warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:nginx-1:1.18.0-1.el7.ngx         <span class="comment">################################# [100%]</span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> using nginx!</span><br><span class="line"></span><br><span class="line">Please find the official documentation <span class="keyword">for</span> nginx here:</span><br><span class="line">* http://nginx.org/en/docs/</span><br><span class="line"></span><br><span class="line">Please subscribe to nginx-announce mailing list to get</span><br><span class="line">the most important news about nginx:</span><br><span class="line">* http://nginx.org/en/support.html</span><br><span class="line"></span><br><span class="line">Commercial subscriptions <span class="keyword">for</span> nginx are available on:</span><br><span class="line">* http://nginx.com/products/</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证nginx是否安装成功</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e nginx (软件包名称)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line">-bash: /usr/sbin/nginx: No such file or directory</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统当中安装了哪些rpm软件包</span></span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统当中是否安装了某个rpm软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -q nginx（软件包名）</span></span><br><span class="line">nginx-1.18.0-1.el7.ngx.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -q safsdgsfdgfd</span></span><br><span class="line">package safsdgsfdgfd is not installed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示已经安装过的rpm包详细信息。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qi nginx</span></span><br><span class="line">Name        : nginx</span><br><span class="line">Epoch       : 1</span><br><span class="line">Version     : 1.18.0</span><br><span class="line">Release     : 1.el7.ngx</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Wed 17 Mar 2021 04:18:55 PM CST</span><br><span class="line">Group       : System Environment/Daemons</span><br><span class="line">Size        : 2830028</span><br><span class="line">License     : 2-clause BSD-like license</span><br><span class="line">Signature   : RSA/SHA1, Tue 21 Apr 2020 11:19:18 PM CST, Key ID abf5bd827bd9bf62</span><br><span class="line">Source RPM  : nginx-1.18.0-1.el7.ngx.src.rpm</span><br><span class="line">Build Date  : Tue 21 Apr 2020 11:07:33 PM CST</span><br><span class="line">Build Host  : ip-10-1-17-101.eu-central-1.compute.internal</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Vendor      : Nginx, Inc.</span><br><span class="line">URL         : http://nginx.org/</span><br><span class="line">Summary     : High performance web server</span><br><span class="line">Description :</span><br><span class="line">nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class="line">a mail proxy server.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装包的内容</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># rpm -ql nginx</span></span><br><span class="line">/etc/logrotate.d/nginx</span><br><span class="line">/etc/nginx</span><br><span class="line">/etc/nginx/conf.d</span><br><span class="line">/etc/nginx/conf.d/default.conf</span><br><span class="line">/etc/nginx/fastcgi_params</span><br><span class="line">/etc/nginx/koi-utf</span><br><span class="line">/etc/nginx/koi-win</span><br><span class="line">/etc/nginx/mime.types</span><br><span class="line">/etc/nginx/modules</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/scgi_params</span><br><span class="line">/etc/nginx/uwsgi_params</span><br><span class="line">/etc/nginx/win-utf</span><br><span class="line">/etc/sysconfig/nginx</span><br><span class="line">/etc/sysconfig/nginx-debug</span><br><span class="line">/usr/lib/systemd/system/nginx-debug.service</span><br><span class="line">/usr/lib/systemd/system/nginx.service</span><br><span class="line">/usr/lib64/nginx</span><br><span class="line">/usr/lib64/nginx/modules</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx/check-reload</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx/upgrade</span><br><span class="line">/usr/sbin/nginx</span><br><span class="line">/usr/sbin/nginx-debug</span><br><span class="line">/usr/share/doc/nginx-1.18.0</span><br><span class="line">/usr/share/doc/nginx-1.18.0/COPYRIGHT</span><br><span class="line">/usr/share/man/man8/nginx.8.gz</span><br><span class="line">/usr/share/nginx</span><br><span class="line">/usr/share/nginx/html</span><br><span class="line">/usr/share/nginx/html/50x.html</span><br><span class="line">/usr/share/nginx/html/index.html</span><br><span class="line">/var/cache/nginx</span><br><span class="line">/var/<span class="built_in">log</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># rpm -qc nginx</span></span><br><span class="line">/etc/logrotate.d/nginx</span><br><span class="line">/etc/nginx/conf.d/default.conf</span><br><span class="line">/etc/nginx/fastcgi_params</span><br><span class="line">/etc/nginx/koi-utf</span><br><span class="line">/etc/nginx/koi-win</span><br><span class="line">/etc/nginx/mime.types</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/scgi_params</span><br><span class="line">/etc/nginx/uwsgi_params</span><br><span class="line">/etc/nginx/win-utf</span><br><span class="line">/etc/sysconfig/nginx</span><br><span class="line">/etc/sysconfig/nginx-debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件帮助信息</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># rpm -qd zlib</span></span><br><span class="line">/usr/share/doc/zlib-1.2.7/ChangeLog</span><br><span class="line">/usr/share/doc/zlib-1.2.7/FAQ</span><br><span class="line">/usr/share/doc/zlib-1.2.7/README</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qf /usr/sbin/nginx</span></span><br><span class="line">nginx-1.18.0-1.el7.ngx.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 -p 可以查看未安装软件包的详细信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qip nginx-1.18.0-1.el7.ngx.x86_64.rpm </span></span><br><span class="line">warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY</span><br><span class="line">Name        : nginx</span><br><span class="line">Epoch       : 1</span><br><span class="line">Version     : 1.18.0</span><br><span class="line">Release     : 1.el7.ngx</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: (not installed)</span><br><span class="line">Group       : System Environment/Daemons</span><br><span class="line">Size        : 2830028</span><br><span class="line">License     : 2-clause BSD-like license</span><br><span class="line">Signature   : RSA/SHA1, Tue 21 Apr 2020 11:19:18 PM CST, Key ID abf5bd827bd9bf62</span><br><span class="line">Source RPM  : nginx-1.18.0-1.el7.ngx.src.rpm</span><br><span class="line">Build Date  : Tue 21 Apr 2020 11:07:33 PM CST</span><br><span class="line">Build Host  : ip-10-1-17-101.eu-central-1.compute.internal</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Vendor      : Nginx, Inc.</span><br><span class="line">URL         : http://nginx.org/</span><br><span class="line">Summary     : High performance web server</span><br><span class="line">Description :</span><br><span class="line">nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class="line">a mail proxy server.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -Uvh nginx-1.18.0-1.el7.ngx.x86_64.rpm </span></span><br><span class="line">warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:nginx-1:1.18.0-1.el7.ngx         <span class="comment">################################# [ 50%]</span></span><br><span class="line">Cleaning up / removing...</span><br><span class="line">   2:nginx-1:1.14.0-1.el7_4.ngx       <span class="comment">################################# [100%]</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除软件包--nodeps</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e zlib --nodeps</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><blockquote>
<p>yum是CentOS的软件包管理工具，自动为我们解决软件依赖问题。yum包管理工具必须使用yum源指定软件下载地址去下载需要安装的软件包。配置的路径是：&#x2F;etc&#x2F;yum.repos.d</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空本机所有的yum源</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># rm -rf /etc/yum.repos.d/*</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>yum源命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统的yum源列表</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum repolist </span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                   repo name                                           status</span><br><span class="line">base                      <span class="string">&quot;This is local repo, and 非常屌&quot;</span>                    10,072</span><br><span class="line">repolist: 10,072</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum清空缓存</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum clean all</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Cleaning repos: base</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line">Other repos take up 76 M of disk space (use --verbose <span class="keyword">for</span> details)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立yum缓存</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum makecache</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>yum源的执行原理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、需要在/etc/yum.repos.d目录下配置yum源地址</span><br><span class="line">2、清空缓存建立新的缓存</span><br><span class="line">3、安装软件（自动解决依赖关系）</span><br></pre></td></tr></table></figure>
</li>
<li><p>yum常用的基础命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件包的命令</span></span><br><span class="line">yum install 软件包名称</span><br><span class="line">	-y : 免交互安装</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件（直接将软件的依赖包一起删除）</span></span><br><span class="line">yum remove 软件包名称</span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum remove httpd</span></span><br><span class="line">	-y : 免交互移除</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前系统需要更新软件</span></span><br><span class="line">yum check-update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有的需要更新的软件</span></span><br><span class="line">yum update </span><br><span class="line">	-y ： 免交互</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新某一个软件</span></span><br><span class="line">yum update (软件包名称)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重装软件</span></span><br><span class="line">yum reinstall (软件包名称)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索软件包</span></span><br><span class="line">[root@www httpd]<span class="comment"># yum search （软件包名称）</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看yum执行历史</span></span><br><span class="line">yum <span class="built_in">history</span></span><br><span class="line">[root@www httpd]<span class="comment"># yum history info (历史ID号)</span></span><br><span class="line">[root@www httpd]<span class="comment"># yum history undo (历史ID号)</span></span><br><span class="line"><span class="comment"># 查看当前系统当中可更新的软件包</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum check-update </span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"></span><br><span class="line">postfix.x86_64                                        2:2.10.1-9.0.1.el7.centos.plus                                      centosplus</span><br><span class="line">python-perf.x86_64                                    3.10.0-1160.15.2.el7.centos.plus                                    centosplus</span><br><span class="line">[root@www yum.repos.d]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统中有哪些仓库地址</span></span><br><span class="line">yum repolist    <span class="comment"># 正在启用的yum仓库</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum repolist</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                   repo name                                           status</span><br><span class="line">base/7/x86_64             CentOS-7 - Base - repo.huaweicloud.com              10,072</span><br><span class="line">extras/7/x86_64           CentOS-7 - Extras - repo.huaweicloud.com               453</span><br><span class="line">updates/7/x86_64          CentOS-7 - Updates - repo.huaweicloud.com            1,729</span><br><span class="line"></span><br><span class="line">yum repolist all <span class="comment"># 查看系统中所有的yum仓库</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum repolist all</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                                        repo name                                                             status</span><br><span class="line">base/7/x86_64                                  CentOS-7 - Base - repo.huaweicloud.com                                enabled: 10,072</span><br><span class="line">centosplus/7/x86_64                            CentOS-7 - Plus - repo.huaweicloud.com                                disabled</span><br><span class="line">extras/7/x86_64                                CentOS-7 - Extras - repo.huaweicloud.com                              enabled:    453</span><br><span class="line">updates/7/x86_64                               CentOS-7 - Updates - repo.huaweicloud.com                             enabled:  1,72</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用repo仓库</span></span><br><span class="line">yum install yum-utils -y</span><br><span class="line"></span><br><span class="line">启用一个yum仓库：yum-config-manager --<span class="built_in">enable</span> (仓库名称)</span><br><span class="line">关闭一个yum仓库：yum-config-manager --<span class="built_in">disable</span> (仓库名称)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个仓库中的软件包列表</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看软件包组</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum grouplist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件包组</span></span><br><span class="line">[root@www yum.repos.d]<span class="comment"># yum groupinstall &quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地yum源配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、备份/etc/yum.repos.d/下的所文件</span><br><span class="line">	rm -rf /etc/yum.repos.d/*</span><br><span class="line"></span><br><span class="line">2、编写本地yum源</span><br><span class="line">[root@www yum.repos.d]<span class="comment"># cat test.repo </span></span><br><span class="line">[base] <span class="comment"># yum源名称</span></span><br><span class="line">name=<span class="string">&quot;This is repo infomation&quot;</span> <span class="comment">#yum源的简介</span></span><br><span class="line">baseurl=file:///opt    <span class="comment"># 指定yum源地址</span></span><br><span class="line">enabled=1				<span class="comment"># 是否启用yum源</span></span><br><span class="line">gpgcheck=0				<span class="comment"># 是否检查gpg秘钥</span></span><br><span class="line"></span><br><span class="line">3、更新缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">4、安装软件</span><br><span class="line">yum install dos2unix</span><br></pre></td></tr></table></figure>
</li>
<li><p>共享yum源配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装ftp</span><br><span class="line">yum install vsftpd -y</span><br><span class="line"></span><br><span class="line">2、启动vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> --now vsftpd <span class="comment"># 设置开机自启动并且立即启动</span></span><br><span class="line"></span><br><span class="line">3、创建yum源共享文件夹</span><br><span class="line">[root@www ftp]<span class="comment"># mkdir /var/ftp/centos</span></span><br><span class="line"></span><br><span class="line">4、将映像中的软件复制到/var/ftp/centos</span><br><span class="line">cp -rp /opt/* /var/ftp/centos</span><br><span class="line"></span><br><span class="line">5、编辑本地yum源，接入ftp</span><br><span class="line">[root@localhost yum.repos.d]<span class="comment"># cat local.repo </span></span><br><span class="line">[base]</span><br><span class="line">baseurl=ftp://192.168.15.100/centos</span><br><span class="line">name=<span class="string">&quot;This is ftp repo&quot;</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">6、测试安装</span><br><span class="line">yum install dos2unix -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>yum的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum仓库的机器上执行</span></span><br><span class="line">1、修改/etc/yum.conf</span><br><span class="line">    cachedir=/var/ftp/centos/Packages   <span class="comment"># 指定yum缓存目录</span></span><br><span class="line">    keepcache=1							<span class="comment"># 下载的缓存软件不立即删除， 0为立即删除</span></span><br><span class="line"></span><br><span class="line">2、安装ftp</span><br><span class="line">yum install vsftpd -y</span><br><span class="line"></span><br><span class="line">3、启动vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> --now vsftpd <span class="comment"># 设置开机自启动并且立即启动</span></span><br><span class="line"></span><br><span class="line">4、创建yum源共享文件夹</span><br><span class="line">[root@www ftp]<span class="comment"># mkdir /var/ftp/centos</span></span><br><span class="line"></span><br><span class="line">5、更新yum仓库</span><br><span class="line">[root@www ftp]<span class="comment"># yum clean all</span></span><br><span class="line">[root@www ftp]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line">6、建立一个快捷方式</span><br><span class="line"><span class="built_in">cd</span> /var/ftp/centos/Packages/base</span><br><span class="line">ln -s packages Packages</span><br><span class="line"></span><br><span class="line">7、安装mariadb</span><br><span class="line">yum install mariadb -y</span><br><span class="line"></span><br><span class="line">8、建立/var/ftp/centos/Packages/base/repodata</span><br><span class="line">mkdir /var/ftp/centos/Packages/base/repodata</span><br><span class="line"></span><br><span class="line">9、把/var/ftp/centos/Packages/base下面的自动生成的压缩文件复制到/var/ftp/centos/Packages/base/repodata用做认证。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用yum仓库的机器上执行</span></span><br><span class="line">1、建立yum配置文件</span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/yum.repos.d/local.repo </span></span><br><span class="line">[base]</span><br><span class="line">baseurl=ftp://192.168.15.100/centos/Packages/base</span><br><span class="line">name=<span class="string">&quot;This is ftp repo&quot;</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">2、更新yum仓库</span><br><span class="line">[root@www ftp]<span class="comment"># yum clean all</span></span><br><span class="line">[root@www ftp]<span class="comment"># yum makecache</span></span><br><span class="line"></span><br><span class="line">3、测试安装mariadb</span><br><span class="line">yum install mariadb -y</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--netstat使用</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day18-netstat%E4%BD%BF%E7%94%A8/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>1、netstat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat主要用来查询系统端口相关问题</span><br><span class="line"></span><br><span class="line">注：要使用netstat，需要安装yum install -y net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat常用参数</span></span><br><span class="line">-t : 打印tcp链接的进程</span><br><span class="line">-u : 打印UDP链接的进程</span><br><span class="line">-l : 监听</span><br><span class="line">-p : 打印进程的PID</span><br><span class="line">-n : 不反解，不将ip地址解析成域名同时不将端口解析成对应的协议名称</span><br><span class="line"></span><br><span class="line">netstat -nutlp</span><br></pre></td></tr></table></figure>

<p>2、分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统磁盘</span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsblk </span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   18G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    1G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   40G  0 disk </span><br><span class="line">sdc               8:32   0  3.9T  0 disk </span><br><span class="line"></span><br><span class="line"><span class="comment"># 分区</span></span><br><span class="line">[root@localhost ~]<span class="comment"># fdisk /dev/sdb </span></span><br><span class="line"></span><br><span class="line">n : 新建一个分区</span><br><span class="line">p : 查看分区情况</span><br><span class="line">m ：查看帮助</span><br><span class="line">d : 删除分区</span><br><span class="line">w ；保存分区修改内容</span><br></pre></td></tr></table></figure>

<p>3、使用文件系统的流程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、装硬盘</span><br><span class="line"></span><br><span class="line">2、查看当前系统硬盘</span><br><span class="line">[root@localhost a]<span class="comment"># lsblk </span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   18G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    1G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   40G  0 disk </span><br><span class="line">sdc               8:32   0  3.9T  0 disk </span><br><span class="line">sr0              11:0    1  4.3G  0 rom  </span><br><span class="line"></span><br><span class="line">3、分区</span><br><span class="line">	2TB 以下的硬盘，使用MBR分区</span><br><span class="line">	2TB 以上的硬盘，使用GPT分区</span><br><span class="line">	</span><br><span class="line">	fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">4、格式化分区（将分区做成文件系统）</span><br><span class="line">	mkfs.xfs /dev/sdb1</span><br><span class="line"></span><br><span class="line">5、挂载分区</span><br><span class="line">	mount /dev/sdb1  /a</span><br><span class="line"></span><br><span class="line">6、检测</span><br><span class="line">	df</span><br><span class="line">		-h : 显示硬盘大小单位</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：挂载哪个硬盘则显示对应硬盘里面的内容</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--dd与文件系统备份</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day20-dd%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>1、dd命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/sdb bs=500M count=1 </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> : 从哪里读文件</span><br><span class="line">of : 写入到哪里</span><br><span class="line">bs : 写入500M</span><br><span class="line">count : 写一块</span><br></pre></td></tr></table></figure>

<p>2、模拟文件系统出问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、直接向硬盘中写数据，不能测试向分区写数据</span><br><span class="line">2、卸载之后重新挂载</span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sdc1 /root/test</span></span><br><span class="line">mount: mount /dev/sdc1 on /root/<span class="built_in">test</span> failed: Structure needs cleaning</span><br><span class="line"></span><br><span class="line">3、对文件系统进行修复</span><br><span class="line">xfs_repair [磁盘或分区路径]</span><br><span class="line"></span><br><span class="line">注： xfs_repair修改硬盘之后，硬盘数据丢失，所以对重要的数据要进行数据备份</span><br></pre></td></tr></table></figure>

<p>3、文件系统的备份与恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">备份：另外在保存一份</span><br><span class="line">恢复：将以前保存的数据进行还原</span><br><span class="line"></span><br><span class="line">touch 1.txt</span><br><span class="line"><span class="built_in">echo</span> aaaa &gt; 1.txt</span><br><span class="line">cp  1.txt   2.txt</span><br><span class="line"></span><br><span class="line">rm 1.txt</span><br><span class="line"></span><br><span class="line">cp 2.txt 1.txt</span><br><span class="line"></span><br><span class="line">1.log   1T = 1024G</span><br><span class="line"></span><br><span class="line">全量备份和增量备份</span><br><span class="line">全量备份：将需要备份的文件全部复制一份</span><br><span class="line">增量备份：在原来备份基础上，把新增数据重新备份一份</span><br><span class="line"></span><br><span class="line">备份与恢复的命令</span><br><span class="line">xfsdump : 备份的命令</span><br><span class="line">xfsrestore  : 恢复的命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份的步骤</span></span><br><span class="line">1、安装备份命令</span><br><span class="line">[root@localhost <span class="built_in">test</span>]<span class="comment"># yum install xfsdump -y</span></span><br><span class="line"></span><br><span class="line">2、备份的等级</span><br><span class="line">0  全量备份</span><br><span class="line"></span><br><span class="line">1 ~ 9 增量备份（等级）</span><br><span class="line"></span><br><span class="line">3、备份的参数</span><br><span class="line">-L ：记录每次备份的地方</span><br><span class="line">-M ：注释，此次备份的注释</span><br><span class="line">-l ：指定备份的等级</span><br><span class="line">-f ：备份的文件名称</span><br><span class="line">-I ：查看备份信息</span><br><span class="line"></span><br><span class="line">4、备份的条件（限制）</span><br><span class="line">	1、必须使用root权限</span><br><span class="line">	2、只能备份已经挂载的内容</span><br><span class="line">	3、只能备份xfs文件系统</span><br><span class="line">	4、只能够用xfsrestore来恢复</span><br><span class="line"></span><br><span class="line">5、备份的命令格式</span><br><span class="line">xfsdump [参数] 备份路径</span><br><span class="line">xfsdump -L sdb1_bak -M <span class="string">&quot;sbd1_from_xxx&quot;</span> -l 0 -f sdb1_from_bak_1 /root/oldboy</span><br><span class="line"></span><br><span class="line">6、数据恢复</span><br><span class="line">xfsrestore</span><br><span class="line"></span><br><span class="line">7、恢复数据的参数</span><br><span class="line">-f : 指定备份的文件路径</span><br><span class="line"></span><br><span class="line">8、恢复的格式</span><br><span class="line">xfsrestore [参数] 恢复的路径</span><br><span class="line">[root@localhost oldboy]<span class="comment"># xfsrestore -f /root/sdb1_from_bak_3 /root/oldboy/</span></span><br></pre></td></tr></table></figure>

<p>4、LVM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、什么是lvm</span><br><span class="line"></span><br><span class="line">你如何保证你的硬盘空间恰好够用？</span><br><span class="line">如果你的硬盘你够用了怎么扩容？</span><br><span class="line"></span><br><span class="line">LVM是文件系统管理工具</span><br><span class="line"></span><br><span class="line">/root/oldboy ---&gt;  lv[5G]</span><br><span class="line">/root/oldboy ---&gt;  lv[3G]</span><br><span class="line"></span><br><span class="line">2、LVM的优点</span><br><span class="line">	1、可以动态扩容与缩容</span><br><span class="line">	2、可以将新增加的硬盘添加到VG存储池</span><br><span class="line">	3、可以突破物理存储卷的限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、使用lvm</span><br><span class="line">	1、安装lvm软件包</span><br><span class="line">		yum install lvm2 -y</span><br><span class="line">	2、将磁盘交给pv</span><br><span class="line">		pvreate [磁盘|磁盘分区]</span><br><span class="line">	3、查看pv</span><br><span class="line">		pvs</span><br><span class="line">		pvscan</span><br><span class="line">	4、创建vg</span><br><span class="line">		vgcreate [vg名称] [pv路径]</span><br><span class="line">	5、查看vg</span><br><span class="line">	6、创建lvm逻辑卷（lv）</span><br><span class="line">		-L ： 创建逻辑卷的大小</span><br><span class="line">		-n : 逻辑卷的名字</span><br><span class="line">		lvcreate [参数] 逻辑卷名称</span><br><span class="line">	7、制作文件系统</span><br><span class="line">		mkfs.xfs /dev/vg1/xxx</span><br><span class="line">	</span><br><span class="line">	8、挂载文件系统</span><br><span class="line">		mount [lv的路径] [挂载点的路径]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--linux信号</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day17-Linux%E4%BF%A1%E5%8F%B7/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>1、设置进程的nice值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置进程的优先级</span></span><br><span class="line">nice -n -11 bash test.sh</span><br><span class="line"></span><br><span class="line">-n ： 设置优先级</span><br><span class="line">	普通用户：（0~19）</span><br><span class="line">	超级用户：（-20~19）</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 给指定进程设置优先级</span></span><br><span class="line">renice [设置优先级] pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、Linux系统信号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">中断信号</span><br><span class="line">	ctrl + c</span><br><span class="line">	ctrl + z</span><br><span class="line"></span><br><span class="line">	INT(2) : </span><br><span class="line">		<span class="built_in">kill</span> -[信号名称|信号ID]　pid</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">kill</span> -SIGINT  PID</span><br><span class="line">		<span class="built_in">kill</span> -INT     PID</span><br><span class="line">		<span class="built_in">kill</span> -2       PID </span><br><span class="line"></span><br><span class="line">退出信号:</span><br><span class="line">	ctrl + d</span><br><span class="line"></span><br><span class="line">暂停信号：将进程暂停</span><br><span class="line">	SIGTSTP（20）</span><br><span class="line">		<span class="built_in">kill</span> -20 PID </span><br><span class="line">		<span class="built_in">kill</span> -SIGTSTP PID </span><br><span class="line">		<span class="built_in">kill</span> -TSTP PID</span><br><span class="line"></span><br><span class="line">杀死进程信号</span><br><span class="line">	SIGKILL</span><br><span class="line">		<span class="built_in">kill</span> -9 PID </span><br><span class="line">		<span class="built_in">kill</span> -SIGKILL PID</span><br><span class="line">		<span class="built_in">kill</span> -KILL PID</span><br><span class="line">注：不能够被捕捉</span><br><span class="line"></span><br><span class="line">终止信号</span><br><span class="line">	SIGTREM</span><br><span class="line">		<span class="built_in">kill</span> -15 PID </span><br><span class="line">		<span class="built_in">kill</span> -SIGTERM PID</span><br><span class="line">		<span class="built_in">kill</span> -TERM PID</span><br><span class="line"></span><br><span class="line">注：优雅终止进程</span><br><span class="line"></span><br><span class="line">暂停和恢复信号</span><br><span class="line">	SIGCONT : 恢复</span><br><span class="line">	SIGSTOP ：暂停</span><br><span class="line"></span><br><span class="line">重载信号</span><br><span class="line">	SIGHUP（1）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、nohup [执行的命令] &amp;</span><br><span class="line">后台启动，会在当前目录生成一个nohub.out文件，用于执行的命令的输出。</span><br><span class="line">2、setsid : 实际上开了一个孤儿进程</span><br><span class="line">3、（执行的命令&amp;）</span><br><span class="line">4、screen  开启一个子窗口</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--磁盘分区</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day19-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/01_%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、磁盘分区方案"><a href="#一、磁盘分区方案" class="headerlink" title="一、磁盘分区方案"></a>一、磁盘分区方案</h2><h3 id="1-1-MBR与GPT介绍"><a href="#1-1-MBR与GPT介绍" class="headerlink" title="1.1 MBR与GPT介绍"></a>1.1 MBR与GPT介绍</h3><p>Linux中磁盘分区有两种方案</p>
<ul>
<li><strong>MBR</strong>（主引导记录）</li>
<li><strong>GPT</strong>（GUID分区表）</li>
</ul>
<p>**<font color='blue'>MBR分区方案</font>**的特点（支持的磁盘容量&lt;&#x3D;2T）：</p>
<ol>
<li>最多支持四个主分区 </li>
<li>在Linux上使用扩展分区和逻辑分区最多可以创建15个分区， </li>
<li>由于分区中的数据以32位存储，使用MBR分区是最大支持2T空间。 </li>
<li>用fdisk管理工具来创建MBR分区</li>
</ol>
<p>**<font color='red'>GPT分区方案</font>**的特点（支持的磁盘容量&gt;2T）：</p>
<ol>
<li>是UEFI标准的一部分，主板必须要支持UEFI标准 </li>
<li>GPT分区列表支持最大128PB(1PB&#x3D;1024TB) </li>
<li>可以定义128个分区 </li>
<li>没有主分区，扩展分区和逻辑分区的概念，所有分区都能格式化 </li>
<li>gdisk和parted管理工具可以创建GPT分区</li>
</ol>
<h3 id="1-2-MBR与GTP的区别"><a href="#1-2-MBR与GTP的区别" class="headerlink" title="1.2 MBR与GTP的区别"></a>1.2 MBR与GTP的区别</h3><table>
<thead>
<tr>
<th>对比项</th>
<th>MBR</th>
<th>GPT</th>
</tr>
</thead>
<tbody><tr>
<td>新旧度</td>
<td>旧</td>
<td>新</td>
</tr>
<tr>
<td>支持的硬盘容量大小</td>
<td>最大2TB</td>
<td>支持2T以上</td>
</tr>
<tr>
<td>分区计数</td>
<td>最多支持4个主分区或3个主分区一个扩展分区</td>
<td>最多支持128个分区,部分主分区、扩展分区</td>
</tr>
<tr>
<td>安全功能</td>
<td>不提供任何安全功能</td>
<td>支持CRC32校验和机制</td>
</tr>
</tbody></table>
<h2 id="二、分区工具使用"><a href="#二、分区工具使用" class="headerlink" title="二、分区工具使用"></a>二、分区工具使用</h2><h3 id="2-1-MBR分区工具fdisk"><a href="#2-1-MBR分区工具fdisk" class="headerlink" title="2.1 MBR分区工具fdisk"></a>2.1 MBR分区工具fdisk</h3><h3 id="2-2-GPT分区工具gdisk"><a href="#2-2-GPT分区工具gdisk" class="headerlink" title="2.2 GPT分区工具gdisk"></a>2.2 GPT分区工具gdisk</h3><h3 id="2-3-GPT分区工具parted"><a href="#2-3-GPT分区工具parted" class="headerlink" title="2.3 GPT分区工具parted"></a>2.3 GPT分区工具parted</h3><p>​	parted用于对磁盘（或RAID磁盘）进行分区及管理，与fdisk分区工具相比，支持2TB以上的磁盘分区，并且允许调整分区的大小，<font color='red'>支持命令行方式或交互式方式</font>，常用命令如下：</p>
<table>
<thead>
<tr>
<th>parted交互命令</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>check NUMBER</td>
<td>做一次简单的文件系统检测</td>
</tr>
<tr>
<td>cp [FROM-DEVICE] FROM-NUMBER TO-NUMBER</td>
<td>复制文件系统到另一个分区</td>
</tr>
<tr>
<td>help [COMMAND]</td>
<td>显示所有的命令帮助</td>
</tr>
<tr>
<td>mklabel,mktable LABEL-TYPE</td>
<td>创建新的磁盘卷标（分区表）</td>
</tr>
<tr>
<td>mkfs NUMBER FS-TYPE</td>
<td>在分区上建立文件系统</td>
</tr>
<tr>
<td>mkpart PART-TYPE [FS-TYPE] START END</td>
<td>创建一个分区</td>
</tr>
<tr>
<td>mkpartfs PART-TYPE FS-TYPE START END</td>
<td>创建分区，并建立文件系统</td>
</tr>
<tr>
<td>move NUMBER START END</td>
<td>移动分区</td>
</tr>
<tr>
<td>name NUMBER NAME</td>
<td>给分区命名</td>
</tr>
<tr>
<td>print [devices|free|list,all|NUMBER]</td>
<td>显示分区表、活动设备、空闲空间、所有分区</td>
</tr>
<tr>
<td>quit</td>
<td>退出</td>
</tr>
<tr>
<td>rescue START END</td>
<td>修复丢失的分区</td>
</tr>
<tr>
<td>resize NUMBER START END</td>
<td>修改分区大小</td>
</tr>
<tr>
<td>rm NUMBER</td>
<td>删除分区</td>
</tr>
<tr>
<td>select DEVICE</td>
<td>选择需要编辑的设备</td>
</tr>
<tr>
<td>set NUMBER FLAG STATE</td>
<td>改变分区标记</td>
</tr>
<tr>
<td>toggle [NUMBER [FLAG]]</td>
<td>切换分区表的状态</td>
</tr>
<tr>
<td>unit UNIT</td>
<td>设置默认的单位</td>
</tr>
<tr>
<td>Version</td>
<td>显示版本</td>
</tr>
</tbody></table>
<blockquote>
<p>关于mkpart与PART-TYPE（FS-TYPE）的解释：</p>
<p>Make a part-type partition for filesystem fs-type (if specified), beginning at start and ending at end (by default in megabytes).  fs-type can  be  one  of  “btrfs”,  “ext2”, “ext3”, “ext4”, “fat16”, “fat32”, “hfs”, “hfs+”, “linux-swap”, “ntfs”, “reiserfs”, or “xfs”.  part-type should be one of “primary”, “logical”, or “extended”.</p>
</blockquote>
<h4 id="2-3-1-使用parted"><a href="#2-3-1-使用parted" class="headerlink" title="2.3.1 使用parted"></a>2.3.1 使用parted</h4><h4 id="2-3-1-1-列出所有块设备分区情况"><a href="#2-3-1-1-列出所有块设备分区情况" class="headerlink" title="2.3.1.1 列出所有块设备分区情况"></a>2.3.1.1 列出所有块设备分区情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前有哪些块设备</span></span><br><span class="line">[root@lb01 ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   50G  0 disk</span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0    2G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0   47G  0 part /</span><br><span class="line">sdb      8:16   0   10G  0 disk</span><br><span class="line">sr0     11:0    1  792M  0 rom</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分区情况</span></span><br><span class="line">[root@lb01 ~]# parted -l</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sda: 53.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type     File system     Flags</span><br><span class="line"> 1      1049kB  1075MB  1074MB  primary  xfs             boot</span><br><span class="line"> 2      1075MB  3223MB  2149MB  primary  linux-swap(v1)</span><br><span class="line"> 3      3223MB  53.7GB  50.5GB  primary  xfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Error: /dev/sdb: unrecognised disk label	# sdb还没有分区</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: unknown</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Warning: Unable to open /dev/sr0 read-write (Read-only file system).  /dev/sr0</span><br><span class="line">has been opened read-only.</span><br><span class="line">Model: NECVMWar VMware IDE CDR10 (scsi)</span><br><span class="line">Disk /dev/sr0: 830MB</span><br><span class="line">Sector size (logical/physical): 2048B/2048B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start  End     Size    Type     File system  Flags</span><br><span class="line"> 2      885kB  37.7MB  36.8MB  primary</span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-2-创建分区"><a href="#2-3-1-2-创建分区" class="headerlink" title="2.3.1.2 创建分区"></a>2.3.1.2 创建分区</h4><blockquote>
<p>案例：在&#x2F;dev&#x2F;sdb中创建一个1GB的分区</p>
</blockquote>
<p>a、命令行方式，创建一个主分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 转换为MBR分区方案msdos, GPT方案为gpt</span></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb mklabel msdos</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建主分区</span></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb mkpart primary ext4 0GB 1GB  # 把1GB换成100%就是分完剩余空间</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   50G  0 disk</span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0    2G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0   47G  0 part /</span><br><span class="line">sdb      8:16   0   10G  0 disk</span><br><span class="line">└─sdb1   8:17   0  953M  0 part</span><br><span class="line">sr0     11:0    1  792M  0 rom</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>b、再用交互方式，继续创建一个主分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted</span><br><span class="line">GNU Parted 3.1</span><br><span class="line">Using /dev/sda</span><br><span class="line">Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.</span><br><span class="line">(parted) select /dev/sdb # 选择块设备</span><br><span class="line">Using /dev/sdb</span><br><span class="line">(parted) mkpart	# 新建分区</span><br><span class="line">Partition type?  primary/extended? primary</span><br><span class="line">File system type?  [ext2]? ext4</span><br><span class="line">Start? 1GB</span><br><span class="line">End? 2GB</span><br></pre></td></tr></table></figure>

<p>c、扩展分区与逻辑分区的创建</p>
<blockquote>
<p>扩展分区最多只有一个，再创建会提示选择primary&#x2F;logical</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(parted) select /dev/sdb</span><br><span class="line">Using /dev/sdb</span><br><span class="line">(parted) print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type      File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary   ext4</span><br><span class="line"> 2      1000MB  4000MB  3000MB  extended               lba</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给扩展分区2创建一个逻辑分区（使用范围只能在扩展分区2的范围内）</span></span><br><span class="line">(parted) mkpart logical 1GB 2GB</span><br><span class="line">(parted) print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type      File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary   ext4</span><br><span class="line"> 2      1000MB  4000MB  3000MB  extended               lba</span><br><span class="line"> 5      1001MB  2000MB  998MB   logical</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给扩展分区2再创建一个逻辑分区</span></span><br><span class="line">(parted) mkpart logical 2GB 3GB</span><br><span class="line">(parted) print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type      File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary   ext4</span><br><span class="line"> 2      1000MB  4000MB  3000MB  extended               lba</span><br><span class="line"> 5      1001MB  2000MB  998MB   logical</span><br><span class="line"> 6      2001MB  3000MB  999MB   logical</span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-3-查看分区"><a href="#2-3-1-3-查看分区" class="headerlink" title="2.3.1.3 查看分区"></a>2.3.1.3 查看分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(parted) print # 打印分区</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size   Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB  primary</span><br><span class="line"> 2      1000MB  2000MB  999MB  primary</span><br><span class="line"> </span><br><span class="line"> (parted) print free # 查看剩余空间</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type     File system  Flags</span><br><span class="line">        32.3kB  1049kB  1016kB           Free Space</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary</span><br><span class="line"> 2      1000MB  2000MB  999MB   primary</span><br><span class="line">        2000MB  10.7GB  8738MB           Free Space</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-4-调整分区大小"><a href="#2-3-1-4-调整分区大小" class="headerlink" title="2.3.1.4 调整分区大小"></a>2.3.1.4 调整分区大小</h4><blockquote>
<p>将分区2从1GB扩展到2GB</p>
<p>PS：v2.4之后的版本，resize命令已经移除，更新到3.1-32版本有resizepart</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size   Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB  primary</span><br><span class="line"> 2      1000MB  2000MB  999MB  primary</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整分区2的大小为2GB</span></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb resizepart 2 3GB	(3GB是指END位置，即使用1GB-3GB的空间，共2GB)</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary</span><br><span class="line"> 2      1000MB  3000MB  2000MB  primary</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 如果已经格式化并挂载使用，需要重新调整文件系统大小</span></span><br><span class="line"> [root@lb01 ~]# resize2fs /dev/sdb2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缩小分区大小会怎样？将提示有数据丢失的风险</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb resizepart 2 2GB</span><br><span class="line">Warning: Shrinking a partition can cause data loss, are you sure you want to continue?</span><br><span class="line">Yes/No?</span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-5-删除分区"><a href="#2-3-1-5-删除分区" class="headerlink" title="2.3.1.5 删除分区"></a>2.3.1.5 删除分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB   primary</span><br><span class="line"> 2      1000MB  4000MB  3000MB  primary  ext4</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb rm 2   // 删除2号分区，因为已挂载，会提示要先卸载</span><br><span class="line">Error: Partition /dev/sdb2 is being used. You must unmount it before you modify it with Parted.</span><br><span class="line">[root@lb01 ~]# umount /dev/sdb2</span><br><span class="line">[root@lb01 ~]# parted /dev/sdb rm 2 // 删除成功</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# print</span><br><span class="line">-bash: print: command not found</span><br><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size   Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB  primary</span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-6-设置-x2F-更改分区标志"><a href="#2-3-1-6-设置-x2F-更改分区标志" class="headerlink" title="2.3.1.6 设置&#x2F;更改分区标志"></a>2.3.1.6 设置&#x2F;更改分区标志</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb set 1 lvm on</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size   Type     File system  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB  primary               lvm</span><br></pre></td></tr></table></figure>

<p>查看有哪些标志可以设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted</span><br><span class="line">GNU Parted 3.1</span><br><span class="line">Using /dev/sda</span><br><span class="line">Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.</span><br><span class="line">(parted) help set</span><br><span class="line">  set NUMBER FLAG STATE                    change the FLAG on partition NUMBER</span><br><span class="line"></span><br><span class="line">        NUMBER is the partition number used by Linux.  On MS-DOS disk labels, the primary partitions number from 1 to 4, logical partitions from 5 onwards.</span><br><span class="line">        FLAG is one of: boot, root, swap, hidden, raid, lvm, lba, hp-service, palo, prep, msftres, bios_grub, atvrecv, diag, legacy_boot</span><br><span class="line">        STATE is one of: on, off</span><br></pre></td></tr></table></figure>

<h4 id="2-3-16-GPT分区方案下的NAME标签"><a href="#2-3-16-GPT分区方案下的NAME标签" class="headerlink" title="2.3.16 GPT分区方案下的NAME标签"></a>2.3.16 GPT分区方案下的NAME标签</h4><p>GPT分区的print</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start  End  Size  File system  Name  Flags</span><br></pre></td></tr></table></figure>

<p>MBR分区的print</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb mklabel msdos</span><br><span class="line">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?</span><br><span class="line">Yes/No? Yes</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start  End  Size  Type  File system  Flags</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><font color='red'>可见GPT标志中多了一个Name标签</font></strong></p>
</blockquote>
<p>使用的时候GPT分区方式可以指定分区名，不用指定主分区、扩展分区这些类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb mkpart BOOT 0GB 1GB</span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@lb01 ~]# parted /dev/sdb print</span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">Number  Start   End     Size   File system  Name  Flags</span><br><span class="line"> 1      1049kB  1000MB  999MB  xfs          BOOT</span><br></pre></td></tr></table></figure>

<p>但是MBR就不能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# parted /dev/sdb mkpart BOOT 0GB 1GB</span><br><span class="line">parted: invalid token: BOOT</span><br><span class="line">Partition type?  primary/extended?</span><br><span class="line">[root@lb01 ~]# parted /dev/sdb mkpart primary BOOT 0GB 1GB</span><br><span class="line">parted: invalid token: BOOT</span><br><span class="line">File system type?  [ext2]?</span><br></pre></td></tr></table></figure>

<h2 id="三、磁盘挂载"><a href="#三、磁盘挂载" class="headerlink" title="三、磁盘挂载"></a>三、磁盘挂载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、开机自动挂载</span><br><span class="line">	开机自动执行：/etc/rc.local</span><br><span class="line">	</span><br><span class="line">	chmod +x /etc/ec.local</span><br><span class="line">	</span><br><span class="line">	echo &quot;mount /dev/sdc1 /root/test&quot; &gt;&gt; /etc/rc.local</span><br><span class="line"></span><br><span class="line">2、修改配置文件 /etc/fstab</span><br><span class="line">/dev/sdc100     /opt    xfs         defaults   0      0</span><br><span class="line">设备				挂载点  文件系统类型   挂载类型  是否备份  是否检测</span><br><span class="line">UUID=1327e665-44b3-4223-a93b-69c36ec602f9   /root/oldboy  xfs   defaults 0 0</span><br><span class="line"></span><br><span class="line"> /dev/sdc100  等价于  UUID</span><br><span class="line"></span><br><span class="line">3、查询设备UUID</span><br><span class="line">	[root@localhost ~]# blkid </span><br><span class="line">/dev/sdc1: UUID=&quot;b5797ad6-9b98-452c-8962-fa12f6590fa6&quot; TYPE=&quot;xfs&quot; PARTLABEL=&quot;Linux filesystem&quot;</span><br></pre></td></tr></table></figure>

<h2 id="四、创建SWAP分区"><a href="#四、创建SWAP分区" class="headerlink" title="四、创建SWAP分区"></a>四、创建SWAP分区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、创建一个硬盘分区</span><br><span class="line"></span><br><span class="line">2、制作swap分区</span><br><span class="line">mkswap /dev/sdb3</span><br><span class="line"></span><br><span class="line">3、激活swap</span><br><span class="line">swapon /dev/sdb3</span><br><span class="line"></span><br><span class="line">4、关闭swap</span><br><span class="line">swapoff </span><br><span class="line"></span><br><span class="line">5、自动挂载</span><br><span class="line">	5.1、</span><br><span class="line">        echo &quot;mkswap /dev/sdb3&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">        echo &quot;swapon /dev/sdb3&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">	5.2、</span><br><span class="line">		echo &quot;/dev/sdb3  swap  swap  defaults 0  0&quot; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--逻辑卷管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day19-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/02_%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、LVM介绍"><a href="#一、LVM介绍" class="headerlink" title="一、LVM介绍"></a>一、LVM介绍</h2><p>​	逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理“逻辑”卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。</p>
<p>LVM使用分层结构，如下如所示：</p>
<p><img src="/02_%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86.assets/134408sa12dauefffyszfg.jpg" alt="img"></p>
<p>​	图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG）。然后基于卷组可以创建逻辑卷（LV）。只要在卷组中有可用空间，就可以随心所欲的创建逻辑卷。文件系统就是在逻辑卷上创建的，然后可以在操作系统挂载和访问</p>
<h2 id="二、LVM使用"><a href="#二、LVM使用" class="headerlink" title="二、LVM使用"></a>二、LVM使用</h2><h3 id="2-1-磁盘准备"><a href="#2-1-磁盘准备" class="headerlink" title="2.1 磁盘准备"></a>2.1 磁盘准备</h3><p>加装两块硬盘，sdb-10G与sdc-5G</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   50G  0 disk</span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0    2G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0   47G  0 part /</span><br><span class="line">sdb      8:16   0   10G  0 disk</span><br><span class="line">sdc      8:32   0    5G  0 disk</span><br><span class="line">sr0     11:0    1  792M  0 rom</span><br></pre></td></tr></table></figure>

<p>给sbd创建LVM分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): n  # 新建分区</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-20971519, default 2048):</span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-20971519, default 20971519): +2G</span><br><span class="line">Partition 1 of type Linux and of size 2 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): t  # 将分区改为LVM分区</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes): L</span><br><span class="line"></span><br><span class="line"> 0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris</span><br><span class="line"> 1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden C:  c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux extended  c7  Syrinx</span><br><span class="line"> 5  Extended        41  PPC PReP Boot   86  NTFS volume set da  Non-FS data</span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS volume set db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility</span><br><span class="line"> 8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       df  BootIt</span><br><span class="line"> 9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access</span><br><span class="line"> a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O</span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor</span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad hi eb  BeOS fs</span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT</span><br><span class="line"> f  W95 Ext&#x27;d (LBA) 54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/</span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC b</span><br><span class="line">11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor</span><br><span class="line">12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f4  SpeedStor</span><br><span class="line">14  Hidden FAT16 &lt;3 61  SpeedStor       ab  Darwin boot     f2  DOS secondary</span><br><span class="line">16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS</span><br><span class="line">17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE</span><br><span class="line">18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fd  Linux raid auto</span><br><span class="line">1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fe  LANstep</span><br><span class="line">1c  Hidden W95 FAT3 75  PC/IX           be  Solaris boot    ff  BBT</span><br><span class="line">1e  Hidden W95 FAT1 80  Old Minix</span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition &#x27;Linux&#x27; to &#x27;Linux LVM&#x27;</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x0005122b</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048     4196351     2097152   8e  Linux LVM</span><br></pre></td></tr></table></figure>

<p>重复添加，再加一个3G，一个2G的分区，可见分区表如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# fdisk -l /dev/sdb</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x0005122b</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048     4196351     2097152   8e  Linux LVM</span><br><span class="line">/dev/sdb2         4196352    10487807     3145728   8e  Linux LVM</span><br><span class="line">/dev/sdb3        10487808    14682111     2097152   8e  Linux LVM</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建物理卷（PV）"><a href="#2-2-创建物理卷（PV）" class="headerlink" title="2.2 创建物理卷（PV）"></a>2.2 创建物理卷（PV）</h3><p>安装LVM工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# yum install lvm2 </span><br></pre></td></tr></table></figure>

<p>将准备好的LVM分区生成为物理卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# pvcreate /dev/sdb1</span><br><span class="line">WARNING: ext4 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y</span><br><span class="line">  Wiping ext4 signature on /dev/sdb1.</span><br><span class="line">  Physical volume &quot;/dev/sdb1&quot; successfully created.</span><br><span class="line">[root@lb01 ~]# pvcreate /dev/sdb2</span><br><span class="line">  Physical volume &quot;/dev/sdb2&quot; successfully created.</span><br><span class="line">[root@lb01 ~]# pvcreate /dev/sdb3</span><br><span class="line">  Physical volume &quot;/dev/sdb3&quot; successfully created.</span><br></pre></td></tr></table></figure>

<p>查看物理卷信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# pvdisplay</span><br><span class="line">  &quot;/dev/sdb1&quot; is a new physical volume of &quot;2.00 GiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb1</span><br><span class="line">  VG Name</span><br><span class="line">  PV Size               2.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0</span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               YUHdrd-AH1x-ew0m-Mp9i-3GHp-S4zc-XxlDJM</span><br><span class="line"></span><br><span class="line">  &quot;/dev/sdb2&quot; is a new physical volume of &quot;3.00 GiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb2</span><br><span class="line">  VG Name</span><br><span class="line">  PV Size               3.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0</span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               wGDQvx-7zfs-g018-wqx4-Y8rh-1kWT-PnLuFu</span><br><span class="line"></span><br><span class="line">  &quot;/dev/sdb3&quot; is a new physical volume of &quot;2.00 GiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb3</span><br><span class="line">  VG Name</span><br><span class="line">  PV Size               2.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0</span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               fykcuR-jooY-WKbi-yM8j-7fQ5-mhnH-JCkXC8</span><br></pre></td></tr></table></figure>

<p>补充：如何删除物理卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# pvremove /dev/sdb1</span><br></pre></td></tr></table></figure>

<h3 id="2-3-创建卷组（VG）"><a href="#2-3-创建卷组（VG）" class="headerlink" title="2.3 创建卷组（VG）"></a>2.3 创建卷组（VG）</h3><p>将&#x2F;dev&#x2F;sdb{1,2,3}合并为卷组vg01</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# vgcreate vg01 /dev/sdb1 /dev/sdb2 /dev/sdb3</span><br></pre></td></tr></table></figure>

<p>查看卷组信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# vgdisplay</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg01</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        3</span><br><span class="line">  Metadata Sequence No  1</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                3</span><br><span class="line">  Act PV                3</span><br><span class="line">  VG Size               &lt;6.99 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              1789</span><br><span class="line">  Alloc PE / Size       0 / 0</span><br><span class="line">  Free  PE / Size       1789 / &lt;6.99 GiB</span><br><span class="line">  VG UUID               gzeouH-16qO-n6xv-V6VM-A9ep-eK6E-ODuIwU</span><br></pre></td></tr></table></figure>

<p>补充：如何删除卷组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# vgremove vg01</span><br><span class="line">  Volume group &quot;vg01&quot; successfully removed</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建逻辑卷（LV）"><a href="#2-4-创建逻辑卷（LV）" class="headerlink" title="2.4 创建逻辑卷（LV）"></a>2.4 创建逻辑卷（LV）</h3><p>创建一个名为lv01，大小为100M的逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvcreate -L 100M -n lv01 vg01</span><br><span class="line">  Logical volume &quot;lv01&quot; created.</span><br></pre></td></tr></table></figure>

<p>查看逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvdisplay</span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg01/lv01</span><br><span class="line">  LV Name                lv01</span><br><span class="line">  VG Name                vg01</span><br><span class="line">  LV UUID                xFksnb-ENc2-mEo4-5gEb-yaJj-wP2c-oFuBeT</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time lb01, 2021-09-01 20:39:16 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line"><span class="meta">  #</span><span class="bash"> open                 0</span></span><br><span class="line">  LV Size                100.00 MiB</span><br><span class="line">  Current LE             25</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           253:0</span><br></pre></td></tr></table></figure>

<p>补充：删除逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvremove /dev/vg01/lv02</span><br><span class="line">Do you really want to remove active logical volume vg01/lv02? [y/n]: y</span><br><span class="line">  Logical volume &quot;lv02&quot; successfully removed</span><br></pre></td></tr></table></figure>

<h3 id="2-5-逻辑卷挂载"><a href="#2-5-逻辑卷挂载" class="headerlink" title="2.5 逻辑卷挂载"></a>2.5 逻辑卷挂载</h3><p>格式化逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# mkfs.ext4 /dev/vg01/lv01</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=1024 (log=0)</span><br><span class="line">Fragment size=1024 (log=0)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">25688 inodes, 102400 blocks</span><br><span class="line">5120 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=1</span><br><span class="line">Maximum filesystem blocks=33685504</span><br><span class="line">13 block groups</span><br><span class="line">8192 blocks per group, 8192 fragments per group</span><br><span class="line">1976 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        8193, 24577, 40961, 57345, 73729</span><br><span class="line"></span><br><span class="line">Allocating group tables: done</span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (4096 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br></pre></td></tr></table></figure>

<p>挂载逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# mkdir /mnt/test-lv01</span><br><span class="line">[root@lb01 ~]# mount /dev/vg01/lv01 /mnt/test-lv01</span><br><span class="line">[root@lb01 ~]# df -h</span><br><span class="line">Filesystem             Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3               47G  1.9G   46G   4% /</span><br><span class="line">devtmpfs               479M     0  479M   0% /dev</span><br><span class="line">tmpfs                  489M     0  489M   0% /dev/shm</span><br><span class="line">tmpfs                  489M  6.8M  482M   2% /run</span><br><span class="line">tmpfs                  489M     0  489M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1             1014M  119M  896M  12% /boot</span><br><span class="line">tmpfs                   98M     0   98M   0% /run/user/0</span><br><span class="line">/dev/mapper/vg01-lv01   93M  1.6M   85M   2% /mnt/test-lv01</span><br></pre></td></tr></table></figure>

<h3 id="2-6-扩展逻辑卷"><a href="#2-6-扩展逻辑卷" class="headerlink" title="2.6 扩展逻辑卷"></a>2.6 扩展逻辑卷</h3><p>卸载逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# umount /dev/vg01/lv01</span><br></pre></td></tr></table></figure>

<p>将逻辑卷lv01调整为200M</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvresize -L 200M /dev/vg01/lv01 </span><br><span class="line">  Size of logical volume vg01/lv01 changed from 100.00 MiB (25 extents) to 200.00 MiB (50 extents).</span><br><span class="line">  Logical volume vg01/lv01 successfully resized.</span><br></pre></td></tr></table></figure>

<p>检查磁盘错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# e2fsck -f /dev/vg01/lv01</span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/vg01/lv01: 11/25688 files (9.1% non-contiguous), 8896/102400 blocks</span><br></pre></td></tr></table></figure>

<p>调整文件系统大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# resize2fs /dev/vg01/lv01</span><br></pre></td></tr></table></figure>

<p>查看逻辑卷信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvdisplay</span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg01/lv01</span><br><span class="line">  LV Name                lv01</span><br><span class="line">  VG Name                vg01</span><br><span class="line">  LV UUID                svm5Xk-B8jZ-QhZw-egCm-x6b2-e5Jt-wvMi2F</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time lb01, 2021-09-01 20:41:53 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line"><span class="meta">  #</span><span class="bash"> open                 0</span></span><br><span class="line">  LV Size                200.00 MiB</span><br><span class="line">  Current LE             50</span><br><span class="line">  Segments               2</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           253:0</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>重新挂载使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# !mount</span><br><span class="line">mount /dev/vg01/lv01 /mnt/test-lv01</span><br><span class="line">[root@lb01 ~]# df -h</span><br><span class="line">Filesystem             Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3               47G  1.9G   46G   4% /</span><br><span class="line">devtmpfs               479M     0  479M   0% /dev</span><br><span class="line">tmpfs                  489M     0  489M   0% /dev/shm</span><br><span class="line">tmpfs                  489M  6.8M  482M   2% /run</span><br><span class="line">tmpfs                  489M     0  489M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1             1014M  119M  896M  12% /boot</span><br><span class="line">tmpfs                   98M     0   98M   0% /run/user/0</span><br><span class="line">/dev/mapper/vg01-lv01  190M  1.6M  175M   1% /mnt/test-lv01</span><br></pre></td></tr></table></figure>

<h3 id="2-7-缩减逻辑卷"><a href="#2-7-缩减逻辑卷" class="headerlink" title="2.7 缩减逻辑卷"></a>2.7 缩减逻辑卷</h3><p>卸载逻辑卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# umount /dev/vg01/lv01</span><br></pre></td></tr></table></figure>

<p>检查磁盘错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# e2fsck -f /dev/vg01/lv01</span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/vg01/lv01: 11/49400 files (9.1% non-contiguous), 11884/204800 blocks</span><br></pre></td></tr></table></figure>

<p>缩减文件系统大小，更新ext4信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# resize2fs /dev/vg01/lv01 100M</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Resizing the filesystem on /dev/vg01/lv01 to 102400 (1k) blocks.</span><br><span class="line">The filesystem on /dev/vg01/lv01 is now 102400 blocks long.</span><br></pre></td></tr></table></figure>

<p>完成后，减小逻辑卷大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvresize -L 100M /dev/vg01/lv01</span><br><span class="line">  WARNING: Reducing active logical volume to 100.00 MiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce vg01/lv01? [y/n]: y</span><br><span class="line">  Size of logical volume vg01/lv01 changed from 200.00 MiB (50 extents) to 100.00 MiB (25 extents).</span><br><span class="line">  Logical volume vg01/lv01 successfully resized.</span><br></pre></td></tr></table></figure>

<p>查看逻辑卷信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvdisplay</span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg01/lv01</span><br><span class="line">  LV Name                lv01</span><br><span class="line">  VG Name                vg01</span><br><span class="line">  LV UUID                svm5Xk-B8jZ-QhZw-egCm-x6b2-e5Jt-wvMi2F</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time lb01, 2021-09-01 20:41:53 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line"><span class="meta">  #</span><span class="bash"> open                 0</span></span><br><span class="line">  LV Size                100.00 MiB</span><br><span class="line">  Current LE             25</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           253:0</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>挂载使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# !mo</span><br><span class="line">mount /dev/vg01/lv01 /mnt/test-lv01</span><br><span class="line">[root@lb01 ~]# df -h</span><br><span class="line">Filesystem             Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3               47G  1.9G   46G   4% /</span><br><span class="line">devtmpfs               479M     0  479M   0% /dev</span><br><span class="line">tmpfs                  489M     0  489M   0% /dev/shm</span><br><span class="line">tmpfs                  489M  6.8M  482M   2% /run</span><br><span class="line">tmpfs                  489M     0  489M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1             1014M  119M  896M  12% /boot</span><br><span class="line">tmpfs                   98M     0   98M   0% /run/user/0</span><br><span class="line">/dev/mapper/vg01-lv01   93M  1.6M   85M   2% /mnt/test-lv01</span><br></pre></td></tr></table></figure>

<h3 id="2-8-VG增加一块磁盘"><a href="#2-8-VG增加一块磁盘" class="headerlink" title="2.8 VG增加一块磁盘"></a>2.8 VG增加一块磁盘</h3><p>新盘创建lvm分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# fdisk /dev/sdc</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x05ff27fa.</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-10485759, default 2048):</span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-10485759, default 10485759): +4G</span><br><span class="line">Partition 1 of type Linux and of size 4 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes):</span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition &#x27;Linux&#x27; to &#x27;Linux LVM&#x27;</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 5368 MB, 5368709120 bytes, 10485760 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x05ff27fa</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdc1            2048     8390655     4194304   8e  Linux LVM</span><br></pre></td></tr></table></figure>

<p>创建物理卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# pvcreate /dev/sdc1</span><br><span class="line">  Physical volume &quot;/dev/sdc1&quot; successfully created.</span><br></pre></td></tr></table></figure>

<p>扩容VG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# vgextend vg01 /dev/sdc1</span><br><span class="line">  Volume group &quot;vg01&quot; successfully extended</span><br></pre></td></tr></table></figure>

<p>查看VG信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# vgdisplay vg01</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg01</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        4</span><br><span class="line">  Metadata Sequence No  10</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               1</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                4</span><br><span class="line">  Act PV                4</span><br><span class="line">  VG Size               10.98 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              2812</span><br><span class="line">  Alloc PE / Size       50 / 200.00 MiB</span><br><span class="line">  Free  PE / Size       2762 / &lt;10.79 GiB</span><br><span class="line">  VG UUID               2Tjzna-XmXI-9MQ7-zeyc-AARV-84r5-jyymkf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：尽管我们使用一个单独的磁盘做示范，其实只要是‘8e’类型的磁盘分区都可以用来扩展卷组。</p>
</blockquote>
<p>在VG中创建LV，可以看到磁盘都用上了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lb01 ~]# lvcreate -L 10G -n lv03 vg01</span><br><span class="line">  Logical volume &quot;lv03&quot; created.</span><br><span class="line">[root@lb01 ~]# lsblk</span><br><span class="line">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda             8:0    0   50G  0 disk</span><br><span class="line">├─sda1          8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2          8:2    0    2G  0 part [SWAP]</span><br><span class="line">└─sda3          8:3    0   47G  0 part /</span><br><span class="line">sdb             8:16   0   10G  0 disk</span><br><span class="line">├─sdb1          8:17   0    2G  0 part</span><br><span class="line">│ ├─vg01-lv01 253:0    0  100M  0 lvm  /mnt/test-lv01</span><br><span class="line">│ ├─vg01-lv02 253:1    0  100M  0 lvm</span><br><span class="line">│ └─vg01-lv03 253:2    0   10G  0 lvm</span><br><span class="line">├─sdb2          8:18   0    3G  0 part</span><br><span class="line">│ └─vg01-lv03 253:2    0   10G  0 lvm</span><br><span class="line">└─sdb3          8:19   0    2G  0 part</span><br><span class="line">  └─vg01-lv03 253:2    0   10G  0 lvm</span><br><span class="line">sdc             8:32   0    5G  0 disk</span><br><span class="line">└─sdc1          8:33   0    4G  0 part</span><br><span class="line">  └─vg01-lv03 253:2    0   10G  0 lvm</span><br><span class="line">sr0            11:0    1  792M  0 rom</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--防火墙与iptables</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day22-%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8Eiptables/iptables%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="iptables使用手册"><a href="#iptables使用手册" class="headerlink" title="iptables使用手册"></a>iptables使用手册</h1><h2 id="一、简单实践"><a href="#一、简单实践" class="headerlink" title="一、简单实践"></a>一、简单实践</h2><blockquote>
<p>从信息查看、保存规则、清除规则、恢复规则、更改规则五个方面来学习。</p>
</blockquote>
<h3 id="1-1-信息查看"><a href="#1-1-信息查看" class="headerlink" title="1.1 信息查看"></a>1.1 信息查看</h3><p>查看现有规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">neutron-linuxbri-INPUT  all  --  anywhere             anywhere</span><br><span class="line">nova-api-INPUT  all  --  anywhere             anywhere</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">neutron-filter-top  all  --  anywhere             anywhere</span><br><span class="line">neutron-linuxbri-FORWARD  all  --  anywhere             anywhere</span><br><span class="line">nova-filter-top  all  --  anywhere             anywhere</span><br><span class="line">nova-api-FORWARD  all  --  anywhere             anywhere</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>查看现有规则，显示主机ip和端口号，-n</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">neutron-linuxbri-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">nova-api-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">neutron-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">neutron-linuxbri-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">nova-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">nova-api-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果显示：</p>
<p>默认显示三条链的规则INPUT、FORWARD、OUTPUT，而且所有的规则都是默认接受的</p>
<p>每条链下面显示的信息是：</p>
<p>动作  协议 参数 源地址 目标地址</p>
</blockquote>
<p>显示详细信息，-v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 11839 packets, 2842K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">11839 2842K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">12985 3090K nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果显示：</p>
<p>-v显示的内容比-L -n 显示的内容多了四个字段</p>
<p>pkts  规则匹配到的报文数量的多少</p>
<p>bytes 规则匹配到的报文内容量的大小</p>
<p>in   规则匹配到的流入的接口，*代表任意接口</p>
<p>out   规则匹配到的流出的接口</p>
</blockquote>
<p>显示规则的标号 –line-numbers</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables -L -n -v --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT 13663 packets, 3221K bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">1    13663 3221K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    14809 3469K nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">1        0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2        0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">3        0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">4        0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>打印规则命令，将防火墙的编写命令给我们打印出来，可以通过这种方式来学习规则的编写。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-N neutron-filter-top</span><br><span class="line">-N neutron-linuxbri-FORWARD</span><br><span class="line">-N neutron-linuxbri-INPUT</span><br><span class="line">-N neutron-linuxbri-OUTPUT</span><br><span class="line">-N neutron-linuxbri-local</span><br><span class="line">-N neutron-linuxbri-scope</span><br><span class="line">-N neutron-linuxbri-sg-chain</span><br><span class="line">-N neutron-linuxbri-sg-fallback</span><br><span class="line">-N nova-api-FORWARD</span><br><span class="line">-N nova-api-INPUT</span><br><span class="line">-N nova-api-OUTPUT</span><br><span class="line">-N nova-api-local</span><br><span class="line">-N nova-filter-top</span><br><span class="line">-A INPUT -j neutron-linuxbri-INPUT</span><br><span class="line">-A INPUT -j nova-api-INPUT</span><br><span class="line">-A FORWARD -j neutron-filter-top</span><br><span class="line">-A FORWARD -j neutron-linuxbri-FORWARD</span><br><span class="line">-A FORWARD -j nova-filter-top</span><br><span class="line">-A FORWARD -j nova-api-FORWARD</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="1-2-保存规则"><a href="#1-2-保存规则" class="headerlink" title="1.2 保存规则"></a>1.2 保存规则</h3><blockquote>
<p>使用 iptables-save命令可以保存规则</p>
</blockquote>
<p>将当前的规则保存到文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@controller ~]# iptables-save &gt; iptables.rules</span><br><span class="line">[root@controller ~]# cat iptables.rules</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generated by iptables-save v1.4.21 on Wed Oct 20 09:22:53 2021</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [16785:3861723]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [16549:3883715]</span><br><span class="line">:neutron-filter-top - [0:0]</span><br><span class="line">:neutron-linuxbri-FORWARD - [0:0]</span><br><span class="line">:neutron-linuxbri-INPUT - [0:0]</span><br><span class="line">:neutron-linuxbri-OUTPUT - [0:0]</span><br><span class="line">:neutron-linuxbri-local - [0:0]</span><br><span class="line">:neutron-linuxbri-scope - [0:0]</span><br><span class="line">:neutron-linuxbri-sg-chain - [0:0]</span><br><span class="line">:neutron-linuxbri-sg-fallback - [0:0]</span><br><span class="line">:nova-api-FORWARD - [0:0]</span><br><span class="line">:nova-api-INPUT - [0:0]</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="1-3-清除规则"><a href="#1-3-清除规则" class="headerlink" title="1.3 清除规则"></a>1.3 清除规则</h3><p>清除单个规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先查看</span></span><br><span class="line">[root@controller ~]# iptables -L -n --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    neutron-linuxbri-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    nova-api-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    neutron-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    neutron-linuxbri-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">3    nova-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">4    nova-api-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除FORWARD的第2条规则</span></span><br><span class="line">[root@controller ~]# iptables -D FORWARD 2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看，删除成功</span></span><br><span class="line">[root@controller ~]# iptables -L -n --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    neutron-linuxbri-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    nova-api-INPUT  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    neutron-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">2    nova-filter-top  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">3    nova-api-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不指定删除的序号，会报错</span></span><br><span class="line">[root@controller ~]# iptables -D FORWARD</span><br><span class="line">iptables: Bad rule (does a matching rule exist in that chain?).</span><br></pre></td></tr></table></figure>

<p>清除规则计数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看原内容</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 3196 packets, 657K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">23118 5147K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">24264 5395K nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除规则计数 -Z</span></span><br><span class="line">[root@controller ~]# iptables -Z</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看效果，pkts与bytes减少，即规则匹配到的报文数量与报文内容大小均减少，清除成功</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 58 packets, 11344 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">   58 11344 neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">   58 11344 nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>清除所有规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除默认规则</span></span><br><span class="line">[root@controller ~]# iptables -F</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除自定义规则</span></span><br><span class="line">[root@controller ~]# iptables -X</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看效果</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 424 packets, 84770 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 398 packets, 83826 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br></pre></td></tr></table></figure>

<h3 id="1-4-恢复规则"><a href="#1-4-恢复规则" class="headerlink" title="1.4 恢复规则"></a>1.4 恢复规则</h3><p>从备份文件恢复规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从文件恢复</span></span><br><span class="line">[root@controller ~]# iptables-restore &lt; iptables.rules</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看确认已恢复</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 268 packets, 46570 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">  268 46570 neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">  268 46570 nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="1-5-更改规则"><a href="#1-5-更改规则" class="headerlink" title="1.5 更改规则"></a>1.5 更改规则</h3><p>可以从ACCEPT改为DROP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看原规则</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 342 packets, 49890 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"> 4455  836K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"> 4455  836K nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -P 修改</span></span><br><span class="line">[root@controller ~]# iptables -P FORWARD DROP</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看，FORWARD链修改DROP成功</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 38 packets, 5017 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"> 4849  905K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"> 4849  905K nova-api-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 nova-api-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-P 更改的规则，使用 -F 不能自动还原</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">[root@controller ~]<span class="comment"># iptables -F</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">[root@controller ~]<span class="comment"># iptables -L -n -v</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">Chain INPUT (policy ACCEPT 36 packets, 6554 bytes)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">Chain FORWARD (policy DROP 0 packets, 0 bytes)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">....</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>重启iptables服务后，可以使用系统所有默认规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除所有默认规则</span></span><br><span class="line">[root@controller ~]# iptables -F</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看，没有默认规则</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 8 packets, 520 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 4 packets, 448 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启iptables服务</span></span><br><span class="line">[root@controller ~]# systemctl restart iptables</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看，新增了系统的默认规则</span></span><br><span class="line">[root@controller ~]# iptables -L -n -v</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    6   432 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line">    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class="line">    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br><span class="line">    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 4 packets, 544 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--计划任务</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day21-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>1、Crontab表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*  *  *  * * </span><br><span class="line">分 时 日 月 周</span><br><span class="line"></span><br><span class="line">每天的凌晨2点   02：00     00 02 * * *</span><br><span class="line">每月执行一次    00  00  01  * *</span><br><span class="line">每个月的一号零点零时零分同时这一天时星期六 00  00  01  *  6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、系统级别的计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、/etc/crontab</span><br><span class="line"></span><br><span class="line">2、如下的目录</span><br><span class="line">    /etc/cron.hourly/ <span class="comment"># 系统定时任务每个⼩时运⾏这个⽬录⾥的内容</span></span><br><span class="line">    /etc/cron.daily/ <span class="comment"># 系统定时任务每天运⾏这个⽬录⾥的内容</span></span><br><span class="line">    /etc/cron.weekly/ <span class="comment"># 系统定时任务每周运⾏这个⽬录⾥的内容</span></span><br><span class="line">    /etc/cron.monthly/ <span class="comment"># 系统定时任务每⽉运⾏这个⽬录⾥的内容</span></span><br></pre></td></tr></table></figure>

<p>3、用户级别的计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">-e : 编辑计划任务</span><br><span class="line">-l : 查看计划任务</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：用户级别的计划任务存放在/var/spool/cron/，不同的用户存放的计划任务是以其自己的名字命名的脚本</span></span><br></pre></td></tr></table></figure>

<p>4、crontab语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 3 5</span></span><br><span class="line">00 00 1,3,5 * *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1到5号</span></span><br><span class="line">00 00 1-5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每几分钟，每几个小数，每几天</span></span><br><span class="line">0/2  /2 </span><br><span class="line">00 0/2    00 /2</span><br><span class="line">00 00 0/2   00 00 /2</span><br></pre></td></tr></table></figure>



<p>5、每3分钟同步一下系统时间</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
</search>
