<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客维护</title>
    <url>/2022/07/07/00_%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/hexo%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<h2 id="Hexo博客维护"><a href="#Hexo博客维护" class="headerlink" title="Hexo博客维护"></a>Hexo博客维护</h2><p>1、下载安装nodejs</p>
<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>2、切换npm为阿里源</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、使用npm安装hexo</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>否则会报错:</p>
<p>$ hexo clean<br>ERROR Cannot find module ‘hexo’ from ‘C:\Users\fr724\Desktop\新建文件夹\gsproj.github.io’<br>ERROR Local hexo loading failed in ~\Desktop\新建文件夹\gsproj.github.io<br>ERROR Try running: ‘rm -rf node_modules &amp;&amp; npm install –force’</p>
</blockquote>
<p>4、使用npm安装搜索功能依赖</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5、内容上线</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
  </entry>
  <entry>
    <title>国产化POC测试工具使用指南</title>
    <url>/2022/07/06/02_%E6%B5%8B%E8%AF%95/01_POC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="一、性能测试"><a href="#一、性能测试" class="headerlink" title="一、性能测试"></a>一、性能测试</h1><blockquote>
<p>测试台式机&#x2F;笔记本的软硬件性能</p>
</blockquote>
<h2 id="1-开机时间"><a href="#1-开机时间" class="headerlink" title="1 开机时间"></a>1 开机时间</h2><blockquote>
<p>测试整机启动的时间（从按下电源开始计时，到出现登录界面计时结束）</p>
</blockquote>
<p>测试步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">手机计时
从按下电源的一刻到进入系统的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="2-CPU性能测试（整型-x2F-浮点型）"><a href="#2-CPU性能测试（整型-x2F-浮点型）" class="headerlink" title="2 CPU性能测试（整型&#x2F;浮点型）"></a>2 CPU性能测试（整型&#x2F;浮点型）</h2><blockquote>
<p>测试CPU整型计算性能，包括单线程基准值、满线程基准值</p>
<p>测试CPU浮点计算性能，包括单线程基准值、满线程基准值</p>
</blockquote>
<h3 id="2-1-CPU2006"><a href="#2-1-CPU2006" class="headerlink" title="2.1 CPU2006"></a>2.1 CPU2006</h3><blockquote>
<p>测试环境:</p>
<p>​	CPU：飞腾D2000</p>
<p>​	内存：16G</p>
<p>​	系统：麒麟V10-SP1-2107 桌面操作系统</p>
</blockquote>
<p>1、准备</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">测试工具包：
d2000-spec2006test.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>2、测试步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、把下载好的d2000-spec2006test.tar.gz测试包放到根目录下（建议整机内存≥16GB，否则会影响测试跑分）
#如果不知道如何放到根目录下，可以先把d2000-spec2006test.tar.gz这个包放到桌面，然后点击鼠标右键打开终端，sudo su ，然后输入密码进入root权限，然后输入cp -r d2000-spec2006test.tar.gz &#x2F;  ，这样就复制到了根目录下。 
2、cd &#x2F; ，进入根目录，sudo su ，然后输入密码，进入root权限。
3、解压，tar -xvf d2000-spec2006test.tar.gz
4、更改权限，chmod -R 777 cpu2006-1.2
5、进入spec2006目录，cd cpu2006-1.2
6、执行脚本，bash run.sh   #配置依赖环境，！！需要联网，会自动下载部分依赖！！
7、source &#x2F;etc&#x2F;profile  #更新profile文件,此处一定要更新
8、source .&#x2F;shrc    #配置环境变量	
9、ulimit -s unlimited #内存分配无限制，大于或者等于16G内存的机器可以加此命令，如果是8G内存的机器不要运行此命令，会因内存不够用影响整型测试的429测试项
10、echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches   #执行测试前，建议清一下缓存
11、gcc -v   #测试前查看一下gcc的版本是否为GCC931,若不是GCC931，输入source &#x2F;etc&#x2F;profile， 再gcc -v查看版本，是GCC931即可执行第12步启动测试
12、bash d2000-test.sh  #执行8核、单核的整形和浮点测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、结果查看</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PDF测试结果存放在results文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4、编译问题处理（如遇到编译问题，可参考）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 450报错：
# mpsinput.cc: In member function &#39;bool soplex::MPSInput::readLine()&#39;: mpsinput.cc:75:52: error: no match for &#39;operator&#x3D;&#x3D;&#39; (operand types are &#39;std::basic_istream&lt;char&gt;::__istream_type&#39; &#123;aka &#39;std::basic_istream&lt;char&gt;&#39;&#125; and &#39;int&#39;)
g++ -std&#x3D;c++03

# lto1 fatal error bytecode stream generated with lto version 
编译选项添加: fno-lto

# 解决zfnlm问题:
actual argument contains too few elements for dummy argument &#39;zfnlm&#39;
cfg文件编译选项设置： -std&#x3D;legacy

# undefined reference to &#39;__gcov_exit&#39;
-lgcov --coverage

# glob.c:(.text+0x53c): undefined reference to &#96;__alloca&#39;
编辑glob.c文件
修改第54行&quot;&#x3D;&#x3D;&quot;改为&quot;&gt;&#x3D;&quot;
# if _GNU_GLOB_INTERFACE_VERSION &gt;&#x3D; GLOB_INTERFACE_VERSION

# 2006的题483在v10-sp1-2107跑起来，我干了什么？ 否则老是报错483.xalancbmk  non-zero return code (rc&#x3D;254, signal&#x3D;0) XML等
1、安装统信UOS的GCC8.3.0
2、SPEC2006的工具集重新编译，再安装
3、清除题下面的run&#x2F;build&#x2F;exe
4、执行了一次apt-get install gcc?? 不知道有没有影响
5、放到没有中文的路径&#x2F;home&#x2F;gretwall&#x2F;cpu2006
6、使用普通用户greatwall执行

# 416报错
# Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、测试项说明</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source shrc
# 多核测试（8）
runspec -c greatwall.cfg -r 8 -n 1 -i ref -T base -I all
选项解析：
	-c # 指定config&#x2F;中的配置文件
	-r # --rate的缩写，跑rate测试，指定测试的副本数（Copies）
	--speed # 指定跑speed测试，和测试副本数（Copies）（默认跑speed测试）
	-n # 指定测试的次数	
	-i（-size） # 指定测试的规模，由小到大为test&#x2F;train&#x2F;ref,其中test最快，适合用来验证CPU的完整性，跑分要用ref
	--reportable &#x2F; --noreportable # 表示检测&#x2F;不检测生成的二进制文件是否修改过
	--action&#x3D;build	# 只编译，不测试
	--rebuild	# 重新编译选题的二进制文件
	--tune（-T） # 可选peak &#x2F; base &#x2F; all，默认跑all
	最后的参数	# int-(int选题) &#x2F; fp-(fp选题) &#x2F; all-(所有选题) &#x2F; 单个选题-（如483） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5、去除PDF报告的Invalid标记</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp CINT2006.559.ref.rsf CINT2006.559.ref.rsf.retry
rawformat --flagsurl myfixedflags.xml --output_format pdf,raw CINT2006.559.ref.rsf.retry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="2-2-CPU2017"><a href="#2-2-CPU2017" class="headerlink" title="2.2 CPU2017"></a>2.2 CPU2017</h3><h2 id="3-lmbench测试（用时3小时）"><a href="#3-lmbench测试（用时3小时）" class="headerlink" title="3 lmbench测试（用时3小时）"></a>3 lmbench测试（用时3小时）</h2><blockquote>
<p>测试简单的系统调用时间、shell命令启动时间、系统信号处理时间、统计2p&#x2F;16K的上下文切换性能、16p&#x2F;64K的上下文切换性能、0K&#x2F;10K文件创建时间、0K&#x2F;10K文件删除时间</p>
</blockquote>
<p>源码包准备：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget http:&#x2F;&#x2F;www.bitmover.com&#x2F;lmbench&#x2F;lmbench3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编译前的准备：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar xvf lmbench3.tar.gz
cd lmbench3
mkdir SCCS
touch  SCCS&#x2F;s.ChangeSet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>编译并测试</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">make results OS&#x3D;arch-linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>读取测试结果</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">make see<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>错误：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">报错: undefined reference to &#39;llseek&#39;
解决方法:
修改src&#x2F;disk.c文件
将llseek改为lseek64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-文件读写测试"><a href="#4-文件读写测试" class="headerlink" title="4 文件读写测试"></a>4 文件读写测试</h2><blockquote>
<p>测试硬盘内文件（10G）拷贝性能，记录时间</p>
</blockquote>
<p>测试步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建10G的大文件
dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;big_file count&#x3D;10 bs&#x3D;1G

# 测试拷贝时间
time cp big_file  big_file_bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="5-USB存储设备读写性能"><a href="#5-USB存储设备读写性能" class="headerlink" title="5 USB存储设备读写性能"></a>5 USB存储设备读写性能</h2><blockquote>
<p>测试USB存储设备读写性能（Mb&#x2F;s），平均读写速度等</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 可选准备
1.将U盘（USB3.0）插入被测试机器,假定识别设备为sdc
2.创建vfat文件系统分区
&#x2F;dev&#x2F;sdb1分区容量大于30GB
umount &#x2F;dev&#x2F;sdc1
mkfs -t vfat &#x2F;dev&#x2F;sdc1
mkdir &#x2F;upan
mount -t vfat &#x2F;dev&#x2F;sdc1 &#x2F;upan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试写性能
cd &#x2F;upan
dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;.&#x2F;largefile bs&#x3D;64k count&#x3D;10000

# 测试读性能
sync &amp;&amp; echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
dd if&#x3D;.&#x2F;largefile of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;64k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="6-硬盘读写测试-IOZONE-x2F"><a href="#6-硬盘读写测试-IOZONE-x2F" class="headerlink" title="6 硬盘读写测试-IOZONE&#x2F;"></a>6 硬盘读写测试-IOZONE&#x2F;</h2><p>安装步骤：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载源码包
wget http:&#x2F;&#x2F;www.iozone.org&#x2F;src&#x2F;current&#x2F;iozone3_487.tar
# 解压
tar -vxf iozone3_487.tar &amp;&amp; cd iozone3_489&#x2F;src&#x2F;current
# 编译
make linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参数说明：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iozone
    -a 全面测试，比如块大小它会自动加
    -i N 用来选择测试项, 比如Read&#x2F;Write&#x2F;Random 比较常用的是0 1 2,可以指定成-i 0 -i 1 -i2.这些别的详细内容请查man
        0&#x3D;write&#x2F;rewrite
        1&#x3D;read&#x2F;re-read
        2&#x3D;random-read&#x2F;write
        3&#x3D;Read-backwards
        4&#x3D;Re-write-record
        5&#x3D;stride-read
        6&#x3D;fwrite&#x2F;re-fwrite
        7&#x3D;fread&#x2F;Re-fread
        8&#x3D;random mix
        9&#x3D;pwrite&#x2F;Re-pwrite
        10&#x3D;pread&#x2F;Re-pread
        11&#x3D;pwritev&#x2F;Re-pwritev
    	12&#x3D;preadv&#x2F;Re-preadv
    -r block size 指定一次写入&#x2F;读出的块大小
    -s file size 指定测试文件的大小
    -f filename 指定测试文件的名字,完成后会自动删除(这个文件必须指定你要测试的那个硬盘中)
    -F file1 file2… 指定多线程下测试的文件名
    
    批量测试项:
    -g -n 指定测试文件大小范围,最大测试文件为4G,可以这样写 -g 4G
    -y -q 指定测试块的大小范围
    
    输出:
    下面是几个日志记录的参数.好像要输出成图象进行分析，需要指定-a的测试才能输出
    -R 产生Excel到标准输出
    -b 指定输出到指定文件上. 比如 -Rb ttt.xls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1、测试硬盘读写性能（Mb&#x2F;s），包括随机和顺序读写平均读写速度（IOzone设置块大小16M，文件大小为物理内存2倍、1倍、1&#x2F;2倍三组数据）</p>
</blockquote>
<p>测试步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 需要root权限
sudo su
# 块大小16M，文件大小为物理内存2倍（测试机器内存为8G的情况下）
.&#x2F;iozone -i 0 -i 1 -i 2 -s 16g -r 16m -f &#x2F;iozone.tmpfile -Rb .&#x2F;report&#x2F;iotest_16G_0.xls
# 块大小16M，文件大小为物理内存1倍（测试机器内存为8G的情况下）
.&#x2F;iozone -i 0 -i 1 -i 2 -s 8g -r 16m -f &#x2F;iozone.tmpfile -Rb .&#x2F;report&#x2F;iotest_8G_0.xls
# 块大小16M，文件大小为物理内存0.5倍（测试机器内存为8G的情况下）
.&#x2F;iozone -i 0 -i 1 -i 2 -s 4g -r 16m -f &#x2F;iozone.tmpfile -Rb .&#x2F;report&#x2F;iotest_4G_0.xls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>2、测试数据盘（裸设备）的在块大小为512B、1MB下的读写性能（包括IOPS、带宽和响应时间）</p>
</blockquote>
<h2 id="7-内存读写性能测试-Stream"><a href="#7-内存读写性能测试-Stream" class="headerlink" title="7 内存读写性能测试-Stream"></a>7 内存读写性能测试-Stream</h2><blockquote>
<p>测试单线和并发读写性能（Mb&#x2F;s）</p>
</blockquote>
<p>测试步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装gfortran
sudo apt-get install gfortran

# 编译stream
make

# 测试
stream_c 200000000   # 参数为Array大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>多线程测试</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she"># 单线程编译
gcc -O3 stream.c -o stream
# 多线程编译
gcc -O3 -fopenmp stream.c -o stream.omp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="10-操作系统综合性能测试-unixbench（用时1小时）"><a href="#10-操作系统综合性能测试-unixbench（用时1小时）" class="headerlink" title="10 操作系统综合性能测试-unixbench（用时1小时）"></a>10 操作系统综合性能测试-unixbench（用时1小时）</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 解压UnixBench工具包：
unzip Unixbench-Kylin.zip
# 进入Unixbench解压后的目录下
cd UnixBench
# 修改Makefile文件74行
OPTON &#x3D; -O3 -fomit-frame-pointer -fforce-addr -ffast-math -Wall -static -flto
# 编译：
sudo make clean &amp;&amp; make
# 清除缓存：
sudo su
sync
echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches
# 测试单线程和多线程性能，执行命令：
sudo .&#x2F;Run -c 1 -c N
&#x2F;&#x2F; 其中N代表cpu核数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="11-显卡性能测试-unixbench（用时约半小时）"><a href="#11-显卡性能测试-unixbench（用时约半小时）" class="headerlink" title="11 显卡性能测试-unixbench（用时约半小时）"></a>11 显卡性能测试-unixbench（用时约半小时）</h2><blockquote>
<p>1、测试2D显示处理性能，主要包括画点、画线、画三角形、画平行四边形、画正方形、画多边形等性能测试</p>
<p>2、测试3D显示处理性能，主要包括3D的显示、色彩填充、渲染、旋转等性能测试</p>
</blockquote>
<p>编译Unibench</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装依赖
apt-get install libgl1-mesa-dev
# 修改Makefile文件,防止编译报错
vim UnixBench&#x2F;Makefile
# 第47行取消注释
GRAPHIC_TESTS &#x3D; defined
# 第50行加上-lm
GL_LIBS &#x3D; -lGL -lXext -lX11 -lm
# 第74行修改
OPTON &#x3D; -O2 -fomit-frame-pointer -fforce-addr -ffast-math -Wall

# 修改Run文件
vim UnixBench&#x2F;Run
# 第109-112行，修改可支持的最大核数，当前是8
&#39;system&#39;    &#x3D;&gt; &#123; &#39;name&#39; &#x3D;&gt; &quot;System Benchmarks&quot;, &#39;maxCopies&#39; &#x3D;&gt; 8 &#125;,
&#39;2d&#39;        &#x3D;&gt; &#123; &#39;name&#39; &#x3D;&gt; &quot;2D Graphics Benchmarks&quot;, &#39;maxCopies&#39; &#x3D;&gt; 8 &#125;,
&#39;3d&#39;        &#x3D;&gt; &#123; &#39;name&#39; &#x3D;&gt; &quot;3D Graphics Benchmarks&quot;, &#39;maxCopies&#39; &#x3D;&gt; 8 &#125;,
&#39;misc&#39;      &#x3D;&gt; &#123; &#39;name&#39; &#x3D;&gt; &quot;Non-Index Benchmarks&quot;, &#39;maxCopies&#39; &#x3D;&gt; 8 &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编译运行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">make clean &amp;&amp; make -j 8
.&#x2F;Run graphics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>3D测试优化</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建文件10-vsync.conf
&lt;driconf&gt;
    &lt;option name&#x3D;&quot;vblank_mode&quot; value&#x3D;&quot;0&quot; &#x2F;&gt;
&lt;&#x2F;driconf&gt;

# 拷贝文件到指定路径
sudo cp 10-vsync.conf  ~&#x2F;.drirc

# 运行测试
vblank_mode&#x3D;0 .&#x2F;Run ubgears<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="11-显卡测试-Glmark2"><a href="#11-显卡测试-Glmark2" class="headerlink" title="11 显卡测试-Glmark2"></a>11 显卡测试-Glmark2</h2><p>安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo .&#x2F;waf configure --with-flavors&#x3D;x11-gl
sudo .&#x2F;waf build -j 4
sudo .&#x2F;waf install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">glmark2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="12-显卡测试-Glxgears"><a href="#12-显卡测试-Glxgears" class="headerlink" title="12 显卡测试-Glxgears"></a>12 显卡测试-Glxgears</h2><p>安装</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">sudo apt-get install mesa-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 终端执行
glxgears<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="12-网络性能测试-Netperf"><a href="#12-网络性能测试-Netperf" class="headerlink" title="12 网络性能测试-Netperf"></a>12 网络性能测试-Netperf</h2><blockquote>
<p>测试网络传输速率、网络吞吐率、网络响应时间等，包括TCP、UDP流吞吐速率等</p>
</blockquote>
]]></content>
      <categories>
        <category>测试</category>
        <category>信创POC测试</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle VPS部署V2Ray</title>
    <url>/2022/07/15/04_%E6%9D%82%E8%AE%B0/%E7%94%B2%E9%AA%A8%E6%96%87VPS%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>​	本文介绍如何使用甲骨文（Oracle）的免费VPS部署V2Ray</p>
<p>甲骨文服务器申请地址：</p>
<p><a href="https://www.oracle.com/cloud/free/">https://www.oracle.com/cloud/free/</a></p>
<blockquote>
<p>c7 &#x2F; 7q &#x2F; F+</p>
</blockquote>
<h2 id="2-域名申请"><a href="#2-域名申请" class="headerlink" title="2 域名申请"></a>2 域名申请</h2><p><font color='red'><strong>！！本节使用Firefox浏览器操作！！</strong></font></p>
<h3 id="2-1-Firefox浏览器Gooreplacer插件设置"><a href="#2-1-Firefox浏览器Gooreplacer插件设置" class="headerlink" title="2.1 Firefox浏览器Gooreplacer插件设置"></a>2.1 Firefox浏览器Gooreplacer插件设置</h3><blockquote>
<p>防止freenom在订单提交阶段失败</p>
</blockquote>
<p>安装完插件后，点击“配置规则”</p>
<p><img src="/../../img/image-20220715144835831.png" alt="image-20220715144835831"></p>
<p>规则配置</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">重定向填写：
https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>recaptcha
目标地址填写：
https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>recaptcha<span class="token punctuation">.</span>net<span class="token operator">/</span>recaptcha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../../img/image-20220715145007138.png" alt="image-20220715145007138"></p>
<h3 id="2-2-freenom域名申请"><a href="#2-2-freenom域名申请" class="headerlink" title="2.2 freenom域名申请"></a>2.2 freenom域名申请</h3><blockquote>
<p>freenom可以申请免费的域名，申请地址：</p>
<p><a href="https://www.freenom.com/en/index.html">https://www.freenom.com/en/index.html</a></p>
</blockquote>
<ul>
<li><p>登录，选择”注册一个新域名”<img src="/../../img/image-20220715145353695.png" alt="image-20220715145353695"></p>
</li>
<li><p>输入需要注册的域名名</p>
</li>
</ul>
<p><img src="/../../img/image-20220715145306545.png" alt="image-20220715145306545"></p>
<ul>
<li>选择免费域名，加入购物车</li>
</ul>
<p><img src="/../../img/image-20220715145556778.png" alt="image-20220715145556778"></p>
<ul>
<li>期限修改为12个月</li>
</ul>
<p><img src="/../../img/image-20220715145640940.png" alt="image-20220715145640940"></p>
<ul>
<li>勾选允许协议，点击完成</li>
</ul>
<p><img src="/../../img/image-20220715145722733.png" alt="image-20220715145722733"></p>
<ul>
<li>看到此界面，说明申请成功，如果申请失败，回到2.1检查Gooreplacer插件是否配置正常</li>
</ul>
<p><img src="/../../img/image-20220715145825655.png" alt="image-20220715145825655"></p>
<ul>
<li>查看我的域名</li>
</ul>
<p><img src="/../../img/image-20220715150619814.png" alt="image-20220715150619814"></p>
<ul>
<li><p>设置域名</p>
<p><img src="/../../img/image-20220715150723654.png" alt="image-20220715150723654"></p>
</li>
<li><p>添加域名解析</p>
</li>
</ul>
<p><img src="/../../img/image-20220715150801833.png" alt="image-20220715150801833"></p>
<ul>
<li><p>填写域名解析服务器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">PAITYN<span class="token punctuation">.</span>NS<span class="token punctuation">.</span>CLOUDFLARE<span class="token punctuation">.</span>COM
SYEEF<span class="token punctuation">.</span>NS<span class="token punctuation">.</span>CLOUDFLARE<span class="token punctuation">.</span>COM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<p><img src="/../../img/image-20220715150832903.png" alt="image-20220715150832903"></p>
<h2 id="3-域名解析配置（CDN）"><a href="#3-域名解析配置（CDN）" class="headerlink" title="3 域名解析配置（CDN）"></a>3 域名解析配置（CDN）</h2><blockquote>
<p>这里使用cloudflare</p>
</blockquote>
<p>添加站点</p>
<p><img src="/../../img/image-20220715151303012.png" alt="image-20220715151303012"></p>
<p>选择免费的方案</p>
<p><img src="/../../img/image-20220715151454194.png" alt="image-20220715151454194"></p>
<p>添加VPS服务器地址</p>
<p><img src="/../../img/image-20220715151735023.png" alt="image-20220715151735023"></p>
<p>校验服务器是否生效：</p>
<blockquote>
<p>解析的IP不一致，是因为勾选了”代理“，不影响正常使用</p>
</blockquote>
<p><img src="/../../img/image-20220715151954505.png" alt="image-20220715151954505"></p>
<h2 id="4-VPS部署V2Ray"><a href="#4-VPS部署V2Ray" class="headerlink" title="4 VPS部署V2Ray"></a>4 VPS部署V2Ray</h2><blockquote>
<p>参考：<a href="https://www.ioiox.com/archives/99.html">https://www.ioiox.com/archives/99.html</a></p>
</blockquote>
<h3 id="4-1-系统设置"><a href="#4-1-系统设置" class="headerlink" title="4.1 系统设置"></a>4.1 系统设置</h3><h4 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h4><p>切换至root创建密码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo -i
# 切换至 root 账号
passwd
# 修改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改ssh配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config
# 编辑 sshd_config

添加或修改Port 22222以确保SSH端口安全.
查找到#PermitRootLogin yes,去掉#注释符号.
查找到#PasswordAuthentication yes,去掉#注释符号.
查找到#ClientAliveInterval 0,去掉#注释符号,0改为30.
查找到#MaxSessions 10,去掉#注释符号.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启ssh服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart sshd
# 重启 sshd 生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>关闭防火墙</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop firewalld
systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><blockquote>
<p>甲骨文云的<code>CentOS 7</code>在使用<code>hostnamectl set-hostname</code>命令修改主机名时,重启服务器后依旧会恢复为 Web 端创建实例时所设置的名字.网上查找了各种方法都无效,最终找到了解决方案.</p>
</blockquote>
<p>编辑修改<code>oci-hostname.conf</code>文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;oci-hostname.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将<code>PRESERVE_HOSTINFO=0</code>中的的值<code>0</code>修改为<code>1</code></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># This configuration file controls the hostname persistence behavior for Oracle Linux
# compute instance on Oracle Cloud Infrastructure (formerly Baremetal Cloud Services)
# Set PRESERVE_HOSTINFO to one of the following values
#   0 -- default behavior to update hostname, &#x2F;etc&#x2F;hosts and &#x2F;etc&#x2F;resolv.conf to 
#        reflect the hostname set during instance creation from the metadata service
#   1 -- preserve user configured hostname across reboots; update &#x2F;etc&#x2F;hosts and 
#           &#x2F;etc&#x2F;resolv.conf from the metadata service  
#   2 -- preserve user configured hostname across instance reboots; no custom  
#        changes to &#x2F;etc&#x2F;hosts and &#x2F;etc&#x2F;resolv.conf from the metadata service,
#        but dhclient will still overwrite &#x2F;etc&#x2F;resolv.conf
#   3 -- preserve hostname and &#x2F;etc&#x2F;hosts entries across instance reboots; 
#        update &#x2F;etc&#x2F;resolv.conf from instance metadata service
PRESERVE_HOSTINFO&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>hostnamectl set-hostname</code>命令修改主机名即可.重启也不会失效.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hostnamectl set-hostname xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="卸载相关程序"><a href="#卸载相关程序" class="headerlink" title="卸载相关程序"></a>卸载相关程序</h4><h5 id="rpcbind"><a href="#rpcbind" class="headerlink" title="rpcbind"></a>rpcbind</h5><p>使用<code>netstat -ntlp</code>命令发现<code>rpcbind</code>监听了<code>111</code>端口,如担心安全可执行以下命令卸载禁用:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop rpcbind
systemctl stop rpcbind.socket
systemctl disable rpcbind
systemctl disable rpcbind.socket <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="oracle-cloud-agent"><a href="#oracle-cloud-agent" class="headerlink" title="oracle-cloud-agent"></a>oracle-cloud-agent</h5><p>卸载甲骨文云官方后台监控程序</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop oracle-cloud-agent
systemctl disable oracle-cloud-agent
systemctl stop oracle-cloud-agent-updater
systemctl disable oracle-cloud-agent-updater<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="4-2-安装BBRPlus"><a href="#4-2-安装BBRPlus" class="headerlink" title="4.2 安装BBRPlus"></a>4.2 安装BBRPlus</h3><blockquote>
<p>参考：<a href="https://www.ioiox.com/archives/63.html">https://www.ioiox.com/archives/63.html</a></p>
<p>Oracle VPS部署BBR，按普通的方式安装，将导致BBR安装并重启机器后，服务器失联，需要安装特定的内核，并作一些列设置</p>
</blockquote>
<h4 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h4><p>更新 yum</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看内核</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uname -r
# 内核版本 3.10.0-1062.12.1.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>手动下载<code>秋水 BBRPlus</code>版内核</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;bbrplus&#x2F;centos&#x2F;7&#x2F;kernel-4.14.129-bbrplus.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>手动安装内核</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install kernel-4.14.129-bbrplus.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更新引导</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg
grub2-mkconfig -o &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;centos&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>列出系统开机启动项</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo awk -F\&#39; &#39;$1&#x3D;&#x3D;&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&#39; &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;centos&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置新版内核默认启动项</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grub2-set-default 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重启</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开启-BBRPlus-及优化"><a href="#开启-BBRPlus-及优化" class="headerlink" title="开启 BBRPlus 及优化"></a>开启 BBRPlus 及优化</h4><p>秋水一键脚本,选择<code>7</code>开启<code>BBRPlus</code>加速.<br>再次<code>./tcp.sh</code>运行脚本,选择<code>10</code>优化并重启完成.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="4-3-安装V2Ray"><a href="#4-3-安装V2Ray" class="headerlink" title="4.3 安装V2Ray"></a>4.3 安装V2Ray</h3><p>在梯子服务器，执行一键搭建脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bash &lt;(curl -sL https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;JodenHe&#x2F;815dd91277b722d36a860d39c2296083&#x2F;raw&#x2F;7f2b5ac0f8137b245d44741fc4a9f40cffa36755&#x2F;v2Ray-install.sh)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../../img/image-20220715155109519.png" alt="image-20220715155109519"></p>
<p>BBR已经安装过，这里选n （笔者第一次在这选y直接安装BBR，结果服务器重启后失联，没法登录，后采用4.2小节的方式，先安装BBRPlus）</p>
<p><img src="/../../img/image-20220715155122886.png" alt="image-20220715155122886"></p>
<p>安装成功，可以使用链接配置V2RayN</p>
<p><img src="/../../img/image-20220715155230097.png" alt="image-20220715155230097"></p>
<h2 id="5-v2Ray-客户端"><a href="#5-v2Ray-客户端" class="headerlink" title="5 v2Ray 客户端"></a>5 v2Ray 客户端</h2><p>参考：<a href="https://tlanyan.pp.ua/v2ray-clients-download/">https://tlanyan.pp.ua/v2ray-clients-download/</a></p>
<p>笔者使用的windows客户端为：<code>V2rayN</code>, 安卓客户端为：<code>V2rayNG</code></p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h2><p><a href="https://toutyrater.github.io/">https://toutyrater.github.io/</a></p>
<p><a href="https://tlanyan.pp.ua/v2ray-clients-download/">https://tlanyan.pp.ua/v2ray-clients-download/</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1689185764130254565&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1689185764130254565&amp;wfr=spider&amp;for=pc</a></p>
<p><a href="https://www.ioiox.com/archives/99.html">https://www.ioiox.com/archives/99.html</a></p>
<p><a href="https://blog.joden123.top/2022/02/20/proxy/v2ray-install/">https://blog.joden123.top/2022/02/20/proxy/v2ray-install/</a></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/04_%E6%9D%82%E8%AE%B0/Githubio%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="1-获取原地址IP"><a href="#1-获取原地址IP" class="headerlink" title="1 获取原地址IP"></a>1 获取原地址IP</h2><p>通过ping获取</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@3yserver ~]# ping gsproj.github.io
PING gsproj.github.io (185.199.110.153) 56(84) bytes of data.
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;1 ttl&#x3D;54 time&#x3D;36.1 ms
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;2 ttl&#x3D;54 time&#x3D;36.0 ms
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;3 ttl&#x3D;54 time&#x3D;35.9 ms
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;4 ttl&#x3D;54 time&#x3D;35.9 ms
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;5 ttl&#x3D;54 time&#x3D;38.3 ms
64 bytes from cdn-185-199-110-153.github.com (185.199.110.153): icmp_seq&#x3D;6 ttl&#x3D;54 time&#x3D;36.1 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-在CDN将IP地址和域名绑定"><a href="#2-在CDN将IP地址和域名绑定" class="headerlink" title="2 在CDN将IP地址和域名绑定"></a>2 在CDN将IP地址和域名绑定</h2><p><img src="/../../img/image-20220718111616313.png" alt="image-20220718111616313"></p>
<h2 id="3-域名申请网站填写DNS解析地址"><a href="#3-域名申请网站填写DNS解析地址" class="headerlink" title="3 域名申请网站填写DNS解析地址"></a>3 域名申请网站填写DNS解析地址</h2><p><img src="/../../img/image-20220718112050165.png" alt="image-20220718112050165"></p>
<h2 id="3-确保新域名能ping通，解析正常"><a href="#3-确保新域名能ping通，解析正常" class="headerlink" title="3 确保新域名能ping通，解析正常"></a>3 确保新域名能ping通，解析正常</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@3yserver ~]# ping codefish.cf
PING codefish.cf (104.21.96.42) 56(84) bytes of data.
64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq&#x3D;1 ttl&#x3D;59 time&#x3D;2.63 ms
64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq&#x3D;2 ttl&#x3D;59 time&#x3D;2.64 ms
64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq&#x3D;3 ttl&#x3D;59 time&#x3D;2.73 ms
64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq&#x3D;4 ttl&#x3D;59 time&#x3D;2.71 ms
64 bytes from 104.21.96.42 (104.21.96.42): icmp_seq&#x3D;5 ttl&#x3D;59 time&#x3D;2.62 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS: 此处IP不是185开头的IP，是因为cloudflare做了代理，不影响使用，可以通就可以</p>
</blockquote>
<h2 id="4-在Github添加域名"><a href="#4-在Github添加域名" class="headerlink" title="4 在Github添加域名"></a>4 在Github添加域名</h2><p><img src="/../../img/image-20220718111923212.png" alt="image-20220718111923212"></p>
]]></content>
  </entry>
  <entry>
    <title>测试工具使用说明-完善中</title>
    <url>/2022/07/06/02_%E6%B5%8B%E8%AF%95/02_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E-%E5%AE%8C%E5%96%84%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="测试工具使用说明-汇总"><a href="#测试工具使用说明-汇总" class="headerlink" title="测试工具使用说明-汇总"></a>测试工具使用说明-汇总</h1><h1 id="一、SPEC-CPU-2017-测试"><a href="#一、SPEC-CPU-2017-测试" class="headerlink" title="一、SPEC CPU 2017 测试"></a>一、SPEC CPU 2017 测试</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>​	标准性能评测机构（SPEC）开发的用于评测CPU性能的基准程序测试组，是一套CPU子系统测试工具。处理器、内存和编译都会影响最终的测试结果，目前SPEC CPU是业界首选的CPU评测工具。 </p>
<h2 id="1-2-工具安装"><a href="#1-2-工具安装" class="headerlink" title="1.2 工具安装"></a>1.2 工具安装</h2><p>获取镜像包：</p>
<p>​	cpu2017-1_0_5.iso</p>
<p>挂载IOS</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mount -o loop -t iso9660 cpu2017-1_0_5.iso &#x2F;xxx&#x2F;cpu2017CD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装工具</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;xxx&#x2F;cpu2017CD
.&#x2F;install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="1-3-测试步骤"><a href="#1-3-测试步骤" class="headerlink" title="1.3 测试步骤"></a>1.3 测试步骤</h2><p>spec2017主要分为四项测试：</p>
<ul>
<li>​	intrate</li>
<li>​	fprate</li>
<li>​	intspeed</li>
<li>​	fpspeed</li>
</ul>
<p>​	根据需要测试的cpu型号，可以到官网下载相应的cfg文件，修改icc、Jemalloc库、qkmalloc库的路径，放入config文件夹中。</p>
<p>测试命令如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source shrc
ulimit -s unlimited
# speed 测试
runcpu --config&#x3D;icc-speed-official.cfg --threads&#x3D;48 --define cores&#x3D;48 -n 3 -i ref fpspeed intspeed

# rate 测试
runcpu --config&#x3D;icc-rate-official.cfg -copies&#x3D;48 -n 3 -i ref intrate fprate

-----------------------------------------------------------------------

# 仅编译不跑测试
--action&#x3D;build
# 重新编译
--rebuild
# 绑核跑
taskset -c <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-4-测试优化"><a href="#1-4-测试优化" class="headerlink" title="1.4 测试优化"></a>1.4 测试优化</h2><blockquote>
<p>Bios设置：</p>
<p>​	开启超线程</p>
<p>​	 尝试开启LLC-PREFETCH</p>
</blockquote>
<h2 id="1-5-其他事项："><a href="#1-5-其他事项：" class="headerlink" title="1.5 其他事项："></a>1.5 其他事项：</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cfg文件中的submit可以设置绑核选项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="二、SPEC-CPU-2006-测试"><a href="#二、SPEC-CPU-2006-测试" class="headerlink" title="二、SPEC CPU 2006 测试"></a>二、SPEC CPU 2006 测试</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>​	作用同Spec CPU 2017, 近年来逐渐被淘汰</p>
<h2 id="2-2-测试步骤"><a href="#2-2-测试步骤" class="headerlink" title="2.2 测试步骤"></a>2.2 测试步骤</h2><p>1、spec2006.tgz 解压，使用install.sh安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">SPEC CPU2006 Installation
Top of the CPU2006 tree is &#39;&#x2F;vol8&#x2F;tarball&#x2F;cpu2006&#39;
These appear to be valid toolsets:
ft-spec2006-tool
aarch64-linux
Enter the architecture you are using:
&gt;&gt; aarch64-linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source shrc
# 单核测试
runspec -c linux64-arm64-gcc52.cfg -i ref -n 3 -I all 
# 多核测试（16）
runspec -c linux64-arm64-gcc52.cfg -r 16 -n 3 -i ref -I all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="三、-SPEC-OMP-2012-测试"><a href="#三、-SPEC-OMP-2012-测试" class="headerlink" title="三、 SPEC OMP 2012 测试"></a>三、 SPEC OMP 2012 测试</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>​	基于SPEC测试套件的OpenMP评测工具，其中包含15个基于OpenMP的并行程序。</p>
<h2 id="3-2-工具安装"><a href="#3-2-工具安装" class="headerlink" title="3.2 工具安装"></a>3.2 工具安装</h2><p>​	获取源包：</p>
<p>​		omp2012-1.1.zip</p>
<p>​	解压后使用install.sh安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装
.&#x2F;install.sh -d &#x2F;home&#x2F;xx
# 仅编译
runspec --action&#x3D;build --config&#x3D;gcc.cfg -i ref -I all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-3-测试步骤"><a href="#3-3-测试步骤" class="headerlink" title="3.3 测试步骤"></a>3.3 测试步骤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source shrc
ulimit -s unlimited
export OMP_NUM_THREADS&#x3D;48
runspec --config&#x3D;gcc.cfg --threads 48 -n 3 -i ref -I all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="四、NPB-测试"><a href="#四、NPB-测试" class="headerlink" title="四、NPB 测试"></a>四、NPB 测试</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>​	NAS并行基准测试程序（NPB），是由美国航空航天局开发的一套代表流体动力学计算的应用程序集，它已经成为公认的用于测评大规模并行机和超级计算机的标准测试程序。NPB可用于常用的编程模型，如MPI和OpenMP。</p>
<h2 id="4-2-工具安装"><a href="#4-2-工具安装" class="headerlink" title="4.2 工具安装"></a>4.2 工具安装</h2><p>源包获取：</p>
<p>​	NPB3.4.tar.gz         OpenMP || MPICH</p>
<p>​	NPB3.4-MZ.tar.gz  OpenMP &amp;&amp; MPICH</p>
<p>解压即可。</p>
<h2 id="4-3-测试步骤"><a href="#4-3-测试步骤" class="headerlink" title="4.3 测试步骤"></a>4.3 测试步骤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">make suite
cd bin
mpirun -np 4 .&#x2F;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="五、Stream-测试"><a href="#五、Stream-测试" class="headerlink" title="五、Stream 测试"></a>五、Stream 测试</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>​	STREAM是一套综合性能测试程序集，通过fortran和C两种高级且高效的语言编写完成，由于这两种语言在数学计算方面的高效率， 使得 STREAM 测试例程可以充分发挥出内存的能力。Stream测试是内存测试中业界公认的内存带宽性能测试基准工具。</p>
<h2 id="5-2-工具安装"><a href="#5-2-工具安装" class="headerlink" title="5.2 工具安装"></a>5.2 工具安装</h2><p>源包获取：</p>
<p>​	stream.tgz  刘新娃修改过</p>
<p>​	<font color='red'>Intel平台请用ICC</font></p>
<p>解压后编译stream.c, 生成可执行文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">icc -O3 -fopenmp -DNTIMES&#x3D;10 -mcmodel&#x3D;large -o stream_c stream.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>没有修改过的怎么编译呢？</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">icc -mtune&#x3D;native -march&#x3D;native -O3 -mcmodel&#x3D;large -fopenmp -DSTREAM_ARRAY_SIZE&#x3D;100000000 -DNTIMES&#x3D;30 -DOFFSET&#x3D;512 stream.c -o stream-gs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="5-3-测试步骤"><a href="#5-3-测试步骤" class="headerlink" title="5.3 测试步骤"></a>5.3 测试步骤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export OMP_NUM_THREADS&#x3D;48&#x2F;32&#x2F;16&#x2F;8&#x2F;4  # 设置每个进程的线程数
.&#x2F;stream_c 200000 # 使用200G内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="5-4-其他事项"><a href="#5-4-其他事项" class="headerlink" title="5.4 其他事项"></a>5.4 其他事项</h2><blockquote>
<p><code>STREAM_ARRAY_SIZE</code>即<code>N</code>指定计算中a[],b[],c[]三个数组的大小，且数组的值采用了双精度（8个字节）。数组的维数 N定义时需要注意以下几点：</p>
<p>一、要充分考虑内存容量的需求，粗略估计是 N× 8（双精度浮点类型） × 3 （三个数组）&lt;&#x3D; 0.6*M；M 是用户的可用内存。</p>
<p>二、要保证测试过程中，使用到的内存容量要大于处理器内的缓存，只有这样才会有内存的操作，而不仅仅是对处理器内缓存的操作。</p>
<p>三、为了保证测试可以持续一段时间，测试过程中内存带宽可以达到一定的最大值， 从而避免得不到实际最大峰值的情况，如果四项测试中有完成时间小于20微秒的情况，就需要适当的增大测试数组的维度 N。</p>
</blockquote>
<h1 id="六、Linpack-测试"><a href="#六、Linpack-测试" class="headerlink" title="六、Linpack 测试"></a>六、Linpack 测试</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>​	Linpack是国际上使用最广泛的测试高性能计算机系统浮点性能的基准测试。通过对高性能计算机采用高斯消元法求解一元 N次稠密线性代数方程组的测试，评价高性能计算机的浮点计算性能。Linpack的结果按每秒浮点运算次数（flops）表示。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">N ^ 2 * 8 &#x3D; 总内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="6-2-工具安装"><a href="#6-2-工具安装" class="headerlink" title="6.2 工具安装"></a>6.2 工具安装</h2><p>源包获取：</p>
<p>​	linpack.tgz</p>
<p>解压即可。</p>
<h2 id="6-3-测试步骤"><a href="#6-3-测试步骤" class="headerlink" title="6.3 测试步骤"></a>6.3 测试步骤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1进48线100G内存
.&#x2F;xhpl -n 1 -b 384 -p 1 -q 1 -m 100000
# 1进48线200G内存
.&#x2F;xhpl -n 1 -b 384 -p 1 -q 1 -m 200000
# 2进24线共100G内存
mpirun -n 2 .&#x2F;xhpl -b 384 -p 1 -q 2 -m 50000
# 2进24线共200G内存
mpirun -n 2 .&#x2F;xhpl -b 384 -p 1 -q 2 -m 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用mpirun提交xhplrun.sh效果更好</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PRO_SIZE&#x3D;$&#123;PMI_SIZE&#125;
threads&#x3D;&#96;echo $&#123;Cores&#125;&#x2F;$&#123;PMI_SIZE&#125; | bc&#96;
PMI_RANK_my&#x3D;$&#123;PMI_RANK&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="6-4-测试优化（重点）"><a href="#6-4-测试优化（重点）" class="headerlink" title="6.4 测试优化（重点）"></a>6.4 测试优化（重点）</h2><blockquote>
<p>一、计算理论内存总带宽</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;计算方法：
&gt;查看内存带宽：
&gt;dmidecode | grep -A 16 &quot;Memory Device&quot;
&gt;例如内存信息为：
&gt;三星 DDR4 
&gt;16G 每根
&gt;2666 MT&#x2F;s（Mhz）
&gt;查看cpu支持的通道数，例如intel 6252N支持6通道，两个CPU支持12通道
&gt;理论带宽计算DDR4：
&gt;单条内存带宽 &#x3D; 内存核心频率 x 内存总线位数 x 倍增系数
 &#x3D; 2666 * 64 &#x2F; 8 &#x3D; 21328 MB&#x2F;s &#x3D; 21.3G&#x2F;s
&gt;12通道总内存带宽 &#x3D; 21328 * 12 &#x3D; 255936 &#x3D; 250G&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>二、使用stream测试实际内存总带宽</p>
<p>​	如果可以达到90%或以上，说明内存带宽正常, 继续Linpack测试</p>
<p>三、计算CPU理论峰值</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;计算方法：
Mhz * 每个时钟周期执行浮点运算的次数 * CPU数目
&gt;&#x3D;
2.3 x ( 8 x 2 x 2 ) x 48 &#x3D; 3532.8 Gflops
&gt;说明：
峰值计算分为单精度和双精度浮点运算
&gt;单精度：
32bit的指令长度的运算，对应32位操作系统
&gt;双精度：
64bit的指令长度的运算，对应64位操作系统
&gt;查找CPU可以处理什么样的指令集：
例如Intel官网查到Intel Xeon 6252N
支持AVX-512，
# of AVX-512 FMA Units &#x3D; 2
(Fused Multiply Add instructions) 融合了 乘法 和 加法
即可以单个周期同时执行2条512bit的加法和2条512bit的乘法
&gt;理解上述两个概念，可以开始计算（CPU单周期浮点计算能力）
&gt;Intel 6252N (支持avx512，有512位)
&gt;单精度：
2.3 x 512&#x2F;32 x 2 x 2 &#x3D; 147.2Gflops 
&gt;双精度
2.3 x 512&#x2F;64 x 2 x 2 &#x3D; 73.6Gflops
&gt;双精度共48核
74.6 x 48 &#x3D; 3580

&gt;FT2000+ 和 FT1500A (只有128位)，FT3000加入sve指令集(128-256位)
&gt;单精度： 
2.2 x 128&#x2F;32 * 2 &#x3D; 4.4
&gt;双精度:
2.2 x 128&#x2F;64 * 2 &#x3D; 8.8
&gt;双精度共64核
8.8 x 64 &#x3D; 563.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>四、使用Linapack测试CPU实际峰值</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;如果性能达到理论峰值的70%说明正常，如果未达到尝试以下优化<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;1、使用mpirun运行xhpl, 按&#96;lscpu&#96; 中的NUMA分组绑定,&#96;比如48核，分为两个Numa Node&#96;, 则用mpirun&#96;跑两个xhpl进程&#96;，每个进程使用 OMP_NUM_THREADS&#x3D;24, 跑24线程，这样可以将核用满。
&gt;在&#96;Intel&#96;平台，两个进程分别使用 HPL_HOST_CORE&#x3D;&#39;0-23&#39; 以及 HPL_HOST_CORE&#x3D;&#39;24-47&#39; 绑定核
&gt;在&#96;Arm64&#96;平台，则使用 GOMP_CPU_AFFINITY&#x3D;&#39;0-23&#39; 以及 GOMP_CPU_AFFINITY&#x3D;&#39;24-47&#39; 绑定
&gt;2、内存不用分配太大，根据stream测试结果分配，从小开始测
&gt;3、Intel平台编译器使用ICC，测试linpack使用icc自带的linpack，mpi使用icc自带的
&gt;4、Bios中关闭超线程，开启超频(turbo&#x2F;P-state)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong><font color="blue">先测stream,判断带宽是否正常，再测linpack，然后再测Spec Cpu</font></strong></p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Intel平台可以使用的控制频率的命令
cpupower -c all frequency-set -g performance
cpupower -c 0-95 frequency-set -g userspace
cpupower -c 0-95 frequency-set -f 2700000

# 查看当前频率控制是否为perfomance？
cat &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor

# 跑xhpl之前设置指令集，或许有用
export MKL_ENABLE_INSTRUCTIONS&#x3D;AVX512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="G:\工作\2020年3月\CN9性能测试\测试组合.png" alt="image-20200415171716940"></p>
<h2 id="6-5-HPL-dat修改"><a href="#6-5-HPL-dat修改" class="headerlink" title="6.5 HPL.dat修改"></a>6.5 HPL.dat修改</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 第1-2行，注释说明行
HPLinpack benchmark input file   
Innovative Computing Laboratory, University of Tennessee  

# 第 3-4 行，输出结果文件的形式
HPL.out      output file name (if any)  
6            device out (6&#x3D;stdout,7&#x3D;stderr,file) 

# 5-6行，求解矩阵的大小
1            # of problems sizes (N)  
1000         Ns   

# 7-8行 求解矩阵分块的大小
1            # of NBs
192 256      NBs

# 9行 处理器阵列的排列方式，行还是列
0：适用于节点较少，单个节点CPU较多的胖系统
1：适用于节点较多，单个节点CPU较少的瘦系统（机群上远好于按行排列）
1            PMAP process mapping (0&#x3D;Row-,1&#x3D;Column-major) 

# 10-12行 定义二维处理网格P&#x2F;Q
# P X Q &#x3D; 进程数，P尽量小于Q
# P&#x3D;2^n,P最好选择2的幂
1            # of process grids (P x Q) 
1 2          Ps
1 2          Qs

# 13行 设置阀值，不用修改
16.0         threshold

# 14-21行 设置L的分解方式
1            # of panel fact
2 1 0        PFACTs (0&#x3D;left, 1&#x3D;Crout, 2&#x3D;Right) # 对性能影响不大
1            # of recursive stopping criterium
4 8          NBMINs (&gt;&#x3D; 1)   # 4或8都不错
1            # of panels in recursion
2            NDIVs  # 选2比较理想
1            # of recursive panel fact.
1 0 2        RFACTs (0&#x3D;left, 1&#x3D;Crout, 2&#x3D;Right) # 对性能影响不大

# 22-23行 设置L的横向广播方式
# 前四种，适用于快速网络，后两种适用于速度较慢的网络
# 小规模系统，选择0&#x2F;1，大规模系统选择3
1            # of broadcast
0            BCASTs (0&#x3D;1rg,1&#x3D;1rM,2&#x3D;2rg,3&#x3D;2rM,4&#x3D;Lng,5&#x3D;LnM)

# 24-25行 设置横向通信的通信深度
# 小规模系统选择1&#x2F;2，大规模系统2-5之间
1            # of lookahead depth
1            DEPTHs (&gt;&#x3D;0)

# 26-27 设置U的广播算法
# 小规模系统，使用缺省值即可
0            SWAP (0&#x3D;bin-exch,1&#x3D;long,2&#x3D;mix)
1            swapping threshold

# 28-29行 L和U的数据存放格式
0：按列存放
1：按行存放
0            L1 in (0&#x3D;transposed,1&#x3D;no-transposed) form
0            U  in (0&#x3D;transposed,1&#x3D;no-transposed) form

# 30-31 缺省值即可
0            Equilibration (0&#x3D;no,1&#x3D;yes)
8            memory alignment in double (&gt; 0)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-6-测试脚本编写"><a href="#6-6-测试脚本编写" class="headerlink" title="6.6 测试脚本编写"></a>6.6 测试脚本编写</h2><h3 id="6-6-1-本地mpirun测试脚本（Intel版本）"><a href="#6-6-1-本地mpirun测试脚本（Intel版本）" class="headerlink" title="6.6.1 本地mpirun测试脚本（Intel版本）"></a>6.6.1 本地mpirun测试脚本（Intel版本）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 本地单节点测试，需要根据&#96;lscpu&#96;中numa分区情况(node)的使用mpirun测试xhpl
# eg:在未开超线程的情况下，分为两个node，每个node中有12个核，则最佳测试方法为mpirun -np 2 .&#x2F;myrun.sh
# 以下为myrun.sh的具体实现

#!&#x2F;bin&#x2F;bash
ulimit -s unlimited
Cores&#x3D;48
ThreadsNum&#x3D;&#96;echo &quot;$&#123;Cores&#125;&#x2F;$&#123;PMI_SIZE&#125;&quot; | bc&#96; # 计算每个进程跑的线程数
case $&#123;PMI_SIZE&#125; in
2)
        case $&#123;PMI_RANK&#125; in
        0)
        export OMP_NUM_THREADS&#x3D;$&#123;ThreadsNum&#125;
        export HPL_HOST_CORE&#x3D;&#39;0-23&#39;
        .&#x2F;xhpl -n 1 -b 384 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
        ;;
        1)
        export OMP_NUM_THREADS&#x3D;$&#123;ThreadsNum&#125;
        export HPL_HOST_CORE&#x3D;&#39;24-47&#39;
        .&#x2F;xhpl -n 1 -b 384 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
        ;;
        esac
;;
esac
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-6-2-Slurm-srun测试脚本-FT版本"><a href="#6-6-2-Slurm-srun测试脚本-FT版本" class="headerlink" title="6.6.2 Slurm srun测试脚本(FT版本)"></a>6.6.2 Slurm srun测试脚本(FT版本)</h2><p>xhplrun.sh</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash
ulimit -s unlimited
Cores&#x3D;48


&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
PMI_SIZE&#x3D;$SLURM_NPROCS
PMI_RANK&#x3D;$SLURM_PROCID
MPI_NUM_NODE&#x3D;$SLURM_NNODES
MPI_PER_NODE&#x3D;$((PMI_SIZE &#x2F; MPI_NUM_NODES))
MPI_RANK_FOR_NODE&#x3D;$((PMI_RANK % MPI_PER_NODE))

PRO_SIZE&#x3D;$&#123;MPI_PER_NODE&#125;
PMI_RANK_my&#x3D;$&#123;MPI_RANK_FOR_NODE&#125;
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;

echo $&#123;PRO_SIZE&#125; $&#123;PMI_RANK_my&#125; $&#123;threads&#125; $&#123;PMI_SIZE&#125; $&#123;PMI_RANK&#125; $&#123;MPI_NUM_NODES&#125; $&#123;MPI_PER_NODE&#125; $&#123;MPI_RANK_FOR_NODE&#125;

export HPL_CMDLINE&#x3D;1
case $&#123;PRO_SIZE&#125; in
1)
#numactl -i 0-1 -N 0-1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0,4 -N 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-63&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
case $&#123;PMI_RANK_my&#125; in
0)
#numactl -i 0-3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -m 3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-31&#39;
numactl -i 4-7 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
#numactl -i 4-7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -m 7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-63&#39;
numactl -i 0-3 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
#mpirun -n 1 numactl -i 0-3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125; : -n 1 numactl -i 4-7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>yhrun 提交作业 runpro.sh</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#duqi

if [ $# -ne 5 ]
then
        echo Usage: .&#x2F;runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir
        exit 0
fi

export HPL_CMDLINE&#x3D;1

export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mpi3&#x2F;lib:$LD_LIBRARY_PATH

nodes&#x3D;$&#123;1&#125;
nnodes&#x3D;$&#123;2&#125;
nprocs&#x3D;$&#123;3&#125;
nmem&#x3D;$&#123;4&#125;
logdir&#x3D;$&#123;5&#125;


mkdir -p $&#123;logdir&#125;

tnprocs&#x3D;$(($&#123;nnodes&#125;*$&#123;nprocs&#125;))
P&#x3D;1
Q&#x3D;1
for i in &#96;seq 1 $&#123;tnprocs&#125;&#96;
do
        for j in &#96;seq 1 $&#123;tnprocs&#125;&#96;
        do
                PQ&#x3D;$(($&#123;i&#125;*$&#123;j&#125;))
                if [ $&#123;PQ&#125; -eq $&#123;tnprocs&#125; ] &amp;&amp; [ $&#123;i&#125; -le $&#123;j&#125; ]
                then
                        P&#x3D;$&#123;i&#125;
                        Q&#x3D;$&#123;j&#125;
                fi
        done
done

for i in &#96;yhcontrol show hostname $&#123;nodes&#125;&#96;
do
        scp HPL.dat $i:&#x2F;root&#x2F;linpack &amp;
done
wait
sleep 1

j&#x3D;0
runnodes&#x3D;&#39;&#39;

for i in &#96;yhcontrol show hostname $&#123;nodes&#125;&#96;
do
        runnodes+&#x3D;$&#123;i&#125;,
        let j++
        if [ $&#123;j&#125; -eq $&#123;nnodes&#125; ]
        then
                echo &quot;yhrun -p all -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D &#x2F;root&#x2F;linpack &#x2F;root&#x2F;linpack&#x2F;xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log &amp;&quot;
                echo $&#123;runnodes&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log
                yhrun -p all -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D &#x2F;root&#x2F;linpack &#x2F;root&#x2F;linpack&#x2F;xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log &amp;
                j&#x3D;0
                runnodes&#x3D;&#39;&#39;
        fi
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-7-Bios设置"><a href="#6-7-Bios设置" class="headerlink" title="6.7 Bios设置"></a>6.7 Bios设置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">琦哥的：
    UPI Configuration
        Link Lop -&gt; disable
        Link L1  -&gt; disable 
        IO Directory Cache -&gt; enable
        Isoc Mode -&gt; enable

    Memory Configuration
        Eufsrce POR -&gt; enable
        PPR Type -&gt; Soft PPR
        Memory Frequency -&gt; 2666
        Data Scrambling for NVMDIMM -&gt; enable
        Data Scrambling for DDR4 -&gt; enable
        Enable AOR -&gt; enable
        Refresh Option -&gt; enable
        Memory RAS
            Memory Rank Sparing -&gt; enable

    IIO Configuration
        PCI-E Port Max Payload Size -&gt; 256B

    CPU P-State
        SpeedStep -&gt; disable&#x2F;enable?
        PBF 
        Hardware P-State -&gt; enable
        Package c state -&gt; No limit 
	
网上找的系统Bios设置优化
    关闭超线程
    打开EIST
    打开Turbo Mode
    Boot Performance mode设置为max performance
    Energy Performance BIAS设置为Performance
    打开Monitor&#x2F;Mwait
    Package C stat limit设置为C0&#x2F;C1 state
    关闭CPU C3 report
    关闭CPU C6 report
    关闭Enhanced Halt State
    关闭Intel VT for Directed I&#x2F;O
    Linux OS下CPU Power Management设置为max performance
    QPI及Memory Frequency保持为Max Frequency
    关闭NUMA功能 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-8-结果反馈"><a href="#6-8-结果反馈" class="headerlink" title="6.8 结果反馈"></a>6.8 <span id="jump">结果反馈</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#linpack测试以我们为主导

1、grep FAILED 关键字,查看是否有节点计算错误
2、grep WR 查看节点性能是否正常
3、统计跑死的点

# 如何反馈？
一轮Linpack40分钟测试完成
	一、6个点本是drain*状态
	二、3个点跑死，cn[1,2,3]
	三、5个点Linpack计算FAILED
	四、其他点linpakc性能正常
可以考虑更换下一批<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-9-风冷系统linpack测试全过程记录"><a href="#6-9-风冷系统linpack测试全过程记录" class="headerlink" title="6.9 风冷系统linpack测试全过程记录"></a>6.9 风冷系统linpack测试全过程记录</h2><blockquote>
<h5 id="1、了解风冷系统的架构"><a href="#1、了解风冷系统的架构" class="headerlink" title="1、了解风冷系统的架构"></a>1、了解风冷系统的架构</h5><p>按批次测试，测完一批换下一批</p>
<p>一批为192个节点，每个框32个节点，共6个框</p>
<p>每个节点128G内存，芯片为FT2000+, 通过mhz获取频率为2000（降频），64物理核</p>
<p>系统版本： 4.19.46-cn+</p>
<h5 id="2、计算每个节点的理论峰值"><a href="#2、计算每个节点的理论峰值" class="headerlink" title="2、计算每个节点的理论峰值"></a>2、计算每个节点的理论峰值</h5><p>2000 * 128 &#x2F; 64 * 2 * 64&#x3D; 512000</p>
<h5 id="3、开始测试"><a href="#3、开始测试" class="headerlink" title="3、开始测试"></a>3、开始测试</h5><p>runpro.sh脚本参数说明:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;.&#x2F;runpro.sh NodeList NodeBind ProcessesPerNode MemSize
&gt;NodeList 节点列表,例如cn[0-8]
&gt;NodeBind 几个节点绑定运行，例如2，则计算效率时，需要将结果得到的效率&#x2F;2&#x2F;512
&gt;ProcessesPerNode 每给节点运行几个xhpl进程，根据numa node来，FT一般是8
&gt;MemSize 每个节点中，每个进程分配的内存，一般使用到约总内存的80%，例如单节点128G，填写12000（单位为Mb），则总使用96G内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>单节点测试：</p>
<p>​	不需要互联测试网络联通性，仅对单节点进行压力测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;.&#x2F;runpro.sh cn0 1 8 12000 logdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>多节点测试：</p>
<p>​	需要互联测试网络联通性， 2，4， 8， 16， 32， 64， 128，如果要求测多节点稳定性，测试的8点8进8线，结果按<a href="#jump">章节6.8</a>反馈</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;.&#x2F;runpro.sh cn0 1 8 12000 logdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>问题解决一：</p>
<p>​	测试到128节点，性能异常，效率仅有43%</p>
<p>互联那边回应：</p>
<p>​	节点数超过64，通信就跨框</p>
<p>琦哥建议的做法：</p>
<p>​	把128个节点分到4个框，测试一下，看是不是带宽的原因</p>
<p>最后的解决方法：</p>
<p>​	网络拓扑更换，矩阵值不能相等，使用原本32 x 32，改为16 x 64，但是换成160节点后还是有问题</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;.&#x2F;runpro.sh cn[xx-xx] 128 8 12000 dir
&gt;其中执行的xhplrun.sh的参数为
&gt;xhplrun.sh 32 32 12000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


</blockquote>
<h1 id="七、Lmbench-测试"><a href="#七、Lmbench-测试" class="headerlink" title="七、Lmbench 测试"></a>七、Lmbench 测试</h1><h2 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h2><p>​	Lmbench是一套简易，可移植的，符合ANSI&#x2F;C标准为UNIX&#x2F;POSIX而制定的微型测评工具。一般来说，它衡量两个关键特征：反应时间和带宽。LmBench旨在使系统开发者深入了解关键操作的基础成本。</p>
<h2 id="7-2-工具安装"><a href="#7-2-工具安装" class="headerlink" title="7.2 工具安装"></a>7.2 工具安装</h2><p>获取源包：</p>
<p>​	lmbench3.tar.gz</p>
<p>gcc编译安装</p>
<h2 id="7-3-测试步骤"><a href="#7-3-测试步骤" class="headerlink" title="7.3 测试步骤"></a>7.3 测试步骤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd src
make results
make see
内存10G。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">错误处理：
[root@cn9 lmbench3]# cd src&#x2F;
[root@cn9 src]# make results
gmake[1]: Entering directory &#96;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;lmbench3&#x2F;src&#39;
gmake[1]: *** No rule to make target &#96;..&#x2F;SCCS&#x2F;s.ChangeSet&#39;, needed by &#96;bk.ver&#39;.  Stop.
gmake[1]: Leaving directory &#96;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;lmbench3&#x2F;src&#39;
解决方法：
	vim Makefile
	231行修改：
	$O&#x2F;lmbench : ..&#x2F;scripts&#x2F;lmbench bk.ver
	改为
	$O&#x2F;lmbench : ..&#x2F;scripts&#x2F;lmbench<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="八、IOR-测试（暂无）"><a href="#八、IOR-测试（暂无）" class="headerlink" title="八、IOR 测试（暂无）"></a>八、IOR 测试（暂无）</h1><h1 id="九、alltoall测试"><a href="#九、alltoall测试" class="headerlink" title="九、alltoall测试"></a>九、alltoall测试</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yhrun -n 128 -N 8 -w cn34,cn35,cn36,cn37,cn38,cn39,cn40,cn41, &#x2F;root&#x2F;xm_alltoall 102400 1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="附录：常用工具链编译方法"><a href="#附录：常用工具链编译方法" class="headerlink" title="附录：常用工具链编译方法"></a>附录：常用工具链编译方法</h1><h2 id="一、GCC编译"><a href="#一、GCC编译" class="headerlink" title="一、GCC编译"></a>一、GCC编译</h2><p>需要依次编译依赖软件，然后在编译gcc中使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置isl的库路径
export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;lib:$LD_LIBRARY_PATH
# 编译GCC
..&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --enable-lto --disable-bootstrap --enable-languages&#x3D;c,c++,fortran --with-gmp&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-mpfr&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-mpc&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-isl&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-1-依赖软件编译"><a href="#1-1-依赖软件编译" class="headerlink" title="1.1 依赖软件编译"></a>1.1 依赖软件编译</h3><h4 id="1-1-2-编译安装gmp"><a href="#1-1-2-编译安装gmp" class="headerlink" title="1.1.2 编译安装gmp"></a>1.1.2 编译安装gmp</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830
make 
make install

.&#x2F;configure --with-gmp&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc83 --with-mpfr&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc83  --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc83<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-1-3-编译安装mpfr"><a href="#1-1-3-编译安装mpfr" class="headerlink" title="1.1.3 编译安装mpfr"></a>1.1.3 编译安装mpfr</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-gmp&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830
make 
make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-1-4-编译安装mpc"><a href="#1-1-4-编译安装mpc" class="headerlink" title="1.1.4 编译安装mpc"></a>1.1.4 编译安装mpc</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-gmp&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-mpfr&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830
make
make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-1-5-编译安装isl"><a href="#1-1-5-编译安装isl" class="headerlink" title="1.1.5 编译安装isl"></a>1.1.5 编译安装isl</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830 --with-gmp-prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> yum install gcc-* gtk2 gtk3 x11 libX11.x86_64 libX11-devel.x86_64 libXorg libXss libXScrnSaver.x86_64 xorg-x11-server-Xorg.x86_64 xulrunner.x86_64 xulrunner.i686 libstdc++.i686 libstdc++-devel.i686
glibc.i686 glibc-devel.i686 libgcc* xulrunner.x86_64 xulrunner.i686 glibc-devel.x86_64 glibc.x86_64 autoconf-archive.noarch gtk2 gtk3 pango libXScrnSaver libX11.x86_64 libX11-devel.x86_64 libX11-common.noarch libxkbcommon-x11.x86_64 xorg-x11-server-common.x86_64 libstdc++* -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash
mount -o loop -t iso9660 &#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;images&#x2F;rhel-server-7.6-x86_64-dvd.iso &#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;mnt&#x2F;CDROM


yum install gcc-* gtk2 gtk3 glibc-devel.i686 x11 libX11.x86_64 libX11-devel.x86_64 libXorg libXss libXScrnSaver.x86_64 xorg-x11-server-Xorg.x86_64 xulrunner.x86_64 xulrunner.i686 libstdc++.i686 libstdc++-devel.i686 glibc* libgcc* xulrunner* autoconf-archive.noarch gtk2 gtk3 pango libXScrnSaver libX11.x86_64 libX11-devel.x86_64 libX11-common.noarch libxkbcommon-x11.x86_64 xorg-x11-server-common.x86_64 libstdc++* -y
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、MPICH3编译"><a href="#二、MPICH3编译" class="headerlink" title="二、MPICH3编译"></a>二、MPICH3编译</h2><p>设置gcc830的环境变量</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;bin:$PATH
export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;lib:$LD_LIBRARY_PATH
export LD_INCLUDE_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;include:$LD_INCLUDE_PATH
export CPATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;include:$CPATH
export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;lib64:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;gcc830&#x2F;libexec:$LD_LIBRARY_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再编译</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;mpi3-gcc830 --enable-fast --enable-shared&#x3D;yes --enable-threads&#x3D;runtime --with-ch3-rank-bits&#x3D;32 --enable-romio --with-file-system&#x3D;ufs+nfs --with-mpe
make 
make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>设置环境变量使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;mpi3-gcc830&#x2F;bin:$PATH
export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;mpi3-gcc830&#x2F;lib:$LD_LIBRARY_PATH
export LD_INCLUDE_PATH&#x3D;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;tools&#x2F;mpi3-gcc830&#x2F;include:$LD_INCLUDE_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="三、Redhat设置本地镜像源"><a href="#三、Redhat设置本地镜像源" class="headerlink" title="三、Redhat设置本地镜像源"></a>三、Redhat设置本地镜像源</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mount -o loop -t iso9660 &#x2F;home&#x2F;IOSYS&#x2F;test652&#x2F;images&#x2F;rhel-server-7.6-x86_64-dvd.iso &#x2F;home&#x2F;IOSYS&#x2F;test652&#x2F;mnt&#x2F;CDROM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;yum.repos.d&#x2F;redhat.repo

[rhel7.6]
name&#x3D;rhel7.6
baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;home&#x2F;testcpu&#x2F;test652&#x2F;mnt&#x2F;CDROM
enabled&#x3D;1
gpgcheck&#x3D;0
priority&#x3D;1

yum clean
yum update
yum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、找不到so库的解决方法"><a href="#四、找不到so库的解决方法" class="headerlink" title="四、找不到so库的解决方法"></a>四、找不到so库的解决方法</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 方法一：
	设置LD_LIBRARY_PATH
# 方法二：
 	vim &#x2F;etc&#x2F;ld.so.conf
 	----------------------------------------------------
 	include ld.so.conf.d&#x2F;*.conf
	&#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries&#x2F;linux&#x2F;lib&#x2F;intel64
	ldconfig 更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="五、复制以及查看端口占用"><a href="#五、复制以及查看端口占用" class="headerlink" title="五、复制以及查看端口占用"></a>五、复制以及查看端口占用</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看端口占用
netstat -nultp | grep 8080
netstat -anp  | grep 80
netstat -ano | grep 18130
lsof -i:18130

# 复制
rsync -chavP &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;postgresql .
rsync -avzP 复制显示进度

# 查看Bios版本
dmidecode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">
mpiicc -DAdd__ -DF77_INTEGER&#x3D;int -DStringSunStyle -DHPL_DETAILED_TIMING -DHPL_PROGRESS_REPORT -I&#x2F;root&#x2F;hpl&#x2F;include -I&#x2F;root&#x2F;hpl&#x2F;include&#x2F;Linux_Intel64 -I&#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries_2019.4.243&#x2F;linux&#x2F;mkl&#x2F;mkl&#x2F;include  -O3 -w -ansi-alias -i-static -z noexecstack -z relro -z now -nocompchk -Wall -qopenmp -mt_mpi -o &#x2F;root&#x2F;hpl&#x2F;bin&#x2F;Linux_Intel64&#x2F;xhpl HPL_pddriver.o         HPL_pdinfo.o           HPL_pdtest.o &#x2F;root&#x2F;hpl&#x2F;lib&#x2F;Linux_Intel64&#x2F;libhpl.a  -L&#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries_2019.4.243&#x2F;linux&#x2F;mkl&#x2F;mkl&#x2F;lib&#x2F;intel64 -Wl,--start-group &#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries_2019.4.243&#x2F;linux&#x2F;mkl&#x2F;lib&#x2F;intel64&#x2F;libmkl_intel_lp64.a &#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries_2019.4.243&#x2F;linux&#x2F;mkl&#x2F;lib&#x2F;intel64&#x2F;libmkl_intel_thread.a &#x2F;opt&#x2F;intel&#x2F;compilers_and_libraries_2019.4.243&#x2F;linux&#x2F;mkl&#x2F;lib&#x2F;intel64&#x2F;libmkl_core.a -Wl,--end-group -lpthread -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="六、查看cpu主频率-和-内存信息"><a href="#六、查看cpu主频率-和-内存信息" class="headerlink" title="六、查看cpu主频率 和 内存信息"></a>六、查看cpu主频率 和 内存信息</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看CPU信息
lscpu 其中 sockets个数代表物理核个数
cat &#x2F;proc&#x2F;cpuinfo
lmbench的mhz
&#x2F;usr&#x2F;bin&#x2F;turbostat

# 查看内存信息
cat &#x2F;proc&#x2F;meminfo
dmidecode | grep -A 16 &quot;Memory Device&quot;、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="七、GLSL-1-50-is-not-supported"><a href="#七、GLSL-1-50-is-not-supported" class="headerlink" title="七、GLSL 1.50 is not supported"></a>七、GLSL 1.50 is not supported</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 报错：
ERROR: In &#x2F;home&#x2F;gs&#x2F;src&#x2F;VTK8.2&#x2F;VTK-8.2.0&#x2F;Rendering&#x2F;OpenGL2&#x2F;vtkShaderProgram.cxx, line 447
vtkShaderProgram (0x2b87270): 0:1(10): error: GLSL 1.50 is not supported. Supported versions are: 1.10, 1.20, 1.30, 1.00 ES, and 3.00 ES

# 解决方法
export MESA_GL_VERSION_OVERRIDE&#x3D;3.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cn[16-19,24-27,144-147,152-155]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="八、附录"><a href="#八、附录" class="headerlink" title="八、附录"></a>八、附录</h2><h3 id="8-1-Linpack脚本"><a href="#8-1-Linpack脚本" class="headerlink" title="8.1 Linpack脚本"></a>8.1 Linpack脚本</h3><blockquote>
<p>runpro.sh</p>
<p>.&#x2F;runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir</p>
<p>node_list 节点列表</p>
<p>nodes_num 几个点连在一起跑，单点 双点 多点</p>
<p> proc_per_node 每个节点跑几个进程，看node分为几个，FT一般是8</p>
<p> mem 12000 每个进程分配的内存，*8 大概&#x3D; 总内存的80%</p>
<p> logdir 日志文件</p>
<p> 单点8进程，一轮≈35分钟</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#! &#x2F;bin&#x2F;bash

#duqi

if [ $# -ne 5 ]
then
        echo Usage: .&#x2F;runpro.sh nodes_list nodes_num proc_per_node mem_per_proc logdir
        exit 0
fi

export HPL_CMDLINE&#x3D;1
export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mpi3&#x2F;lib:LD_LIBRARY_PATH

nodes&#x3D;$&#123;1&#125;
nnodes&#x3D;$&#123;2&#125;
nprocs&#x3D;$&#123;3&#125;
nmem&#x3D;$&#123;4&#125;
logdir&#x3D;$&#123;5&#125;


mkdir -p $&#123;logdir&#125;

tnprocs&#x3D;$(($&#123;nnodes&#125;*$&#123;nprocs&#125;))
P&#x3D;1
Q&#x3D;1


num_max&#x3D;1
for i in &#96;seq 1 $&#123;tnprocs&#125;&#96;
do
        j&#x3D;$(($&#123;i&#125;*$&#123;i&#125;))
        if [ $&#123;tnprocs&#125; -le $&#123;j&#125; ]; then
                num_max&#x3D;$&#123;i&#125;
                break
        fi
done
for i in &#96;seq 1 $&#123;num_max&#125;&#96;
do
        for j in &#96;seq $&#123;num_max&#125; $&#123;tnprocs&#125;&#96;
        do
                PQ&#x3D;$(($&#123;i&#125;*$&#123;j&#125;))
                if [ $&#123;PQ&#125; -eq $&#123;tnprocs&#125; ]
                then
                        P&#x3D;$&#123;i&#125;
                        Q&#x3D;$&#123;j&#125;
                fi
        done
done


for i in &#96;yhcontrol show hostname $&#123;nodes&#125;&#96;
do
        scp HPL.dat $i:&#x2F;root&#x2F;linpack &amp;
done
sleep 1

j&#x3D;0
runnodes&#x3D;&#39;&#39;

for i in &#96;yhcontrol show hostname $&#123;nodes&#125;&#96;
do
        runnodes+&#x3D;$&#123;i&#125;,
        let j++
        if [ $&#123;j&#125; -eq $&#123;nnodes&#125; ]
        then
                echo &quot;yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D &#x2F;root&#x2F;linpack &#x2F;root&#x2F;linpack&#x2F;xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log &amp;&quot;
                echo $&#123;runnodes&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log &amp;
                echo &quot;yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D &#x2F;root&#x2F;linpack &#x2F;root&#x2F;linpack&#x2F;xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125;&quot; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;list.log
                yhrun -p All -N $&#123;nnodes&#125; -n $&#123;tnprocs&#125; -w $&#123;runnodes&#125; -D &#x2F;root&#x2F;linpack &#x2F;root&#x2F;linpack&#x2F;xhplrun.sh $&#123;P&#125; $&#123;Q&#125; $&#123;nmem&#125; &amp;&gt;&gt; $&#123;logdir&#125;&#x2F;$&#123;i&#125;.log &amp;
                j&#x3D;0
                runnodes&#x3D;&#39;&#39;
        fi
done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>xhplrun.sh</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#! &#x2F;bin&#x2F;bash

#duqi

ulimit -s unlimited

Cores&#x3D;64
#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
PMI_SIZE&#x3D;$SLURM_NPROCS

PMI_RANK&#x3D;$SLURM_PROCID

MPI_NUM_NODES&#x3D;$SLURM_NNODES

MPI_PER_NODE&#x3D;$((PMI_SIZE &#x2F; MPI_NUM_NODES))

MPI_RANK_FOR_NODE&#x3D;$((PMI_RANK % MPI_PER_NODE))
#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;


threads&#x3D;&#96;echo $&#123;Cores&#125;*$&#123;SLURM_NNODES&#125;&#x2F;$&#123;PMI_SIZE&#125; | bc&#96;

PRO_SIZE&#x3D;$&#123;MPI_PER_NODE&#125;
PMI_RANK_my&#x3D;$&#123;MPI_RANK_FOR_NODE&#125;

echo $&#123;PRO_SIZE&#125; $&#123;PMI_RANK_my&#125; $&#123;threads&#125; $&#123;PMI_SIZE&#125; $&#123;PMI_RANK&#125; $&#123;MPI_NUM_NODES&#125; $&#123;MPI_PER_NODE&#125; $&#123;MPI_RANK_FOR_NODE&#125;

export HPL_CMDLINE&#x3D;1
case $&#123;PRO_SIZE&#125; in
1)
#numactl -i 0-1 -N 0-1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0,4 -N 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-63&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
case $&#123;PMI_RANK_my&#125; in
0)
#numactl -i 0-3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -m 3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-31&#39;
numactl -i 4-7 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
#numactl -i 4-7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -m 7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-63&#39;
numactl -i 0-3 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
#mpirun -n 1 numactl -i 0-3 -N 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125; : -n 1 numactl -i 4-7 -N 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
4)
case $&#123;PMI_RANK_my&#125; in
0)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-15&#39;
numactl -i 0-7 -N 0-1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 2-3 -N 0-1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;16-31&#39;
numactl -i 0-7 -N 2-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 4-5 -N 2-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-47&#39;
numactl -i 0-7 -N 4-5 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 6-7 -N 4-5 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
3)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;48-63&#39;
numactl -i 0-7 -N 6-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0-1 -N 6-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
;;
8)
case $&#123;PMI_RANK_my&#125; in
0)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-7&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 4 -N 0 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;8-15&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 2 -N 1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;16-23&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 6 -N 2 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
3)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;24-31&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 1 -N 3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
4)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-39&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 0 -N 4 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
5)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;40-47&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 7 -N 5 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
6)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;48-55&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 5 -N 6 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
7)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;56-63&#39;
numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#numactl -i 3 -N 7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#.&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
;;
16)
case $&#123;PMI_RANK_my&#125; in
0)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-3&#39;
numactl -i 0-7 -C 0-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;4-7&#39;
numactl -i 0-7 -C 4-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;8-11&#39;
numactl -i 0-7 -C 8-11 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
3)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;12-15&#39;
numactl -i 0-7 -C 12-15 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
4)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;16-19&#39;
numactl -i 0-7 -C 16-19 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
5)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;20-23&#39;
numactl -i 0-7 -C 20-23 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
6)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;24-27&#39;
numactl -i 0-7 -C 24-27 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
7)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;28-31&#39;
numactl -i 0-7 -C 28-31 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
8)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-35&#39;
numactl -i 0-7 -C 32-35 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
9)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;36-39&#39;
numactl -i 0-7 -C 36-39 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
10)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;40-43&#39;
numactl -i 0-7 -C 40-43 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
11)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;44-47&#39;
numactl -i 0-7 -C 44-47 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
12)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;48-51&#39;
numactl -i 0-7 -C 48-51 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
13)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;52-55&#39;
numactl -i 0-7 -C 52-55 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
14)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;56-59&#39;
numactl -i 0-7 -C 56-59 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
15)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;60-63&#39;
numactl -i 0-7 -C 60-63 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
;;
32)
#export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
#numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#;;
case $&#123;PMI_RANK_my&#125; in
0)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0-1&#39;
numactl -i 0-7 -C 0-1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;2-3&#39;
numactl -i 0-7 -C 2-3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;4-5&#39;
numactl -i 0-7 -C 4-5 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
3)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;6-7&#39;
numactl -i 0-7 -C 6-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
4)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;8-9&#39;
numactl -i 0-7 -C 8-9 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
5)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;10-11&#39;
numactl -i 0-7 -C 10-11 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
6)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;12-13&#39;
numactl -i 0-7 -C 12-13 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
7)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;14-15&#39;
numactl -i 0-7 -C 14-15 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
8)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;16-17&#39;
numactl -i 0-7 -C 16-17 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
9)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;18-19&#39;
numactl -i 0-7 -C 18-19 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
10)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;20-21&#39;
numactl -i 0-7 -C 20-21 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
11)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;22-23&#39;
numactl -i 0-7 -C 22-23 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
12)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;24-25&#39;
numactl -i 0-7 -C 24-25 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
13)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;26-27&#39;
numactl -i 0-7 -C 26-27 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
14)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;28-29&#39;
numactl -i 0-7 -C 28-29 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
15)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;30-31&#39;
numactl -i 0-7 -C 30-31 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
16)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32-33&#39;
numactl -i 0-7 -C 32-33 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
17)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;34-35&#39;
numactl -i 0-7 -C 34-35 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
18)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;36-37&#39;
numactl -i 0-7 -C 36-37 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
19)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;38-39&#39;
numactl -i 0-7 -C 38-39 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
20)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;40-41&#39;
numactl -i 0-7 -C 40-41 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
21)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;42-43&#39;
numactl -i 0-7 -C 42-43 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
22)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;44-45&#39;
numactl -i 0-7 -C 44-45 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
23)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;46-47&#39;
numactl -i 0-7 -C 46-47 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
24)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;48-49&#39;
numactl -i 0-7 -C 48-49 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
25)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;50-51&#39;
numactl -i 0-7 -C 50-51 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
26)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;52-53&#39;
numactl -i 0-7 -C 52-53 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
27)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;54-55&#39;
numactl -i 0-7 -C 54-55 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
28)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;56-57&#39;
numactl -i 0-7 -C 56-57 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
29)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;58-59&#39;
numactl -i 0-7 -C 58-59 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
30)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;60-61&#39;
numactl -i 0-7 -C 60-61 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
31)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;62-63&#39;
numactl -i 0-7 -C 62-63 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
;;
64)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
#export GOMP_CPU_AFFINITY&#x3D;&#39;0-63&#39;
#numactl -i 0-7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
#;;
case $&#123;PMI_RANK_my&#125; in
0)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;0&#39;
numactl -i 0-7 -C 0 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
1)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;1&#39;
numactl -i 0-7 -C 1 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
2)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;2&#39;
numactl -i 0-7 -C 2 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
3)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;3&#39;
numactl -i 0-7 -C 3 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
4)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;4&#39;
numactl -i 0-7 -C 4 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
5)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;5&#39;
numactl -i 0-7 -C 5 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
6)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;6&#39;
numactl -i 0-7 -C 6 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
7)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;7&#39;
numactl -i 0-7 -C 7 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
8)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;8&#39;
numactl -i 0-7 -C 8 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
9)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;9&#39;
numactl -i 0-7 -C 9 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
10)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;10&#39;
numactl -i 0-7 -C 10 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
11)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;11&#39;
numactl -i 0-7 -C 11 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
12)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;12&#39;
numactl -i 0-7 -C 12 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
13)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;13&#39;
numactl -i 0-7 -C 13 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
14)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;14&#39;
numactl -i 0-7 -C 14 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
15)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;15&#39;
numactl -i 0-7 -C 15 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
16)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;16&#39;
numactl -i 0-7 -C 16 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
17)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;17&#39;
numactl -i 0-7 -C 17 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
18)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;18&#39;
numactl -i 0-7 -C 18 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
19)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;19&#39;
numactl -i 0-7 -C 19 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
20)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;20&#39;
numactl -i 0-7 -C 20 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
21)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;21&#39;
numactl -i 0-7 -C 21 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
22)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;22&#39;
numactl -i 0-7 -C 22 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
23)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;23&#39;
numactl -i 0-7 -C 23 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
24)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;24&#39;
numactl -i 0-7 -C 24 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
25)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;25&#39;
numactl -i 0-7 -C 25 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
26)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;26&#39;
numactl -i 0-7 -C 26 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
27)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;27&#39;
numactl -i 0-7 -C 27 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
28)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;28&#39;
numactl -i 0-7 -C 28 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
29)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;29&#39;
numactl -i 0-7 -C 29 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
30)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;30&#39;
numactl -i 0-7 -C 30 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
31)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;31&#39;
numactl -i 0-7 -C 31 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
32)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;32&#39;
numactl -i 0-7 -C 32 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
33)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;33&#39;
numactl -i 0-7 -C 33 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
34)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;34&#39;
numactl -i 0-7 -C 34 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
35)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;35&#39;
numactl -i 0-7 -C 35 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
36)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;36&#39;
numactl -i 0-7 -C 36 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
37)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;37&#39;
numactl -i 0-7 -C 37 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
38)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;38&#39;
numactl -i 0-7 -C 38 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
39)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;39&#39;
numactl -i 0-7 -C 39 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
40)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;40&#39;
numactl -i 0-7 -C 40 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
41)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;41&#39;
numactl -i 0-7 -C 41 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
42)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;42&#39;
numactl -i 0-7 -C 42 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
43)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;43&#39;
numactl -i 0-7 -C 43 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
44)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;44&#39;
numactl -i 0-7 -C 44 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
45)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;45&#39;
numactl -i 0-7 -C 45 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
46)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;46&#39;
numactl -i 0-7 -C 46 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
47)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;47&#39;
numactl -i 0-7 -C 47 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
48)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;48&#39;
numactl -i 0-7 -C 48 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
49)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;49&#39;
numactl -i 0-7 -C 49 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
50)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;50&#39;
numactl -i 0-7 -C 50 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
51)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;51&#39;
numactl -i 0-7 -C 51 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
52)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;52&#39;
numactl -i 0-7 -C 52 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
53)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;53&#39;
numactl -i 0-7 -C 53 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
54)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;54&#39;
numactl -i 0-7 -C 54 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
55)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;55&#39;
numactl -i 0-7 -C 55 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
56)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;56&#39;
numactl -i 0-7 -C 56 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
57)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;57&#39;
numactl -i 0-7 -C 57 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
58)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;58&#39;
numactl -i 0-7 -C 58 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
59)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;59&#39;
numactl -i 0-7 -C 59 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
60)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;60&#39;
numactl -i 0-7 -C 60 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
61)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;61&#39;
numactl -i 0-7 -C 61 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
62)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;62&#39;
numactl -i 0-7 -C 62 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
63)
export OMP_NUM_THREADS&#x3D;$&#123;threads&#125;
export GOMP_CPU_AFFINITY&#x3D;&#39;63&#39;
numactl -i 0-7 -C 63 .&#x2F;xhpl -n 1 -b 192 -p $&#123;1&#125; -q $&#123;2&#125; -m $&#123;3&#125;
;;
esac
;;
esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="8-2-编译问题"><a href="#8-2-编译问题" class="headerlink" title="8.2 编译问题"></a>8.2 编译问题</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-lc 
	解决找不到memcpy问题 
-lstdc++
	解决vtable for xxxx 问题
-lgcc_s
	undefined reference to &#96;_Unwind_Resume&#39;
	undefined reference to &#96;__popcountdi2&#39;
	
#include &lt;sys&#x2F;types.h&gt;
#include &lt;sys&#x2F;types.h&gt;
	 implicit declaration of function ‘fstat’

#include &lt;sys&#x2F;sysmacros.h&gt;
	implicit declaration of function ‘major’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="十、Linux操作"><a href="#十、Linux操作" class="headerlink" title="十、Linux操作"></a>十、Linux操作</h1><h2 id="10-1-ncat端口转发"><a href="#10-1-ncat端口转发" class="headerlink" title="10.1 ncat端口转发"></a>10.1 ncat端口转发</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ncat --sh-exec &quot;ncat 25.8.27.6 15929&quot; -l 15929 --keep-open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="十一、DDT安装"><a href="#十一、DDT安装" class="headerlink" title="十一、DDT安装"></a>十一、DDT安装</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># cp Licence &#x2F;home&#x2F;gs&#x2F;tools&#x2F;arm&#x2F;forge&#x2F;licences&#x2F;
# cp Licence.14713 &#x2F;home&#x2F;gs&#x2F;tools&#x2F;arm&#x2F;licenceserver&#x2F;licences&#x2F;

export PATH&#x3D;&#x2F;opt&#x2F;mpi3.3&#x2F;bin:&#x2F;home&#x2F;gs&#x2F;tools&#x2F;arm&#x2F;forge&#x2F;bin:&#x2F;home&#x2F;gs&#x2F;tools&#x2F;arm&#x2F;licenceserver&#x2F;bin:$PATH
export LD_LIBRARY_PATH&#x3D;&#x2F;opt&#x2F;mpi3.3&#x2F;lib:$LD_LIBRARY_PATH
ifconfig eth3 hw ether 00:1b:21:14:15:60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#glex高速网版本的MPI改为本地调试用
export MPICH_NO_LOCAL&#x3D;0 &#x2F;&#x2F;？不一定需要
export MPICH_NEMESIS_NETMOD&#x3D;tcp
export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mpi3&#x2F;bin:$PATH
export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mpi3&#x2F;lib:$LD_LIBRARY_PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="十二、SPEC使用"><a href="#十二、SPEC使用" class="headerlink" title="十二、SPEC使用"></a>十二、SPEC使用</h1><h2 id="12-1-SPEC使用系统工具"><a href="#12-1-SPEC使用系统工具" class="headerlink" title="12.1 SPEC使用系统工具"></a>12.1 SPEC使用系统工具</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SEPC设置使用系统的工具
vim &#x2F;home&#x2F;gs&#x2F;tools&#x2F;spack-v5&#x2F;etc&#x2F;spack&#x2F;defaults&#x2F;packages.yaml
# 参考：
..&#x2F;..&#x2F;..&#x2F;lib&#x2F;spack&#x2F;docs&#x2F;build_settings.rst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="十三、mi协议"><a href="#十三、mi协议" class="headerlink" title="十三、mi协议"></a>十三、mi协议</h1><h2 id="13-1-使用mi启动调试"><a href="#13-1-使用mi启动调试" class="headerlink" title="13.1 使用mi启动调试"></a>13.1 使用mi启动调试</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gs@ft-svr:~&#x2F;matrix$ gdb --interpreter mi test
&#x3D;thread-group-added,id&#x3D;&quot;i1&quot;
~&quot;GNU gdb (Ubuntu 8.2.91.20190405-0ubuntu3) 8.2.91.20190405-git\n&quot;
~&quot;Copyright (C) 2019 Free Software Foundation, Inc.\n&quot;
~&quot;License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.&quot;
~&quot;\nType \&quot;show copying\&quot; and \&quot;show warranty\&quot; for details.\n&quot;
~&quot;This GDB was configured as \&quot;aarch64-linux-gnu\&quot;.\n&quot;
~&quot;Type \&quot;show configuration\&quot; for configuration details.\n&quot;
~&quot;For bug reporting instructions, please see:\n&quot;
~&quot;&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.\n&quot;
~&quot;Find the GDB manual and other documentation resources online at:\n    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.&quot;
~&quot;\n\n&quot;
~&quot;For help, type \&quot;help\&quot;.\n&quot;
~&quot;Type \&quot;apropos word\&quot; to search for commands related to \&quot;word\&quot;...\n&quot;
~&quot;Reading symbols from test...\n&quot;
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="13-2-断点命令（BreakPoint）"><a href="#13-2-断点命令（BreakPoint）" class="headerlink" title="13.2 断点命令（BreakPoint）"></a>13.2 断点命令（BreakPoint）</h2><h3 id="13-2-1-break-after"><a href="#13-2-1-break-after" class="headerlink" title="13.2.1 -break-after"></a>13.2.1 -break-after</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-after number count
第number个断点在执行count次后有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-2-break-condition"><a href="#13-2-2-break-condition" class="headerlink" title="13.2.2 -break-condition"></a>13.2.2 -break-condition</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-condition number expr
第number个断点在表达式expr为true时有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-3-break-delete"><a href="#13-2-3-break-delete" class="headerlink" title="13.2.3 -break-delete"></a>13.2.3 -break-delete</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-delete(breakpoint number)+
删除指定number的多个断点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-4-break-disable"><a href="#13-2-4-break-disable" class="headerlink" title="13.2.4 -break-disable"></a>13.2.4 -break-disable</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-disable(breakpoint number)+
使用指定Number的多个断点失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-5-break-enable"><a href="#13-2-5-break-enable" class="headerlink" title="13.2.5 -break-enable"></a>13.2.5 -break-enable</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-enable(breakpoint number)+
使用指定Number的多个断点生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-6-break-info"><a href="#13-2-6-break-info" class="headerlink" title="13.2.6 -break-info"></a>13.2.6 -break-info</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-info breakpoint
得到指定断点的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-7-break-insert"><a href="#13-2-7-break-insert" class="headerlink" title="13.2.7 -break-insert"></a>13.2.7 -break-insert</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-insert
	-t				插入临时断点
	-h				插入硬件断点
	-r				插入正则断点，当函数名匹配正则表达式时生效
	-c condition    插入条件断点
	-i ignore-count 插入一个指定无效次数的断点
	-p thread  		
	line | addr(func) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="13-2-8-break-list"><a href="#13-2-8-break-list" class="headerlink" title="13.2.8. -break-list"></a>13.2.8. -break-list</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-list
显示已插入的断点列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="13-2-9-break-watch"><a href="#13-2-9-break-watch" class="headerlink" title="13.2.9 -break-watch"></a>13.2.9 -break-watch</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-break-watch [-a|-r] variable
创建一个观察点，-a标识对variable读写时有效，-r标识只读时有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="13-3-程序环境命令-Program-Context"><a href="#13-3-程序环境命令-Program-Context" class="headerlink" title="13.3 程序环境命令(Program Context)"></a>13.3 程序环境命令(Program Context)</h2><h2 id="13-4-线程-thread"><a href="#13-4-线程-thread" class="headerlink" title="13.4 线程(thread)"></a>13.4 线程(thread)</h2><h2 id="13-5-程序执行-Program-Execution"><a href="#13-5-程序执行-Program-Execution" class="headerlink" title="13.5 程序执行(Program Execution)"></a>13.5 程序执行(Program Execution)</h2><h2 id="13-6-栈-Stack"><a href="#13-6-栈-Stack" class="headerlink" title="13.6 栈(Stack)"></a>13.6 栈(Stack)</h2><h2 id="13-7-变量-Variable"><a href="#13-7-变量-Variable" class="headerlink" title="13.7 变量(Variable)"></a>13.7 变量(Variable)</h2><h2 id="13-8-数据-Data"><a href="#13-8-数据-Data" class="headerlink" title="13.8 数据(Data)"></a>13.8 数据(Data)</h2><h2 id="13-9-跟踪点-TracePoint"><a href="#13-9-跟踪点-TracePoint" class="headerlink" title="13.9 跟踪点(TracePoint)"></a>13.9 跟踪点(TracePoint)</h2><h2 id="13-10-符号-Symbol"><a href="#13-10-符号-Symbol" class="headerlink" title="13.10 符号(Symbol)"></a>13.10 符号(Symbol)</h2><h2 id="13-11-文件-File"><a href="#13-11-文件-File" class="headerlink" title="13.11 文件(File)"></a>13.11 文件(File)</h2><h2 id="13-12-目标数据-Target-Manipulation"><a href="#13-12-目标数据-Target-Manipulation" class="headerlink" title="13.12 目标数据(Target Manipulation)"></a>13.12 目标数据(Target Manipulation)</h2><h2 id="13-13-其他"><a href="#13-13-其他" class="headerlink" title="13.13 其他"></a>13.13 其他</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-enable-pretty-printing
-var-create - * map
-var-list-children --all-values var1 0 10

-data-evaluate-expression map
^done,value&#x3D;&quot;std::map with 140737353945088 elements&lt;error reading variable: Cannot access memory at address 0x1f0fc35f415e51&gt;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;    &#x2F;&#x2F; 设置标记类型与颜色
&#x2F;&#x2F;    this-&gt;markerDefine(QsciScintilla::Circle, 0);
&#x2F;&#x2F;    this-&gt;setMarkerBackgroundColor(QColor(&quot;#ee6666&quot;), 0);
&#x2F;&#x2F;    this-&gt;markerDefine(QsciScintilla::Circle, 1);
&#x2F;&#x2F;    this-&gt;setMarkerBackgroundColor(QColor(&quot;#aaaaaa&quot;), 1);
&#x2F;&#x2F;    this-&gt;markerDefine(QsciScintilla::RightArrow, 2);
&#x2F;&#x2F;    this-&gt;setMarkerBackgroundColor(QColor(&quot;#eaf593&quot;), 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="十四、Git改密码"><a href="#十四、Git改密码" class="headerlink" title="十四、Git改密码"></a>十四、Git改密码</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gitlab-rails console production

irb(main):002:0&gt; user&#x3D;User.where(email:&#39;cuiyingbomail@163.com&#39;).first
&#x3D;&gt; #&lt;User id:30 @cyb&gt;
irb(main):003:0&gt; user.password&#x3D;12345678
&#x3D;&gt; 12345678
irb(main):004:0&gt; user.password_confirmation&#x3D;12345678
&#x3D;&gt; 12345678
irb(main):005:0&gt; user.save!
Enqueued ActionMailer::DeliveryJob (Job ID: 540244db-c6ec-44f9-880e-72338b955aa5) to Sidekiq(mailers) with arguments: &quot;DeviseMailer&quot;, &quot;password_change&quot;, &quot;deliver_now&quot;, #&lt;GlobalID:0x00007f57f5da3208 @uri&#x3D;#&lt;URI::GID gid:&#x2F;&#x2F;gitlab&#x2F;User&#x2F;30&gt;&gt;
&#x3D;&gt; true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="十五、YHPDE（eclipse）FT部署"><a href="#十五、YHPDE（eclipse）FT部署" class="headerlink" title="十五、YHPDE（eclipse）FT部署"></a>十五、YHPDE（eclipse）FT部署</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、安装eclipse:
	gitlab
2、插件安装，参考手册
2、新版SLURM需要
vim org.eclipse.ptp.rm.slurm.proxy_4.0.7.201104291906&#x2F;src&#x2F;ptp_slurm_proxy.c
1625行：slurm_allocation_lookup_lite -&gt; slurm_allocation_lookup
2942行: primary &#x3D; 1; -&gt;  primary &#x3D; 0;
2943行：secondary &#x3D; 2; -&gt; secondary &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>测试</category>
        <category>信创POC测试</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>KylinV10 桌面版SVN搭建</title>
    <url>/2022/07/11/04_%E6%9D%82%E8%AE%B0/SVN%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="一、服务端配置"><a href="#一、服务端配置" class="headerlink" title="一、服务端配置"></a>一、服务端配置</h2><h3 id="1-1-安装SVN"><a href="#1-1-安装SVN" class="headerlink" title="1.1 安装SVN"></a>1.1 安装SVN</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install subversion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="1-2-新建仓库文件夹"><a href="#1-2-新建仓库文件夹" class="headerlink" title="1.2 新建仓库文件夹"></a>1.2 新建仓库文件夹</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建项目仓库文件夹
mkdir &#x2F;data&#x2F;svn&#x2F;project

# 修改文件夹权限
chmod -R 777 &#x2F;data&#x2F;svn&#x2F;project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-创建版本库"><a href="#1-3-创建版本库" class="headerlink" title="1.3 创建版本库"></a>1.3 创建版本库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">svnadmin create &#x2F;data&#x2F;svn&#x2F;project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>完成后会在文件夹中生成一系列文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greatwall@greatwall-GW-001M1A-FTF:&#x2F;data&#x2F;svn&#x2F;project$ ls
conf  db  format  hooks  locks  README.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改db权限</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod -R 777 db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="1-4-设置访问权限"><a href="#1-4-设置访问权限" class="headerlink" title="1.4 设置访问权限"></a>1.4 设置访问权限</h3><pre class="line-numbers language-she" data-language="she"><code class="language-she">vim &#x2F;data&#x2F;svn&#x2F;project&#x2F;conf&#x2F;svnserve.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>做如下修改</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greatwall@greatwall-GW-001M1A-FTF:&#x2F;data&#x2F;svn&#x2F;project&#x2F;conf$ cat svnserve.conf
### This file controls the configuration of the svnserve daemon, if you
### use it to allow access to this repository.  (If you only allow
### access through http: and&#x2F;or file: URLs, then this file is
### irrelevant.)

### Visit http:&#x2F;&#x2F;subversion.apache.org&#x2F; for more information.

[general]
### The anon-access and auth-access options control access to the
### repository for unauthenticated (a.k.a. anonymous) users and
### authenticated users, respectively.
### Valid values are &quot;write&quot;, &quot;read&quot;, and &quot;none&quot;.
### Setting the value to &quot;none&quot; prohibits both reading and writing;
### &quot;read&quot; allows read-only access, and &quot;write&quot; allows complete
### read&#x2F;write access to the repository.
### The sample settings below are the defaults and specify that anonymous
### users have read-only access to the repository, while authenticated
### users have read and write access to the repository.
anon-access &#x3D; none	# 非认证用户不让写
auth-access &#x3D; write
### The password-db option controls the location of the password
### database file.  Unless you specify a path starting with a &#x2F;,
### the file&#39;s location is relative to the directory containing
### this configuration file.
### If SASL is enabled (see below), this file will NOT be used.
### Uncomment the line below to use the default password file.
password-db &#x3D; passwd
### The authz-db option controls the location of the authorization
### rules for path-based access control.  Unless you specify a path
### starting with a &#x2F;, the file&#39;s location is relative to the
### directory containing this file.  The specified path may be a
### repository relative URL (^&#x2F;) or an absolute file:&#x2F;&#x2F; URL to a text
### file in a Subversion repository.  If you don&#39;t specify an authz-db,
### no path-based access control is done.
### Uncomment the line below to use the default authorization file.
authz-db &#x3D; authz
### The groups-db option controls the location of the groups file.
### Unless you specify a path starting with a &#x2F;, the file&#39;s location is
### relative to the directory containing this file.  The specified path
### may be a repository relative URL (^&#x2F;) or an absolute file:&#x2F;&#x2F; URL to a
### text file in a Subversion repository.
# groups-db &#x3D; groups
### This option specifies the authentication realm of the repository.
### If two repositories have the same authentication realm, they should
### have the same password database, and vice versa.  The default realm
### is repository&#39;s uuid.
realm &#x3D; My First Repository
### The force-username-case option causes svnserve to case-normalize
### usernames before comparing them against the authorization rules in the
### authz-db file configured above.  Valid values are &quot;upper&quot; (to upper-
### case the usernames), &quot;lower&quot; (to lowercase the usernames), and
### &quot;none&quot; (to compare usernames as-is without case conversion, which
### is the default behavior).
# force-username-case &#x3D; none
### The hooks-env options specifies a path to the hook script environment
### configuration file. This option overrides the per-repository default
### and can be used to configure the hook script environment for multiple
### repositories in a single file, if an absolute path is specified.
### Unless you specify an absolute path, the file&#39;s location is relative
### to the directory containing this file.
# hooks-env &#x3D; hooks-env

[sasl]
### This option specifies whether you want to use the Cyrus SASL
### library for authentication. Default is false.
### This section will be ignored if svnserve is not built with Cyrus
### SASL support; to check, run &#39;svnserve --version&#39; and look for a line
### reading &#39;Cyrus SASL authentication is available.&#39;
# use-sasl &#x3D; true
### These options specify the desired strength of the security layer
### that you want SASL to provide. 0 means no encryption, 1 means
### integrity-checking only, values larger than 1 are correlated
### to the effective key length for encryption (e.g. 128 means 128-bit
### encryption). The values below are the defaults.
# min-encryption &#x3D; 0
# max-encryption &#x3D; 256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-添加访问用户"><a href="#1-5-添加访问用户" class="headerlink" title="1.5 添加访问用户"></a>1.5 添加访问用户</h3><p>修改passwd文件，添加访问用户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greatwall@greatwall-GW-001M1A-FTF:&#x2F;data&#x2F;svn&#x2F;project&#x2F;conf$ cat passwd
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.

[users]
# harry &#x3D; harryssecret
# sally &#x3D; sallyssecret
admin&#x3D;mysecret
gs&#x3D;mysecret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-6-设置用户权限"><a href="#1-6-设置用户权限" class="headerlink" title="1.6 设置用户权限"></a>1.6 设置用户权限</h3><p>修改authz文件，设置用户权限</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greatwall@greatwall-GW-001M1A-FTF:&#x2F;data&#x2F;svn&#x2F;project&#x2F;conf$ cat authz
### This file is an example authorization file for svnserve.
### Its format is identical to that of mod_authz_svn authorization
### files.
### As shown below each section defines authorizations for the path and
### (optional) repository specified by the section name.
### The authorizations follow. An authorization line can refer to:
###  - a single user,
###  - a group of users defined in a special [groups] section,
###  - an alias defined in a special [aliases] section,
###  - all authenticated users, using the &#39;$authenticated&#39; token,
###  - only anonymous users, using the &#39;$anonymous&#39; token,
###  - anyone, using the &#39;*&#39; wildcard.
###
### A match can be inverted by prefixing the rule with &#39;~&#39;. Rules can
### grant read (&#39;r&#39;) access, read-write (&#39;rw&#39;) access, or no access
### (&#39;&#39;).

[aliases]
# joe &#x3D; &#x2F;C&#x3D;XZ&#x2F;ST&#x3D;Dessert&#x2F;L&#x3D;Snake City&#x2F;O&#x3D;Snake Oil, Ltd.&#x2F;OU&#x3D;Research Institute&#x2F;CN&#x3D;Joe Average

[groups]
# harry_and_sally &#x3D; harry,sally
# harry_sally_and_joe &#x3D; harry,sally,&amp;joe

# [&#x2F;foo&#x2F;bar]
# harry &#x3D; rw
# &amp;joe &#x3D; r
# * &#x3D;

# [repository:&#x2F;baz&#x2F;fuz]
# @harry_and_sally &#x3D; rw
# * &#x3D; r

team1&#x3D;admin,gs	# 创建用户组

[&#x2F;]
@team1 &#x3D; rw # 用户组权限设置为读写
* &#x3D; r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-7-启动服务"><a href="#1-7-启动服务" class="headerlink" title="1.7 启动服务"></a>1.7 启动服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">svnserve -d -r &#x2F;data&#x2F;svn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看服务是否在运行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ps aux | grep svnserve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>干掉服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">killall svnserve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、客户端连接"><a href="#二、客户端连接" class="headerlink" title="二、客户端连接"></a>二、客户端连接</h2><p>svn:&#x2F;&#x2F;10.47.76.90&#x2F;project</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>长城TD120A2安装OpenEuler</title>
    <url>/2022/07/11/04_%E6%9D%82%E8%AE%B0/%E9%95%BF%E5%9F%8ETD120A2%E5%AE%89%E8%A3%85OpenEuler/</url>
    <content><![CDATA[<blockquote>
<p>记录安装过程</p>
</blockquote>
<h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><table>
<thead>
<tr>
<th></th>
<th>型号</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>飞腾D2000&#x2F;8核</td>
</tr>
<tr>
<td>内存</td>
<td>紫光DDR4 3200</td>
</tr>
<tr>
<td>显卡</td>
<td>AMD RX520</td>
</tr>
<tr>
<td>安装系统</td>
<td>OpenEuler 20.09</td>
</tr>
</tbody></table>
<h3 id="二、OpenEuler安装"><a href="#二、OpenEuler安装" class="headerlink" title="二、OpenEuler安装"></a>二、OpenEuler安装</h3><p>1、镜像准备：</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">openEuler-20.09-aarch64-dvd.iso<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、制作启动盘</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">使用win32diskimager制作U盘启动器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">进入安装界面：
Install openEuler 20.09...
Test this media &amp; install openEuler 20.09...
Troubleshooting

选择到Install openEuler 20.09...行
Ctrl + e 进入编辑界面
删除&quot;video&#x3D;efifb:off&quot;
Ctrl + x 保存并退出，进入图形化安装界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么要删除此grub参数？ —直接安装将卡在此界面</p>
<p>EFI stub: Booting Linux Kernel…</p>
<p>EFI stub: EFI_RNG_PROTOCOL unavaliable, no randomness supplied</p>
<p>EFI stub: Using DTB from configuration table</p>
<p>EFT stub: Exiting boot services and installing virtual address map…</p>
</blockquote>
<p>4、启动系统</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">进入系统后，修改&#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;openEuler&#x2F;grub.cfg文件
同样，将&quot;video&#x3D;efifb:off&quot;注释或者删除
&gt;&gt;防止重启卡在引导界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>5、无线网卡连接wifi</p>
<blockquote>
<p>TD120A2安装OpenEuler后,有线网卡无法识别，需要安装USB无线网卡，并安装配套的驱动，无线网卡识别后可以连接wifi</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmcli dev wifi # 查询wifi
nmcli dev wifi connet 网络名 password 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>6、图形化界面安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo dnf makecache
sudo dnf groupinstall ukui
systemctl set-default graphical<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--01-整体架构规划</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="一-、综合架构规划"><a href="#一-、综合架构规划" class="headerlink" title="一 、综合架构规划"></a>一 、综合架构规划</h2><blockquote>
<p>项目中涵盖了架构，架构中又涵盖了不同的角色（高可用、负载均衡、web集群）<br>五层架构模型–&gt; 负载均衡 web服务 存储服务 缓存服务 数据库服务（通过tcp连接）</p>
</blockquote>
<p><img src="/img/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="综合架构图"></p>
<h3 id="1-架构访问流程"><a href="#1-架构访问流程" class="headerlink" title="1 架构访问流程"></a>1 架构访问流程</h3><h4 id="1-1-用户视角"><a href="#1-1-用户视角" class="headerlink" title="1.1 用户视角"></a>1.1 用户视角</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.用户通过浏览器输入oldboyedu.com-&gt;回车
2.浏览器会发生一次跳转，分析URL-&gt;然后进行DNS解析-&gt;获取真实的公网IP地址
3.用户通过tcp的三次握手发起连接-&gt;真实的公网IP
4.连接会通过公网-&gt;路由器-&gt;交换机-&gt;抵达前端的硬件防火墙
5.防火墙根据自身访问规则，进行匹配-&gt;如果恶意的连接则拒绝-&gt;如果是正常的连接则放行
6.防火墙会将连接转发给负载均衡器-&gt;查看用户请求的内容-&gt;根据内容进行任务下发-&gt;下发给web服务器
7.web服务接收请求后会根据请求进行判断
如果是请求图片或者附件-&gt;查找存储服务器存储的静态资源
如果请求的网站上的内容-&gt;缓存服务器-&gt;如果缓存服务器没有-&gt;数据库
数据库查询完数据之后会返回数据给web服务器-&gt;同时也会返回一份给缓存服务器
8.数据库返回内容-&gt;web服务器-&gt;负载均衡-&gt;用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-2-运维视角"><a href="#1-2-运维视角" class="headerlink" title="1.2 运维视角"></a>1.2 运维视角</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.用户通过公网连接（隧道）VPN服务器，这样方便管理内部主机，
2.自动化配置管理，节省人力成本，便于后期维护。统一环境，标准化
3.自动化监控服务，监控系统的运行状态，事前预警，事后追溯。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2-架构环境规划"><a href="#2-架构环境规划" class="headerlink" title="2 架构环境规划"></a>2 架构环境规划</h3><h4 id="2-1-IP分配"><a href="#2-1-IP分配" class="headerlink" title="2.1 IP分配"></a>2.1 IP分配</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> wanip         lanip       hostname
10.0.0.5     172.16.1.5     lb01
10.0.0.6     172.16.1.6     lb02
10.0.0.7     172.16.1.7     web01
10.0.0.8     172.16.1.8     web02
10.0.0.9     172.16.1.9     web03
10.0.0.31    172.16.1.31    nfs
10.0.0.41    172.16.1.41    backup
10.0.0.51    172.16.1.51    db01
10.0.0.61    172.16.1.61    m01
10.0.0.71    172.16.1.71    zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-基础环境准备"><a href="#2-2-基础环境准备" class="headerlink" title="2.2 基础环境准备"></a>2.2 基础环境准备</h4><h5 id="2-2-1-虚拟机系统和网卡准备"><a href="#2-2-1-虚拟机系统和网卡准备" class="headerlink" title="2.2.1 虚拟机系统和网卡准备"></a>2.2.1 虚拟机系统和网卡准备</h5><blockquote>
<p>安装全新Centos7系统，配置网卡为eth0及eth1命名模式<br>1.第一块网卡为NAT模式[公网环境]，配置的网段为10.0.0.0网段<br>2.第二块网卡为LAN模式[私网环境]，配置的网段为172.16.1.0网段<br>3.优化安装好的Centos7虚拟机，安装常用软件、关闭防火墙等等</p>
</blockquote>
<p>优化步骤</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.配置yum仓库
rm -f &#x2F;etc&#x2F;yum.repos.d&#x2F;*
curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo
curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo

# 2.安装基础软件包
yum install net-tools vim tree htop iftop \
iotop lrzsz sl wget unzip telnet nmap nc psmisc \
dos2unix bash-completion bash-completion-extra sysstat \
rsync nfs-utils httpd-tools -y

# 3.关闭防火墙firewalld
systemctl disable firewalld
systemctl stop firewalld

# 4.关闭selinux
sed -i &#39;&#x2F;^SELINUX&#x3D;&#x2F;c SELINUX&#x3D;disabled&#39; &#x2F;etc&#x2F;selinux&#x2F;config

# 5.调整单个进程最大能打开文件的数量
echo &#39;* - nofile 65535&#39; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基于优化后的虚拟机进行克隆</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.连接克隆（需要依赖于母体）
2.完整克隆（完完全全的复制一份，占用磁盘空间）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>对新克隆的主机进行如下操作：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.修改主机名  
hostnamectl set-hostname backup

# 2.修改IP地址  
sed -i &#39;s#200#41#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth[01]

# 3.重启服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--02--Rsync服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/02-Rsync%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="二、Rsync与数据备份"><a href="#二、Rsync与数据备份" class="headerlink" title="二、Rsync与数据备份"></a>二、Rsync与数据备份</h2><h3 id="2-1-备份概念"><a href="#2-1-备份概念" class="headerlink" title="2.1  备份概念"></a>2.1  备份概念</h3><p>为什么要做备份？</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">数据非常的重要
保证数据不丢失
便于快速的恢复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>备份方式</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">完全备份，每次都进行全部备份 (效率低下, 占用空间)
增量备份，仅备份客户端与服务端差异的部分 (提高备份效率,节省空间, 适合异地备份 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>用什么工具做备份？</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp  	网络之间的拷贝，全量拷贝的方式  （ssh协议）
rsync	远程同步（增量）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-2-rsync的基本概念"><a href="#2-2-rsync的基本概念" class="headerlink" title="2.2 rsync的基本概念"></a>2.2 rsync的基本概念</h3><blockquote>
<p>rsync是一款开源的备份工具，<br>可以在不同主机之间进行同步（windows和Linux之间   Mac和Linux   Linux和Linux）<br>可实现全量备份与增量备份<br>因此非常适合用于架构集中式备份或异地备份等应用</p>
</blockquote>
<p>rsync数据的同步模式</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">推送： 本地将数据上传至备份服务器上	 （上传）
拉取： 备份服务器获取本地服务器的数据  （下载）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>rsync的数据传输方式</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">本地传输（类似于使用cp命令）
远程传输（通过网络传输  a--&gt;b）
守护进程（运行一个服务一直在后台）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>rsync选项详解</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync参数:
-a           #归档模式传输, 等于-tropgDl *
-v           #详细模式输出, 打印速率, 文件数量等 *
-z           #传输时进行压缩以提高效率 *
-r           #递归传输目录及子目录，即目录下得所有目录都同样传输。
-t           #保持文件时间信息
-o           #保持文件属主信息
-p           #保持文件权限
-g           #保持文件属组信息
-l           #保留软连接
-P           #显示同步的过程及传输时的进度等信息
-D           #保持设备文件信息
-L           #保留软连接指向的目标文件
-e           #使用的信道协议,指定替代rsh的shell程序  ssh
--exclude&#x3D;PATTERN   #指定排除不需要传输的文件模式
--exclude-from&#x3D;file #文件名所在的目录文件
--bwlimit&#x3D;100       #限速传输 *
--partial           #断点续传
--delete            #让目标目录和源目录数据保持一致 *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-本地传输"><a href="#2-3-本地传输" class="headerlink" title="2.3 本地传输"></a>2.3 本地传输</h3><p>将&#x2F;boot文件夹拷贝到&#x2F;tmp中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync -avz &#x2F;boot &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将boot文件夹中的内容拷贝到&#x2F;tmp中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync -avz &#x2F;boot&#x2F; &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-3-远程传输"><a href="#2-3-远程传输" class="headerlink" title="2.3 远程传输"></a>2.3 远程传输</h3><p>虚拟机准备</p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>nfs</td>
<td>172.16.1.31&#x2F;24 和 10.0.0.31&#x2F;24</td>
</tr>
<tr>
<td>backup</td>
<td>172.16.1.41&#x2F;24 和 10.0.0.41&#x2F;24</td>
</tr>
</tbody></table>
<p>backup从nfs拉取&#x2F;boo目录到本地&#x2F;tmp文件夹</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">rsync -avz root@10.0.0.31:&#x2F;boot &#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>backup上传&#x2F;root&#x2F;test.txt到nfs主机的&#x2F;tmp文件夹中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync &#x2F;root&#x2F;test.txt root@10.0.0.31:&#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-4-守护进程传输（服务搭建）"><a href="#2-4-守护进程传输（服务搭建）" class="headerlink" title="2.4 守护进程传输（服务搭建）"></a>2.4 守护进程传输（服务搭建）</h3><blockquote>
<p>为什么需要使用rsync守护进程传输？</p>
<p>Rsync借助SSH协议同步数据存在的缺陷（临时发送数据）<br>    1.使用系统用户（不安全）<br>    2.使用普通用户（会导致权限不足情况）</p>
</blockquote>
<p>backup充当rsync服务端，nfs充当客户端，配置步骤：</p>
<h4 id="2-4-1-服务端配置"><a href="#2-4-1-服务端配置" class="headerlink" title="2.4.1 服务端配置"></a>2.4.1 服务端配置</h4><p>获取配置文件路径</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# rpm -qc rsync
	&#x2F;etc&#x2F;rsyncd.conf			# 主配置文件
	&#x2F;etc&#x2F;sysconfig&#x2F;rsyncd		# 选项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>编辑配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;rsyncd.conf
---------------------
uid &#x3D; rsync
gid &#x3D; rsync
port &#x3D; 873
fake super &#x3D; yes
use chroot &#x3D; no
max connections &#x3D; 200
timeout &#x3D; 600
ignore errors
read only &#x3D; false
list &#x3D; false
auth users &#x3D; rsync_backup
secrets file &#x3D; &#x2F;etc&#x2F;rsync.passwd
log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsyncd.log
#####################################
[backup]
comment &#x3D; welcome to oldboyedu backup!
path &#x3D; &#x2F;backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置详细解析</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uid &#x3D; rsync                      # 运行进程的用户
gid &#x3D; rsync                      # 运行进程的用户组
port &#x3D; 873                       # 监听端口
fake super &#x3D; yes                 # 无需让rsync以root身份运行，允许接收文件的完整属性
use chroot &#x3D; no                  # 禁锢推送的数据至某个目录, 不允许跳出该目录
max connections &#x3D; 200            # 最大连接数
timeout &#x3D; 600                    # 超时时间
ignore errors                    # 忽略错误信息
read only &#x3D; false                # 对备份数据可读写
list &#x3D; false                     # 不允许查看模块信息
auth users &#x3D; rsync_backup        # 定义虚拟用户，作为连接认证用户
secrets file &#x3D; &#x2F;etc&#x2F;rsync.passwd # 定义rsync服务用户连接认证密码文件路径
log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsyncd.log   # 日志文件
#####################################
[backup]                # 定义模块信息
comment &#x3D; commit        # 模块注释信息
path &#x3D; &#x2F;backup          # 定义接收备份数据目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建rsync进程启动时需要使用的用户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# useradd rsync -M -s &#x2F;sbin&#x2F;nologin 
[root@backup ~]# id rsync
uid&#x3D;1000(rsync) gid&#x3D;1000(rsync) groups&#x3D;1000(rsync)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>创建密码文件，在密码文件中写入对应的虚拟用户以及虚拟用户的密码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;etc&#x2F;rsync.passwd---》rsync虚拟用户以及rsync虚拟用户的密码
[root@backup ~]# echo &quot;rsync_backup:123456&quot; &gt; &#x2F;etc&#x2F;rsync.passwd
[root@backup ~]# chmod 600 &#x2F;etc&#x2F;rsync.passwd <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>创建存储备份数据的目录，并进行授权</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# mkdir &#x2F;backup
[root@backup ~]# chown -R rsync.rsync &#x2F;backup&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>启动rsync服务并加入开机自启动</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# systemctl start rsyncd.service 
[root@backup ~]# systemctl enable rsyncd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>检查rsync的873端口是否存在</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# netstat -lntup
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name
tcp6       0      0 :::873                  :::*                    LISTEN      1269&#x2F;rsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4-2-客户端测试"><a href="#2-4-2-客户端测试" class="headerlink" title="2.4.2 客户端测试"></a>2.4.2 客户端测试</h4><p>推送&#x2F;etc文件夹到服务端&#x2F;backup</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync -avz &#x2F;etc&#x2F; rsync_backup@172.16.1.41::backup
需要输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>从服务端&#x2F;backup拉取文件到&#x2F;tmp</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rsync -avz rsync_backup@172.16.1.41::backup &#x2F;tmp
需要输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-5-rsync补充"><a href="#2-5-rsync补充" class="headerlink" title="2.5 rsync补充"></a>2.5 rsync补充</h3><h4 id="2-5-1-无差异同步-慎用"><a href="#2-5-1-无差异同步-慎用" class="headerlink" title="2.5.1 无差异同步(慎用)"></a>2.5.1 无差异同步(慎用)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#推送方式实现无差异，以客户端为准，客户端有什么服务端就有什么
[root@nfs ~]# rsync -avz --delete &#x2F;root rsync_backup@172.16.1.41::backup		

#拉取方式实现无差异，以服务端为准，服务端有什么客户端就有什么
[root@nfs ~]# rsync -avz --delete rsync_backup@172.16.1.41::backup &#x2F;opt&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-2-传输限速"><a href="#2-5-2-传输限速" class="headerlink" title="2.5.2 传输限速"></a>2.5.2 传输限速</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 生成大文件
[root@nfs ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;.&#x2F;size.disk bs&#x3D;1M count&#x3D;500  

# 限制传输的速率为1MB 
[root@nfs ~]# rsync -avzP --bwlimit&#x3D;1 .&#x2F;size.disk rsync_backup@172.16.1.41::backup
Password: 
sending incremental file list
size.disk
    118,358,016  22%    1.01MB&#x2F;s    0:06:33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-3-取消每次传输需要输密码"><a href="#2-5-3-取消每次传输需要输密码" class="headerlink" title="2.5.3 取消每次传输需要输密码"></a>2.5.3 取消每次传输需要输密码</h4><p>在客户端配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">方式一：
[root@nfs ~]# echo &quot;123456&quot; &gt; &#x2F;etc&#x2F;rsync.pass
[root@nfs ~]# chmod 600 &#x2F;etc&#x2F;rsync.pass #上该文件找123456
[root@nfs ~]# rsync -avzP --bwlimit&#x3D;1 .&#x2F;size.disk rsync_backup@172.16.1.41::backup --password-file&#x3D;&#x2F;etc&#x2F;rsync.pass

方式二：写Shell脚本
[root@nfs ~]# export RSYNC_PASSWORD&#x3D;123456
[root@nfs ~]# rsync -avzP .&#x2F;size.disk rsync_backup@172.16.1.41::backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、Rsync备份案例"><a href="#三、Rsync备份案例" class="headerlink" title="三、Rsync备份案例"></a>三、Rsync备份案例</h2><blockquote>
<p>客户端需求<br>1.客户端提前准备存放的备份的目录，目录规则如下:&#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>2.客户端在本地打包备份(系统配置文件、应用配置等)拷贝至&#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>3.客户端最后将备份的数据进行推送至备份服务器<br>4.客户端每天凌晨1点定时执行该脚本<br>5.客户端本地保留最近7天的数据, 避免浪费磁盘空间</p>
<p>服务端需求<br>1.服务端部署rsync，用于接收客户端推送过来的备份数据<br>2.服务端需要每天校验客户端推送过来的数据是否完整<br>3.服务端需要每天校验的结果通知给管理员<br>4.服务端仅保留6个月的备份数据,其余的全部删除</p>
<p>注意：所有服务器的备份目录必须都为&#x2F;backup</p>
<p>1.客户端将需要备份的文件放入指定的目录中   &#x2F;backup&#x2F;nfs_172.16.1.31_2018-09-02<br>2.客户端每天凌晨1点使用rsync命令推送一次nfs_172.16.1.31_2018-09-0<br>3.客户端保留最近7天的数据即可</p>
</blockquote>
<h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><blockquote>
<p>1.我要备份什么？<br>&#x2F;etc&#x2F;fstab &#x2F;var&#x2F;spool&#x2F;cron&#x2F;USERNAME   &#x2F;server&#x2F;scripts</p>
<p>2.我要怎么备份？<br>&#x2F;backup&#x2F;主机名_ip地址_时间  命名的目录中</p>
<p>3.我要备份到哪？<br>rsync备份服务器   172.16.1.41</p>
</blockquote>
<h4 id="3-1-1-服务端配置"><a href="#3-1-1-服务端配置" class="headerlink" title="3.1.1 服务端配置"></a>3.1.1 服务端配置</h4><p>配置邮件服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# yum install mailx -y
[root@backup ~]# vim &#x2F;etc&#x2F;mail.rc
set from&#x3D;12345@qq.com
set smtp&#x3D;smtps:&#x2F;&#x2F;smtp.qq.com:465
set smtp-auth-user&#x3D;12345@qq.com
set smtp-auth-password&#x3D;xxxxxx # 授权码
set smtp-auth&#x3D;login
set ssl-verify&#x3D;ignore
set nss-config-dir&#x3D;&#x2F;etc&#x2F;pki&#x2F;nssdb&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>脚本编写</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# mkdir &#x2F;server&#x2F;scripts -p
[root@backup ~]# cat &#x2F;server&#x2F;scripts&#x2F;check_client_data.sh
#!&#x2F;bin&#x2F;bash
#1.定义变量
PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin
SRC&#x3D;&#x2F;backup
DATE&#x3D;$(date +%F)

#1.使用md5进行校验，并保存校验的结果
md5sum -c $SRC&#x2F;*_$DATE&#x2F;flag_$DATE &gt; $SRC&#x2F;result_$DATE

#2.将保存的结果文件发送给管理员
mail -s &quot;Rsync Backup $DATE&quot; 572891887@qq.com &lt;$SRC&#x2F;result_$DATE

#3.保留最近180天的数据
find $SRC&#x2F; -type d -mtime +180|xargs rm -rf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-1-2-客户端配置"><a href="#3-1-2-客户端配置" class="headerlink" title="3.1.2 客户端配置"></a>3.1.2 客户端配置</h4><p>创建目录</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;backup
mkdir -p &#x2F;server&#x2F;scripts&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>编写备份脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# cat &#x2F;server&#x2F;scripts&#x2F;client_push_data.sh
#!&#x2F;bin&#x2F;bash
#1.定义变量
PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin
SRC&#x3D;&#x2F;backup
HOST&#x3D;$(hostname)
ADDR&#x3D;$(ifconfig eth1|awk &#39;NR&#x3D;&#x3D;2 &#123;print $2&#125;&#39;)
DATE&#x3D;$(date +%F)
DEST&#x3D;$&#123;HOST&#125;_$&#123;ADDR&#125;_$&#123;DATE&#125;

#2.创建目录
[ -d $SRC&#x2F;$DEST ] || mkdir -p $SRC&#x2F;$DEST

#3.备份文件
cd &#x2F; &amp;&amp; \
[ -f $SRC&#x2F;$DEST&#x2F;sys.tar.gz ] || tar czf $SRC&#x2F;$DEST&#x2F;sys.tar.gz etc&#x2F;fstab etc&#x2F;passwd &amp;&amp; \
[ -f $SRC&#x2F;$DEST&#x2F;other.tar.gz ] || tar czf $SRC&#x2F;$DEST&#x2F;other.tar.gz var&#x2F;spool&#x2F;cron&#x2F; server&#x2F;scripts &amp;&amp; \

#4.使用md5打标记
[ -f $SRC&#x2F;$DEST&#x2F;flag_$DATE ] || md5sum $SRC&#x2F;$DEST&#x2F;*.tar.gz  &gt; $SRC&#x2F;$DEST&#x2F;flag_$DATE 

#4.本地推送到备份服务器
export RSYNC_PASSWORD&#x3D;123456
rsync -avz $SRC&#x2F;$DEST rsync_backup@172.16.1.41::backup

#5.保留本地最近7天的数据
find $SRC&#x2F; -type d -mtime +7|xargs rm -rf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-1-3-整体测试-设置定时任务"><a href="#3-1-3-整体测试-设置定时任务" class="headerlink" title="3.1.3 整体测试:设置定时任务"></a>3.1.3 整体测试:设置定时任务</h4><p>客户端每两分钟备份推送一次</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs backup]# crontab -e
*&#x2F;2 * * * * sh &#x2F;server&#x2F;scripts&#x2F;client_push_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>服务端每3分钟校验一次，并发送确认邮件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup scripts]# crontab -e
*&#x2F;3 * * * * sh &#x2F;server&#x2F;scripts&#x2F;check_client_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="3-1-5-增加客户端数量"><a href="#3-1-5-增加客户端数量" class="headerlink" title="3.1.5 增加客户端数量"></a>3.1.5 增加客户端数量</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">多创建几台客户端服务器，测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--03-NFS服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/03-NFS%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ul>
<li>学习笔记</li>
</ul>
<hr>
<h2 id="一、NFS简介"><a href="#一、NFS简介" class="headerlink" title="一、NFS简介"></a>一、NFS简介</h2><blockquote>
<p>NFS是Network File System的缩写及网络文件系统。NFS主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。<br>NFS系统和Windows网络共享、网络驱动器类似, 只不过windows用于局域网, NFS用于企业集群架构中<br>如果是大型网站, 会用到更复杂的分布式文件系统FastDFS（音频、小说、视频）,glusterfs（iso镜像）,HDFS<br>NFS（图片、）解决共享前端web共享</p>
</blockquote>
<h3 id="1-1-NFS有什么用？"><a href="#1-1-NFS有什么用？" class="headerlink" title="1.1 NFS有什么用？"></a>1.1 NFS有什么用？</h3><p>解决前端web静态资源的共享<br>解决前端web静态资源一致性<br>解决前端web磁盘空间的浪费</p>
<h3 id="1-2-NFS的文件操作方式"><a href="#1-2-NFS的文件操作方式" class="headerlink" title="1.2 NFS的文件操作方式"></a>1.2 NFS的文件操作方式</h3><p>1.当用户执行mkdir命令, 该命令会调用shell解释器翻译给内核。<br>2.内核解析完成后会驱动对应的硬件设备，完成相应的操作。</p>
<h3 id="1-3-NFS的实现原理"><a href="#1-3-NFS的实现原理" class="headerlink" title="1.3 NFS的实现原理"></a>1.3 NFS的实现原理</h3><p>1.用户进程访问NFS客户端，使用不同的函数对数据进行处理<br>2.NFS客户端通过TCP&#x2F;IP的方式传递给NFS服务端。<br>3.NFS服务端接收到请求后，会先调用portmap进程进行端口映射。<br>4.nfsd进程用于判断NFS客户端是否拥有权限连接NFS服务端。<br>5.Rpc.mount进程判断客户端是否有对应的权限进行验证。<br>6.idmap进程实现用户映射和压缩<br>7.最后NFS服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件。<br>注意: rpc是一个远程过程调用，那么使用nfs必须有rpc服务</p>
<h3 id="1-4-NFS的优缺点"><a href="#1-4-NFS的优缺点" class="headerlink" title="1.4 NFS的优缺点"></a>1.4 NFS的优缺点</h3><p>优点</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.NFS文件系统简单易用、方便部署、数据可靠、服务稳定、满足中小企业需求。
2.NFS文件系统内存放的数据都在文件系统之上，所有数据都是能看得见。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>缺点</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.存在单点故障, 如果构建高可用维护麻烦
web-&gt;nfs(sersync)-&gt;backup
2.NFS数据明文, 并不对数据做任何校验。
3.客户端挂载NFS服务没有密码验证, 安全性一般(内网使用)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>3.NFS应用建议<br>1.生产场景应将静态数据尽可能往前端推, 减少后端存储压力<br>2.必须将存储里的静态资源通过CDN缓存jpg\png\mp4\avi\css\js<br>3.如果没有缓存或架构本身历史遗留问题太大, 在多存储也无用</p>
</blockquote>
<h2 id="二、NFS部署"><a href="#二、NFS部署" class="headerlink" title="二、NFS部署"></a>二、NFS部署</h2><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><p>安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# yum install nfs-utils -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# cat &#x2F;etc&#x2F;exports
&#x2F;data 172.16.1.0&#x2F;24(rw,sync,all_squash)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>授权</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# mkdir &#x2F;data
[root@nfs ~]# chown -R nfsnobody.nfsnobody &#x2F;data&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>启动服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# systemctl start nfs-server
[root@nfs ~]# systemctl enable nfs-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>检查</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# cat &#x2F;var&#x2F;lib&#x2F;nfs&#x2F;etab 
&#x2F;data	172.16.1.0&#x2F;24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid&#x3D;65534,anongid&#x3D;65534,sec&#x3D;sys,rw,secure,root_squash,all_squash)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><p>安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# yum install nfs-utils -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>检查nfs是否有共享内容</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# showmount -e 172.16.1.31
Export list for 172.16.1.31:	
&#x2F;data 172.16.1.0&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>挂载nfs目录（临时）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# mount -t nfs 172.16.1.31:&#x2F;data &#x2F;opt
[root@web01 ~]# df -h
Filesystem         Size  Used Avail Use% Mounted on
172.16.1.31:&#x2F;data   99G  1.8G   98G   2% &#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>挂载nfs目录（永久）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# vim &#x2F;etc&#x2F;fstab 
172.16.1.31:&#x2F;data  &#x2F;opt  nfs  defaults  0  0
[root@web01 ~]# mount -a   #验证fstab开机启动是否填写错误。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-NFS配置参数说明"><a href="#2-3-NFS配置参数说明" class="headerlink" title="2.3 NFS配置参数说明"></a>2.3 NFS配置参数说明</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ro				只读权限
root_squash		当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户(不常用)
no_root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员(不常用)
no_all_squash	无论NFS客户端使用什么账户访问，都不进行压缩
async			优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据

rw*				读写权限
sync*			同时将数据写入到内存与硬盘中，保证不丢失数据
all_squash*		无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户(常用)
anonuid*		配置all_squash使用,指定NFS的用户UID,必须存在系统
anongid*		配置all_squash使用,指定NFS的用户UID,必须存在系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4-验证ro权限"><a href="#2-4-验证ro权限" class="headerlink" title="2.4 验证ro权限"></a>2.4 验证ro权限</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# cat &#x2F;etc&#x2F;exports
&#x2F;data 172.16.1.0&#x2F;24(ro,sync,all_squash)
[root@nfs ~]# systemctl restart nfs-server

[root@web01 ~]# touch &#x2F;opt&#x2F;ttt
touch: cannot touch ‘&#x2F;opt&#x2F;ttt’: Read-only file system		#通常这样的错误都是设定的ro权限导致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-5-验证all-squash、anonuid、anongid权限"><a href="#2-5-验证all-squash、anonuid、anongid权限" class="headerlink" title="2.5 验证all_squash、anonuid、anongid权限"></a>2.5 验证all_squash、anonuid、anongid权限</h3><p>服务端</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nfs ~]# cat &#x2F;etc&#x2F;exports
&#x2F;data 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)
创建用户
[root@nfs ~]# groupadd -g 666 www
[root@nfs ~]# useradd -u666 -g666 www
[root@nfs ~]# id www
uid&#x3D;666(www) gid&#x3D;666(www) groups&#x3D;666(www)
授权
[root@nfs ~]# chown -R www.www &#x2F;data&#x2F;
重启
[root@nfs ~]# systemctl restart nfs-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>客户端重新挂载验证</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 opt]# touch file
[root@web01 opt]# touch test
[root@web01 opt]# ll
total 4
-rw-r--r-- 1 666 666 0 Jan  7 11:29 file
-rw-r--r-- 1 666 666 0 Jan  7 11:29 test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS:由于客户端没有创建id为666的www用户，因此看到的属组和属主都是666</p>
</blockquote>
<p>客户端如果觉得666不好看，建议在客户端上创建同名的用户以及uid</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# groupadd -g 666 www
[root@web01 ~]# useradd -u 666 -g 666 www
[root@web01 ~]# id www
uid&#x3D;666(www) gid&#x3D;666(www) groups&#x3D;666(www)
[root@web01 ~]# ll &#x2F;opt&#x2F;
total 4
-rw-r--r-- 1 www www 0 Jan  7 11:29 file
-rw-r--r-- 1 www www 0 Jan  7 11:29 test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--04--Sersync实时备份</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/04-sersync%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="一、Sersync服务介绍"><a href="#一、Sersync服务介绍" class="headerlink" title="一、Sersync服务介绍"></a>一、Sersync服务介绍</h2><blockquote>
</blockquote>
<h3 id="1-为什么要用sersync"><a href="#1-为什么要用sersync" class="headerlink" title="1 为什么要用sersync"></a>1 为什么要用sersync</h3><ul>
<li>sersync是基于inotify开发的，类似于inotify-tools的工具</li>
<li>sersync可以记录下被监听目录中发生变化的（包括增加、删除、修改）具体某一个文件或者某一个目录的名字，然后使用rsync同步的时候，只同步发生变化的文件或者目录</li>
<li>因为服务异常导致的同步失败有记录，便于恢复，确保高可用！</li>
</ul>
<h3 id="2-rsync-inotify-tools与rsync-sersync架构的区别？"><a href="#2-rsync-inotify-tools与rsync-sersync架构的区别？" class="headerlink" title="2 rsync+inotify-tools与rsync+sersync架构的区别？"></a>2 rsync+inotify-tools与rsync+sersync架构的区别？</h3><ul>
<li><p>rsync+inotify-tools</p>
<p>a、inotify只能记录下被监听的目录发生了变化（增，删，改）并没有把具体是哪个文件或者哪个目录发生了变化记录下来；</p>
<p>b、rsync在同步的时候，并不知道具体是哪个文件或目录发生了变化，每次都是对整个目录进行同步，当数据量很大时，整个目录同步非常耗时（rsync要对整个目录遍历查找对比文件），因此效率很低</p>
</li>
<li><p>rsync+sersync</p>
<p>a、sersync可以记录被监听目录中发生变化的（增，删，改）具体某个文件或目录的名字；</p>
<p>b、rsync在同步时，只同步发生变化的文件或目录（每次发生变化的数据相对整个同步目录数据来说很小，rsync在遍历查找对比文件时，速度很快），因此效率很高。</p>
</li>
</ul>
<h2 id="二、同步过程和原理"><a href="#二、同步过程和原理" class="headerlink" title="二、同步过程和原理"></a>二、同步过程和原理</h2><h3 id="1-同步过程"><a href="#1-同步过程" class="headerlink" title="1 同步过程"></a>1 同步过程</h3><ol>
<li>在同步服务器上开启sersync服务，sersync负责监控配置路径中的文件系统事件变化</li>
<li>调用rsync命令把更新的文件同步到目标服务器；</li>
<li>需要在主服务器配置sersync，在同步目标服务器配置rsync server（注意：是rsync服务</li>
</ol>
<h3 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2 同步原理"></a>2 同步原理</h3><ol>
<li>用户实时的往sersync服务器上写入更新文件数据；</li>
<li>此时需要在同步主服务器上配置sersync服务；</li>
<li>在另一台服务器开启rsync守护进程服务，以同步拉取来自sersync服务器上的数据；</li>
</ol>
<blockquote>
<p>通过rsync的守护进程服务后可以发现，实际上sersync就是监控本地的数据写入或更新事件；然后，再调用rsync客户端的命令，将写入或更新事件对应的文件通过rsync推送到目标服务器。</p>
</blockquote>
<h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote>
<p>案例: 实现web上传视频文件，实则是写入NFS至存储，当NFS存在新的数据则会实时的复制到备份服务器</p>
</blockquote>
<table>
<thead>
<tr>
<th>角色</th>
<th>内网IP(LAN)</th>
<th>外网IP(NAT)</th>
<th>安装工具</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>eth1:172.16.1.7</td>
<td>eth0:10.0.0.7</td>
<td>httpd php</td>
</tr>
<tr>
<td>nfs-server</td>
<td>eth1:172.16.1.31</td>
<td>eth0:10.0.0.31</td>
<td>nfsServer、rsync+inotify+sersync</td>
</tr>
<tr>
<td>backup</td>
<td>eth1:172.16.1.41</td>
<td>eth0:10.0.0.41</td>
<td>rsync-server</td>
</tr>
</tbody></table>
<p><img src="/img/sersync%E6%B5%81%E7%A8%8B-1628145534424.png" alt="sersync流程"></p>
<h3 id="1-web上传视频至nfs存储"><a href="#1-web上传视频至nfs存储" class="headerlink" title="1 web上传视频至nfs存储"></a>1 web上传视频至nfs存储</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nfs存储服务  172.16.1.31
	1.安装
		[root@nfs ~]# yum install nfs-utils -y
	2.配置
		[root@nfs ~]# cat &#x2F;etc&#x2F;exports
		&#x2F;data 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)
		
		[root@nfs ~]# groupadd -g666 www
		[root@nfs ~]# useradd -u666 -g666 www
		
		[root@nfs ~]# mkdir &#x2F;data
		[root@nfs ~]# chown -R www.www &#x2F;data
		
	3.启动
		[root@nfs ~]# systemctl restart nfs-server
		[root@nfs ~]# sysytemctl enable nfs-server
		
web服务器操作：172.16.1.7
	1.安装
		[root@web01 ~]# yum install httpd php -y
	2.配置
		进程运行的身份（最好是和nfs的匿名用户保持一致）
			# sed c 匹配到User开头的字段，替换为User www
			[root@web01 html]# sed -i &#39;&#x2F;^User&#x2F;c User www&#39; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 	
			[root@web01 html]# sed -i &#39;&#x2F;^Group&#x2F;c Group www&#39; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf
		挂载
			[root@web01 ~]# mount -t nfs 172.16.1.31:&#x2F;data &#x2F;var&#x2F;www&#x2F;html		#核心
		上传代码
			[root@web01 ~]# cd &#x2F;var&#x2F;www&#x2F;html&#x2F;
			[root@web01 html]# rz kaoshi.zip
			[root@web01 html]# unzip kaoshi.zip
	3.启动
		[root@web01 ~]# systemctl start httpd

	4.修改上传大小
		[root@web01 ~]# vim &#x2F;etc&#x2F;php.ini中设置：
		upload_max_filesize &#x3D; 200M;
		post_max_size &#x3D; 200M;
	
	5.注意: 修改完配置记得重启服务
	[root@web01 ~]#  systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-web和nfs的数据都备份在备份服务器的-x2F-backup"><a href="#2-web和nfs的数据都备份在备份服务器的-x2F-backup" class="headerlink" title="2 web和nfs的数据都备份在备份服务器的&#x2F;backup"></a>2 web和nfs的数据都备份在备份服务器的&#x2F;backup</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">备份服务器操作如下：172.16.1.41
	1.安装
		[root@backup ~]# yum install rsync -y
	2.配置
		[root@backup ~]# cat &#x2F;etc&#x2F;rsyncd.conf
		uid &#x3D; www
		gid &#x3D; www
		port &#x3D; 873
		fake super &#x3D; yes
		use chroot &#x3D; no
		max connections &#x3D; 200
		timeout &#x3D; 600
		ignore errors
		read only &#x3D; false
		list &#x3D; true
		auth users &#x3D; rsync_backup
		secrets file &#x3D; &#x2F;etc&#x2F;rsync.passwd
		log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsyncd.log
		#####################################
		[backup]
		path &#x3D; &#x2F;backup
		
		[data]
		path &#x3D; &#x2F;data
		
		创建用户
			[root@backup ~]# groupadd -g666 www
			[root@backup ~]# useradd -u666 -g666 www
		
		准备虚拟连接用户账号和密码
		[root@backup ~]# cat &#x2F;etc&#x2F;rsync.passwd 
		rsync_backup:123456
		[root@backup ~]# chmod 600 &#x2F;etc&#x2F;rsync.passwd
		
		创建数据存放的目录
		[root@backup ~]# mkdir -p &#x2F;data &#x2F;backup
		[root@backup ~]# chown -R www.www &#x2F;data&#x2F; &#x2F;backup&#x2F;

	3.启动
		[root@backup ~]# systemctl restart rsyncd

	4.客户端执行脚本。测试rsync的备份是否ok   （客户端的数据都写入到&#x2F;backup目录中） 172.16.1.7 172.16.1.31
	[root@web01 ~]# sh &#x2F;server&#x2F;scripts&#x2F;client_push_data.sh 
	sending incremental file list
	web01_172.16.1.7_2019-01-08&#x2F;
	web01_172.16.1.7_2019-01-08&#x2F;flag_2019-01-08
	web01_172.16.1.7_2019-01-08&#x2F;other.tar.gz
	web01_172.16.1.7_2019-01-08&#x2F;sys.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-如何将nfs的数据实时的同步到备份服务器的-x2F-data目录"><a href="#3-如何将nfs的数据实时的同步到备份服务器的-x2F-data目录" class="headerlink" title="3 如何将nfs的数据实时的同步到备份服务器的&#x2F;data目录"></a>3 如何将nfs的数据实时的同步到备份服务器的&#x2F;data目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">监控nfs服务器上面的&#x2F;data目录，如果发生变化则触发动作，动作可以是执行一次同步。
1.安装
	[root@nfs ~]# yum install inotify-tools		监控工具
	
	[root@nfs ~]# rz -E sersync2.5.4_64bit_binary_stable_final.tar.gz	
	[root@nfs ~]# tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz
	[root@nfs ~]# mv GNU-Linux-x86&#x2F; &#x2F;usr&#x2F;local&#x2F;sersync
2.配置
	[root@nfs sersync]# diff confxml.xml confxml.xml.bak
       5c5
       &lt;     &lt;fileSystem xfs&#x3D;&quot;true&quot;&#x2F;&gt;
       ---
       &gt;     &lt;fileSystem xfs&#x3D;&quot;false&quot;&#x2F;&gt;
       15c15
       &lt;       &lt;createFile start&#x3D;&quot;true&quot;&#x2F;&gt;
       ---
       &gt;       &lt;createFile start&#x3D;&quot;false&quot;&#x2F;&gt;
       19,20c19,20
       &lt;       &lt;attrib start&#x3D;&quot;true&quot;&#x2F;&gt;
       &lt;       &lt;modify start&#x3D;&quot;true&quot;&#x2F;&gt;
       ---
       &gt;       &lt;attrib start&#x3D;&quot;false&quot;&#x2F;&gt;
       &gt;       &lt;modify start&#x3D;&quot;false&quot;&#x2F;&gt;
       24,25c24,25
       &lt;       &lt;localpath watch&#x3D;&quot;&#x2F;data&quot;&gt;
       &lt;           &lt;remote ip&#x3D;&quot;172.16.1.41&quot; name&#x3D;&quot;data&quot;&#x2F;&gt;
       ---
       &gt;       &lt;localpath watch&#x3D;&quot;&#x2F;opt&#x2F;tongbu&quot;&gt;
       &gt;           &lt;remote ip&#x3D;&quot;127.0.0.1&quot; name&#x3D;&quot;tongbu1&quot;&#x2F;&gt;
       30,31c30,31
       &lt;           &lt;commonParams params&#x3D;&quot;-az&quot;&#x2F;&gt;
       &lt;           &lt;auth start&#x3D;&quot;true&quot; users&#x3D;&quot;rsync_backup&quot; passwordfile&#x3D;&quot;&#x2F;etc&#x2F;rsync.pass&quot;&#x2F;&gt;
       ---
       &gt;           &lt;commonParams params&#x3D;&quot;-artuz&quot;&#x2F;&gt;
       &gt;           &lt;auth start&#x3D;&quot;false&quot; users&#x3D;&quot;root&quot; passwordfile&#x3D;&quot;&#x2F;etc&#x2F;rsync.pas&quot;&#x2F;&gt;
       33c33
       &lt;           &lt;timeout start&#x3D;&quot;true&quot; time&#x3D;&quot;100&quot;&#x2F;&gt;&lt;!-- timeout&#x3D;100 --&gt;
       ---
       &gt;           &lt;timeout start&#x3D;&quot;false&quot; time&#x3D;&quot;100&quot;&#x2F;&gt;&lt;!-- timeout&#x3D;100 --&gt;

	创建客户端密码文件
	[root@nfs ~]# cat &#x2F;etc&#x2F;rsync.pass
	123456
	[root@nfs ~]# chmod 600 &#x2F;etc&#x2F;rsync.pass

3.启动
[root@nfs ~]# &#x2F;usr&#x2F;local&#x2F;sersync&#x2F;sersync2  -h
set the system param
execute：echo 50000000 &gt; &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;inotify&#x2F;max_user_watches
execute：echo 327679 &gt; &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;inotify&#x2F;max_queued_events
parse the command param
_______________________________________________________
参数-d:启用守护进程模式
参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍
参数-n: 指定开启守护线程的数量，默认为10个
参数-o:指定配置文件，默认使用confxml.xml文件
参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块
参数-m:单独启用其他模块，使用 -m socket 开启socket模块
参数-m:单独启用其他模块，使用 -m http 开启http模块
不加-m参数，则默认执行同步程序

启动
[root@nfs ~]#  &#x2F;usr&#x2F;local&#x2F;sersync&#x2F;sersync2 -dro &#x2F;usr&#x2F;local&#x2F;sersync&#x2F;confxml.xml

#启动sersync后一定要提取同步的命令，手动运行一次，检查是否存在错误
[root@nfs ~]#  cd &#x2F;data &amp;&amp; rsync -az -R --delete .&#x2F;  --timeout&#x3D;100 rsync_backup@172.16.1.41::data --password-file&#x3D;&#x2F;etc&#x2F;rsync.pass

停止
[root@nfs data]# pkill sersync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup-（不能出现业务中断）"><a href="#4-如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup-（不能出现业务中断）" class="headerlink" title="4 如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup   （不能出现业务中断）"></a>4 如何平滑的迁移nfs数据到backup服务器。并且让后续的上传都是上传至backup   （不能出现业务中断）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.backup服务器上需要运行和nfs服务器上一样的业务环境 
	创建用户
	[root@backup ~]# groupadd -g 666 www
	[root@backup ~]# useradd -u666 -g666 www
	配置
	[root@backup ~]# yum install -y nfs-utils -y
	[root@backup ~]# cat &#x2F;etc&#x2F;exports
	&#x2F;data 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)
	启动
	[root@backup ~]# systemctl restart nfs-server
	
2.先实现实时的同步 √

3.在web上实现切换，卸载nfs的&#x2F;data目录，重新挂载backup服务的&#x2F;data目录
	[root@web01 ~]# umount -lf &#x2F;var&#x2F;www&#x2F;html&#x2F; &amp;&amp; mount -t nfs 172.16.1.41:&#x2F;data &#x2F;var&#x2F;www&#x2F;html&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--05--SSH服务器搭建</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/05-ssh%E6%9C%8D%E5%8A%A1%E8%B7%B3%E6%9D%BF%E6%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="一、SSH服务器介绍"><a href="#一、SSH服务器介绍" class="headerlink" title="一、SSH服务器介绍"></a>一、SSH服务器介绍</h2><blockquote>
<p>SSH是一个安全协议，在进行数据传输时，会对数据包进行加密处理，加密后在进行数据传输。确保了数据传输安全。</p>
</blockquote>
<p><img src="/img/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.png" alt="ssh免密登录"></p>
<h3 id="1-ssh的功能"><a href="#1-ssh的功能" class="headerlink" title="1 ssh的功能"></a>1 ssh的功能</h3><ol>
<li>提供远程连接服务器的服务</li>
<li>对传输的数据进行加密</li>
</ol>
<h3 id="2-常用服务的端口"><a href="#2-常用服务的端口" class="headerlink" title="2 常用服务的端口"></a>2 常用服务的端口</h3><ul>
<li>ftp – tcp&#x2F;20  tcp&#x2F;21</li>
<li>dns – tcp&#x2F;53  udp&#x2F;53</li>
<li>ssh  –  tcp&#x2F;22</li>
<li>telnet – tcp&#x2F;23 </li>
<li>mysql – tcp&#x2F;3306</li>
<li>http – tcp&#x2F;80</li>
<li>https – tcp&#x2F;443</li>
</ul>
<h3 id="3-telnet服务搭建"><a href="#3-telnet服务搭建" class="headerlink" title="3 telnet服务搭建"></a>3 telnet服务搭建</h3><p>安装并启动telnet服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@backup ~]# yum install telnet-server -y
[root@backup ~]# systemctl start telnet.socket 
[root@backup ~]# useradd gs
[root@backup ~]# echo &quot;1&quot; | passwd --stdin gs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用终端软件通过telnet使用gs用户登录连接</p>
<h3 id="4-telnet与ssh的对比"><a href="#4-telnet与ssh的对比" class="headerlink" title="4 telnet与ssh的对比"></a>4 telnet与ssh的对比</h3><table>
<thead>
<tr>
<th>服务连接方式</th>
<th>服务数据传输</th>
<th>服务监听端口</th>
<th>服务登陆用户</th>
</tr>
</thead>
<tbody><tr>
<td>ssh</td>
<td>加密</td>
<td>tcp&#x2F;22</td>
<td>默认支持root登录</td>
</tr>
<tr>
<td>telnet</td>
<td>明文</td>
<td>tcp&#x2F;23</td>
<td>不支持root登录</td>
</tr>
</tbody></table>
<h2 id="二、ssh与scp的使用"><a href="#二、ssh与scp的使用" class="headerlink" title="二、ssh与scp的使用"></a>二、ssh与scp的使用</h2><h3 id="1-使用ssh"><a href="#1-使用ssh" class="headerlink" title="1 使用ssh"></a>1 使用ssh</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh命令
	ssh 172.16.1.31					#取决当前执行此命令的用户
	ssh root@172.16.1.31			#标准的写法
	ssh -p22 root@172.16.1.31		#带端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-使用scp"><a href="#2-使用scp" class="headerlink" title="2 使用scp"></a>2 使用scp</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp 
# -P 指定端口，默认22端口可不写
# -r 表示递归拷贝目录
# -p 表示在拷贝文件前后保持文件或目录属性不变
# -l 限制传输使用带宽(默认kb) &#x2F;8 -&gt;KB  &#x2F;1024  -&gt;MB <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、使用ssh密钥登录"><a href="#三、使用ssh密钥登录" class="headerlink" title="三、使用ssh密钥登录"></a>三、使用ssh密钥登录</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.生成密钥对    公钥  私钥
[root@m01 ~]# ssh-keygen -C 7242xxxxx@qq.com
	
2.将公钥推送到你需要连接的主机，第一次需要输入对端主机的密码
[root@m01 ~]# ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@172.16.1.31
root@172.16.1.31&#39;s password:
	
3.通过ssh命令测试连接是否需要密码
[root@m01 ~]# ssh 172.16.1.31
Last login: Wed Jan  9 10:39:16 2019 from 172.16.1.61<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、ssh安全"><a href="#四、ssh安全" class="headerlink" title="四、ssh安全"></a>四、ssh安全</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@jumpserver ~]# vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config
[root@jumpserver ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>SSH作为远程连接服务，通常我们需要考虑到该服务的安全，所以需要对该服务进行安全方面的配置。<br>1.更改远程连接登陆的端口		6666<br>2.禁止ROOT管理员直接登录		<br>3.密码认证方式改为密钥认证<br>4.重要服务不使用公网IP地址<br>5.使用防火墙限制来源IP地址</p>
<p>Port 6666                       # 变更SSH服务远程连接端口√<br>PermitRootLogin         no      # 禁止root用户直接远程登录√<br>PasswordAuthentication  no      # 禁止使用密码直接远程登录√<br>UseDNS                  no      # 禁止ssh进行dns反向解析，影响ssh连接效率参数√<br>GSSAPIAuthentication    no      # 禁止GSS认证，减少连接时产生的延迟√</p>
<h2 id="五、防ssh暴力破解工具fail2ban"><a href="#五、防ssh暴力破解工具fail2ban" class="headerlink" title="五、防ssh暴力破解工具fail2ban"></a>五、防ssh暴力破解工具fail2ban</h2><blockquote>
<p>fail2ban可以监控系统日志，并且根据一定规则匹配异常IP后使用Firewalld将其屏蔽，尤其是针对一些爆破&#x2F;扫描等非常有效。</p>
</blockquote>
<p>部署流程</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.开启Firewalld防火墙
[root@bgx ~]# systemctl start firewalld
[root@bgx ~]# systemctl enable firewalld
[root@bgx ~]# firewall-cmd --state
running

2.修改firewalld规则，启用Firewalld后会禁止一些服务的传输，但默认会放行常用的22端口, 如果想添加更多，以下是放行SSH端口（22）示例，供参考：
#放行SSHD服务端口
[root@bgx ~]# firewall-cmd --permanent --add-service&#x3D;ssh --add-service&#x3D;http 
#重载配
[root@bgx ~]# firewall-cmd --reload
#查看已放行端口
[root@bgx ~]# firewall-cmd  --list-service

3.安装fail2ban,需要有epel
[root@bgx ~]# yum install fail2ban fail2ban-firewalld mailx -y

4.配置fail2ban规则.local会覆盖.conf文件
[root@bgx fail2ban]# cat &#x2F;etc&#x2F;fail2ban&#x2F;jail.local
[DEFAULT]
ignoreip &#x3D; 127.0.0.1&#x2F;8
bantime  &#x3D; 86400
findtime &#x3D; 600
maxretry &#x3D; 5
banaction &#x3D; firewallcmd-ipset
action &#x3D; %(action_mwl)s

[sshd]
enabled &#x3D; true
filter  &#x3D; sshd
port    &#x3D; 22
action &#x3D; %(action_mwl)s
logpath &#x3D; &#x2F;var&#x2F;log&#x2F;secure

5.启动服务，并检查状态
[root@bgx ~]# systemctl start fail2ban.service
[root@bgx ~]# fail2ban-client status sshd

6.清除被封掉的IP地址
[root@bgx ~]# fail2ban-client set sshd unbanip 10.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--06--HTTP协议介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/06-HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="一、HTTP的发展历程"><a href="#一、HTTP的发展历程" class="headerlink" title="一、HTTP的发展历程"></a>一、HTTP的发展历程</h2><p>HTTP协议始于三十年前蒂姆·伯纳斯 - 李的一篇论文</p>
<p>HTTP&#x2F;0.9 (是个简单的文本协议，只能获取文本资源；)</p>
<p>HTTP&#x2F;1.0 - 1996年 （确立了大部分现在使用的技术，参考文档，不具备实际约束力）</p>
<p>HTTP&#x2F;1.1 - 1999年 （正式标准严格遵守，功能也非常完善，互联网爆发式增长，目前互联网上使用最广泛的协议） </p>
<p>HTTP&#x2F;2 - 2015年 （基于 Google 的 SPDY 协议，注重性能改善，但还未普及）</p>
<p>HTTP&#x2F;3 - 2018年 （基于 Google 的 QUIC 协议，是将来的发展方向）</p>
<hr>
<p>课下作业</p>
<ol>
<li>你认为推动 HTTP 发展的原动力是什么？</li>
<li>你是怎么理解 HTTP（超文本传输协议）的？</li>
</ol>
<h2 id="二、HTTP简介"><a href="#二、HTTP简介" class="headerlink" title="二、HTTP简介"></a>二、HTTP简介</h2><p>HyperText transfer protocol （超文本传输协议）</p>
<ul>
<li>HTTP 是一个用在计算机世界里的协议，它确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。</li>
<li>HTTP 专门用来在两点之间传输数据，不能用于广播、寻址或路由。</li>
<li>HTTP 传输的是文字、图片、音频、视频等超文本数据。</li>
<li>HTTP 是构建互联网的重要基础技术，它没有实体，依赖许多其他的技术来实现，但同时许多技术也都依赖于它。</li>
</ul>
<hr>
<p>课下作业：</p>
<ol>
<li>有一种流行的说法：“HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议”，你认为这种说法对吗？对在哪里，又错在哪里？</li>
<li>你能再说出几个“HTTP 不是什么”吗？</li>
</ol>
<p><img src="/img/http%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="http思维导图"></p>
<h3 id="三、HTTP的应用领域"><a href="#三、HTTP的应用领域" class="headerlink" title="三、HTTP的应用领域"></a>三、HTTP的应用领域</h3><ol>
<li>互联网上绝大部分资源都使用 HTTP 协议传输；</li>
<li>浏览器是 HTTP 协议里的请求方，即 User Agent；</li>
<li>服务器是 HTTP 协议里的应答方，常用的有 Apache 和 Nginx；</li>
<li>CDN 位于浏览器和服务器之间，主要起到缓存加速的作用；</li>
<li>爬虫是另一类 User Agent，是自动访问网络资源的程序。</li>
</ol>
<hr>
<p>课后作业：</p>
<ol>
<li>你觉得 CDN 在对待浏览器和爬虫时会有差异吗？为什么？</li>
<li>你怎么理解 WebService 与 Web Server 这两个非常相似的词？</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(一)安装与配置</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/07-Nginx(%E4%B8%80)%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h2><p>参考网站：<a href="https://zhuanlan.zhihu.com/p/266153320">https://zhuanlan.zhihu.com/p/266153320</a></p>
<h2 id="二、Nginx安装"><a href="#二、Nginx安装" class="headerlink" title="二、Nginx安装"></a>二、Nginx安装</h2><p>​	nginx有两种安装方式，yum安装和源码编译安装</p>
<h3 id="2-1-yum安装（epel源）"><a href="#2-1-yum安装（epel源）" class="headerlink" title="2.1 yum安装（epel源）"></a>2.1 yum安装（epel源）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo
[nginx]
name&#x3D;nginx repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;
gpgcheck&#x3D;0
enabled&#x3D;1

yum clean all
yum makecache

yum install nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2-编译安装"><a href="#2-2-编译安装" class="headerlink" title="2.2 编译安装"></a>2.2 编译安装</h3><p>查看yum安装的nginx的编译参数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# nginx -V
nginx version: nginx&#x2F;1.20.1
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)
built with OpenSSL 1.1.1g FIPS  21 Apr 2020
TLS SNI support enabled
configure arguments: --prefix&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --modules-path&#x3D;&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;proxy --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;fastcgi --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;uwsgi --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;scgi --pid-path&#x3D;&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;run&#x2F;lock&#x2F;subsys&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module&#x3D;dynamic --with-http_mp4_module --with-http_perl_module&#x3D;dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module&#x3D;dynamic --with-mail&#x3D;dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream&#x3D;dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --with-cc-opt&#x3D;&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE&#x3D;2 -fexceptions -fstack-protector-strong --param&#x3D;ssp-buffer-size&#x3D;4 -grecord-gcc-switches -specs&#x3D;&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-cc1 -m64 -mtune&#x3D;generic&#39; --with-ld-opt&#x3D;&#39;-Wl,-z,relro -specs&#x3D;&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-ld -Wl,-E&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>源码获取</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>构建与编译</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 解压源码文件并进入文件夹内
tar -vxf nginx-1.20.1.tar.gz &amp;&amp; cd nginx-1.20.1

# configure构建
.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --modules-path&#x3D;&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;proxy --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;fastcgi --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;uwsgi --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;scgi --pid-path&#x3D;&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;run&#x2F;lock&#x2F;subsys&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module&#x3D;dynamic --with-http_mp4_module --with-http_perl_module&#x3D;dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module&#x3D;dynamic --with-mail&#x3D;dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream&#x3D;dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --with-cc-opt&#x3D;&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE&#x3D;2 -fexceptions -fstack-protector-strong --param&#x3D;ssp-buffer-size&#x3D;4 -grecord-gcc-switches -specs&#x3D;&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-cc1 -m64 -mtune&#x3D;generic&#39; --with-ld-opt&#x3D;&#39;-Wl,-z,relro -specs&#x3D;&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-ld -Wl,-E&#39;

# 编译并安装
make -j 4 &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>错误解决</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 错误1：
.&#x2F;configure: error: the invalid value in --with-ld-opt&#x3D;&quot;-Wl,-z,relro -specs&#x3D;&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-ld -Wl,-E&quot;
解决方法：
yum -y install redhat-rpm-config.noarch

# 错误2：
.&#x2F;configure: error: the HTTP rewrite module requires the PCRE library.
You can either disable the module by using --without-http_rewrite_module
option, or install the PCRE library into the system, or build the PCRE library
statically from the source with nginx by using --with-pcre&#x3D;&lt;path&gt; option.
解决方法：
yum install pcre-devel -y

# 错误3：
.&#x2F;configure: error: SSL modules require the OpenSSL library.
You can either do not enable the modules, or install the OpenSSL library
into the system, or build the OpenSSL library statically from the source
with nginx by using --with-openssl&#x3D;&lt;path&gt; option.
解决方法：
yum install openssl openssl-devel -y

# 错误4：
.&#x2F;configure: error: the HTTP XSLT module requires the libxml2&#x2F;libxslt
libraries. You can either do not enable the module or install the libraries.
解决方法：
yum install libxml2 libxml2-devel libxslt  libxslt-devel -y

# 错误5：
.&#x2F;configure: error: the HTTP image filter module requires the GD library.
You can either do not enable the module or install the libraries.
解决方法：
yum -y install gd-devel

# 错误6：
.&#x2F;configure: error: perl module ExtUtils::Embed is required

解决方法： 
yum -y install perl-devel perl-ExtUtils-Embed

# 错误7：
.&#x2F;configure: error: the Google perftools module requires the Google perftools library
解决方法：
yum install gperftools-devel.x86_64 gperftools-libs.x86_64 gperftools.x86_64 -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-启动和停止服务"><a href="#2-3-启动和停止服务" class="headerlink" title="2.3 启动和停止服务"></a>2.3 启动和停止服务</h3><p>启动服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 先关闭httpd服务，防止冲突
[root@web01 ~]# systemctl stop httpd
[root@web01 ~]# systemctl disable httpd

# 再启动nginx服务
[root@web01 ~]# systemctl enable nginx
[root@web01 html]# systemctl start nginx
# 另一种启动方式
nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>停止服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop nginx 
# 或者
nginx -s stop <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>重启&#x2F;重载服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart&#x2F;reload nginx
nginx -s restart&#x2F;reload <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>PS：重载reload和重启restart的差别</p>
<p>reload将会等服务进程执行完再重启，而restart则是强制重启</p>
</blockquote>
<h2 id="三、Nginx目录结构说明"><a href="#三、Nginx目录结构说明" class="headerlink" title="三、Nginx目录结构说明"></a>三、Nginx目录结构说明</h2><p>查看nginx的目录结构</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 html]# rpm -ql nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/137262519">https://zhuanlan.zhihu.com/p/137262519</a></p>
<h2 id="四、Nginx配置文件说明"><a href="#四、Nginx配置文件说明" class="headerlink" title="四、Nginx配置文件说明"></a>四、Nginx配置文件说明</h2><blockquote>
<p>http server location扩展了解项<br>http{}层下允许有多个Server{}层，一个Server{}层下又允许有多个Location<br>http{} 标签主要用来解决用户的请求与响应。<br>server{} 标签主要用来响应具体的某一个网站。<br>location{} 标签主要用于匹配网站具体URL路径。</p>
</blockquote>
<p>主配置文件说明</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 html]# cat &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
---核心模块---
user nginx;	#nginx进程运行的用户
worker_processes auto;	#nginx工作的进程数量
error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;	#nginx的错误日志【警告及其警告以上的都记录】
pid &#x2F;run&#x2F;nginx.pid;	#nginx进程运行后的进程id
---核心模块---

# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.
include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;

---事件模块---
events &#123;
    worker_connections 1024; # 一个work进程的最大连接数
    use epool;				 #使用epool网络模型
&#125;
---事件模块---

---http核心层模块---
http &#123;
	# 日志格式定义
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;	# 访问日志

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;	# 长连接超时时间
    types_hash_max_size 4096;
    #gzip on;			#是否开启压缩功能			

    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;
    default_type        application&#x2F;octet-stream;

    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;	# 包含哪个目录下面的*.conf文件，用于写server

    server &#123;
        listen       80;	# 监听端口
        listen       [::]:80;
        server_name  _;		# 域名
        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;

		#charset koi8-r;			#字符集

		location &#x2F; &#123;	 			#位置
			root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;	#代码的主文件位置
			index  index.html index.htm;	#服务端默认返回给用户的文件
		&#125;
		location &#x2F;test &#123;	 			#位置
			root   &#x2F;code&#x2F;test&#x2F;123&#x2F;;	#代码的主文件位置
			index  index.html index.htm;	#服务端默认返回给用户的文件
		&#125;

        # Load configuration files for the default server block.
        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;

        error_page 404 &#x2F;404.html;
        location &#x3D; &#x2F;404.html &#123;
        &#125;

        error_page 500 502 503 504 &#x2F;50x.html;
        location &#x3D; &#x2F;50x.html &#123;
        &#125;
    &#125;
&#125;
---http核心层模块---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="五、案例：搭建web网站"><a href="#五、案例：搭建web网站" class="headerlink" title="五、案例：搭建web网站"></a>五、案例：搭建web网站</h2><p>准备配置文件ds</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">[root@web01 code]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;game.conf
server &#123;
        listen 80;
        server_name game.oldboy.com;

        location &#x2F; &#123;
                root &#x2F;code;
                index index.html;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按照配置文件创建文件夹并放入html项目文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;code
cp html5.zip &#x2F;code
cd &#x2F;code
unzip html5.zip

[root@web01 code]# ls
ceshi  game  html5.zip  img  index.html  __MACOSX  readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart nginx
systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>通过物理机浏览器浏览</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改hosts文件
10.0.0.7 game.oldboy.com
# 网页访问
game.oldboy.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="六、Nginx虚拟主机"><a href="#六、Nginx虚拟主机" class="headerlink" title="六、Nginx虚拟主机"></a>六、Nginx虚拟主机</h2><p>Nginx配置虚拟主机有如下三种方式：</p>
<ul>
<li>单主机多IP</li>
<li>单主机多端口</li>
<li>单主机多域名</li>
</ul>
<h3 id="6-1-基于主机多IP方式-不常用"><a href="#6-1-基于主机多IP方式-不常用" class="headerlink" title="6.1 基于主机多IP方式(不常用)"></a>6.1 基于主机多IP方式(不常用)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat ip.conf 
server &#123;
	listen 10.0.0.7:80;
	server_name _;

	location &#x2F; &#123;
		root &#x2F;code_ip_eth0;
		index index.html;
	&#125;
&#125;

server &#123;
	listen 172.16.1.7:80;
	server_name _;

	location &#x2F; &#123;
		root &#x2F;code_ip_eth1;
		index index.html;
	&#125;
&#125;

2.根据配置创建目录
[root@web01 conf.d]# mkdir &#x2F;code_ip_eth0
[root@web01 conf.d]# echo &quot;Eth0&quot; &gt; &#x2F;code_ip_eth0&#x2F;index.html

[root@web01 conf.d]# mkdir &#x2F;code_ip_eth1
[root@web01 conf.d]# echo &quot;Eth1&quot; &gt; &#x2F;code_ip_eth1&#x2F;index.html

3.重启nginx服务
[root@web01 conf.d]# systemctl restart nginx

4.使用curl命令测试
[root@web01 ~]# curl 172.16.1.7
Eth1
[root@web01 ~]# curl 10.0.0.7
Eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-2-基于主机多端口方式（多用于内部测试）"><a href="#6-2-基于主机多端口方式（多用于内部测试）" class="headerlink" title="6.2 基于主机多端口方式（多用于内部测试）"></a>6.2 基于主机多端口方式（多用于内部测试）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.配置多端口的虚拟主机
[root@web01 conf.d]# vim port.conf
server &#123;
        listen 81;
        
        location &#x2F; &#123; 
                root &#x2F;code_81;
                index index.html;
        &#125;
&#125;
server &#123;
        listen 82;
        
        location &#x2F; &#123; 
                root &#x2F;code_82;
                index index.html;
        &#125;
&#125;		

2.根据配置文件创建所需的目录
[root@web01 conf.d]# mkdir &#x2F;code_8&#123;1..2&#125;
[root@web01 conf.d]# echo &quot;81&quot; &gt; &#x2F;code_81&#x2F;index.html
[root@web01 conf.d]# echo &quot;82&quot; &gt; &#x2F;code_82&#x2F;index.html

3.检查语法并重启服务
[root@web01 conf.d]# nginx -t
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
[root@web01 conf.d]# systemctl restart nginx


4.如何去访问
	http:&#x2F;&#x2F;10.0.0.7:82&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-3-基于主机多域名方式（常用）"><a href="#6-3-基于主机多域名方式（常用）" class="headerlink" title="6.3 基于主机多域名方式（常用）"></a>6.3 基于主机多域名方式（常用）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.准备多虚拟主机配置文件
[root@web01 conf.d]# cat test1.oldboy.com.conf 
server &#123;
	listen 80;
	server_name test1.oldboy.com;

	location &#x2F; &#123;
		root &#x2F;code&#x2F;test1;
		index index.html;
	&#125;
&#125;

[root@web01 conf.d]# cat test2.oldboy.com.conf 
server &#123;
	listen 80;
	server_name test2.oldboy.com;

	location &#x2F; &#123;
		root &#x2F;code&#x2F;test2;
		index index.html;
	&#125;
&#125;

2.根据配置文件创建对应的目录
[root@web01 conf.d]# mkdir &#x2F;code&#x2F;test&#123;1..2&#125; -p
[root@web01 conf.d]# echo &quot;test1_server&quot; &gt; &#x2F;code&#x2F;test1&#x2F;index.html
[root@web01 conf.d]# echo &quot;test2_server&quot; &gt; &#x2F;code&#x2F;test2&#x2F;index.html
[root@web01 conf.d]# nginx -t
[root@web01 conf.d]# systemctl restart nginx

3.配置域名解析
10.0.0.7      test1.oldboy.com
10.0.0.7      test2.oldboy.com

4.通过浏览器访问该网站<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="七、日志与错误排查"><a href="#七、日志与错误排查" class="headerlink" title="七、日志与错误排查"></a>七、日志与错误排查</h2><h3 id="7-1-nginx配置文件自查"><a href="#7-1-nginx配置文件自查" class="headerlink" title="7.1 nginx配置文件自查"></a>7.1 nginx配置文件自查</h3><p>1.修改完配置记得检查语法</p>
<pre class="line-numbers language-none"><code class="language-none">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2.如果没有检查语法，直接重载导致报错，可查看错误信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl status nginx -l <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-2-访问日志"><a href="#7-2-访问日志" class="headerlink" title="7.2 访问日志"></a>7.2 访问日志</h3><p>可以为server和location单独设置访问日志（<em><strong>涉及日志作用域</strong></em>）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server &#123;
    listen 80;
    server_name code.oldboy.com;
    
    # 将当前的server网站的访问日志记录至对应的目录，使用main格式
    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;code.oldboy.com.log main;
    location &#x2F; &#123;
        root &#x2F;code;
    &#125;
	
    # 当有人请求改favicon.ico时，不记录日志
    location &#x2F;favicon.ico &#123;
        access_log off;  # off 关闭
        return 200;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>访问日志参数详解</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th><strong>变量名称</strong></th>
<th><strong>变量描述</strong></th>
<th><strong>举例说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>客户端地址</td>
<td>113.140.15.90</td>
</tr>
<tr>
<td>$remote_user</td>
<td>客户端用户名称</td>
<td>–</td>
</tr>
<tr>
<td>$time_local</td>
<td>访问时间和时区</td>
<td>18&#x2F;Jul&#x2F;2012:17:00:01 +0800</td>
</tr>
<tr>
<td>$request</td>
<td>请求的URI和HTTP协议</td>
<td>“GET &#x2F;pa&#x2F;img&#x2F;home&#x2F;logo-alipay-t.png HTTP&#x2F;1.1″</td>
</tr>
<tr>
<td>$http_host</td>
<td>请求地址，即浏览器中你输入的地址（IP或域名）</td>
<td>img.alipay.com10.253.70.103</td>
</tr>
<tr>
<td>$status</td>
<td>HTTP请求状态</td>
<td>200</td>
</tr>
<tr>
<td>$upstream_status</td>
<td>upstream状态</td>
<td>200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>发送给客户端文件内容大小</td>
<td>547</td>
</tr>
<tr>
<td>$http_referer</td>
<td>跳转来源</td>
<td>“<a href="https://cashier.alip/">https://cashier.alip</a>ay.com…&#x2F;”</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>用户终端代理</td>
<td>“Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; SV1; GTB7.0; .NET4.0C;</td>
</tr>
<tr>
<td>$ssl_protocol</td>
<td>SSL协议版本</td>
<td>TLSv1</td>
</tr>
<tr>
<td>$ssl_cipher</td>
<td>交换数据中的算法</td>
<td>RC4-SHA</td>
</tr>
<tr>
<td>$upstream_addr</td>
<td>后台upstream的地址，即真正提供服务的主机地址</td>
<td>10.228.35.247:80</td>
</tr>
<tr>
<td>$request_time</td>
<td>整个请求的总时间</td>
<td>0.205</td>
</tr>
<tr>
<td>$upstream_response_time</td>
<td>请求过程中，upstream响应时间</td>
<td>0.002</td>
</tr>
</tbody></table>
<h3 id="7-3-错误日志"><a href="#7-3-错误日志" class="headerlink" title="7.3 错误日志"></a>7.3 错误日志</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-4-日志切割logrotate"><a href="#7-4-日志切割logrotate" class="headerlink" title="7.4 日志切割logrotate"></a>7.4 日志切割logrotate</h3><p>配置文件，一般不需要修改，默认就行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 logrotate.d]# cat &#x2F;etc&#x2F;logrotate.d&#x2F;nginx
&#x2F;var&#x2F;log&#x2F;nginx&#x2F;*.log &#123;
    create 0640 nginx root	 	
    daily	# 每天切割日志
    rotate 10
    missingok	# 日志丢失忽略
    notifempty
    compress	# 日志文件压缩
    sharedscripts
    postrotate
        &#x2F;bin&#x2F;kill -USR1 &#96;cat &#x2F;run&#x2F;nginx.pid 2&gt;&#x2F;dev&#x2F;null&#96; 2&gt;&#x2F;dev&#x2F;null || true
    endscript
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(二)常用官方模块</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/08-Nginx(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E5%AE%98%E6%96%B9%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>本篇主要介绍Nginx的常用官方模块</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="一、目录索引-autoindex"><a href="#一、目录索引-autoindex" class="headerlink" title="一、目录索引-autoindex"></a>一、目录索引-autoindex</h2><h3 id="1-1-使用方法1"><a href="#1-1-使用方法1" class="headerlink" title="1.1 使用方法1"></a>1.1 使用方法1</h3><p>按此方法设置后，访问网页<a href="http://module.test.com将显示文件目录/">http://module.test.com将显示文件目录</a></p>
<p>实际目录位于: &#x2F;module</p>
<p>a.准备配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 module]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;autoindex.conf
server &#123;
	listen 80;
	server_name module.test.com;
	charset utf-8,gbk; # 解决中文乱码

	location &#x2F; &#123;
		root &#x2F;module;
		autoindex on;	# 开启目录索引
		autoindex_exact_size off;	# 显示文件大小，默认为on显示字节，off显示大概单位
		autoindex_localtime on;	# 默认off显示UTC时间，on显示本地时间
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>b.准备对应的目录，并往目录中添加文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;module&#x2F;&#123;centos,ubuntu,redhat&#125;&#x2F; -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>c.检查语法并重新加载nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nginx -t 
systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="1-2-使用方法2（推荐）"><a href="#1-2-使用方法2（推荐）" class="headerlink" title="1.2 使用方法2（推荐）"></a>1.2 使用方法2（推荐）</h3><p>按此方法设置后，访问网页<a href="http://www.module.test.com/download%E5%B0%86%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95,%E4%B8%BB%E9%A1%B5%E5%8F%AF%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE">http://www.module.test.com/download将显示文件目录,主页可正常访问</a></p>
<p>实际目录位于：&#x2F;module&#x2F;download</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 module]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;autoindex.conf 
server &#123;
	listen 80;
	server_name module.oldboy.com;
	charset utf-8,gbk;

	location &#x2F; &#123;	# 主页可以正常访问
		root &#x2F;code;
		index index.html index.htm;
	&#125;

	location &#x2F;download &#123;	# 当访问http:&#x2F;&#x2F;xxxx&#x2F;download则访问&#x2F;module&#x2F;download文件夹，显示目录索引
		root &#x2F;module; # 此时，访问的文件夹是&#x2F;module&#x2F;download
		autoindex on;
		autoindex_exact_size off;
		autoindex_localtime on;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、-状态监控页面-stub-status"><a href="#二、-状态监控页面-stub-status" class="headerlink" title="二、 状态监控页面-stub_status"></a>二、 状态监控页面-stub_status</h2><blockquote>
<p>需要nginx附带–with-http_stub_status_module模块才能使用</p>
</blockquote>
<h3 id="2-1-使用方法"><a href="#2-1-使用方法" class="headerlink" title="2.1 使用方法"></a>2.1 使用方法</h3><p>a.设置配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;autoindex.conf里面附加内容
location &#x2F;nginx_status &#123;
	stub_status;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>b.重启Nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">重启nginx服务
systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>c.网页访问测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">访问:
http:&#x2F;&#x2F;module.test.com&#x2F;nginx_status
网页显示：
Active connections: 2 
server accepts handled requests
		3 			3 	33 
Reading: 0 Writing: 1 Waiting: 1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>d.通过选项关闭长连接</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 注意, 一次TCP的连接，可以发起多次http的请求, 如下参数可配置进行验证
keepalive_timeout  0;   # 类似于关闭长连接
keepalive_timeout  65;  # 65s没有活动则断开连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;autoindex.conf里面的附加内容修改为
location &#x2F;nginx_status &#123;
	stub_status;
	keepalive_timeout  0; 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>e.再次测试网页访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">关闭长连接后的显示：
Active connections: 2 
server accepts handled requests
 21 21 20 
Reading: 0 Writing: 1 Waiting: 1 
# 可见每次HTTP请求都要重新发起TCP连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2-监控页面内容解释"><a href="#2-2-监控页面内容解释" class="headerlink" title="2.2 监控页面内容解释"></a>2.2 监控页面内容解释</h3><table>
<thead>
<tr>
<th>参数项</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Active connections</td>
<td>当前活动客户端连接数，包括Waiting等待连接数</td>
</tr>
<tr>
<td>accepts</td>
<td>已接受总的TCP连接数</td>
</tr>
<tr>
<td>handled</td>
<td>已处理总的TCP连接数</td>
</tr>
<tr>
<td>requests</td>
<td>客户端总的http请求数</td>
</tr>
<tr>
<td>Reading</td>
<td>当前nginx读取请求头的连接数</td>
</tr>
<tr>
<td>Writing</td>
<td>当前nginx将响应写回客户端的连接数</td>
</tr>
<tr>
<td>Waiting</td>
<td>当前等待请求的空闲客户端连接数</td>
</tr>
</tbody></table>
<h2 id="三、基于IP的访问控制"><a href="#三、基于IP的访问控制" class="headerlink" title="三、基于IP的访问控制"></a>三、基于IP的访问控制</h2><blockquote>
<p>某网页内的数据比较重要，怎么控制那些人可以访问，那些人不能访问呢？</p>
</blockquote>
<p>可以来源的IP地址做限制，常用的三种控制方法：</p>
<ul>
<li><p>拒绝10.0.0.1来源IP访问，其他人允许</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location &#x2F;nginx_status &#123;
    stub_status;
    deny 10.0.0.1&#x2F;32;
    allow all;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>允许10.0.0.1来源IP访问，其他人全部拒绝</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location &#x2F;nginx_status &#123;
    stub_status;
    allow 10.0.0.1&#x2F;32;
    deny all;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>实际配置监控Nginx状态时，仅允许该服务器的回环地址访问127.0.0.1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 最安全
location &#x2F;nginx_status &#123;
    stub_status;
    allow 127.0.0.1;
    deny all;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="四、基于密码的身份验证"><a href="#四、基于密码的身份验证" class="headerlink" title="四、基于密码的身份验证"></a>四、基于密码的身份验证</h2><blockquote>
<p>重要数据网站，要实现需要用户名密码认证，怎么做呢？</p>
</blockquote>
<ol>
<li><p>生成一个密码文件，密码文件的格式  name:password(加密)  （建议使用htpasswd）  openssl password</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# yum install httpd-tools -y
[root@web01 conf.d]# htpasswd -c -b &#x2F;etc&#x2F;nginx&#x2F;auth_conf oldboy oldboy
[root@web01 conf.d]# cat &#x2F;etc&#x2F;nginx&#x2F;auth_conf
oldboy:$apr1$Kp87VSae$658Nt5bm4iiblQkUvP7u61<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置Nginx，限制对应的资源</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location &#x2F;download &#123;
	root &#x2F;module;
	autoindex on;
	autoindex_exact_size off;
	autoindex_localtime on;
	
	auth_basic &quot;Please Password!!!&quot;;
	auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;auth_conf; 
	# 注意认证文件路径，否则网页认证后会403，可是为什么放其他目录就不行？
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="五、Nginx连接限制"><a href="#五、Nginx连接限制" class="headerlink" title="五、Nginx连接限制"></a>五、Nginx连接限制</h2><blockquote>
<p>网站请求数太多，不堪重负了，怎么保障部分用户能够正常访问</p>
</blockquote>
<h3 id="5-1-限制连接数"><a href="#5-1-限制连接数" class="headerlink" title="5.1 限制连接数"></a>5.1 限制连接数</h3><p><code>设置共享内存区域和给定键值的最大允许连接数。超过此限制时，服务器将返回错误以回复请求</code></p>
<ul>
<li><p>编辑配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># http标签段定义连接限制
http&#123;
    limit_conn_zone $binary_remote_addr zone&#x3D;conn_zone:10m;
&#125;
server &#123;
    # 同一时刻只允许一个客户端连接
    limit_conn conn_zone 1; 

    location &#x2F; &#123;
        root &#x2F;code;
        index index.html;
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用ab工具进行压力测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用ab工具进行压力测试
[root@xuliangwei ~]# yum install -y httpd-tools
[root@xuliangwei ~]# ab -n 500 -c 2  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html
# 可见500次中有失败的请求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查看拦截日志</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log
类似于
2019&#x2F;01&#x2F;14 11:11:22 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;www.xuliangwei.com&quot;
2019&#x2F;01&#x2F;14 11:11:23 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;www.xuliangwei.com&quot;
2019&#x2F;01&#x2F;14 11:11:25 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;www.xuliangwei.com&quot;
2019&#x2F;01&#x2F;14 11:11:25 [error] 29962#29962: *19 limiting connections by zone &quot;conn_zone&quot;, client: 47.110.176.164, server: www.xuliangwei.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;www.xuliangwei.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="5-2-限制请求数（更精准）"><a href="#5-2-限制请求数（更精准）" class="headerlink" title="5.2 限制请求数（更精准）"></a>5.2 限制请求数（更精准）</h3><p><code>设置共享内存区域和请求的最大突发大小。过多的请求被延迟，直到它们的数量超过最大突发大小，在这种情况下请求以错误终止。默认情况下，最大突发大小等于零。</code></p>
<ul>
<li><p>定义限制的Key</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat test1.oldboy.com.conf 
limit_req_zone $binary_remote_addr zone&#x3D;req_zone:10m rate&#x3D;1r&#x2F;s;
server &#123;
	listen 80;
	server_name test1.oldboy.com;
	
	limit_req zone&#x3D;req_zone burst&#x3D;5 nodelay;
	limit_req_status 412;
	error_page 412 &#x2F;err.html;    #这个文件必须存在&#x2F;code&#x2F;test1&#x2F;err.html

	location &#x2F; &#123;
		root &#x2F;code&#x2F;test1;
		index index.html;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>填写hosts域名解析 （测试：域名访问才有效果，直接访问没效果）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo &quot;10.0.0.7 test1.oldboy.com&quot; &gt;&gt; &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>压力测试</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ab -n 50 -c 20 http:&#x2F;&#x2F;test1.oldboy.com&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看错误日志</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2019&#x2F;01&#x2F;14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.737 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;test1.oldboy.com&quot;
2019&#x2F;01&#x2F;14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.611 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;test1.oldboy.com&quot;
2019&#x2F;01&#x2F;14 11:28:22 [error] 2073#2073: *3 limiting requests, excess: 5.450 by zone &quot;req_zone&quot;, client: 10.0.0.1, server: test1.oldboy.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, host: &quot;test1.oldboy.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="六、Nginx匹配符和优先级"><a href="#六、Nginx匹配符和优先级" class="headerlink" title="六、Nginx匹配符和优先级"></a>六、Nginx匹配符和优先级</h2><p>Location语法示例</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location [&#x3D;|^~|~|~*|!~|!~*|&#x2F;] &#x2F;uri&#x2F; &#123; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>匹配优先级</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">匹配符	匹配规则						优先级
&#x3D;		精确匹配						1 	用到
^~		以某个字符串开头				2
~		区分大小写的正则匹配			3	常用
~*		不区分大小写的正则匹配			4
!~		区分大小写不匹配的正则			5
!~*		不区分大小写不匹配的正则		6
&#x2F;		通用匹配，任何请求都会匹配到	7	常用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-1-匹配案例"><a href="#6-1-匹配案例" class="headerlink" title="6.1 匹配案例"></a>6.1 匹配案例</h3><blockquote>
<p>参考网站：<a href="https://blog.csdn.net/qq_41980405/article/details/111402208">https://blog.csdn.net/qq_41980405/article/details/111402208</a></p>
</blockquote>
<ul>
<li><p>通用匹配，任何请求都会匹配到</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
    ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>严格区分大小写，匹配以.php结尾的都走这个location    </p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">&#123;</span>
    ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>严格区分大小写，匹配以.jsp结尾的都走这个location </p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~ \.jsp$</span> <span class="token punctuation">&#123;</span>
    ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不区分大小写匹配，只要用户访问.jpg,gif,png,js,css 都走这条location</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~* .*\.(jpg|gif|png|js|css|mp4)$</span> <span class="token punctuation">&#123;</span>
    ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不区分大小写匹配</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~* <span class="token string">"\.(sql|bak|tgz|tar.gz|.git)$"</span></span> <span class="token punctuation">&#123;</span>
    ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(四)LNMP架构拆分</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/10-Nginx(%E5%9B%9B)LNMP%E6%9E%B6%E6%9E%84%E6%8B%86%E5%88%86/</url>
    <content><![CDATA[<h2 id="一、拆分数据库"><a href="#一、拆分数据库" class="headerlink" title="一、拆分数据库"></a>一、拆分数据库</h2><blockquote>
<p>为什么要拆分数据库?</p>
<p>mysql内存占用大，容易引起网页访问速度变慢，甚至oom(out of memory)被系统自动kill掉，不安全</p>
</blockquote>
<h3 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2 环境准备"></a>1.2 环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx+php</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td></td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="1-2-拆分过程"><a href="#1-2-拆分过程" class="headerlink" title="1.2 拆分过程"></a>1.2 拆分过程</h3><p>1、备份172.16.1.7服务器上mysql的数据</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# mysqldump -uroot -p&#39;Bgx123.com&#39; --all-databases --single-transaction &gt; mysql-all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、传输172.16.1.7的备份数据至172.16.1.51的服务器上</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# scp mysql-all.sql root@172.16.1.51:&#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、需要先在172.16.1.51服务器上安装mysql服务，然后使用mysql命令进行还原。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@db01 ~]# yum install mariadb-server mariadb -y
[root@db01 ~]# systemctl enable mariadb
[root@db01 ~]# systemctl start mariadb
[root@db01 ~]# mysql &lt;&#x2F;tmp&#x2F;mysql-all.sql
[root@db01 ~]# systemctl restart mariadb
[root@db01 ~]# mysql -uroot -pBgx123.com
MariaDB [(none)]&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| edusoho            |
| mysql              |
| performance_schema |
| test               |
| wordpress          |
| zh                 |
+--------------------+
7 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、将web程序连接的本地数据库修改到远程数据库上。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1）先在本地172.16.1.7服务器上停止本地的数据库
[root@web01 ~]# systemctl disable mariadb
[root@web01 ~]# systemctl stop mariadb

2）在172.16.1.51的服务器上授权远程主机能够能连接mysql数据库
[root@db01 ~]# mysql -uroot -pBgx123.com
MariaDB [(none)]&gt; grant all privileges on *.* to oldboy@&#39;%&#39; identified by &#39;Bgx123.com&#39;;
解释：
*.*: 所有数据库下的所有表
oldboy@&#39;%&#39;: 允许所有网段的oldboy用户访问
identify: 设置密码

3）在172.16.1.7服务器上测试远程账户能否连接172.16.1.51的数据库
[root@web01 wordpress]# yum install mariadb -y
[root@web01 wordpress]# mysql -h 172.16.1.51 -uoldboy -pBgx123.com
MariaDB [(none)]&gt; 

4）在172.16.1.7服务器上修改web程序连接数据库的配置文件
[root@web01 wordpress]# vim &#x2F;code&#x2F;wordpress&#x2F;wp-config.php
&#x2F;&#x2F; ** MySQL 设置 - 具体信息来自您正在使用的主机 ** &#x2F;&#x2F;
&#x2F;** WordPress数据库的名称 *&#x2F;
define(&#39;DB_NAME&#39;, &#39;wordpress&#39;);

&#x2F;** MySQL数据库用户名 *&#x2F;
define(&#39;DB_USER&#39;, &#39;oldboy&#39;);

&#x2F;** MySQL数据库密码 *&#x2F;
define(&#39;DB_PASSWORD&#39;, &#39;Bgx123.com&#39;);

&#x2F;** MySQL主机 *&#x2F;
define(&#39;DB_HOST&#39;, &#39;172.16.1.51&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5、拆分172.16.1.7wecenter连接远程172.16.1.51数据库信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 zh]# grep -R &quot;Bgx123.com&quot; *
	system&#x2F;config&#x2F;database.php:  &#39;password&#39; &#x3D;&gt; &#39;Bgx123.com&#39;,
[root@web01 zh]# vim &#x2F;code&#x2F;zh&#x2F;system&#x2F;config&#x2F;database.php 
	$config[&#39;driver&#39;] &#x3D; &#39;MySQLi&#39;;^M
	$config[&#39;master&#39;] &#x3D; array (
	  &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,
	  &#39;host&#39; &#x3D;&gt; &#39;172.16.1.51&#39;,
	  &#39;username&#39; &#x3D;&gt; &#39;oldboy&#39;,
	  &#39;password&#39; &#x3D;&gt; &#39;Bgx123.com&#39;,
	  &#39;dbname&#39; &#x3D;&gt; &#39;zh&#39;,
	);^M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6、拆分172.16.1.7 edusoho连接远程172.16.1.51数据库信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 edusoho]# vim &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;config&#x2F;parameters.yml
database_driver: pdo_mysql
database_host: 172.16.1.51
database_port: 3306
database_name: edusoho
database_user: oldboy
database_password: &#39;Bgx123.com&#39;

必须清理缓存
[root@web01 edusoho]# rm -rf &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;cache&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、扩展多台web服务器"><a href="#二、扩展多台web服务器" class="headerlink" title="二、扩展多台web服务器"></a>二、扩展多台web服务器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.统一环境
    0）准备对应的www用户
    [root@web02 ~]# groupadd -g666 www
    [root@web02 ~]# useradd -u666 -g666 www

    1）拷贝web01上面的yum仓库
    [root@web02 ~]# scp root@172.16.1.7:&#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;

    2）安装nginx和php
    [root@web02 ~]# yum -y install nginx php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb

2.统一配置（同步web01上面的配置到web02）
    1）同步nginx
    [root@web02 ~]# rsync  -avz --delete root@172.16.1.7:&#x2F;etc&#x2F;nginx&#x2F; &#x2F;etc&#x2F;nginx&#x2F;
    [root@web02 ~]# nginx -t
    [root@web02 ~]# systemctl enable nginx
    [root@web02 ~]# systemctl start nginx

    2）同步php（&#x2F;etc&#x2F;php-fpm.conf &#x2F;etc&#x2F;php-fpm.d  &#x2F;etc&#x2F;php.ini）
    [root@web02 ~]# rsync  -avz --delete root@172.16.1.7:&#x2F;etc&#x2F;php* &#x2F;etc&#x2F;
    [root@web02 ~]# systemctl enable php-fpm
    [root@web02 ~]# systemctl start php-fpm

3.统一代码
    [root@web01 ~]# tar czf code.tar.gz &#x2F;code				#在web01上打包站点
    [root@web01 ~]# scp code.tar.gz root@172.16.1.8:&#x2F;tmp	#在web01上将打包好的代码发送给web02
    [root@web02 ~]# tar xf &#x2F;tmp&#x2F;code.tar.gz -C &#x2F;			#在web02上进行解压，并解压到&#x2F;目录下

4.配置解析，进行访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、NFS共享多台web的静态资源"><a href="#三、NFS共享多台web的静态资源" class="headerlink" title="三、NFS共享多台web的静态资源"></a>三、NFS共享多台web的静态资源</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.准备172.16.1.31共享存储服务器，规划目录，配置好权限
    0）创建用户
    [root@nfs ~]# groupadd -g666 www
    [root@nfs ~]# useradd -u666 -g666 www	

    1）安装
    [root@nfs ~]# yum install nfs-utils -y

    2）配置
    [root@nfs ~]# cat &#x2F;etc&#x2F;exports
    &#x2F;data&#x2F;blog 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)
    &#x2F;data&#x2F;zh 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)
    &#x2F;data&#x2F;edu 172.16.1.0&#x2F;24(rw,sync,all_squash,anonuid&#x3D;666,anongid&#x3D;666)

    3）根据配置，创建目录，准备用户，授权等等
    [root@nfs ~]# rm -rf &#x2F;data&#x2F;
    [root@nfs ~]# mkdir &#x2F;data&#x2F;&#123;blog,zh,edu&#125; -p
    [root@nfs ~]# chown -R www.www &#x2F;data&#x2F;

    4）启动
    [root@nfs ~]# systemctl enable nfs-utils 
    [root@nfs ~]# systemctl restart nfs-utils

2.将图片较多的web02服务器，推送到nfs共享存储上
    http:&#x2F;&#x2F;blog.oldboy.com&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;01&#x2F;timg.jpg

    [root@web02 ~]# cd &#x2F;code&#x2F;wordpress&#x2F;wp-content
    [root@web02 wp-content]# scp -r uploads&#x2F;* root@172.16.1.31:&#x2F;data&#x2F;blog&#x2F;

    注意：需要上nfs服务器上进行重新的递归授权，否则会出现无法上传文件的错误
    [root@nfs ~]# chown -R www.www &#x2F;data&#x2F;

3.web01和web02分别都进行挂载，此时图片进行实现了共享
    mount -t nfs 172.16.1.31:&#x2F;data&#x2F;blog  &#x2F;code&#x2F;wordpress&#x2F;wp-content&#x2F;uploads&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(三)LNMP介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/09-Nginx(%E4%B8%89)LNMP%E6%9E%B6%E6%9E%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、LNMP简介-需补充"><a href="#一、LNMP简介-需补充" class="headerlink" title="一、LNMP简介(需补充)"></a>一、LNMP简介(需补充)</h2><h3 id="1-1-什么是LNMP"><a href="#1-1-什么是LNMP" class="headerlink" title="1.1 什么是LNMP"></a>1.1 什么是LNMP</h3><h3 id="1-2-LNMP架构是如何工作的"><a href="#1-2-LNMP架构是如何工作的" class="headerlink" title="1.2 LNMP架构是如何工作的"></a>1.2 LNMP架构是如何工作的</h3><p>浏览器 –http–&gt; Nginx(fastcgi_pass) –fastcgi–&gt;php(fastcgi_fpm调动wrapper再调动php解析再调用mysql)</p>
<p>大致流程：</p>
<p>用户在浏览器发起请求，如果请求的是静态资源，Nginx则直接返回，如果请求的是动态资源，Nginx会通过fastcgi协议，将请求交给PHP服务器，再返回动态资源。</p>
<h3 id="1-3-LNMP和LAMP的区别是什么"><a href="#1-3-LNMP和LAMP的区别是什么" class="headerlink" title="1.3 LNMP和LAMP的区别是什么"></a>1.3 LNMP和LAMP的区别是什么</h3><p>nginx 是以fastcgi协议调用的php<br>apache是以模块的方式加载的php</p>
<h2 id="二、LNMP架构简单搭建"><a href="#二、LNMP架构简单搭建" class="headerlink" title="二、LNMP架构简单搭建"></a>二、LNMP架构简单搭建</h2><p>1、准备一台名为nginx的服务器</p>
<p>2、使用官方仓库安装nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 添加安装源
[root@nginx ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo 
[nginx]
name&#x3D;nginx repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;
gpgcheck&#x3D;0
enabled&#x3D;1

#安装Nginx
[root@nginx ~]# yum install nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、安装php7.1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nginx ~]# yum remove php-mysql-5.4 php php-fpm php-common # 卸载默认5.4版本的php
[root@nginx ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;php.repo
[php]
name &#x3D; php Repository
baseurl &#x3D; http:&#x2F;&#x2F;us-east.repo.webtatic.com&#x2F;yum&#x2F;el7&#x2F;x86_64&#x2F;
gpgcheck &#x3D; 0

[root@nginx ~]# yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、安装maria数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@nginx ~]# yum install mariadb-server mariadb -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5、配置nginx和php集成</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cd &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;
[root@web01 conf.d]# cat php.conf 
server &#123;
	listen 80;
	server_name php.oldboy.com;
	root &#x2F;code;

	location &#x2F; &#123;
		index index.php index.html;
	&#125;

	location ~ \.php$ &#123;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6、重载nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# nginx -t
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
[root@web01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>7、启动php-fpm，并加入开机自启</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# systemctl start php-fpm
[root@web01 conf.d]# systemctl enable  php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>8、准备一个php文件，测试nginx和php是否继承成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat &#x2F;code&#x2F;page.php
&lt;?php
	phpinfo();
?&gt;
# 测试：网页访问:http:&#x2F;&#x2F;php.oldboy.com&#x2F;page.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9、启动数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# systemctl start mariadb
[root@web01 conf.d]# systemctl enable mariadb
[root@web01 conf.d]# mysqladmin password &#39;Bgx123.com&#39;		#配置密码（默认mysql是空密码）
[root@web01 conf.d]# mysql -uroot -pBgx123.com				#使用账号和密码登录mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>10、准备一个php文件，测试是否可以正常连接数据库</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">&lt;?php
  $servername &#x3D; &quot;localhost&quot;;
  $username &#x3D; &quot;root&quot;;
  $password &#x3D; &quot;Bgx123.com&quot;;

  &#x2F;&#x2F; 创建连接
  $conn &#x3D; mysqli_connect($servername, $username, $password);

  &#x2F;&#x2F; 检测连接
  if (!$conn) &#123;
      die(&quot;Connection failed: &quot; . mysqli_connect_error()); &#x2F;&#x2F; 注意格式
  &#125;
  echo &quot;php连接MySQL数据库成功&quot;;
  ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、案例-搭建wordpress博客"><a href="#三、案例-搭建wordpress博客" class="headerlink" title="三、案例-搭建wordpress博客"></a>三、案例-搭建wordpress博客</h2><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><table>
<thead>
<tr>
<th>用途</th>
<th>公网IP地址</th>
<th>内网IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>web服务器01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
</tbody></table>
<h3 id="3-2-部署安装"><a href="#3-2-部署安装" class="headerlink" title="3.2 部署安装"></a>3.2 部署安装</h3><p>1、添加nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat blog.oldboy.com.conf 
server &#123;
	listen 80;
	server_name blog.oldboy.com;
	root &#x2F;code&#x2F;wordpress;

	location &#x2F; &#123;
		index index.php index.html;
	&#125;

	location ~ \.php$ &#123;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、根据nginx中定义的内容，创建站点目录并进行授权</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# mkdir &#x2F;code
[root@web01 conf.d]# cd &#x2F;code
[root@web01 code]# wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;wordpress-5.0.3-zh_CN.tar.gz
[root@web01 code]# tar xf wordpress-5.0.3-zh_CN.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、修改nginx与php-fpm的运行用户为www，并授权代码属主和属组都为www</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#注意：如果没有该用户，启动一定会报错
[root@web01 code]# groupadd -g 666 www
[root@web01 code]# useradd -u666 -g666 www

修改nginx与php-fpm管理进程，的运行身份为www
[root@web01 code]# sed -i &#39;&#x2F;^user &#x2F;c user  www;&#39; &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
[root@web01 code]# sed -i &#39;&#x2F;^user&#x2F;c user &#x3D; www&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf 
[root@web01 code]# sed -i &#39;&#x2F;^group&#x2F;c group &#x3D; www&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf 

一定要重启才生效
[root@web01 code]# systemctl restart nginx
[root@web01 code]# systemctl restart php-fpm

最后授权代码为www
[root@web01 code]# chown -R www.www &#x2F;code&#x2F;wordpress	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、创建数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MariaDB [(none)]&gt; create database wordpress;			#创建一个库，名称叫wordpress
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&gt; show databases;						#查询该台数据库服务有多少个库
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
| wordpress          |
+--------------------+
5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5、解决nginx上传文件大小限制（默认1M，超过大小会报413）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">在wordpress的nginx配置文件中添加：client_max_body_size 100m;
[root@web01 code]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;blog.oldboy.com.conf 
server &#123;
        listen 80;
        server_name blog.oldboy.com;
        root &#x2F;code&#x2F;wordpress;
        client_max_body_size 100m;  # 默认1M，超过大小会报413

        location &#x2F; &#123;
                index index.php index.html;
        &#125;

        location ~ \.php$ &#123;
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
        &#125;
&#125;
重启nginx：systemctl restart nginx	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>测试在wordpress页面上传主题或者写文章上传图片，均出现500报错<br>查看日志文件&#x2F;var&#x2F;log&#x2F;nginx&#x2F;err.log<br>2021&#x2F;08&#x2F;16 18:59:31 [crit] 1228#1228: *2 open() “&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body&#x2F;0000000001” failed (13: Permission denied), client: 10.0.0.1, server: php.gs.com, request: “POST &#x2F;wp-admin&#x2F;update.php?action&#x3D;upload-theme HTTP&#x2F;1.1”, host: “php.gs.com”, referrer: “<a href="http://php.gs.com/wp-admin/theme-install.php?browse=popular&quot;">http://php.gs.com/wp-admin/theme-install.php?browse=popular&quot;</a><br>解决方法，参考<a href="https://blog.csdn.net/qq_15941409/article/details/114640122">https://blog.csdn.net/qq_15941409/article/details/114640122</a><br>chown www:www -R &#x2F;var&#x2F;lib&#x2F;nginx&#x2F;</p>
</blockquote>
<h2 id="四、案例-搭建wecenter知乎"><a href="#四、案例-搭建wecenter知乎" class="headerlink" title="四、案例-搭建wecenter知乎"></a>四、案例-搭建wecenter知乎</h2><h3 id="4-1-部署安装"><a href="#4-1-部署安装" class="headerlink" title="4.1 部署安装"></a>4.1 部署安装</h3><p>1、添加nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server &#123;
	listen 80;
	server_name zh.oldboy.com;
	root &#x2F;code&#x2F;zh;
	client_max_body_size 100m;

	location &#x2F; &#123;
		index index.php index.html;
	&#125;

	location ~ \.php$ &#123;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	&#125;
&#125;
[root@web01 code]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、wencenter部署</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 code]# rz -E WeCenter_3-2-1.zip
[root@web01 code]# unzip WeCenter_3-2-1.zip
[root@web01 code]# mv WeCenter_3-2-1 zh
[root@web01 code]# chown -R www.www zh&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、配置数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 code]# mysql -uroot -pBgx123.com
MariaDB [(none)]&gt; create database zh;
MariaDB [(none)]&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
| wordpress          |
| zh                 |
+--------------------+
6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="五、案例-搭建edusoho在线视频教育"><a href="#五、案例-搭建edusoho在线视频教育" class="headerlink" title="五、案例-搭建edusoho在线视频教育"></a>五、案例-搭建edusoho在线视频教育</h2><h3 id="5-1-部署安装"><a href="#5-1-部署安装" class="headerlink" title="5.1 部署安装"></a>5.1 部署安装</h3><p>1、添加nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 code]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;edu.oldboy.com.conf 
server &#123;
    listen 80;
    server_name edu.oldboy.com;
    root &#x2F;code&#x2F;edusoho&#x2F;web;
    client_max_body_size 200m;

    location &#x2F; &#123;
        index app.php;
        try_files $uri @rewriteapp;
    &#125;
    location @rewriteapp &#123;
        rewrite ^(.*)$ &#x2F;app.php&#x2F;$1 last;
    &#125;

    location ~ ^&#x2F;udisk &#123;
        internal;
        root &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;data&#x2F;;
    &#125;

    location ~ ^&#x2F;(app|app_dev)\.php(&#x2F;|$) &#123;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_split_path_info ^(.+\.php)(&#x2F;.*)$;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
        fastcgi_param  HTTPS              off;
        fastcgi_param HTTP_X-Sendfile-Type X-Accel-Redirect;
        fastcgi_param HTTP_X-Accel-Mapping &#x2F;udisk&#x3D;&#x2F;code&#x2F;edusoho&#x2F;app&#x2F;data&#x2F;udisk;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 8 128k;
    &#125;

    # 配置设置图片格式文件
    location ~* \.(jpg|jpeg|gif|png|ico|swf)$ &#123;
        # 过期时间为3年
        expires 3y;
        # 关闭日志记录
        access_log off;
        # 关闭gzip压缩，减少CPU消耗，因为图片的压缩率不高。
        gzip off;
    &#125;
    # 配置css&#x2F;js文件
    location ~* \.(css|js)$ &#123;
        access_log off;
        expires 3y;
    &#125;
    # 禁止用户上传目录下所有.php文件的访问，提高安全性
    location ~ ^&#x2F;files&#x2F;.*\.(php|php5)$ &#123;
        deny all;
    &#125;

    # 以下配置允许运行.php的程序，方便于其他第三方系统的集成。
    location ~ \.php$ &#123;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_split_path_info ^(.+\.php)(&#x2F;.*)$;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
        fastcgi_param  HTTPS              off;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、下载edusoho,并授权文件夹</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget http:&#x2F;&#x2F;download.edusoho.com&#x2F;edusoho-8.2.17.tar.gz
tar xf edusoho-8.2.17.tar.gz
chown -R www.www edusoho<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>3、调整php的上传大小(上传文件默认有限制大小)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# vim &#x2F;etc&#x2F;php.ini
post_max_size &#x3D; 200M
upload_max_filesize &#x3D; 200M
[root@web01 code]# systemctl restart php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="六、各开源项目网站"><a href="#六、各开源项目网站" class="headerlink" title="六、各开源项目网站"></a>六、各开源项目网站</h2><p>phpmyadmin	<a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a><br>zblog	<a href="https://www.zblogcn.com/">https://www.zblogcn.com/</a><br>wordpress	<a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a><br>wecenter	<a href="http://www.wecenter.com/downloads/">http://www.wecenter.com/downloads/</a><br>edusohu	<a href="http://www.edusoho.com/open/show">http://www.edusoho.com/open/show</a></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(五)代理介绍</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/11-Nginx(%E4%BA%94)Nginx%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、什么是代理"><a href="#一、什么是代理" class="headerlink" title="一、什么是代理"></a>一、什么是代理</h2><h3 id="1-1-正向代理和反向代理的区别"><a href="#1-1-正向代理和反向代理的区别" class="headerlink" title="1.1 正向代理和反向代理的区别"></a>1.1 正向代理和反向代理的区别</h3><p>区别在于形式上服务的”对象”不一样<br>    正向代理代理的对象是客户端，为客户端服务   PC电脑<br>    反向代理代理的对象是服务端，为服务端服务	服务器</p>
<h3 id="1-2-Nginx反向代理模式配置模块"><a href="#1-2-Nginx反向代理模式配置模块" class="headerlink" title="1.2 Nginx反向代理模式配置模块"></a>1.2 Nginx反向代理模式配置模块</h3><p>反向代理模式				Nginx配置模块<br>http、websocket、https		ngx_http_proxy_module<br>fastcgi						ngx_http_fastcgi_module<br>uwsgi						ngx_http_uwsgi_module<br>grpc						ngx_http_v2_module</p>
<h2 id="二、Nginx代理配置"><a href="#二、Nginx代理配置" class="headerlink" title="二、Nginx代理配置"></a>二、Nginx代理配置</h2><h3 id="2-1-测试环境准备"><a href="#2-1-测试环境准备" class="headerlink" title="2.1 测试环境准备"></a>2.1 测试环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>lb01</td>
<td>nginx（提供代理服务）</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td>10.0.0.51</td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="2-2-Nginx代理配置步骤"><a href="#2-2-Nginx代理配置步骤" class="headerlink" title="2.2 Nginx代理配置步骤"></a>2.2 Nginx代理配置步骤</h3><p>1、<code>web01</code>-配置后端的web</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat web.oldboy.com.conf 
server &#123;
	listen 80;
	server_name web.oldboy.com;
	root &#x2F;web;

	location &#x2F; &#123;
		index index.php index.html;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、创建文件夹和网页文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# mkdir &#x2F;web
[root@web01 conf.d]# echo &quot;Web01.....&quot; &gt; &#x2F;web&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>3、重启nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# nginx -t
sysnginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
t[root@web01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、<code>lb01</code>-nginx代理配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# cat proxy_web.conf
server &#123;
	listen 80;
	server_name web.oldboy.com;
	location &#x2F; &#123;
		proxy_pass http:&#x2F;&#x2F;10.0.0.7:80;
		# 设置header将域名传过去
		proxy_set_header Host $http_host; 
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5、重启Nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6、客户机设置hosts，并测试访问网页，可以正常显示web01页面</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">10.0.0.5 web.oldboy.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/img/image-20210820101740471.png" alt="image-20210820101740471"></p>
<h2 id="三、代理流程分析"><a href="#三、代理流程分析" class="headerlink" title="三、代理流程分析"></a>三、代理流程分析</h2><p>1、走10网关，wireshark的抓包截图如下</p>
<p><img src="/img/image-20210820102735419.png" alt="image-20210820102735419"></p>
<p>2、流程图</p>
<p><img src="/img/image-20210820103041679.png" alt="image-20210820103041679"></p>
<p>3、测试，关掉web01的公网ip网口(10.0.0.7)，再尝试访问，也可以正常访问到web01的网页</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_web.conf
server &#123;
        listen 80;
        server_name  web.oldboy.com;
        location &#x2F; &#123;
                proxy_pass http:&#x2F;&#x2F;172.16.1.7:80;
                include &#x2F;etc&#x2F;nginx&#x2F;proxy_params;
        &#125;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、抓包分析</p>
<p>因为172网段走的虚拟机内部网络，抓不到</p>
<p><img src="/img/image-20210820111454152.png" alt="image-20210820111454152"></p>
<h2 id="三、Nginx代理常用参数"><a href="#三、Nginx代理常用参数" class="headerlink" title="三、Nginx代理常用参数"></a>三、Nginx代理常用参数</h2><h3 id="3-1-常用参数解释"><a href="#3-1-常用参数解释" class="headerlink" title="3.1 常用参数解释"></a>3.1 常用参数解释</h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>proxy_pass <a href="http://10.0.0.7/">http://10.0.0.7:80</a>;</td>
<td></td>
</tr>
<tr>
<td>proxy_http_version 1.1;</td>
<td>代理向后端请求使用的版本</td>
</tr>
<tr>
<td>proxy_set_header Host $http_host;</td>
<td>代理向后端请求携带的域名</td>
</tr>
<tr>
<td>proxy_set_header X-Real-IP $remote_addr;</td>
<td><font color="blue">用于获取客户端真实IP（不如x-forward）</font></td>
</tr>
<tr>
<td>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</td>
<td><font color="blue">获取客户端真实IP及全链路IP</font></td>
</tr>
<tr>
<td>proxy_connect_timeout 30;</td>
<td>代理接连后端超时时间</td>
</tr>
<tr>
<td>proxy_send_timeout 60;</td>
<td>后端传递数据至代理的超时时间</td>
</tr>
<tr>
<td>proxy_read_timeout 60;</td>
<td>后端相应代理的超时时间</td>
</tr>
<tr>
<td>proxy_buffering on;</td>
<td>是否开启proxy的buffer功能</td>
</tr>
<tr>
<td>proxy_buffer_size 32k;</td>
<td>设置buffer大小</td>
</tr>
<tr>
<td>proxy_buffers 4 128k;</td>
<td>设置存储被代理服务器上的数据所占用的buffer的个数和每个buffer的大小</td>
</tr>
</tbody></table>
<p>X-Forwarded-For可以nginx的日志查看到</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-2-参数多的时候如何配置"><a href="#3-2-参数多的时候如何配置" class="headerlink" title="3.2 参数多的时候如何配置"></a>3.2 参数多的时候如何配置</h3><blockquote>
<p>可将参数写到一个文件中，然后在nginx配置文件里include包含进去</p>
</blockquote>
<p>1、创建包含参数的文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# cat &#x2F;etc&#x2F;nginx&#x2F;proxy_params
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

proxy_connect_timeout 30;
proxy_send_timeout 60;
proxy_read_timeout 60;

proxy_buffering on;
proxy_buffer_size 32k;
proxy_buffers 4 128k;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、在配置文件中导入，方便后续多个location使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location &#x2F; &#123;
    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;
    include proxy_params;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(七)均衡调度</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/13-Nginx(%E4%B8%83)Nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%B0%83%E5%BA%A6%E4%B8%8E%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="一、Nginx均衡调度算法"><a href="#一、Nginx均衡调度算法" class="headerlink" title="一、Nginx均衡调度算法"></a>一、Nginx均衡调度算法</h2><p>Nginx七层负载均衡分为5种调度算法</p>
<table>
<thead>
<tr>
<th>调度算法</th>
<th>概述</th>
</tr>
</thead>
<tbody><tr>
<td>轮询（常用）</td>
<td>按时间顺序逐一分配到不同的后端服务器(默认)</td>
</tr>
<tr>
<td>weight（面试点）</td>
<td>加权轮询,weight值越大,分配到的访问几率越高</td>
</tr>
<tr>
<td>ip_hash（面试点）</td>
<td>每个请求按访问IP的hash结果分配,这样来自同一IP的固定访问一个后端服务器</td>
</tr>
<tr>
<td>url_hash</td>
<td>按照访问URL的hash结果来分配请求,是每个URL定向到同一个后端服务器</td>
</tr>
<tr>
<td>least_hash</td>
<td>最少链接数,那个机器链接数少就分发</td>
</tr>
</tbody></table>
<h3 id="1-1-加权轮询"><a href="#1-1-加权轮询" class="headerlink" title="1.1 加权轮询"></a>1.1 加权轮询</h3><p>比如实现访问5次web01，1次web02</p>
<p>当web服务器配置不相同，有差距时，可以用此方法</p>
<p>在<code>lb01</code>配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        server 172.16.1.7:80 weight&#x3D;5;
        server 172.16.1.8:80 weight&#x3D;1;
&#125;

server &#123;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-ip-hash"><a href="#1-2-ip-hash" class="headerlink" title="1.2 ip_hash"></a>1.2 ip_hash</h3><blockquote>
<p>PS：不能与weight一起使用</p>
</blockquote>
<p>根据请求的IP地址，固定访问到某一后端，除非已选择的后端down了，有点浪费资源</p>
<p>在<code>lb01</code>配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        ip_hash;
        server 172.16.1.7:80;
        server 172.16.1.8:80;
&#125;

server &#123; 
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、Nginx负载均衡后端状态"><a href="#二、Nginx负载均衡后端状态" class="headerlink" title="二、Nginx负载均衡后端状态"></a>二、Nginx负载均衡后端状态</h2><table>
<thead>
<tr>
<th>状态</th>
<th>概述</th>
</tr>
</thead>
<tbody><tr>
<td>down</td>
<td>当前的server暂时不参与负载均衡</td>
</tr>
<tr>
<td>backup</td>
<td>预留的备份服务器</td>
</tr>
<tr>
<td>max_conns</td>
<td>限制最大的接收连接数</td>
</tr>
<tr>
<td>max_fails（健康检查）</td>
<td>允许请求失败的次数（不够精准，作用不大，得知道，面试会问）</td>
</tr>
<tr>
<td>fail_timeout（健康检查）</td>
<td>经过max_fails失败后, 服务暂停时间</td>
</tr>
</tbody></table>
<h3 id="2-1-down状态"><a href="#2-1-down状态" class="headerlink" title="2.1 down状态"></a>2.1 down状态</h3><blockquote>
<p>一般用于停机维护</p>
</blockquote>
<p>在<code>lb01</code>配置，可见当两台web的Nginx服务都正常时，只能访问web02，当web02的Nginx服务挂了，返回502</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        server 172.16.1.7:80 down;
        server 172.16.1.8:80;
&#125;

server &#123;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2-backup状态"><a href="#2-2-backup状态" class="headerlink" title="2.2 backup状态"></a>2.2 backup状态</h3><p>在<code>lb01</code>配置，可见当两台web都正常时，只能访问web02，如果web02的服务挂了，会访问web01，当web02恢复后，再次访问到的是web02</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        server 172.16.1.7:80 backup;
        server 172.16.1.8:80;
&#125;

server &#123;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-健康检查"><a href="#2-3-健康检查" class="headerlink" title="2.3 健康检查"></a>2.3 健康检查</h3><blockquote>
<p>自带的健康检查不够精准，且看不到信息，面试会问</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        server 172.16.1.7:80 max_fails&#x3D;2 fail_timeout&#x3D;10s;
        server 172.16.1.8:80 max_fails&#x3D;2 fail_timeout&#x3D;10s;
&#125;

server &#123;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、第三方健康检查模块check-upstream"><a href="#三、第三方健康检查模块check-upstream" class="headerlink" title="三、第三方健康检查模块check_upstream"></a>三、第三方健康检查模块check_upstream</h2><blockquote>
<p>检测更精准，且有页面可以展示服务端的状态，需要编译安装</p>
</blockquote>
<h3 id="3-1-编译安装Nginx"><a href="#3-1-编译安装Nginx" class="headerlink" title="3.1 编译安装Nginx"></a>3.1 编译安装Nginx</h3><p>1、安装依赖包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb02 ~]# yum install -y gcc glibc gcc-c++ pcre-devel openssl-devel  patch libxml2 -libxml2-devel libxslt libxslt-devel gd-devel perl-ExtUtils-Embed gperftools-devel.x86_64 gperftools-libs.x86_64 gperftools.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、下载Nginx源码及第三方模块源码</p>
<blockquote>
<p>PS：为保持一致，先通过yum源安装nginx，这是当前实验环境的Nginx版本</p>
<p>[root@lb01 nginx]# nginx -version<br>nginx version: nginx&#x2F;1.20.1</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb02 ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.1.tar.gz
[root@lb02 ~]# wget https:&#x2F;&#x2F;github.com&#x2F;yaoweibin&#x2F;nginx_upstream_check_module&#x2F;archive&#x2F;master.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>3、解压nginx源码包以及第三方模块</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 ~]# unzip master.zip
[root@lb01 ~]# tar -vxf nginx-1.20.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>4、打补丁</p>
<blockquote>
<p>打补丁(nginx的版本是1.20.1补丁就选择1.20.1的,p1代表在nginx目录，p0是不在nginx目录)</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx-1.20.1]# cd nginx-1.20.1&#x2F;
[root@lb01 nginx-1.20.1]# patch -p1 &lt; ..&#x2F;nginx_upstream_check_module-master&#x2F;check_1.20.1+.patch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>5、编译Nginx，附带模块参数</p>
<blockquote>
<p>通过nginx -V获取configure参数，尽量保持一致</p>
</blockquote>
<p>–add-module&#x3D;&#x2F;root&#x2F;nginx_upstream_check_module-master</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx-1.20.1]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --modules-path&#x3D;&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;client_body --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;proxy --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;fastcgi --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;uwsgi --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;scgi --pid-path&#x3D;&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;run&#x2F;lock&#x2F;subsys&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-compat --with-debug --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module&#x3D;dynamic --with-http_mp4_module --with-http_perl_module&#x3D;dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module&#x3D;dynamic --with-mail&#x3D;dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream&#x3D;dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --add-module&#x3D;&#x2F;root&#x2F;nginx_upstream_check_module-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6、在已有的负载均衡上增加健康检查的功能</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx-1.20.1]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf
upstream node &#123;
        server 172.16.1.7:80;
        server 172.16.1.8:80;
        check interval&#x3D;3000 rise&#x3D;2 fall&#x3D;3 timeout&#x3D;1000 type&#x3D;tcp;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-功能测试"><a href="#3-2-功能测试" class="headerlink" title="3.2 功能测试"></a>3.2 功能测试</h3><p>1、正常情况下的检测数据</p>
<p><img src="/img/image-20210821113447825.png" alt="image-20210821113447825"></p>
<p>2、测试将web01的nginx服务关掉</p>
<p><img src="/img/image-20210821114011230.png" alt="image-20210821114011230"></p>
<p>3、日志分析</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 nginx-1.20.1]# tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log
# 两web服务正常，能获取peer
2021&#x2F;08&#x2F;21 02:42:11 [error] 50522#50522: enable check peer: 172.16.1.8:80
2021&#x2F;08&#x2F;21 02:42:12 [error] 50522#50522: enable check peer: 172.16.1.7:80
2021&#x2F;08&#x2F;21 02:46:17 [error] 50522#50522: *13 connect() failed (111: Connection refused) while connecting to upstream, client: 10.0.0.1, server: node.oldboy.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, upstream: &quot;http:&#x2F;&#x2F;172.16.1.7:80&#x2F;&quot;, host: &quot;node.oldboy.com&quot;
# 停止web01的nginx服务
2021&#x2F;08&#x2F;21 02:46:20 [error] 50522#50522: disable check peer: 172.16.1.7:80
# 重新启动web01的nginx服务
2021&#x2F;08&#x2F;21 02:47:59 [error] 50522#50522: enable check peer: 172.16.1.7:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、如何解决网站重复登录的问题"><a href="#四、如何解决网站重复登录的问题" class="headerlink" title="四、如何解决网站重复登录的问题"></a>四、如何解决网站重复登录的问题</h2><p>有三种方法解决：</p>
<ol>
<li>ip_hash – 会造成某一台主机的压力过大</li>
<li>session复制</li>
<li>session共享<ol>
<li>本地文件 –&gt; nfs共享</li>
<li>通过程序，写入redis数据库（常用）</li>
<li>通过程序，写入mysql数据库</li>
</ol>
</li>
</ol>
<p>本案例，选用3.2配置，session共享，写入redis数据库</p>
<h3 id="4-1-安装phpmyadmin重现问题"><a href="#4-1-安装phpmyadmin重现问题" class="headerlink" title="4.1 安装phpmyadmin重现问题"></a>4.1 安装phpmyadmin重现问题</h3><p><code>web01</code>和<code>web02</code>都需要安装</p>
<p>1、配置Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cat php.conf
server &#123;
	listen 80;
	server_name php.oldboy.com;
	root &#x2F;code&#x2F;phpMyAdmin-4.8.4-all-languages;

	location &#x2F; &#123;
		index index.php index.html;
	&#125;

	location ~ \.php$ &#123;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	&#125;
&#125;
[root@web01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、安装phpmyadmin</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# cd &#x2F;code
[root@web01 code]# wget https:&#x2F;&#x2F;files.phpmyadmin.net&#x2F;phpMyAdmin&#x2F;4.8.4&#x2F;phpMyAdmin-4.8.4-all-languages.zip
[root@web01 code]# unzip phpMyAdmin-4.8.4-all-languages.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>3、配置phpmyadmin连接远程数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 code]# cd phpMyAdmin-4.8.4-all-languages&#x2F;
[root@web01 phpMyAdmin-4.8.4-all-languages]# cp config.sample.inc.php config.inc.php
[root@web01 phpMyAdmin-4.8.4-all-languages]# vim config.inc.php
&#x2F;* Server parameters *&#x2F;
$cfg[&#39;Servers&#39;][$i][&#39;host&#39;] &#x3D; &#39;172.16.1.51&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、配置授权</p>
<blockquote>
<p>这个文件夹中会记录session，需要权限</p>
<p>session_start(): Failed to read session data: files (path: &#x2F;var&#x2F;lib&#x2F;php&#x2F;session)</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]# chown -R www.www &#x2F;var&#x2F;lib&#x2F;php&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5、将web01上配置好的phpmyadmin以及nginx的配置文件推送到web02主机上</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 code]# scp -rp  phpMyAdmin-4.8.4-all-languages root@172.16.1.8:&#x2F;code&#x2F;
[root@web01 code]# scp &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;php.conf  root@172.16.1.8:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>6、重载Nginx服务，授权访问权限</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web02 code]# systemctl restart nginx
[root@web02 code]# chown -R www.www &#x2F;var&#x2F;lib&#x2F;php&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>7、接入负载均衡，并重启nginx服务，<code>lb01</code>操作</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# vim proxy_php.com.conf 
upstream php &#123;
        server 172.16.1.7:80;
        server 172.16.1.8:80;
&#125;
server &#123;
        listen 80;
        server_name php.oldboy.com;
        location &#x2F; &#123;
                proxy_pass http:&#x2F;&#x2F;php;
                include proxy_params;
        &#125;
&#125;

[root@lb01 conf.d]# nginx -t
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
[root@lb01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9、测试访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">网页访问：
	http:&#x2F;&#x2F;php.oldboy.com
登录账户:
	采用db01（172.16.1.51）的mysql远程账户oldboy&#x2F;Bgx123.com
此时访问phpmyadmin登录将一直失败，因为轮询访问，session一直变：
报错：
Failed to set session cookie. Maybe you are using HTTP instead of HTTPS to access phpMyAdmin.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-2-解决问题"><a href="#4-2-解决问题" class="headerlink" title="4.2 解决问题"></a>4.2 解决问题</h3><p>1、在<code>db01</code>安装redis数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@db01 ~]# yum install redis -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、配置并启动redis</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@db01 ~]# sed  -i &#39;&#x2F;^bind&#x2F;c bind 127.0.0.1 172.16.1.51&#39; &#x2F;etc&#x2F;redis.conf
[root@db01 ~]# systemctl start redis
[root@db01 ~]# systemctl enable redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>3、<code>web01</code>的php配置session连接redis</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.修改&#x2F;etc&#x2F;php.ini文件
[root@web01 ~]# vim &#x2F;etc&#x2F;php.ini
session.save_handler &#x3D; redis
session.save_path &#x3D; &quot;tcp:&#x2F;&#x2F;172.16.1.51:6379&quot;
;session.save_path &#x3D; &quot;tcp:&#x2F;&#x2F;172.16.1.51:6379?auth&#x3D;123&quot; #如果redis存在密码，则使用该方式
session.auto_start &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、注释php-fpm.d&#x2F;<a href="http://www.conf里面的两条内容,否则session内容会一直写入/var/lib/php/session%E7%9B%AE%E5%BD%95%E4%B8%AD">www.conf里面的两条内容，否则session内容会一直写入/var/lib/php/session目录中</a></p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">;php_value[session.save_handler] &#x3D; files
;php_value[session.save_path]    &#x3D; &#x2F;var&#x2F;lib&#x2F;php&#x2F;session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>5、重启php-fpm</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web02 code]# systemctl restart php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6、将<code>web01</code>的配置文件推送到<code>web02</code>上</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">[root@web01 code]# scp &#x2F;etc&#x2F;php.ini root@172.16.1.8:&#x2F;etc&#x2F;php.ini  
[root@web01 code]# scp &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf root@172.16.1.8:&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>7、重启服务</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">[root@web02 code]# systemctl restart php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>8、再次测试访问网站</p>
<p>可以登录，并且session的值将记录到redis数据库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@db01 ~]# redis-cli -h 172.16.1.51
172.16.1.51:6379&gt; KEYS *
1) &quot;PHPREDIS_SESSION:716e61cabeb40f974fcbcdcac65f8607&quot;
2) &quot;PHPREDIS_SESSION:42ca5a8ea9375a93a7974427b77b3dd7&quot;
172.16.1.51:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9、刷新页面的负载均衡效果展示</p>
<p><img src="/img/image-20210823225246243.png" alt="image-20210823225246243"></p>
<p><img src="/img/image-20210823225305632.png" alt="image-20210823225305632"></p>
<p>10、cookie保存到redis展示</p>
<p><img src="/img/image-20210823225412626.png" alt="image-20210823225412626"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(六)七层负载均衡</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/12-Nginx(%E5%85%AD)Nginx%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="一、七层负载均衡简介-需补充"><a href="#一、七层负载均衡简介-需补充" class="headerlink" title="一、七层负载均衡简介(需补充)"></a>一、七层负载均衡简介(需补充)</h2><h3 id="1-1-nginx代理的局限性"><a href="#1-1-nginx代理的局限性" class="headerlink" title="1.1 nginx代理的局限性"></a>1.1 nginx代理的局限性</h3><p>​	一个location仅能代理后端一台主机</p>
<h3 id="1-2-七层负载均衡"><a href="#1-2-七层负载均衡" class="headerlink" title="1.2 七层负载均衡"></a>1.2 七层负载均衡</h3><p>Nginx负载均衡<br>    负载<br>    负载均衡<br>    调度<br>    load balance<br>    LB<br>公有云<br>    SLB		阿里云负载均衡<br>    QLB		青云负载均衡<br>    CLB		腾讯负载均衡<br>    ULB		ucloud的负载均衡</p>
<h3 id="1-3-四层负载均衡和七层负载均衡的区别"><a href="#1-3-四层负载均衡和七层负载均衡的区别" class="headerlink" title="1.3 四层负载均衡和七层负载均衡的区别"></a>1.3 四层负载均衡和七层负载均衡的区别</h3><p>四层负载均衡数据包在底层就进行了分发，而七层负载均衡数据包则是在最顶层进行分发、由此可以看出，七层负载均衡效率没有四负载均衡高。<br>但七层负载均衡更贴近于服务，如:http协议就是七层协议，我们可以用Nginx可以作会话保持，URL路径规则匹配、head头改写等等，这些是四层负载均衡无法实现的。</p>
<h2 id="二、配置实例"><a href="#二、配置实例" class="headerlink" title="二、配置实例"></a>二、配置实例</h2><h3 id="2-1-测试环境准备"><a href="#2-1-测试环境准备" class="headerlink" title="2.1 测试环境准备"></a>2.1 测试环境准备</h3><table>
<thead>
<tr>
<th>主机名称</th>
<th>应用环境</th>
<th>外网地址</th>
<th>内网地址</th>
</tr>
</thead>
<tbody><tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
</tr>
<tr>
<td>web01</td>
<td>nginx + php（提供网页服务）</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
</tr>
<tr>
<td>lb01</td>
<td>nginx（提供代理服务）</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>db01</td>
<td>mysql</td>
<td>10.0.0.51</td>
<td>172.16.1.51</td>
</tr>
</tbody></table>
<h3 id="2-2-配置步骤"><a href="#2-2-配置步骤" class="headerlink" title="2.2 配置步骤"></a>2.2 配置步骤</h3><p>1、web01&#x2F;02的网页服务搭建</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# cd &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;
[root@web01 conf.d]# cat node.conf 
server &#123;
    listen 80;
    server_name node.oldboy.com;
    location &#x2F; &#123;
        root &#x2F;node;
        index index.html;
    &#125;
&#125;
[root@web01 conf.d]# mkdir &#x2F;node
[root@web01 conf.d]# echo &quot;Web01...&quot; &gt; &#x2F;node&#x2F;index.html
[root@web01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、配置nginx负载均衡</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 ~]# cd &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;
[root@lb01 conf.d]# cat node_proxy.conf 
upstream node &#123;
    server 172.16.1.7:80;
    server 172.16.1.8:80;
&#125;
server &#123;
    listen 80;
    server_name node.oldboy.com;

    location &#x2F; &#123;
        proxy_pass http:&#x2F;&#x2F;node;
        include proxy_params;
    &#125;
&#125;
[root@lb01 conf.d]# systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、客户端网页测试访问，F5刷新，可见web01&#x2F;web02在循环</p>
<p><img src="/img/image-20210820132420586.png" alt="image-20210820132420586"></p>
<p><img src="/img/image-20210820132431971.png" alt="image-20210820132431971"></p>
<h3 id="2-3-负载均衡也可以使用代理参数"><a href="#2-3-负载均衡也可以使用代理参数" class="headerlink" title="2.3 负载均衡也可以使用代理参数"></a>2.3 负载均衡也可以使用代理参数</h3><blockquote>
<p>与之前部署的知乎wencenter、博客mywordpress结合</p>
</blockquote>
<p>1、准备Nginx负载均衡调度使用的proxy_params</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@Nginx ~]# vim &#x2F;etc&#x2F;nginx&#x2F;proxy_params
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

proxy_connect_timeout 30;
proxy_send_timeout 60;
proxy_read_timeout 60;

proxy_buffering on;
proxy_buffer_size 32k;
proxy_buffers 4 128k;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、负载均衡配置：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# vim proxy_oldboy.com.conf
upstream node &#123;
        server 172.16.1.7:80;
        server 172.16.1.8:80;
&#125;
server &#123;
        listen 80;
        server_name blog.oldboy.com;
        location &#x2F; &#123;
                proxy_pass http:&#x2F;&#x2F;node;
                include proxy_params;
        &#125;
&#125;

server &#123;
        listen 80;
        server_name zh.oldboy.com;
        location &#x2F; &#123;
                proxy_pass http:&#x2F;&#x2F;node;
                include proxy_params;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4-负载均衡测试"><a href="#2-4-负载均衡测试" class="headerlink" title="2.4 负载均衡测试"></a>2.4 负载均衡测试</h3><p>正常情况下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、两台web服务器的nginx服务均打开（模拟流量分摊）
	可以负载均衡，轮流访问
2、关掉一台web服务器的nginx服务（模拟容灾）
	网页仍可以正常打开
3、两台web服务器的Nginx服务均关闭
	网页无法打开，502<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>存在一种情况，两个web的nginx服务都没挂，但是其中一台的php-fpm服务挂了，模拟这种场景</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web02 ~]# systemctl stop php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此时F5刷新wordpress的页面，将一会502，一会正常，体验不好，可通过添加nginx代理参数解决</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 conf.d]# cat &#x2F;etc&#x2F;nginx&#x2F;proxy_params
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_next_upstream error timeout http_500 http_502 http_503 http_504; # 解决问题

proxy_connect_timeout 30;
proxy_send_timeout 60;
proxy_read_timeout 60;

proxy_buffering on;
proxy_buffer_size 32k;
proxy_buffers 4 128k;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS：问题原因</p>
<p>使用nginx负载均衡时，如何将后端请求超时的服务器流量平滑的切换到另一台上。<br>Nginx是本身是有机制的，如果出现一个节点down掉的时候，Nginx会更据你具体负载均衡的设置，将请求转移到其他的节点上，但是，如果后台服务连接没有down掉，并且返回错误异常码了如：504、502、500，Nginx就会直接返回从后端获取的异常代码。</p>
</blockquote>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(八)四层负载均衡</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/14-Nginx(%E5%85%AB)Nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="一、Nginx四层负载均衡介绍"><a href="#一、Nginx四层负载均衡介绍" class="headerlink" title="一、Nginx四层负载均衡介绍"></a>一、Nginx四层负载均衡介绍</h2><p>四层负载均衡：（OSI传输层   ip:port）<br>    nginx1.9 版本加入<br>硬件：F5<br>软件：LVS、Haproxy、Nginx</p>
<p>1.四层+七层来作负载均衡，4层可以保证7层的负载均衡的高可用性。如:nginx就无法保证自己的服务高可用，需要依赖lvs或者keepalive来作。</p>
<p>2.如:tcp协议的负载均衡，有些请求是TCP协议的(mysql、ssh)，或者说这些请求只需要使用4层进行端口的转发就可以了，所以使用4层负载均衡。<br>    比如做：mysql读的负载均衡（轮询）<br>    比如做：端口映射、端口转发         tcp&#x2F;udp</p>
<p>四层负载均衡总结<br>1.四层负载均衡仅能转发TCP&#x2F;IP协议、UDP协议，通常用来转发端口，如: tcp&#x2F;3306，tcp&#x2F;22，udp&#x2F;53。<br>2.四层负载均衡可以用来解决七层负载均衡的端口限制问题。（七层负载均衡最大使用65535个端口号）<br>3.可以用来解决七层负载均衡的高可用问题。（多台后端七层负载均衡能同时的使用）<br>4.四层的转发效率比七层的高的多，但仅支持tcp&#x2F;ip协议，不支持http或者https协议</p>
<p><img src="/img/image-20210823230415237.png" alt="image-20210823230415237"></p>
<h2 id="二、四层负载均衡配置"><a href="#二、四层负载均衡配置" class="headerlink" title="二、四层负载均衡配置"></a>二、四层负载均衡配置</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><table>
<thead>
<tr>
<th>服务器名</th>
<th>公网IP</th>
<th>内网IP</th>
</tr>
</thead>
<tbody><tr>
<td>lb4-01</td>
<td>10.0.0.3</td>
<td></td>
</tr>
<tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
</tr>
<tr>
<td>lb02</td>
<td>10.0.0.6</td>
<td>172.16.1.6</td>
</tr>
<tr>
<td>web、nfs、mysql服务器若干</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="2-2-新增lb02负载均衡服务器"><a href="#2-2-新增lb02负载均衡服务器" class="headerlink" title="2.2 新增lb02负载均衡服务器"></a>2.2 新增lb02负载均衡服务器</h3><p>1、准备<code>lb02</code>，安装Nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb02 ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo 
[nginx]
name&#x3D;nginx repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;
gpgcheck&#x3D;0
enabled&#x3D;1
[root@lb02 ~]#  yum install nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、拷贝<code>lb01</code>的 Nginx配置到<code>lb02</code></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb02 ~]# scp -rp root@172.16.1.5:&#x2F;etc&#x2F;nginx &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、启动Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb02 conf.d]# nginx -t
[root@lb02 conf.d]# systemctl start nginx
[root@lb02 conf.d]# systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>报错：</p>
<p>[root@lb02 ~]# nginx -t<br>nginx: [emerg] unknown directive “check” in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf:4<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed<br>[root@lb02 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf<br>[root@lb02 ~]# nginx -t<br>nginx: [emerg] unknown directive “check_status” in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_node.conf:17<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed</p>
<p>解决方法：</p>
<p>因为lb01安装过第三方健康检查工具，而lb02上没有，先将这些报错点注释掉</p>
</blockquote>
<p>4、测试lb02是否正常</p>
<p>将hosts中的10.0.0.5换成10.0.0.6，phpadmin、wordpress网页可以正常访问,<br>但是wecenter异常502 Bad Gateway<br>解决方法: 将web01、02上的的php.ini中的session.auto_start改为0,不然会502</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 php]# vim &#x2F;etc&#x2F;php.ini
session.auto_start &#x3D; 0
[root@web01 php]# systemctl restart php-fpm.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>网上搜索的解释：<br>日常开发中，php.ini配置session.auto_start&#x3D;0默认关闭会话时如果想开启会话需要调用session_start：<br>session.auto_start 开启就自动完成了session_start()<br>区别就在于在用SESSION前是否需要session_start();<br>当session.auto_start &#x3D; on时，执行 session_start() 将产生新的 session_id<br>session.auto_start &#x3D; on 的优点在于，任何时候都不会因忘记执行 session_start() 或 session_start() 在程序里的位置不对，而导致错误<br>缺点在于，如果你使用的是第三方代码，则必须删去其中的全部 session_start() 。否则将不能得到正确的结果</p>
</blockquote>
<h3 id="2-3-配置四层负载均衡"><a href="#2-3-配置四层负载均衡" class="headerlink" title="2.3 配置四层负载均衡"></a>2.3 配置四层负载均衡</h3><p>1、新增<code>lb4-01</code>服务器，安装nginx</p>
<blockquote>
<p>nginx需要带–with-stream模块</p>
</blockquote>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">[root@lb4-01 ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo 
[nginx]
name&#x3D;nginx repo
baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;
gpgcheck&#x3D;0
enabled&#x3D;1
[root@lb4-01 ~]#  yum install nginx -y	
[root@lb4-01 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
events &#123;
    ....
&#125;

include &#x2F;etc&#x2F;nginx&#x2F;conf.c&#x2F;*.conf;

http &#123;
	.....
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、创建四层负载均衡配置的目录</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb4-01 conf.c]# rm -f &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf   #删除http的80端口
[root@lb4-01 ~]# mkdir &#x2F;etc&#x2F;nginx&#x2F;conf.c
[root@lb4-01 ~]# cd &#x2F;etc&#x2F;nginx&#x2F;conf.c
[root@lb4-01 conf.c]# cat lb_domain.conf 
stream &#123;
    upstream lb &#123;
        server 172.16.1.5:80 weight&#x3D;5 max_fails&#x3D;3 fail_timeout&#x3D;30s;
        server 172.16.1.6:80 weight&#x3D;5 max_fails&#x3D;3 fail_timeout&#x3D;30s;
    &#125;

    server &#123;
        listen 80;
        proxy_connect_timeout 3s;
        proxy_timeout 3s;
        proxy_pass lb;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、重载服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb4-01 conf.c]# nginx -t
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
[root@lb4-01 conf.c]# systemctl restart nginx
[root@lb4-01 conf.c]# systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>报错：<br>[root@lb4-01 nginx]# nginx  -t<br>nginx: [emerg] unknown directive “stream” in &#x2F;etc&#x2F;nginx&#x2F;conf.c&#x2F;lb_domain.conf:1<br>nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed<br>解决方法：<br>yum install nginx-mod-stream.x86_64 -y</p>
</blockquote>
<blockquote>
<p>报错：<br>[root@lb4-01 nginx]# systemctl status nginx<br>nginx.service - The nginx HTTP and reverse proxy server<br>Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service; enabled; vendor preset: disabled)<br>Active: failed (Result: exit-code) since Tue 2021-08-24 07:48:42 CST; 13s ago<br>Process: 2969 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx (code&#x3D;exited, status&#x3D;1&#x2F;FAILURE)<br>Process: 2967 ExecStartPre&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -t (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br>Process: 2965 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;rm -f &#x2F;run&#x2F;nginx.pid (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br>Main PID: 1959 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</p>
<p>Aug 24 07:48:40 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:40 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:41 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:41 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:42 lb4-01 nginx[2969]: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>Aug 24 07:48:42 lb4-01 nginx[2969]: nginx: [emerg] still could not bind()<br>解决方法：<br>需要将[root@lb4-01 nginx]# vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br>中默认的80端口改掉，比如改成81,这样才不冲突（奇怪。。）</p>
</blockquote>
<p>4、访问测试</p>
<p>将Hosts中的对应网站地址的IP改成10.0.0.3，尝试访问，可以正常通过四层负载均衡来调度10.0.0.5和10.0.0.6七层负载均衡</p>
<p><img src="/img/image-20210824001613717.png" alt="image-20210824001613717"></p>
<p><img src="/img/image-20210824001638506.png" alt="image-20210824001638506"></p>
<h2 id="三、四层负载均衡日志"><a href="#三、四层负载均衡日志" class="headerlink" title="三、四层负载均衡日志"></a>三、四层负载均衡日志</h2><h3 id="3-1-配置过程"><a href="#3-1-配置过程" class="headerlink" title="3.1 配置过程"></a>3.1 配置过程</h3><p>在四层负载均衡中配置Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb4-01 ~]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.c&#x2F;lb_domain.conf
stream &#123;
    log_format  proxy &#39;$remote_addr $remote_port - [$time_local] $status $protocol &#39;
                  &#39;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#39; ;
    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;proxy.log proxy;

    upstream lb &#123;
....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-查看日志"><a href="#3-2-查看日志" class="headerlink" title="3.2 查看日志"></a>3.2 查看日志</h3><p>网页访问后，可见产生的日志</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb4-01 ~]# tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;proxy.log
10.0.0.1 56396 - [25&#x2F;Aug&#x2F;2021:19:25:33 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;15150&quot; &quot;0.000&quot;
10.0.0.1 59800 - [25&#x2F;Aug&#x2F;2021:19:25:34 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;8327&quot; &quot;0.000&quot;
10.0.0.1 63468 - [25&#x2F;Aug&#x2F;2021:19:25:34 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;17882&quot; &quot;0.000&quot;
10.0.0.1 50394 - [25&#x2F;Aug&#x2F;2021:19:25:35 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;24490&quot; &quot;0.000&quot;
10.0.0.1 55549 - [25&#x2F;Aug&#x2F;2021:19:25:35 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;13201&quot; &quot;0.000&quot;
10.0.0.1 64324 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;70995&quot; &quot;0.000&quot;
10.0.0.1 64566 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;72650&quot; &quot;0.000&quot;
10.0.0.1 65216 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;68171&quot; &quot;0.000&quot;
10.0.0.1 49668 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;82071&quot; &quot;0.004&quot;
10.0.0.1 49745 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.5:80&quot; &quot;63941&quot; &quot;0.001&quot;
10.0.0.1 50574 - [25&#x2F;Aug&#x2F;2021:19:25:42 +0800] 200 TCP &quot;172.16.1.6:80&quot; &quot;103581&quot; &quot;0.000&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、使用nginx四层负载均衡实现tcp的转发（跳板）"><a href="#三、使用nginx四层负载均衡实现tcp的转发（跳板）" class="headerlink" title="三、使用nginx四层负载均衡实现tcp的转发（跳板）"></a>三、使用nginx四层负载均衡实现tcp的转发（跳板）</h2><p>实现跳板机的功能，比如：</p>
<pre><code>请求负载均衡 5555    ---&gt;     172.16.1.7:22;
请求负载均衡 6666    ---&gt;     172.16.1.51:3306;
</code></pre>
<h3 id="3-1-配置过程-1"><a href="#3-1-配置过程-1" class="headerlink" title="3.1 配置过程"></a>3.1 配置过程</h3><p>配置Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb4-01 ~]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.c&#x2F;lb_domain.conf 
stream &#123;
log_format  proxy &#39;$remote_addr $remote_port - [$time_local] $status $protocol &#39;
                  &#39;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#39; ;
    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;proxy.log proxy;

#定义转发ssh的22端口
	upstream ssh_7 &#123;
		server 10.0.0.7:22;
	&#125;
#定义转发mysql的3306端口
	upstream mysql_51 &#123;
		server 10.0.0.51:3306;
	&#125;
    server &#123;
        listen 5555;
        proxy_connect_timeout 3s;
        proxy_timeout 300s;
        proxy_pass ssh_7;
    &#125;

    server &#123;
        listen 6666;
        proxy_connect_timeout 3s;
        proxy_timeout 3s;
        proxy_pass mysql_51;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 连接web01
ssh root@10.0.0.3 -p 5555

# 连接db01
ssh root@10.0.0.3 -p 6666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>









]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>运维之综合架构--07--Nginx(九)动静分离</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/02-%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84/15-Nginx(%E4%B9%9D)%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E5%92%8Crewrite/</url>
    <content><![CDATA[<h2 id="一、动静分离介绍"><a href="#一、动静分离介绍" class="headerlink" title="一、动静分离介绍"></a>一、动静分离介绍</h2><p>动静分离，通过中间件将动静分离和静态请求进⾏分离；<br>通过中间件将动态请求和静态请求分离，可以建上不必要的请求消耗，同时能减少请求的延时。<br>通过中间件将动态请求和静态请求分离，逻辑图如下:  </p>
<h2 id="二、单台服务器动静分离配置"><a href="#二、单台服务器动静分离配置" class="headerlink" title="二、单台服务器动静分离配置"></a>二、单台服务器动静分离配置</h2><p>逻辑图如下：</p>
<p><img src="/img/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="单台服务器动静分离"></p>
<p>编辑Nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 conf.d]vim blog.conf
server &#123;
    listen 80;
    server_name blog.linux.com;
    location &#x2F; &#123;
    root &#x2F;code&#x2F;wordpress;
    index index.php;
&#125;

# 如果请求的是以.jpg结尾的静态⽂件 就去&#x2F;code&#x2F;images⽬录下访问
location ~* \.jpg$ &#123;
    root &#x2F;code&#x2F;images;
    &#125;
    location ~* \.php$ &#123;
    root &#x2F;code&#x2F;wordpress;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
    &#125;
&#125; 

# 创建⽬录
[root@web01 conf.d]# mkdir &#x2F;code&#x2F;images&#x2F;

# 实现动静分离
⽅式⼀：把⽂件挪到&#x2F;code&#x2F;images&#x2F;
cp -r &#x2F;code&#x2F;wordpress&#x2F;wp-content &#x2F;code&#x2F;images&#x2F;

⽅式⼆：做软连接
cd &#x2F;code
ln -s wordpress images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、多台服务器动静分离配置"><a href="#三、多台服务器动静分离配置" class="headerlink" title="三、多台服务器动静分离配置"></a>三、多台服务器动静分离配置</h2><p>参考：<a href="https://www.cnblogs.com/backups/p/nginx10.html">https://www.cnblogs.com/backups/p/nginx10.html</a></p>
<h3 id="3-1-原理图"><a href="#3-1-原理图" class="headerlink" title="3.1 原理图"></a>3.1 原理图</h3><p><img src="/img/%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="多台服务器动静分离"></p>
<h3 id="3-2-实验环境准备"><a href="#3-2-实验环境准备" class="headerlink" title="3.2 实验环境准备"></a>3.2 实验环境准备</h3><table>
<thead>
<tr>
<th>主机</th>
<th>外网</th>
<th>内网</th>
<th>作用服务</th>
</tr>
</thead>
<tbody><tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
<td>负载均衡 nginx proxy</td>
</tr>
<tr>
<td>web01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
<td>静态资源 nginx static</td>
</tr>
<tr>
<td>web02</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
<td>动态资源 tomcat server</td>
</tr>
</tbody></table>
<h3 id="3-3-配置web01提供静态资源"><a href="#3-3-配置web01提供静态资源" class="headerlink" title="3.3 配置web01提供静态资源"></a>3.3 配置web01提供静态资源</h3><p>1、配置Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 images]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;jt.conf
# 动静分离，web01提供静态文件服务
server &#123;
        listen 80;
        server_name dongjing.gs.com;
        
        # 提供临时测试的域名
        root &#x2F;code&#x2F;dongjing;
        index index.html;

        location ~* ^.*\.(jpg|png|gif)$ &#123;
                root &#x2F;code&#x2F;dongjing&#x2F;images;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、上传静态资源，测试访问静态页面</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web01 ~]# echo &quot;web01...jingtai&quot; &gt; &#x2F;code&#x2F;index.html
[root@web01 ~]# mkdir &#x2F;code&#x2F;dongjing&#x2F;images&#x2F; &amp;&amp; cd &#x2F;code&#x2F;dongjing&#x2F;images&#x2F;
[root@web01 images]# rz 1.jpg
[root@web01 images]# nginx -t
nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok
nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful
[root@web01 images]# systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>在客户端配置hosts，10.0.0.7 dongjing.gs.com</code></p>
<p>打开浏览器访问<a href="http://dongjing.gs.com/">http://dongjing.gs.com</a></p>
<p><img src="/img/image-20210825141423629.png" alt="image-20210825141423629"></p>
<p>打开浏览器访问<a href="http://dongjing.gs.com/1.png">http://dongjing.gs.com/1.png</a></p>
<p><img src="/img/image-20210825142256349.png" alt="image-20210825142256349"></p>
<h3 id="3-4-配置web02提供动态资源（tomcat-java模拟"><a href="#3-4-配置web02提供动态资源（tomcat-java模拟" class="headerlink" title="3.4 配置web02提供动态资源（tomcat + java模拟)"></a>3.4 配置web02提供动态资源（tomcat + java模拟)</h3><p>1、安装Tomcat并添加jsp文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@web02 ~]# yum install -y tomcat
[root@web02 ~]# mkdir &#x2F;usr&#x2F;share&#x2F;tomcat&#x2F;webapps&#x2F;ROOT
[root@web02 ~]# cat &gt;&#x2F;usr&#x2F;share&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;java_test.jsp &lt;&lt;EOF
&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;utf-8&quot;%&gt;
&lt;HTML&gt;
    &lt;HEAD&gt;
        &lt;TITLE&gt;oldboy JSP Page&lt;&#x2F;TITLE&gt;
    &lt;&#x2F;HEAD&gt;
    &lt;BODY&gt;
        &lt;%
            Random rand &#x3D; new Random();
            out.println(&quot;&lt;h1&gt;随机数:&lt;h1&gt;&quot;);
            out.println(rand.nextInt(99)+100);
        %&gt;
    &lt;&#x2F;BODY&gt;
&lt;&#x2F;HTML&gt;
EOF
[root@web02 ~]# systemctl start tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、测试访问</p>
<p>访问<a href="http://10.0.0.8:8080/java_test.jsp">http://10.0.0.8:8080/java_test.jsp</a></p>
<p><img src="/img/image-20210825162829977.png" alt="image-20210825162829977"></p>
<h3 id="3-4-增加负载均衡，实现动静分离"><a href="#3-4-增加负载均衡，实现动静分离" class="headerlink" title="3.4 增加负载均衡，实现动静分离"></a>3.4 增加负载均衡，实现动静分离</h3><p>1、配置Nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 dongtai]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_dj.conf
upstream jt &#123;
        server 172.16.1.7:80;
&#125;

upstream dt &#123;
        server 172.16.1.8:8080;
&#125;

server &#123;
        listen 80;
        server_name dongjing.gs.com;

        location ~* ^.*\.(jpg|png|gif)$ &#123;
                proxy_pass http:&#x2F;&#x2F;jt;
                proxy_set_header HOST $http_host;
        &#125;

        location ~ \.jsp$ &#123;
                proxy_pass http:&#x2F;&#x2F;dt;
                proxy_set_header HOST $http_host;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、测试访问</p>
<p><code>客户端配置hosts，10.0.0.3 dongjing.gs.com</code></p>
<p>在浏览器访问</p>
<p><a href="http://dongjing.gs.com/1.png">http://dongjing.gs.com/1.png</a></p>
<p><a href="http://10.0.0.8:8080/java_test.jsp">http://10.0.0.8:8080/java_test.jsp</a></p>
<p>的效果是一样的，但是访问<a href="http://dongjing.gs.com显示的是nginx默认的主页,因为lb01中暂时没有对应文件夹的index.html/">http://dongjing.gs.com显示的是Nginx默认的主页，因为lb01中暂时没有对应文件夹的index.html</a></p>
<h3 id="3-5-在负载均衡上创建同时调用动态和静态资源的index-html"><a href="#3-5-在负载均衡上创建同时调用动态和静态资源的index-html" class="headerlink" title="3.5 在负载均衡上创建同时调用动态和静态资源的index.html"></a>3.5 在负载均衡上创建同时调用动态和静态资源的index.html</h3><p>1、修改Nginx配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 dongtai]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;proxy_dj.conf
upstream jt &#123;
        server 172.16.1.7:80;
&#125;

upstream dt &#123;
        server 172.16.1.8:8080;
&#125;

server &#123;
        listen 80;
        server_name dongjing.gs.com;
		
		# 新增
        location &#x2F; &#123;
                root &#x2F;code&#x2F;dongjing;
                index index.html;
        &#125;

        location ~* ^.*\.(jpg|png|gif)$ &#123;
                proxy_pass http:&#x2F;&#x2F;jt;
                proxy_set_header HOST $http_host;
        &#125;

        location ~ \.jsp$ &#123;
                proxy_pass http:&#x2F;&#x2F;dt;
                proxy_set_header HOST $http_host;
        &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、创建对应的目录和页面</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@lb01 &#x2F;]# mkdir &#x2F;code&#x2F;dongjing
[root@lb01 &#x2F;]# cat &#x2F;code&#x2F;dongjing&#x2F;index.html
&lt;html lang&#x3D;&quot;en&quot;&gt;
&lt;head&gt;
        &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;
        &lt;title&gt;测试ajax和跨域访问&lt;&#x2F;title&gt;
        &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;libs.baidu.com&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;
&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;
$(document).ready(function()&#123;
        $.ajax(&#123;
        type: &quot;GET&quot;,
        url: &quot;http:&#x2F;&#x2F;dongjing.gs.com&#x2F;java_test.jsp&quot;,
        success: function(data)&#123;
                $(&quot;#get_data&quot;).html(data)
        &#125;,
        error: function() &#123;
                alert(&quot;哎呦喂,失败了,回去检查你服务去~&quot;);
        &#125;
        &#125;);
&#125;);
&lt;&#x2F;script&gt;
&lt;body&gt;
        &lt;h1&gt;测试动静分离&lt;&#x2F;h1&gt;
        &lt;div id&#x3D;&quot;get_data&quot;&gt;&lt;&#x2F;div&gt;
        &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;dongjing.gs.com&#x2F;1.png&quot;&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、测试访问</p>
<p>浏览器访问：<a href="http://dongjing.gs.com/">http://dongjing.gs.com</a></p>
<p><img src="/img/image-20210825143746986.png" alt="image-20210825143746986"></p>
<p>正常负载均衡的现象：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">关掉web02的Tomcat服务，web01服务正常

​	http:&#x2F;&#x2F;dongjing.gs.com可以正常打开，图片正常显示，随机数将显示异常

web02的Tomcat服务正常，关掉web01的nginx服务

​	http:&#x2F;&#x2F;dongjing.gs.com可以正常打开，图片显示异常，随机正常显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、综合案例-Nginx资源分离"><a href="#四、综合案例-Nginx资源分离" class="headerlink" title="四、综合案例-Nginx资源分离"></a>四、综合案例-Nginx资源分离</h2><h3 id="4-1-什么是资源分离？"><a href="#4-1-什么是资源分离？" class="headerlink" title="4.1 什么是资源分离？"></a>4.1 什么是资源分离？</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">根据浏览器Agent标识可以访问到不同的页面资源：
比如：
    Android访问到的是Android的页面
    PC访问到的是PC的页面
    iphone访问放到的是iphone的页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-2-实验环境准备"><a href="#4-2-实验环境准备" class="headerlink" title="4.2 实验环境准备"></a>4.2 实验环境准备</h3><table>
<thead>
<tr>
<th>主机</th>
<th>外网</th>
<th>内网</th>
<th>作用服务</th>
</tr>
</thead>
<tbody><tr>
<td>lb01</td>
<td>10.0.0.5</td>
<td>172.16.1.5</td>
<td>负载均衡 nginx proxy</td>
</tr>
<tr>
<td>web01</td>
<td>10.0.0.7</td>
<td>172.16.1.7</td>
<td>提供Android手机页面</td>
</tr>
<tr>
<td>web02</td>
<td>10.0.0.8</td>
<td>172.16.1.8</td>
<td>提供PC访问页面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>运维</category>
        <category>（二）综合架构</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(一)-安装Docker</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h2 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h2><blockquote>
<p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁，隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
</blockquote>
<h3 id="1-容器和虚拟化的区别"><a href="#1-容器和虚拟化的区别" class="headerlink" title="1 容器和虚拟化的区别"></a>1 容器和虚拟化的区别</h3><ul>
<li><p>KVM虚拟化：</p>
<ul>
<li><p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr&#x2F;gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：&#x2F;sbin&#x2F;init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
</li>
</ul>
</li>
<li><p>容器：</p>
<ul>
<li><p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-容器的优缺点"><a href="#2-容器的优缺点" class="headerlink" title="2 容器的优缺点"></a>2 容器的优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li><p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>使用同一内核，存在安全性问题</li>
</ul>
</li>
</ul>
<h3 id="3-容器技术的发展过程"><a href="#3-容器技术的发展过程" class="headerlink" title="3 容器技术的发展过程"></a>3 容器技术的发展过程</h3><blockquote>
<p>chroot — lxc —- docker</p>
</blockquote>
<h3 id="4-Docker组成"><a href="#4-Docker组成" class="headerlink" title="4 Docker组成"></a>4 Docker组成</h3><p>​	Docker基于Go语言开发，C&#x2F;S模式</p>
<ul>
<li>主要组件<ul>
<li>镜像</li>
<li>容器</li>
<li>仓库：最大的dockerhub</li>
<li>网络</li>
<li>存储</li>
</ul>
</li>
</ul>
<h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><blockquote>
<p>参考网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a></p>
</blockquote>
<h3 id="1-联网在线安装"><a href="#1-联网在线安装" class="headerlink" title="1 联网在线安装"></a>1 联网在线安装</h3><p>开启rpm包缓存，方便制作离线安装包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;yum.conf
keepcache&#x3D;1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你之前安装过 docker，请先删掉</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装一些依赖</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根据你的发行版下载repo文件（Centos）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把软件仓库替换为TUNA：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo sed -i &#39;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后安装:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum makecache fast
    sudo yum install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-无网环境下离线安装"><a href="#2-无网环境下离线安装" class="headerlink" title="2 无网环境下离线安装"></a>2 无网环境下离线安装</h3><p>搜集联网环境下下载的rpm包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find &#x2F;var&#x2F;cache&#x2F;yum&#x2F;x86_64&#x2F;7&#x2F; -name &quot;*.rpm&quot; | xargs -i mv &#123;&#125; docker_rpm&#x2F;
tar -zvcf docker_rpm.tgz docker_rpm&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>拷贝到无网环境的服务器中安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -vxf docker_rpm.tgz # 解压
cd docker_rpm	
rpm -Uvh .&#x2F;*.rpm # 安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-启动服务并验证安装是否成功"><a href="#3-启动服务并验证安装是否成功" class="headerlink" title="3 启动服务并验证安装是否成功"></a>3 启动服务并验证安装是否成功</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动服务
systemctl enable docker
systemctl start docker

# 验证是否安装成功
docker version
docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-Docker镜像下载加速"><a href="#4-Docker镜像下载加速" class="headerlink" title="4 Docker镜像下载加速"></a>4 Docker镜像下载加速</h3><ul>
<li>阿里云docker镜像加速器服务</li>
<li>配置docker镜像加速(推荐)</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建文件
vi &#x2F;etc&#x2F;docker&#x2F;daemon.json
&#123;    
	&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]
&#125; 
# 重新加载
systemctl daemon-reload
systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-创建并运行一个nginx容器"><a href="#5-创建并运行一个nginx容器" class="headerlink" title="5 创建并运行一个nginx容器"></a>5 创建并运行一个nginx容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(七)-Docker镜像分层与同主机中容器互连</title>
    <url>/2021/07/05/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%83-Docker%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82%E4%B8%8E%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%AD%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker镜像分层"><a href="#一、Docker镜像分层" class="headerlink" title="一、Docker镜像分层"></a>一、Docker镜像分层</h2><blockquote>
<p>镜像分层的好处：</p>
<p>​	复用、节省磁盘空间，相同的内容只需加载一份到内存</p>
<p>​	修改dockerfile后，重新构建时可以用缓存，速度快</p>
</blockquote>
<h3 id="1-查看docker镜像分层"><a href="#1-查看docker镜像分层" class="headerlink" title="1 查看docker镜像分层"></a>1 查看docker镜像分层</h3><p>通过导入镜像可以查看到镜像分层</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load -i [镜像文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过查看镜像历史可以查看到分层</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 ~]# docker image history centos6.9_ssh:v2
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
57761235f898   2 days ago    &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot; &quot;-D…   0B
c0a2c21457c4   2 days ago    &#x2F;bin&#x2F;sh -c echo &#39;123456&#39; | passwd --stdin ro…   537B
29d10ff8b8e0   2 days ago    &#x2F;bin&#x2F;sh -c service sshd restart                 4.91kB
666b9ddfff15   2 days ago    &#x2F;bin&#x2F;sh -c yum install openssh-server -y        154MB
5b00553af9fc   2 days ago    &#x2F;bin&#x2F;sh -c #(nop) ADD file:65a30e1b327fec80b…   1.18kB
2199b8eb8390   2 years ago   &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;bash&quot;]            0B
&lt;missing&gt;      2 years ago   &#x2F;bin&#x2F;sh -c #(nop)  LABEL name&#x3D;CentOS Base Im…   0B
&lt;missing&gt;      2 years ago   &#x2F;bin&#x2F;sh -c #(nop) ADD file:0e6d175401c5b4260…   195MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有的这些层都会在<code>Docker</code>主机本地存储区域内存储，可以通过以下指令来列出：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-通过Dockerfile优化分层信息"><a href="#2-通过Dockerfile优化分层信息" class="headerlink" title="2  通过Dockerfile优化分层信息"></a>2  通过Dockerfile优化分层信息</h3><ul>
<li>尽量合并RUN和ADD来减少镜像分层数</li>
<li>新加的Dockerfile语句加到最后，不要加到前面</li>
</ul>
<h2 id="二、同主机中容器互连（–link是单向的）"><a href="#二、同主机中容器互连（–link是单向的）" class="headerlink" title="二、同主机中容器互连（–link是单向的）"></a>二、同主机中容器互连（–link是单向的）</h2><blockquote>
<p>docker官方已不推荐使用docker run –link来链接2个容器互相通信，随后的版本中会删除–link</p>
</blockquote>
<h3 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1 功能介绍"></a>1 功能介绍</h3><p>docker run –link可以用来链接2个容器，使得源容器（被链接的容器）和接受容器（主动去链接的容器）之间可以互相通信，并且接收容器可以获取源容器的一些数据，如源容器的环境变量。使用案例如下：</p>
<p>源容器启动：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name src_docker nginx 
容器ID:xxxx01, IP:172.16.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接受容器连接：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name dest_docker --link src_docker:web centos7.9:v2
容器ID:xxxx02, IP:172.16.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>进入接受容器测试，不需要ping IP，直接ping别名就可以，web和src_docker都指向172.16.0.2<font color=red>（单向）</font></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it xxxx01 &#x2F;bin&#x2F;bash
ping web
ping src_docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>接受容器的&#x2F;etc&#x2F;hosts将更新</p>
</blockquote>
<h3 id="2-案例：构建zabbix-server"><a href="#2-案例：构建zabbix-server" class="headerlink" title="2 案例：构建zabbix-server"></a>2 案例：构建zabbix-server</h3><p>启动一个mysql的容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name mysql-server -t \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      -d mysql:5.7 \
      --character-set-server&#x3D;utf8 --collation-server&#x3D;utf8_bin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动java-gateway容器监控java服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name zabbix-java-gateway -t \
      -d zabbix&#x2F;zabbix-java-gateway:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>启动zabbix-mysql容器使用link连接mysql与java-gateway</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name zabbix-server-mysql -t \
      -e DB_SERVER_HOST&#x3D;&quot;mysql-server&quot; \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      -e ZBX_JAVAGATEWAY&#x3D;&quot;zabbix-java-gateway&quot; \
      --link mysql-server:mysql \
      --link zabbix-java-gateway:zabbix-java-gateway \
      -p 10051:10051 \
      -d zabbix&#x2F;zabbix-server-mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动zabbix web显示，使用link连接zabbix-mysql与mysql</p>
<blockquote>
<p>zabbix的默认端口已有80改为8080，可见配置文件&#x2F;etc&#x2F;zabbix&#x2F;nginx.conf</p>
</blockquote>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">docker run --name zabbix-web-nginx-mysql -t \
      -e DB_SERVER_HOST&#x3D;&quot;mysql-server&quot; \
      -e MYSQL_DATABASE&#x3D;&quot;zabbix&quot; \
      -e MYSQL_USER&#x3D;&quot;zabbix&quot; \
      -e MYSQL_PASSWORD&#x3D;&quot;zabbix_pwd&quot; \
      -e MYSQL_ROOT_PASSWORD&#x3D;&quot;root_pwd&quot; \
      --link mysql-server:mysql \
      --link zabbix-server-mysql:zabbix-server \
      -p 8082:8080 \     
      -d zabbix&#x2F;zabbix-web-nginx-mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>登录Zabbix</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">浏览器访问：10.0.0.11:8082
Admin
zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加被监控节点-安装zabbix-agent</p>
<blockquote>
<p>获取zabbix-agent：</p>
<p>uname -a 查看内核版本</p>
<p>web页面查看zabbix版本</p>
<p><a href="https://www.zabbix.com/download">https://www.zabbix.com/download</a> 获取对应agent的安装方法</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -Uvh https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.4-1.el7.noarch.rpm
yum clean all
yum install zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>添加被监控节点-agent配置文件修改</p>
<blockquote>
<p>117行：Server&#x3D;10.0.0.11, 注意防火墙和selinux的阻挡</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf
systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="三、docker重启后容器不退出"><a href="#三、docker重启后容器不退出" class="headerlink" title="三、docker重启后容器不退出"></a>三、docker重启后容器不退出</h2><blockquote>
<p>默认情况下，systemctl restart docker之后，容器将处于Exited状态</p>
</blockquote>
<h3 id="1-添加容器启动参数"><a href="#1-添加容器启动参数" class="headerlink" title="1 添加容器启动参数"></a>1 添加容器启动参数</h3><blockquote>
<p>docker重启后，容器先停止，再立即重新启动</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --restart&#x3D;always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-daemon配置文件修改（不推荐）"><a href="#2-daemon配置文件修改（不推荐）" class="headerlink" title="2 daemon配置文件修改（不推荐）"></a>2 daemon配置文件修改（不推荐）</h3><blockquote>
<p>docker重启后，容器不会停止，一直在运行，不推荐使用，不好控制</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json
# 添加一行，上行后面加逗号
&quot;live-restore&quot;:true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>





<p>​	</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(三)-容器的网络访问</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B8%89-%E5%AE%B9%E5%99%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="一、容器的网络访问流程"><a href="#一、容器的网络访问流程" class="headerlink" title="一、容器的网络访问流程"></a>一、容器的网络访问流程</h2><blockquote>
<p>参考：<a href="https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02">https://z.itpub.net/article/detail/FE8EBAC62D5881E3A432291F8C8E4F02</a></p>
</blockquote>
<h3 id="1-虚拟机注意事项"><a href="#1-虚拟机注意事项" class="headerlink" title="1 虚拟机注意事项"></a>1 虚拟机注意事项</h3><p>查看net.ipv4.ip_forward值是否为1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sysctl -a | grep ipv4 | grep forward <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只有值为1时docker容器才能上网，而vmware虚拟机挂起将使他变成0，解决方法：</p>
<ul>
<li>sysctl net.ipv4.ip_forward &#x3D; 1 设置为1</li>
<li>不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</li>
</ul>
<h2 id="二、容器端口映射"><a href="#二、容器端口映射" class="headerlink" title="二、容器端口映射"></a>二、容器端口映射</h2><h3 id="1-docker-run-p端口映射参数"><a href="#1-docker-run-p端口映射参数" class="headerlink" title="1 docker run -p端口映射参数"></a>1 docker run -p端口映射参数</h3><p>指定端口访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将容器80端口，映射到主机180端口
docker run -p 180:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定IP+端口访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 多网卡环境下，将容器80端口映射到10.0.0.1的180端口
docker run -p 10.0.0.1:180:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定随机端口</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she"># 将容器80端口，映射到主机随机端口
docker run -p 10.0.0.1::80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>指定随机端口+UDP (默认映射TCP)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将容器80端口映射到主机随机端口，并使用UDP协议
-p 10.0.0.100:80:udp # 指定随机端口 + udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以指定多个端口</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p 180:80 -p 1443:443 # 指定多个端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>随机映射</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(九)-Dokcer跨主机容器互连</title>
    <url>/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/</url>
    <content><![CDATA[<h2 id="一、Docker容器的四种网络类型"><a href="#一、Docker容器的四种网络类型" class="headerlink" title="一、Docker容器的四种网络类型"></a>一、Docker容器的四种网络类型</h2><blockquote>
<p>哪四种？</p>
<ul>
<li>bridge（默认）：NAT桥接模式</li>
<li>none：不分配网络，什么服务都访问不了</li>
<li>host：与宿主机共享网络，共享主机名，端口共用(宿主机用了的端口，容器也不能用)，【网络性能最高】</li>
<li>container:容器id：与容器xx共享网络，共享主机名、hosts、hostname、端口等….【K8S常用】</li>
</ul>
</blockquote>
<h3 id="1-指定与查看容器网络类型的方法"><a href="#1-指定与查看容器网络类型的方法" class="headerlink" title="1 指定与查看容器网络类型的方法"></a>1 指定与查看容器网络类型的方法</h3><p>指定容器网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --network none # 指定网络类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看容器网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker instpect 容器id # 可以查看当前的容器网络类型
# 查看字段
&quot;NetworkSettings&quot;: &#123;
	&quot;Bridge&quot;: &quot;&quot;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看有哪些网络类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network ls # 查看有哪些网络类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="二、使用macvlan实现"><a href="#二、使用macvlan实现" class="headerlink" title="二、使用macvlan实现"></a>二、使用macvlan实现</h2><blockquote>
<p>优势：</p>
<p>​	性能比overlay高</p>
<p>​	不用做端口映射，外界可直接访问</p>
<p>劣势：</p>
<p>​	IP需要手动指定</p>
</blockquote>
<h3 id="1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用macvlan实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用macvlan实现两个centos6.9_ssh容器跨主机网络通信</h3><blockquote>
<p>宿主机信息（虚拟机）：</p>
<p>​	docker01: 10.0.0.11 网关: 10.0.0.2</p>
<p>​	docker02: 10.0.0.12 网关: 10.0.0.2</p>
</blockquote>
<p>宿主机1,2分别创建macvlan</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create --driver macvlan --subnet 10.0.0.0&#x2F;24 --gateway 10.0.0.2 -o parent&#x3D;ens33 macvlan_1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置网卡为混杂模式【Ubuntu需要设置】</p>
<blockquote>
<p>混杂模式是计算机网络中的术语。 是指一台机器的网卡能够接收所有经过它的数据流，而不论其目的地址是否是它。</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip link set ens33 promisc on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>宿主机1,2分别使用centos7.9_ssh:v2镜像创建容器，并指定为macvlan_1网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01
docker run -d --network macvlan_1 --ip&#x3D;10.0.0.100 centos6.9_ssh:v2
# docker02
docker run -d --network macvlan_1 --ip&#x3D;10.0.0.200 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试，docker exec进入docker01中运行容器，开启抓包，并使用docker02中的容器ping它</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpdump icmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过xshell或者mobaxterm可以直接ssh到容器中 (PS:并没有 -p 22端口)</p>
<blockquote>
<p>实际测试宿主机并不能ssh到容器，显示No route to host，但是物理机可以连接</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh root@10.0.0.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="三、使用overlay实现"><a href="#三、使用overlay实现" class="headerlink" title="三、使用overlay实现"></a>三、使用overlay实现</h2><blockquote>
<p>优势：</p>
<p>​	可以自动分配ip地址</p>
<p>劣势：</p>
<p>​	需要做端口映射才能访问容器服务</p>
<p>overlay参考：<a href="https://www.cnblogs.com/CloudMan6/p/7270551.html">https://www.cnblogs.com/CloudMan6/p/7270551.html</a></p>
</blockquote>
<h3 id="1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信"><a href="#1-案例：使用overlay实现两个centos6-9-ssh容器跨主机网络通信" class="headerlink" title="1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信"></a>1 案例：使用overlay实现两个centos6.9_ssh容器跨主机网络通信</h3><p>docker01启动consul</p>
<blockquote>
<p>consul是一个key:value类型的存储数据库</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 8500:8500 --restart&#x3D;always -h consul --name consul progrium&#x2F;consul -server -bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>docker01,02上设置daemon.json文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"hosts"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"tcp://0.0.0.0:2376"</span><span class="token punctuation">,</span><span class="token string">"unix:///var/run/docker.sock"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">"cluster-store"</span><span class="token operator">:</span><span class="token string">"consul://10.0.0.11:8500"</span><span class="token punctuation">,</span>
<span class="token property">"cluster-advertise"</span><span class="token operator">:</span><span class="token string">"10.0.0.11:2376"</span> # 此处不同，docker01为<span class="token number">10.0</span>.<span class="token number">0.11</span>，docker02为<span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>修改docker.service文件</p>
<blockquote>
<p>因为daemon.json中的hosts项与docker.service中的-H参数冲突，需要去掉</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service
ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock
# 删除-H fd:&#x2F;&#x2F;
ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启docker服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reload
systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>测试consul是否搭建成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">浏览器访问：http:&#x2F;&#x2F;10.0.0.11:8500&#x2F;
在KEY&#x2F;VALUE标签页正常显示10.0.0.11和12两台宿主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>docker01,02创建overlay网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create -d overlay --subnet 172.16.1.0&#x2F;24 --gateway 172.16.1.254 ol1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01
docker run -d --network ol1 --name centos6.9_01 centos6.9_ssh:v2
# docker02
docker run -d --network ol1 --name centos6.9_02 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试容器间网络</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker01中的容器ping另一容器的hostname
[root@e1e8cc01792d &#x2F;]# ping centos6.9_02
PING centos6.9_02 (172.16.1.2) 56(84) bytes of data.
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.197 ms
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.269 ms
64 bytes from centos6.9_02.ol1 (172.16.1.2): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;1.04 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Overlay的网络访问流程图"><a href="#2-Overlay的网络访问流程图" class="headerlink" title="2 Overlay的网络访问流程图"></a>2 Overlay的网络访问流程图</h3><img src="/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%B9%9D-Dokcer%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E4%BA%92%E8%BF%9E/overlay%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE.png" class="" title="overlay网络访问">

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(二)-Docker常用管理命令</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%BA%8C-Docker%E5%B8%B8%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="一、常用镜像管理命令"><a href="#一、常用镜像管理命令" class="headerlink" title="一、常用镜像管理命令"></a>一、常用镜像管理命令</h2><blockquote>
<p>​	Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数(如匿名卷、环境变量、用户等)。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
</blockquote>
<h3 id="1-在镜像仓库查找镜像"><a href="#1-在镜像仓库查找镜像" class="headerlink" title="1 在镜像仓库查找镜像"></a>1 在镜像仓库查找镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-在镜像仓库拉取镜像"><a href="#2-在镜像仓库拉取镜像" class="headerlink" title="2 在镜像仓库拉取镜像"></a>2 在镜像仓库拉取镜像</h3><blockquote>
<p>不指定版本号时默认下载最新版（latest），版本可在dockerhub(官方仓库)、DaoCloud(私有仓库)等仓库查到</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># dockerhub拉取
docker pull alpine:3.6
# daocloud拉取
docker pull daocloud.io&#x2F;jermine&#x2F;alpine:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-查看已有镜像"><a href="#3-查看已有镜像" class="headerlink" title="3 查看已有镜像"></a>3 查看已有镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image ls
# 别名
docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-导出镜像"><a href="#4-导出镜像" class="headerlink" title="4 导出镜像"></a>4 导出镜像</h3><blockquote>
<p>弃用export，导出的镜像不带版本TAG信息</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image save alpine -o alpine.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5 删除镜像"></a>5 删除镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除alpine镜像
docker image rm d4ff818577bc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="6-导入镜像"><a href="#6-导入镜像" class="headerlink" title="6 导入镜像"></a>6 导入镜像</h3><blockquote>
<p>弃用import，导入的镜像不带版本TAG信息</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image load -i alpine.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-查看镜像属性"><a href="#7-查看镜像属性" class="headerlink" title="7 查看镜像属性"></a>7 查看镜像属性</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image inspect 4f380adfc10f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="8-镜像批量删除"><a href="#8-镜像批量删除" class="headerlink" title="8 镜像批量删除"></a>8 镜像批量删除</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="9-指定TAG信息"><a href="#9-指定TAG信息" class="headerlink" title="9 指定TAG信息"></a>9 指定TAG信息</h3><blockquote>
<p>docker images查看docker image import的镜像，没有镜像名和TAG，可以使用此方法来修改</p>
</blockquote>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker image tag d4ff818577bc oldbly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、常用容器管理命令"><a href="#二、常用容器管理命令" class="headerlink" title="二、常用容器管理命令"></a>二、常用容器管理命令</h2><blockquote>
<p>​	镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>​	容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立宿主的系统下操作一样。这种特性使容器封装的应用比直接在宿主运行更加安全。</p>
</blockquote>
<h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1 运行容器"></a>1 运行容器</h3><blockquote>
<p>1、docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>2、业务在容器中运行：前台运行夯住，启动服务</p>
<p>3、如果不指定执行命令，会运行默认的执行命令</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 放后台运行
docker run -d -p 80:80 nginx:latest
run 创建并运行一个容器
-d	放在后台运行
-p 	端口映射
-v 	源地址(宿主机)：目标地址(容器)

# 交互式方式进入容器执行
docker run -it --name centos6 centos:6.9 &#x2F;bin&#x2F;bash
-it 	分配交互式的终端
--name 	制定容器的名称
&#x2F;bin&#x2F;sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-查看已有容器"><a href="#2-查看已有容器" class="headerlink" title="2 查看已有容器"></a>2 查看已有容器</h3><blockquote>
<p>-a 显示所有容器（默认只显示running的容器）</p>
<p>-l 显示最新的容器</p>
<p>–no-trunc 显示完整id</p>
<p>-q 静默输出（只显示容器id）</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container ls -a
# 别名
docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-停止容器"><a href="#3-停止容器" class="headerlink" title="3 停止容器"></a>3 停止容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container stop 55e9c7c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-杀死容器"><a href="#4-杀死容器" class="headerlink" title="4 杀死容器"></a>4 杀死容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container kill 55e9c7c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>kill与stop的区别：</p>
<ul>
<li><p>kill：不管容器同不同意，发送SIGKILL信号，强行终止。</p>
</li>
<li><p>stop：首先给容器发送一个SIGTERM信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再发送SIGKILL信号，强行终止。</p>
</li>
</ul>
</blockquote>
<h3 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5 启动容器"></a>5 启动容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container start 55e9c7c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="6-进入容器（重要！调试、排错）"><a href="#6-进入容器（重要！调试、排错）" class="headerlink" title="6 进入容器（重要！调试、排错）"></a>6 进入容器（重要！调试、排错）</h3><p>使用同一终端：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 交互式方式运行容器（开启新终端）
docker run -it --name centos6.9 centos:6.9 &#x2F;bin&#x2F;bash
# 暂时退出当前终端
ctrl + p 再 ctrl + q
# 重新进入该终端
docker attach d4ff818577bc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用不同终端（常用）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it d4ff818577bc &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-删除容器"><a href="#7-删除容器" class="headerlink" title="7 删除容器"></a>7 删除容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container rm 55e9c7cb59a6 55e9c7cb59a5
# 别名
docker rm 55e9c7cb59a6
# 批量删除容器
docker rm &#96;docker ps -a -q&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(五)-手动制作docker镜像</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E4%BA%94-%E6%89%8B%E5%8A%A8%E5%88%B6%E4%BD%9Cdocker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="一、制作Docker镜像"><a href="#一、制作Docker镜像" class="headerlink" title="一、制作Docker镜像"></a>一、制作Docker镜像</h2><h3 id="1-启动基础容器"><a href="#1-启动基础容器" class="headerlink" title="1 启动基础容器"></a>1 启动基础容器</h3><pre class="line-numbers language-she" data-language="she"><code class="language-she">docker run -it centos:6.9 # yum
docker run -it alpine:3.9 # apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-在容器中安装服务"><a href="#2-在容器中安装服务" class="headerlink" title="2 在容器中安装服务"></a>2 在容器中安装服务</h3><p>修改yum源（Centos6阿里源已停止维护）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo &#39;[centos-office]
name&#x3D;centos-office
failovermethod&#x3D;priority
baseurl&#x3D;https:&#x2F;&#x2F;vault.centos.org&#x2F;6.10&#x2F;os&#x2F;x86_64&#x2F;
gpgcheck&#x3D;1
gpgkey&#x3D;https:&#x2F;&#x2F;vault.centos.org&#x2F;6.10&#x2F;os&#x2F;x86_64&#x2F;RPM-GPG-KEY-CentOS-6&#39; &gt; CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装并启动openssh服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openssh-server -y
service sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改root密码(默认没有密码)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo &#39;123456&#39; | passwd --stdin root
# 或者
echo root:123456 | chpassw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>将已经安装好sshd服务的容器打包成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container commit 981877f137c9 centos6.9_ssh:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试镜像</p>
<blockquote>
<p>sshd -D：以后台守护进程的方式运行服务</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动sshd并将22端口映射出来，可以使用xshell连接
docker run -d -p 1022:22 centos6.9_ssh:v1 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="二、小案例：创建一个ssh-nginx双服务的镜像"><a href="#二、小案例：创建一个ssh-nginx双服务的镜像" class="headerlink" title="二、小案例：创建一个ssh+nginx双服务的镜像"></a>二、小案例：创建一个ssh+nginx双服务的镜像</h2><p>创建容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1023:22 centos6.9_ssh:v1 &#x2F;usr&#x2F;sbin&#x2F;sshd -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改yum源和epel源</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">由于Centos6阿里云停止维护
参考：https:&#x2F;&#x2F;blog.csdn.net&#x2F;u013250554&#x2F;article&#x2F;details&#x2F;110684307<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>安装nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建运行服务的脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;root&#x2F;init.sh
#!&#x2F;bin&#x2F;bash
service sshd restart
nginx -g &#39;daemon off;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>将容器封装成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit e6a6dsa6 centos6.9_ssh_nginx:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动镜像，开启服务，并夯住</p>
<blockquote>
<p>可以使用工具ssh登录，并且可以访问到nginx的欢迎页面</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;root&#x2F;init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="三、通过环境变量设置容器密码"><a href="#三、通过环境变量设置容器密码" class="headerlink" title="三、通过环境变量设置容器密码"></a>三、通过环境变量设置容器密码</h2><p>修改&#x2F;root&#x2F;init.sh文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash

if [ -z $SSH_PWD ];then
        SSH_PWD&#x3D;123456
fi
echo &quot;$SSH_PWD&quot; | passwd --stdin root

service sshd restart
nginx -g &#39;daemon off;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>打包成镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit 12386c6504d4 centos6.9_ssh_nginx_passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行容器</p>
<blockquote>
<p>docker run -e：指定环境变量</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 -p 80:80 -e &quot;SSH_PWD&#x3D;123456&quot; centos6.9_ssh_nginx_passwd &#x2F;bin&#x2F;bash &#x2F;root&#x2F;init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(八)-Docker私有仓库</title>
    <url>/2021/07/06/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%85%AB-Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、官方私有仓库registry"><a href="#一、官方私有仓库registry" class="headerlink" title="一、官方私有仓库registry"></a>一、官方私有仓库registry</h2><h3 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1 安装步骤"></a>1 安装步骤</h3><p>拉取私有仓库镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动私有仓库容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -di --name&#x3D;registry -p 5000:5000 registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>验证是否正常</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 浏览器输入
10.0.0.12:5000&#x2F;v2&#x2F;_catalog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改daemon.json，让 docker信任私有仓库地址</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json
# 添加
&#123;
	&quot;insecure-registries&quot;:[&quot;10.0.0.12:5000&quot;]
&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启docker服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl reset-failed docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上传镜像到私有仓库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker push 10.0.0.11:5000&#x2F;registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从私有仓库下载镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull http:&#x2F;&#x2F;10.0.0.12:5000&#x2F;registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、企业级私有仓库Harbor"><a href="#二、企业级私有仓库Harbor" class="headerlink" title="二、企业级私有仓库Harbor"></a>二、企业级私有仓库Harbor</h2><blockquote>
<p>Harbor：第三方registry组件</p>
<p>项目地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p>
<p>老男孩强哥博客地址：<a href="https://oldqiang.com/">https://oldqiang.com/</a></p>
</blockquote>
<h3 id="1-为什么使用Harbor"><a href="#1-为什么使用Harbor" class="headerlink" title="1 为什么使用Harbor"></a>1 为什么使用Harbor</h3><p>因为官方仓库registry存在诸多问题：</p>
<ul>
<li><p>https问题</p>
</li>
<li><p>网页简陋，查看镜像、删除镜像不方便</p>
</li>
<li><p>权限控制不方便（要么有权限，要么完全没权限），不支持多用户</p>
</li>
</ul>
<h3 id="2-Harbor安装步骤"><a href="#2-Harbor安装步骤" class="headerlink" title="2 Harbor安装步骤"></a>2 Harbor安装步骤</h3><blockquote>
<p>这里以v2.2.3为例</p>
</blockquote>
<p>离线安装包获取</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.2.3&#x2F;harbor-offline-installer-v2.2.3.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解压文件，并修改配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -vxf harbor-offline-installer-v2.2.3.tgz
cd harbor&#x2F;
cp harbor.yml.tmpl harbor.yml
vim harbor.yml
# 注释https设置项，并修改以下内容
hostname &#x3D; 10.0.0.12  
harbor_admin_password &#x3D; 1qaz@WSX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行安装脚本（时间比较长）</p>
<blockquote>
<p>需要先安装docker-compose，</p>
<p><a href="https://gsproj.github.io/2021/07/07/Docker%E7%B3%BB%E5%88%97-%E5%8D%81-Dokcer%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/">docker-compose安装参考</a></p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>网页访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">http:&#x2F;&#x2F;10.0.0.12
admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="3-镜像推送与下载"><a href="#3-镜像推送与下载" class="headerlink" title="3 镜像推送与下载"></a>3 镜像推送与下载</h3><p>docker配置文件添加白名单</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json
&quot;insecure-registries&quot;:[&quot;10.0.0.12&quot;],  # 不要加端口,可以是IP或域名，中间逗号隔开可加多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>镜像打标签</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull 10.0.0.12&#x2F;xxx&#x2F;centos6.9_ssh:v2   # xxx是仓库中的创建的项目名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>登录到仓库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker login 10.0.0.12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>推送到仓库</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker push 10.0.0.12&#x2F;xxx&#x2F;centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从仓库下载镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull 10.0.0.12&#x2F;xxx&#x2F;centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-将Harbor升级为https访问"><a href="#4-将Harbor升级为https访问" class="headerlink" title="4 将Harbor升级为https访问"></a>4 将Harbor升级为https访问</h3><p>配置文件修改，主要是添加证书路径</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># https related config
https:
  # https port for harbor, default is 443
  port: 443
  # The path of cert and key files for nginx
  certificate: &#x2F;your&#x2F;certificate&#x2F;path
  private_key: &#x2F;your&#x2F;private&#x2F;key&#x2F;path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再次执行安装脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(六)-Dockfile的使用</title>
    <url>/2021/06/30/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%85%AD-Dockfile%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、Dokerfile简介"><a href="#一、Dokerfile简介" class="headerlink" title="一、Dokerfile简介"></a>一、Dokerfile简介</h2><blockquote>
<p>Dockerfile 是一个用来自动构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>建议存放在&#x2F;opt&#x2F;dockerfile中，如创建centosXX的镜像，则创建&#x2F;opt&#x2F;dockerfile&#x2F;centosXX&#x2F;Dockerfile</p>
</blockquote>
<h3 id="1-Dockerfile的简单使用"><a href="#1-Dockerfile的简单使用" class="headerlink" title="1 Dockerfile的简单使用"></a>1 Dockerfile的简单使用</h3><blockquote>
<p>创建一个开启sshd服务的centos6.9镜像</p>
</blockquote>
<p>创建yum源文件，用于拷贝到centos6.9镜像中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh
vim CentOS-Base.repo
...内容省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>创建Dockerfile文件&#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh&#x2F;Dockerfile，内容如下：</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:6.9
ADD CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d
RUN yum install openssh-server -y
RUN service sshd restart
RUN echo &#39;123456&#39; | passwd --stdin root
CMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;,&quot;-D&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS：RUN的执行过程：创建临时容器，执行命令，提交成临时镜像，删除临时容器，重复此步骤。</p>
</blockquote>
<p>构建镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t centos6.9_ssh:v2 &#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>PS：最后传入的是包含Dockerfile的文件夹，区分大小写，可以用”.”代替 </p>
</blockquote>
<p>验证镜像是否正常</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 centos6.9_ssh:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>PS：最后不用接命令，将自动执行CMD指定的命令</p>
</blockquote>
<h3 id="2-小案例"><a href="#2-小案例" class="headerlink" title="2 小案例"></a>2 小案例</h3><blockquote>
<p>创建centos6.9 + ssh + nginx的Dockerfile</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 centos6.9_ssh_nginx]# pwd
&#x2F;opt&#x2F;dockfile&#x2F;centos6.9_ssh_nginx
[root@docker01 centos6.9_ssh_nginx]# ls
CentOS-Base.repo  Dockerfile  epel.repo  init.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># init.sh
#!&#x2F;bin&#x2F;bash
service sshd restart
nginx -g &quot;daemon off;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写Dockerfile</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centos:6.9
ADD CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d
ADD epel.repo &#x2F;etc&#x2F;yum.repos.d
ADD init.sh &#x2F;root
RUN yum install openssh-server nginx -y
RUN echo &#39;123456&#39; | passwd --stdin root
CMD [&quot;&#x2F;bin&#x2F;bash&quot;,&quot;&#x2F;root&#x2F;init.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构建镜像</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">docker build -t centos6.9_ssh_nginx:v3 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 1022:22 -p 81:80 centos6.9_ssh_nginx:v3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、Docker指令"><a href="#二、Docker指令" class="headerlink" title="二、Docker指令"></a>二、Docker指令</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FROM</td>
<td align="left">基于那个镜像来构建</td>
</tr>
<tr>
<td align="left">MAINTAINER</td>
<td align="left">镜像的创建者</td>
</tr>
<tr>
<td align="left">ENV</td>
<td align="left">设置环境变量</td>
</tr>
<tr>
<td align="left">ADD</td>
<td align="left">添加宿主机文件到容器里，有需要解压的文件会自动解压</td>
</tr>
<tr>
<td align="left">COPY</td>
<td align="left">添加宿主机文件到容器里</td>
</tr>
<tr>
<td align="left">WORKDIR</td>
<td align="left">切换工作目录</td>
</tr>
<tr>
<td align="left">EXPOSE</td>
<td align="left">开放可用端口</td>
</tr>
<tr>
<td align="left">CMD</td>
<td align="left">容器启动后执行的命令，可被docker run指定的命令覆盖</td>
</tr>
<tr>
<td align="left">ENTRYPOINT</td>
<td align="left">容器启动后执行的命令，但不回被docker run指定的命令覆盖，如需覆盖，需要加–entrypoint参数</td>
</tr>
<tr>
<td align="left">VOLUME</td>
<td align="left">创建挂载卷，将宿主机的目录挂载到容器里</td>
</tr>
</tbody></table>
<h2 id="三、案例：Dockerfile构建可道云容器"><a href="#三、案例：Dockerfile构建可道云容器" class="headerlink" title="三、案例：Dockerfile构建可道云容器"></a>三、案例：Dockerfile构建可道云容器</h2><blockquote>
<p>项目：</p>
<p>​	可道云网盘kodexplorer</p>
<p>环境：</p>
<p>​	httpd+php或者nginx+php<br>​	php所需模块：php5.5以上<br>​	基础镜像：centos:7.9<br>​	项目下载地址: <a href="http://static.kodcloud.com/update/download/kodexplorer4.37.zip">http://static.kodcloud.com/update/download/kodexplorer4.37.zip</a><br>​	项目官网：<a href="https://kodcloud.com/download/">https://kodcloud.com/download/</a></p>
</blockquote>
<h3 id="1-手工部署一遍"><a href="#1-手工部署一遍" class="headerlink" title="1 手工部署一遍"></a>1 手工部署一遍</h3><blockquote>
<p>写Dockerfile前自己手动部署一遍，主要是nginx + php的搭建，参考博客</p>
<p><a href="https://cloud.tencent.com/developer/article/1015237">https://cloud.tencent.com/developer/article/1015237</a></p>
</blockquote>
<p>修改nginx.conf</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># For more information on configuration, see:
#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;
#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;

user nginx;
worker_processes auto;
error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;
pid &#x2F;run&#x2F;nginx.pid;

# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.
include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;

events &#123;
    worker_connections 1024;
&#125;

http &#123;
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;
    default_type        application&#x2F;octet-stream;

    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.
    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include
    # for more information.
    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;

    server &#123;
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;

        # Load configuration files for the default server block.
        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;

        error_page 404 &#x2F;404.html;
        location &#x3D; &#x2F;404.html &#123;
        &#125;

        error_page 500 502 503 504 &#x2F;50x.html;
        location &#x3D; &#x2F;50x.html &#123;
        &#125;

    	location ~ \.php$ &#123;
        try_files $uri &#x3D;404;
        fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php-fpm&#x2F;php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    	&#125;
	
    	location &#x2F; &#123;
        index  index.php index.html index.htm;
        try_files $uri $uri&#x2F; &#x2F;index.php?$args;
    	&#125;
    &#125;

# Settings for a TLS enabled server.
#
#    server &#123;
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
#
#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;
#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;
#
#        error_page 404 &#x2F;404.html;
#            location &#x3D; &#x2F;40x.html &#123;
#        &#125;
#
#        error_page 500 502 503 504 &#x2F;50x.html;
#            location &#x3D; &#x2F;50x.html &#123;
#        &#125;
#    &#125;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改php-fpm.conf</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;

; All relative paths in this configuration file are relative to PHP&#39;s install
; prefix.

; Include one or more files. If glob(3) exists, it is used to include a bunch of
; files from a glob(3) pattern. This directive can be used everywhere in the
; file.
include&#x3D;&#x2F;etc&#x2F;php-fpm.d&#x2F;*.conf

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
; Pid file
; Default Value: none
pid &#x3D; &#x2F;run&#x2F;php-fpm&#x2F;php-fpm.pid

; Error log file
; Default Value: &#x2F;var&#x2F;log&#x2F;php-fpm.log
error_log &#x3D; &#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;error.log

; Log level
; Possible Values: alert, error, warning, notice, debug
; Default Value: notice
;log_level &#x3D; notice

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of &#39;0&#39; means &#39;Off&#39;.
; Default Value: 0
;emergency_restart_threshold &#x3D; 0

; Interval of time used by emergency_restart_interval to determine when 
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator&#39;s shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;emergency_restart_interval &#x3D; 0

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;process_control_timeout &#x3D; 0

; Send FPM to background. Set to &#39;no&#39; to keep FPM in foreground for debugging.
; Default Value: yes
daemonize &#x3D; no

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ; 
;;;;;;;;;;;;;;;;;;;;

; See &#x2F;etc&#x2F;php-fpm.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改<a href="http://www.conf/">www.conf</a></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 12行
listen &#x3D; &#x2F;var&#x2F;run&#x2F;php-fpm&#x2F;php-fpm.sock
# 31-32行
listen.owner &#x3D; nobody
listen.group &#x3D; nobody
# 39-41行
user &#x3D; nginx
; RPM: Keep a group allowed to write in log dir.
group &#x3D; nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改php.ini</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cgi.fix_pathinfo 把它的值设置为 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-Dockerfile部署"><a href="#2-Dockerfile部署" class="headerlink" title="2 Dockerfile部署"></a>2 Dockerfile部署</h3><p>文件存放</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@docker01 centos7.9_kod]# ll
total 92
-rw-r--r--. 1 root root   661 Jul  2 11:21 Dockerfile
-rw-r--r--. 1 root root   171 Jul  1 14:28 init.sh
-rw-r--r--. 1 root root  2715 Jul  1 13:50 nginx.conf
-rw-r--r--. 1 root root  1691 Jul  1 13:50 php-fpm.conf
-rw-r--r--. 1 root root 64945 Jul  1 14:48 php.ini
-rw-r--r--. 1 root root 10029 Jul  1 13:50 www.conf
[root@docker01 centos7.9_kod]# pwd
&#x2F;opt&#x2F;dockfile&#x2F;centos7.9_kod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编写Dockerfile</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:7.9.2009
RUN curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo &amp;&amp; \
curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo &amp;&amp; \
yum install openssh-server nginx net-tools php-cli php-fpm unzip php-gd php-mbstring  -y
ADD nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf
ADD php-fpm.conf &#x2F;etc&#x2F;php-fpm.conf
ADD www.conf &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf
ADD php.ini &#x2F;etc
ADD init.sh &#x2F;root&#x2F;
EXPOSE 80 22
WORKDIR &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
RUN curl -o kod.zip https:&#x2F;&#x2F;static.kodcloud.com&#x2F;update&#x2F;download&#x2F;kodexplorer4.45.zip &amp;&amp; \
unzip kod.zip &amp;&amp; \
chmod -R 777 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;
CMD [&quot;&#x2F;bin&#x2F;bash&quot;,&quot;&#x2F;root&#x2F;init.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构建镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t centos7.9_kod:v1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 -p 1022:22 -e &quot;SSH_PWD&#x3D;redhat123&quot; --privileged centos7.9_kod:v1 &#x2F;usr&#x2F;sbin&#x2F;init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>进入容器，并运行初始化命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it 865 &#x2F;bin&#x2F;bash
# 容器启动服务，设置root密码
[root@88179198e672 html]#systemctl restart sshd php-fpm nginx
[root@88179198e672 html]#echo &quot;redhat123&quot; | passwd --stdin root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试访问：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">网页访问：http:&#x2F;&#x2F;10.0.0.11可进去可道云界面
ssh 10.0.0.11 -p1022 可以登录镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(十)-Dokcer单机编排docker-compose</title>
    <url>/2021/07/07/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%8D%81-Dokcer%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/</url>
    <content><![CDATA[<blockquote>
<p>docker-compose 单机版的容器编排工具</p>
</blockquote>
<h2 id="一、安装docker-compose"><a href="#一、安装docker-compose" class="headerlink" title="一、安装docker-compose"></a>一、安装docker-compose</h2><p>添加Centos7的epel源</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -o epel-7.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo
yum clean all
yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>安装pip</p>
<blockquote>
<p>Python 2.7已于2020年1月1日到期，请停止使用。请升级您的Python，因为不再维护Python 2.7。pip 21.0将于2021年1月停止对Python 2.7的支持。pip 21.0将删除对此功能的支持。因此安装&lt;21.0的版本</p>
</blockquote>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">yum install -y python2-pip
pip install --upgrade &quot;pip &lt; 21.0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>安装docker-compose</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建文件夹用于存放docker-compose脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;opt&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="一、案例：compose构建wordpress并使用nginx负载均衡"><a href="#一、案例：compose构建wordpress并使用nginx负载均衡" class="headerlink" title="一、案例：compose构建wordpress并使用nginx负载均衡"></a>一、案例：compose构建wordpress并使用nginx负载均衡</h2><p>docker01主机创建docker-compose文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;opt&#x2F;docker-compose&#x2F;wordpress&#x2F;docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> somewordpress
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress
      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress
      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress

  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>latest
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> web_data<span class="token punctuation">:</span>/var/www/html
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">"80"</span>  <span class="token comment"># 随机端口映射到内网80端口</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
     <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db<span class="token punctuation">:</span><span class="token number">3306</span>
     <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress
     <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">db_data</span><span class="token punctuation">:</span>
  web_data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构建Docker容器(三个wordpress，一个mysql）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker-compose up --scale wordpress&#x3D;3 -d
-d 后台运行
--scale 生成的实例数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-she" data-language="she"><code class="language-she">netstaus -lntup可以看到3个连续的端口号
tcp        0      0 0.0.0.0:49156           0.0.0.0:*               LISTEN      2110&#x2F;docker-proxy
tcp        0      0 0.0.0.0:49157           0.0.0.0:*               LISTEN      2126&#x2F;docker-proxy
tcp        0      0 0.0.0.0:49158           0.0.0.0:*               LISTEN      2143&#x2F;docker-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>docker02主机安装nginx，用于负载均衡</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">curl -o epel-7.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo
yum clean all
yum makecache
yum install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置nginx</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">cd &#x2F;etc&#x2F;nginx&#x2F;
mv nginx.conf nginx.conf.bak
grep -Ev &#39;^$|#&#39; nginx.conf.default  &gt; nginx.conf
vim nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">worker_processes  1;
events &#123;
    worker_connections  1024;
&#125;
http &#123;
    include       mime.types;
    default_type  application&#x2F;octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    upstream wordpress &#123;
        server 10.0.0.11:49156;
        server 10.0.0.11:49157;
        server 10.0.0.11:49158;
    &#125;

    server &#123;
        listen       80;
        server_name  localhost;
        location &#x2F; &#123;
            proxy_pass  http:&#x2F;&#x2F;wordpress;
            proxy_set_header Host $host;  # 不加上网页没有Host信息，显示不全
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重启nginx服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nginx -t
systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>测试访问</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">浏览器访问:10.0.0.12,可以进入wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看是否负载均衡</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个查看信息的页面
cd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;wordpress_web_data&#x2F;_data&#x2F;
vim info.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>浏览器访问：10.0.0.12&#x2F;info.php，查看其中IP信息</p>
<h2 id="二、案例：构建zabbix"><a href="#二、案例：构建zabbix" class="headerlink" title="二、案例：构建zabbix"></a>二、案例：构建zabbix</h2>]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(四)-容器的数据卷挂载与小案例练习</title>
    <url>/2021/06/29/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E5%9B%9B-%E5%AE%B9%E5%99%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8C%82%E8%BD%BD%E4%B8%8E%E5%B0%8F%E6%A1%88%E4%BE%8B%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一、数据卷挂载"><a href="#一、数据卷挂载" class="headerlink" title="一、数据卷挂载"></a>一、数据卷挂载</h2><h3 id="1-临时挂载"><a href="#1-临时挂载" class="headerlink" title="1 临时挂载"></a>1 临时挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将&#x2F;opt&#x2F;xiaoniao目录挂载到容器的html目录
docker run -d -p 80:80 -v &#x2F;opt&#x2F;xiaoniao:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-使用卷挂载"><a href="#2-使用卷挂载" class="headerlink" title="2 使用卷挂载"></a>2 使用卷挂载</h3><blockquote>
<p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
</blockquote>
<p>创建名为myvol的容器卷并挂载到容器html目录</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 -v myvol:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看当前有哪些容器卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看名为myvol的卷的信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker volume inspect myvol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除容器并删除卷（无效）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># PS：删除容器并删除卷，无法将卷删除
docker rm -f -v [容器ID]
    -v --volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="二、小案例：多端口多站点"><a href="#二、小案例：多端口多站点" class="headerlink" title="二、小案例：多端口多站点"></a>二、小案例：多端口多站点</h2><blockquote>
<p>80端口访问nginx首页</p>
<p>81端口访问水果忍者</p>
</blockquote>
<p>获取水果忍者HTML5小游戏源码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;7npmedia.w3cschool.cn&#x2F;1-FruitNinja.7z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建81端口nginx配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;opt&#x2F;fruitninjia.conf
server &#123;
    listen       81;
    listen  [::]:81;
    server_name  localhost;

    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;

    location &#x2F; &#123;
        root   &#x2F;data;
        index  index.html index.htm;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将游戏源码文件解压至&#x2F;opt&#x2F;fruitninjia，并运行nginx容器</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将&#x2F;opt&#x2F;fruitninjia挂载到容器&#x2F;data中
docker run -d -p 80:80 -p 81:81 -v &#x2F;opt&#x2F;fruitninjia:&#x2F;data -v &#x2F;opt&#x2F;fruitninjia.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;fruitninjia.conf nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>网页访问</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;10.0.0.11:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker系列(零)-Docker介绍</title>
    <url>/2021/06/28/01_%E8%BF%90%E7%BB%B4/03-Docker/Docker%E7%B3%BB%E5%88%97-%E9%9B%B6-Docker%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="一、容器简介"><a href="#一、容器简介" class="headerlink" title="一、容器简介"></a>一、容器简介</h1><p>容器就是在隔离环境中运行一个进程，如果进程停止，容器就会销毁。</p>
<p>隔离环境拥有自己的系统文件，ip地址，主机名等。</p>
<h2 id="1-1-容器和虚拟化的区别"><a href="#1-1-容器和虚拟化的区别" class="headerlink" title="1.1 容器和虚拟化的区别"></a>1.1 容器和虚拟化的区别</h2><p>KVM虚拟化：</p>
<p>需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级（有开机启动流程）</p>
<p>开机启动流程</p>
<p>bios开机硬件自检</p>
<p>根据bios设置的优先启动项boot</p>
<p>读取mbr&#x2F;gpt引导，读取mbr硬盘分区信息，内核加载路径</p>
<p>加载内核</p>
<p>启动第一个进程（C6：&#x2F;sbin&#x2F;init，C7：systemd）</p>
<p>系统初始化完成</p>
<p>运行服务</p>
<p>容器：</p>
<p>不需要硬件的支持，不需要模拟硬件，公用宿主机内核，启动时间秒级（没有开机启动流程）</p>
<p>容器的第一个进程直接运行服务，损耗少，启动快，性能高</p>
<h2 id="1-2-容器的优缺点："><a href="#1-2-容器的优缺点：" class="headerlink" title="1.2 容器的优缺点："></a>1.2 容器的优缺点：</h2><p>优点：</p>
<p>与宿主机使用同一个内核，性能损耗小</p>
<p>不需要指令级模拟</p>
<p>容器可以再cpu核心的本地运行指令，不需要任何专门的解释机制</p>
<p>避免了准虚拟化和系统调用替换中的复杂性</p>
<p>轻量级隔离，在隔离的同事还提供共享机制，以实现容器与宿主机的资源共享</p>
<p>缺点：</p>
<p>使用同一内核，存在安全性问题</p>
<h2 id="1-3-容器技术的发展过程"><a href="#1-3-容器技术的发展过程" class="headerlink" title="1.3 容器技术的发展过程"></a>1.3 容器技术的发展过程</h2><p>chroot — lxc —- docker</p>
<h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><p># 添加docker安装源 </p>
<p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a> </p>
<p>查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce) yum list docker-ce –showduplicates | sort -r # 安装docker-ce yum install docker-ce -y</p>
<h1 id="三、Docker镜像的常用命令"><a href="#三、Docker镜像的常用命令" class="headerlink" title="三、Docker镜像的常用命令"></a>三、Docker镜像的常用命令</h1><p># 搜索镜像docker search [镜像名称]# 拉取镜像docker pull [域名镜像名称]:[版本号]例如：docker pull daocloud.io&#x2F;hzc&#x2F;alpine:3.6 # 默认拉取Lastest最新版PS: docker image pull &#x3D; docker pull# 如何查看镜像有那些版本？dockerhub网页搜索 daocloud 国内的dockhub# 镜像加速：（1）阿里云docker镜像加速器服务（2）配置docker镜像加速(推荐) vi &#x2F;etc&#x2F;docker&#x2F;daemon.json {   “registry-mirrors”:[“<a href="https://registry.docker-cn.com”]">https://registry.docker-cn.com”]</a> } systemctl daemon-reload# 上传镜像docker push [镜像名称]# 查看已有镜像docker images &#x3D; docker image ls# 导出镜像docker image save alpine:latest -o docker_alpine.tar.gz # save跟export选哪个？都是导出镜像，但是export没带版本标签，export弃用# 导入镜像docker image load -i docker_alpine.tar.gz # load跟import选哪个？都是导入镜像，load对应save，import不带版本标签，import弃用# 删除镜像docker image rm alpine:3.6# 构建镜像docker image build# 查看构建镜像用到的历史命令docker image histroy# 查看镜像的详细属性docker image inspect# 批量删除镜像docker image prune# 给镜像打标签docker image tag [镜像ID] oldboy:v1 # Docker的容器管理1、查看容器列表 docker container ls -a docker ps # 默认只查看活着的容器 docker ps -a # 查看所有容器 docker ps -a -q # 静默输出，显示所有容器的ID docker ps -a -l docker ps -a -l –no-trunc # 查看完整命令（不隐藏）# 停止容器docker container stop [容器ID] docker container kill [容器ID]# 恢复容器 docker container start 【容器ID】# 启动容器 docker run -d -p 80:80 nginx:latest run 创建并运行一个容器 -d   放在后台运行 -p 端口映射 -v 源地址(宿主机)：目标地址(容器) docker run -it –name centos6 centos:6.9 &#x2F;bin&#x2F;bash -it 分配交互式的终端 –name 制定容器的名称 &#x2F;bin&#x2F;sh 容器执行的命令，每个进程默认有初始执行命令，可以覆盖※进入容器（调试、排错）docker exec - it [容器名称&#x2F;ID] &#x2F;bin&#x2F;bash docker attach 【容器名称&#x2F;ID】 (使用同一个终端)临时退出容器：ctrl +p和ctrl + q退出# 删除容器docker container rm [容器ID] docker rm [容器ID]如何批量删除容器：docker rm <code>docker ps -a -q</code></p>
<p><strong>总结：</strong></p>
<p>docker容器内的第一个进程（初始命令）必须一直处于前台运行的状态（必须夯住），否则这个容器，就会处于退出状态。</p>
<p>业务在容器中运行：前台运行夯住，启动服务</p>
<h1 id="四、-Docker的网络访问"><a href="#四、-Docker的网络访问" class="headerlink" title="四、 Docker的网络访问"></a>四、 Docker的网络访问</h1><h2 id="4-1-容器网络访问流程"><a href="#4-1-容器网络访问流程" class="headerlink" title="4.1 容器网络访问流程"></a>4.1 容器网络访问流程</h2><p>实际上是端口映射，docker容器有自己的ip，需要靠宿主机NAT上网 </p>
<p> -p设置自动端口映射，在iptables中有增的Chain Docker, 也可以手动设置NAT</p>
<p>查看当前设置的nat：iptables -t nat -L -n</p>
<h2 id="4-2-容器网络访问注意事项："><a href="#4-2-容器网络访问注意事项：" class="headerlink" title="4.2 容器网络访问注意事项："></a>4.2 容器网络访问注意事项：</h2><p>sysctl -a | grep ipv4 | grep forward </p>
<p>查看</p>
<p>net.ipv4.ip_forward &#x3D; 1 # 为1时，docker容器才能上网，虚拟机挂起将使他变成0</p>
<p>解决方法:</p>
<p>1、sysctl net.ipv4.ip_forward &#x3D; 1 设置为1</p>
<p>2、不要挂起虚拟机，直接关机重启，docker服务在启动时会将它改为1</p>
<h2 id="4-3-指定映射-p-参数详解"><a href="#4-3-指定映射-p-参数详解" class="headerlink" title="4.3 指定映射(-p)参数详解"></a>4.3 指定映射(-p)参数详解</h2><p>-p hostPort:containerPort # 指定端口 -p ip:hostPort:containerPort # 指定ip+端口 -p ip::containerPort # 指定随机端口 -p 10.0.0.100:53:udp # 指定随机端口 + udp -p hostPort:containerPort -p hostPort:containerPort # 指定多个端口</p>
<h1 id="五、容器的数据卷挂载"><a href="#五、容器的数据卷挂载" class="headerlink" title="五、容器的数据卷挂载"></a>五、容器的数据卷挂载</h1><h2 id="5-1-临时挂载"><a href="#5-1-临时挂载" class="headerlink" title="5.1 临时挂载"></a>5.1 临时挂载</h2><p># 将&#x2F;opt&#x2F;xiaoniao目录挂载到容器的html目录 docker run -d -p 80:80 -v &#x2F;opt&#x2F;xiaoniao:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest</p>
<h2 id="5-2-持久化挂载"><a href="#5-2-持久化挂载" class="headerlink" title="5.2 持久化挂载"></a>5.2 持久化挂载</h2><p>容器被删除，创建的卷可以保留，可以再次挂载到新建的容器中</p>
<p># 创建名为oldboy的容器卷并挂载到容器html目录 docker run -d -p 80:80 -v oldboy:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx:latest # 查看当前有哪些容器卷 docker volume ls # 查看名为oldboy的卷的信息 docker volume inspect oldboy # PS：删除容器并删除卷，无法将卷删除 docker rm -f -v [容器ID]   -v –volume</p>
<h1 id="六、小案例练习"><a href="#六、小案例练习" class="headerlink" title="六、小案例练习"></a>六、小案例练习</h1><p>&gt;&gt; 基于Nginx多端点的多站点 基于nginx启动一个容器，监听80和81，访问80，出现nginx默认的欢迎首页，访问81，出现小鸟页面。</p>
<h1 id="七、如何制作Docker镜像"><a href="#七、如何制作Docker镜像" class="headerlink" title="七、如何制作Docker镜像"></a>七、如何制作Docker镜像</h1><h2 id="7-1-启动一个基础的容器"><a href="#7-1-启动一个基础的容器" class="headerlink" title="7.1 启动一个基础的容器"></a>7.1 启动一个基础的容器</h2><p>docker run -it centos:6.9 # yum docker run -it alpine:3.9 # apk</p>
<h2 id="7-2-容器中安装服务"><a href="#7-2-容器中安装服务" class="headerlink" title="7.2 容器中安装服务"></a>7.2 容器中安装服务</h2><p># dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; &#x2F;etc&#x2F;hosts # 替换源为阿里源 curl -o &#x2F;etc&#x2F;yum.repo.d&#x2F;CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/CentOS-6.repo">https://mirrors.aliyun.com/repo/CentOS-6.repo</a> # 安装并启动openssh服务 yum install openssh-server -y service opensshd restart # 修改root密码 echo ‘123456’ | passwd –stdin root 或者 echo 123456:root | chpassw</p>
<p>7.3 把已经安装服务的容器打包成镜像</p>
<p>docker contanier commit 5617e5d123432 centos6.9_ssh:v1</p>
<h2 id="7-4-测试镜像的功能"><a href="#7-4-测试镜像的功能" class="headerlink" title="7.4 测试镜像的功能"></a>7.4 测试镜像的功能</h2><p># 使用镜像启动一个新容器,并开启ssh服务 docker run -d -p 1022:22 centos6.9_ssh:v1 tail -f &#x2F;usr&#x2F;sbin&#x2F;sshd -D</p>
<h2 id="7-5-创建一个ssh-nginx双服务的镜像"><a href="#7-5-创建一个ssh-nginx双服务的镜像" class="headerlink" title="7.5 创建一个ssh + nginx双服务的镜像"></a>7.5 创建一个ssh + nginx双服务的镜像</h2><p>(1) 启动一个基础容器 docker yun -it -p 80:80 -p 1023:22 centos6.9_ssh:v1 &#x2F;bin&#x2F;bash (2) 在容器中安装服务(hosts与repo源在新容器会重新挂载) # dns重定向 echo ‘192.168.15.84 mirrors.aliyun.com’ &gt;&gt; &#x2F;etc&#x2F;hosts # 替换源为阿里源 curl -o &#x2F;etc&#x2F;yum.repo.d&#x2F;epel.repo <a href="https://mirrors.aliyun.com/repo/epel.repo">https://mirrors.aliyun.com/repo/epel.repo</a> # 安装nginx服务 yum install nginx -y (3) 把已经安装好服务的容器，提交为镜像 docker commit e6a6dsa6 centos6.9_ssh_nginx:v2 (4) 测试镜像功能 vim init.sh &gt;&gt;&gt;&gt;&gt; #!&#x2F;bin&#x2F;bash service sshd restart nginx -g ‘daemon off;’ &gt;&gt;&gt;&gt;&gt; # 启动镜像，执行脚本：开启服务，并夯住 docker run -d -p 1025:22 -p 80:80 centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;init.sh</p>
<h3 id="7-6-自定义容器镜像的密码"><a href="#7-6-自定义容器镜像的密码" class="headerlink" title="7.6 自定义容器镜像的密码"></a>7.6 自定义容器镜像的密码</h3><p># 修改脚本，添加密码相关的脚本行，见右图 vim init.sh # 启动容器，并附带环境变量 docker run -d -p 1025:22 -p 80:80 -e “SSH_PWD&#x3D;123456” centos6.9_ssh_nginx:v2 &#x2F;bin&#x2F;bash &#x2F;init.sh</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="7-7-作业"><a href="#7-7-作业" class="headerlink" title="7.7 作业"></a>7.7 作业</h3><p>制作基于centos6的lnmp架构的镜像，discuz论坛</p>
<p>怎么夯住？</p>
<p>启动所有需要的服务</p>
<p>最后tail -F (大F无论文件有没有) </p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="八、Dockfile的使用"><a href="#八、Dockfile的使用" class="headerlink" title="八、Dockfile的使用"></a>八、Dockfile的使用</h1><p>发布镜像太大了，而dockerfile只有几kb，使用dockfile文件可以构建出相同的镜像，</p>
<h2 id="8-1-使用dockfile自动构建镜像"><a href="#8-1-使用dockfile自动构建镜像" class="headerlink" title="8.1 使用dockfile自动构建镜像"></a>8.1 使用dockfile自动构建镜像</h2><p>自动构建镜像的步骤：</p>
<p>1、手动构建一遍</p>
<p>2、参考历史命令，编写dockerfile</p>
<p>3、构建镜像</p>
<p>dockerfile build -t centos6.9_ssh .</p>
<p>4、测试</p>
<h2 id="8-2-Dockerfile常用命令详解"><a href="#8-2-Dockerfile常用命令详解" class="headerlink" title="8.2 Dockerfile常用命令详解"></a>8.2 Dockerfile常用命令详解</h2>]]></content>
      <categories>
        <category>运维</category>
        <category>（三）Docker</category>
      </categories>
  </entry>
  <entry>
    <title>OpenStack学习笔记</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/04-%E8%99%9A%E6%8B%9F%E5%8C%96/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="OpenStack笔记"><a href="#OpenStack笔记" class="headerlink" title="OpenStack笔记"></a><strong><font color=green>OpenStack笔记</font></strong></h1><p>​	OpenStack实现的是云计算IAAS</p>
<h2 id="一、服务架构发展"><a href="#一、服务架构发展" class="headerlink" title="一、服务架构发展"></a><font color=blue>一、服务架构发展</font></h2><h3 id="1-1-MVC架构"><a href="#1-1-MVC架构" class="headerlink" title="1.1 MVC架构"></a>1.1 MVC架构</h3><p>​	业务不拆分，一个服务挂，则所有的全挂</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">首页 www.jd.com&#x2F;index.html
秒杀 www.jd.com&#x2F;miaosha&#x2F;index.html
优惠券 www.jd.com&#x2F;juan&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-SOA架构（千万级）"><a href="#1-2-SOA架构（千万级）" class="headerlink" title="1.2 SOA架构（千万级）"></a>1.2 SOA架构（千万级）</h3><p>​	业务拆分，每一个功能都拆分成一个独立的web服务，每个独立的web服务，都至少拥有一个集群</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">首页 www.jd.com&#x2F;index.html
秒杀 miaosha.jd.com&#x2F;index.html
优惠券 juan.jd.com&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-微服务架构（亿级）"><a href="#1-3-微服务架构（亿级）" class="headerlink" title="1.3 微服务架构（亿级）"></a>1.3 微服务架构（亿级）</h3><p>阿里开源dubbo</p>
<p>Spring Boot</p>
<p>自动化代码上线：Jekins + gilab ci</p>
<p>自动化代码质量检查：sonarqube</p>
<h2 id="二、搭建OpenStack"><a href="#二、搭建OpenStack" class="headerlink" title="二、搭建OpenStack"></a><font color=blue>二、搭建OpenStack</font></h2><p>​	本流程为手动安装M版，脚本安装可以参考</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;my.oschina.net&#x2F;u&#x2F;4367225&#x2F;blog&#x2F;4255750<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>OpenStack的结构介绍：</p>
<blockquote>
<p>Nova – 提供VM虚拟化支持 8774</p>
<p>Glance – 提供镜像 9292</p>
<p>Clinder – 存储支持 8776</p>
<p>Neutron – 网络支持 9696</p>
<p>Cellometer –  监控计费 </p>
<p>KeyStone – 登录认证</p>
<p>Horizon – 网页UI，dashboard</p>
<p>Heat – 部署编排，批量建虚拟机</p>
<p>Switft – 对象存储（不是传统的文件夹存放，而是用数据库记录已上传的文件信息，当有文件上传，先查询数据库中是否有该文件的md5值，如果有，则不用重新上传，给个链接就是 — 百度云盘）</p>
</blockquote>
<p><img src="C:\Users\fr724\AppData\Roaming\Typora\typora-user-images\image-20210615135957367.png" alt="image-20210615135957367"></p>
<h3 id="2-1-虚拟机准备"><a href="#2-1-虚拟机准备" class="headerlink" title="2.1 虚拟机准备"></a>2.1 虚拟机准备</h3><p>虚拟机规划</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 系统：CentOS7.4
controller: 内存3G, CPU开启虚拟化	10.0.0.11
compute1: 内存1G，CPU开启虚拟化	    10.0.0.31
# 修改主机名，IP地址，host解析，测试ping百度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置本地M版yum源</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、资源准备
mount &#x2F;dev&#x2F;cdrom &#x2F;mnt # 追加到&#x2F;etc&#x2F;rc.local,自动挂载
解压openstack_rpm.tar.gz到&#x2F;opt&#x2F;repo

# 2、编辑repo文件
vim &#x2F;etc&#x2F;yum.repo.d&#x2F;local&#x2F;repo

#### 内容
[local]
name&#x3D;local
baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt
gpgcheck&#x3D;0

[openstack]
name&#x3D;openstack
baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;opt&#x2F;repo
gpgcheck&#x3D;0
####

# 3、更新yum源
yum makecache
yum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-2-基础服务安装"><a href="#2-2-基础服务安装" class="headerlink" title="2.2 基础服务安装"></a>2.2 基础服务安装</h3><h4 id="2-2-1-NTP时间同步"><a href="#2-2-1-NTP时间同步" class="headerlink" title="2.2.1 NTP时间同步"></a>2.2.1 NTP时间同步</h4><p>controller与阿里NTP服务器同步</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;chrony.conf
server ntp6.aliyun.com # 3行
allow 10.0.0.0&#x2F;24 # 24行
systemctl restart chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>computer与controller同步</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;chrony.conf
server 10.0.0.11 iburst # 3行
systemctl restart chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"><a href="#2-2-2-扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）" class="headerlink" title="2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）"></a>2.2.2 扩展-公网安装O版OpenStack的方法介绍（跳过该步骤）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo
yum makecache
yum list | grep openstack
yum install centos-release-openstack-ocata.noarch -y # 安装O版<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）"><a href="#2-2-3-安装OpenStack客户端openstack-selinux-（所有节点执行）" class="headerlink" title="2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）"></a>2.2.3 安装OpenStack客户端openstack-selinux （所有节点执行）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install python-openstackclient openstack-selinux -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-2-4-安装和配置mariadb-仅控制节点执行"><a href="#2-2-4-安装和配置mariadb-仅控制节点执行" class="headerlink" title="2.2.4 安装和配置mariadb (仅控制节点执行)"></a>2.2.4 安装和配置mariadb (仅控制节点执行)</h4><p>安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install mariadb mariadb-server python2-PyMySQL -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;my.cnf.d&#x2F;openstack.cnf

#----------------
[mysqld]	
bind-address &#x3D; 10.0.0.11	# 监听地址
default-storage-engine &#x3D; innodb # 默认存储引擎
innodb_file_per_table  # 独立表空间文件
max_connections &#x3D; 4096	# 最大连接数
collation-server &#x3D; utf8_general_ci	# 默认字符集utf8
character-set-server &#x3D; utf8
#-----------------

# 启动服务
systemctl start mariadb
systemctl enable mariadb

# 数据库安全初始化,保障数据库安全性，如果不执行，同步数据库表会报错
mysql_secure_installation
回车 n y y y y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-5-消息队列配置-仅控制节点执行"><a href="#2-2-5-消息队列配置-仅控制节点执行" class="headerlink" title="2.2.5 消息队列配置(仅控制节点执行)"></a>2.2.5 消息队列配置(仅控制节点执行)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装rabbitmq
yum install rabbitmq-server -y
# 启动服务
systemctl start rabbitmq-server
systemctl enable rabbitmq-server
# 添加用户
rabbitmqctl add_user openstack RABBIT_PASS
# 设置用户权限（读、写、执行）
rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
rabbitmq-plugins enable rabbitmq_management
# 查看是否开启15672端口
netstat -lntup
# 浏览器登录rabbitmq
http:&#x2F;&#x2F;10.0.0.11:15672
默认用户名和密码：guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-6-缓存系统配置memcache（仅控制节点执行）"><a href="#2-2-6-缓存系统配置memcache（仅控制节点执行）" class="headerlink" title="2.2.6 缓存系统配置memcache（仅控制节点执行）"></a>2.2.6 缓存系统配置memcache（仅控制节点执行）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装
yum install memcached python-memched -y
# 配置
sed -i &#39;s#127.0.0.1#10.0.0.11#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;memcached
# 启动服务
systemctl restart memcached
systemctl enable memcached
# 查询端口11211是否已监听，默认使用该端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-安装keystone认证服务-仅控制节点执行"><a href="#2-3-安装keystone认证服务-仅控制节点执行" class="headerlink" title="2.3 安装keystone认证服务(仅控制节点执行)"></a>2.3 安装keystone认证服务(仅控制节点执行)</h3><h4 id="2-3-1-Keystone功能介绍"><a href="#2-3-1-Keystone功能介绍" class="headerlink" title="2.3.1 Keystone功能介绍"></a>2.3.1 Keystone功能介绍</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、认证管理：
	账户密码
2、授权管理
3、服务目录：
	跟电话本一样，keystone上可以查询到glance、nova等服务的地址端口等信息，每一个新加的服务都需要在keystone上注册<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-2-OpenStack服务器安装的通用步骤"><a href="#2-3-2-OpenStack服务器安装的通用步骤" class="headerlink" title="2.3.2 OpenStack服务器安装的通用步骤"></a>2.3.2 OpenStack服务器安装的通用步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1、创库授权
2、在Keystone创建用户，关联角色
3、在keystone创建服务，注册api
4、安装服务相关的软件包
5、修改配置
	数据库的连接
	keystone认证授权信息
	rabbitmq连接信息
	其他配置
6、同步数据库，创建表
7、启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-3-安装步骤"><a href="#2-3-3-安装步骤" class="headerlink" title="2.3.3 安装步骤"></a>2.3.3 安装步骤</h4><p>1、创库授权</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 登录mysql
$ mysql -u root -p
# 创建keystone数据库
CREATE DATABASE keystone;
# 对&#96;&#96;keystone&#96;&#96;数据库授予恰当的权限
GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;KEYSTONE_DBPASS&#39;;
GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;KEYSTONE_DBPASS&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、安装keystone相关软件包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install openstack-keystone httpd mod_wsgi -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、修改配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 备份原配置文件
\cp &#x2F;etc&#x2F;keystone&#x2F;keystone.conf&#123;,.bak&#125;
# 去除配置文件中的空格行和注释行
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf.bak &gt; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf

# 安装自动配置工具
yum install openstack-utils -y
# 使用工具设置（也可以直接修改文件）修改项 参数 &#x3D; 值
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf DEFAULT admin_token ADMIN_TOKEN
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf database connection  mysql+pymysql:&#x2F;&#x2F;keystone:KEYSTONE_DBPASS@controller&#x2F;keystone # 注意hostname--controller
openstack-config --set &#x2F;etc&#x2F;keystone&#x2F;keystone.conf token provider fernet
# 校验
md5sum &#x2F;etc&#x2F;keystone&#x2F;keystone.conf
d5acb3db852fe3f247f4f872b051b7a9 

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;keystone-manage db_sync&quot; keystone
# 查询是否生成表
mysql keystone -e &quot;show tables;&quot;

# 初始化fernet
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
# 验证
&#x2F;etc&#x2F;keystone&#x2F;fernet-keys已创建

# 配置httpd
echo &quot;ServerName controller&quot; &gt;&gt; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf

# 创建wsgi配置文件
vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wsgi-keystone.conf
###内容
Listen 5000
Listen 35357

&lt;VirtualHost *:5000&gt;
    WSGIDaemonProcess keystone-public processes&#x3D;5 threads&#x3D;1 user&#x3D;keystone group&#x3D;keystone display-name&#x3D;%&#123;GROUP&#125;
    WSGIProcessGroup keystone-public
    WSGIScriptAlias &#x2F; &#x2F;usr&#x2F;bin&#x2F;keystone-wsgi-public
    WSGIApplicationGroup %&#123;GLOBAL&#125;
    WSGIPassAuthorization On
    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;
    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-error.log
    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-access.log combined

    &lt;Directory &#x2F;usr&#x2F;bin&gt;
        Require all granted
    &lt;&#x2F;Directory&gt;
&lt;&#x2F;VirtualHost&gt;

&lt;VirtualHost *:35357&gt;
    WSGIDaemonProcess keystone-admin processes&#x3D;5 threads&#x3D;1 user&#x3D;keystone group&#x3D;keystone display-name&#x3D;%&#123;GROUP&#125;
    WSGIProcessGroup keystone-admin
    WSGIScriptAlias &#x2F; &#x2F;usr&#x2F;bin&#x2F;keystone-wsgi-admin
    WSGIApplicationGroup %&#123;GLOBAL&#125;
    WSGIPassAuthorization On
    ErrorLogFormat &quot;%&#123;cu&#125;t %M&quot;
    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-error.log
    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;keystone-access.log combined

    &lt;Directory &#x2F;usr&#x2F;bin&gt;
        Require all granted
    &lt;&#x2F;Directory&gt;
&lt;&#x2F;VirtualHost&gt;
# 校验
md5sum &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wsgi-keystone.conf
8f051eb53577f67356ed03e4550315c2 

# 启动httpd
systemctl enable httpd
systemctl start httpd

# 创建服务和注册api
export OS_TOKEN&#x3D;ADMIN_TOKEN
export OS_URL&#x3D;http:&#x2F;&#x2F;controller:35357&#x2F;v3
export OS_IDENTITY_API_VERSION&#x3D;3
openstack service create --name keystone --description &quot;OpenStack Identity&quot; identity
openstack endpoint create --region RegionOne identity public http:&#x2F;&#x2F;controller:5000&#x2F;v3
openstack endpoint create --region RegionOne identity internal http:&#x2F;&#x2F;controller:5000&#x2F;v3
openstack endpoint create --region RegionOne identity admin http:&#x2F;&#x2F;controller:35357&#x2F;v3

# 创建域、项目（租户）、用户和角色
openstack domain create --description &quot;Default Domain&quot; default
openstack project create --domain default --description &quot;Admin Project&quot; admin
openstack user create --domain default --password ADMIN_PASS admin
openstack role create admin

# 关联项目，用户，角色
openstack role add --project admin --user admin admin
# 在admin项目上，给admin用户赋予admin角色
openstack project create --domain default --description &quot;Service Project&quot; service

# 创建环境变量脚本
export OS_PROJECT_DOMAIN_NAME&#x3D;default
export OS_USER_DOMAIN_NAME&#x3D;default
export OS_PROJECT_NAME&#x3D;admin
export OS_USERNAME&#x3D;admin
export OS_PASSWORD&#x3D;ADMIN_PASS
export OS_IMAGE_API_VERSION&#x3D;2
export OS_IDENTITY_API_VERSION&#x3D;3
export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;controller:35357&#x2F;v3

# 作为admin用户请求认证令牌
openstack token issue  

# 如果不设置环境变量可以通过传入参数的方式申请
openstack --os-auth-url http:&#x2F;&#x2F;controller:35357&#x2F;v3   --os-project-domain-name default --os-user-domain-name default   --os-project-name admin --os-username admin --os-password ADMIN_PASS token issue

# 查看用户列表
openstack user list

# 查看endpoint列表
openstack endpoint list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4-安装glance镜像服务"><a href="#2-4-安装glance镜像服务" class="headerlink" title="2.4 安装glance镜像服务"></a>2.4 安装glance镜像服务</h3><p>​	镜像服务 (glance) 允许用户发现、注册和获取虚拟机镜像。</p>
<h4 id="2-4-1-安装步骤"><a href="#2-4-1-安装步骤" class="headerlink" title="2.4.1 安装步骤"></a>2.4.1 安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 数据库创库授权
mysql &gt;&gt;
CREATE DATABASE glance
GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;GLANCE_DBPASS&#39;;
GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;GLANCE_DBPASS&#39;;
  
 # 在keystone创建glance用户关联角色
 openstack user create --domain default --password GLANCE_PASS glance
 openstack role add --project service --user glance admin
 
 # 在keystone上创建服务和注册api
openstack service create --name glance   --description &quot;OpenStack Image&quot; image
openstack endpoint create --region RegionOne \
  image public http:&#x2F;&#x2F;controller:9292
openstack endpoint create --region RegionOne \
  image internal http:&#x2F;&#x2F;controller:9292
openstack endpoint create --region RegionOne \
  image admin http:&#x2F;&#x2F;controller:9292
  
# 查看已创建的信息
openstack role assignment list
openstack role list
openstack project list
openstack user list （要有glance用户）

# mysql中验证表是否已创建
[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep user
federated_user
local_user
user
user_group_membership
[root@controller ~]# mysql keystone -e &quot;show tables;&quot; | grep project
project
project_endpoint
project_endpoint_group

# 安装服务相应软件包
yum install openstack-glance -y

# 修改相应的配置文件--api
cp &#x2F;etc&#x2F;glance&#x2F;glance-api.conf&#123;,.bak&#125;
grep &#39;^[a-Z\[]&#39; &#x2F;etc&#x2F;glance&#x2F;glance-api.conf.bak &gt; &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf database connection mysql+pymysql:&#x2F;&#x2F;glance:GLANCE_DBPASS@controller&#x2F;glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken username glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf keystone_authtoken password GLANCE_PASS
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf paste_deploy flavor keystone
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store stores file,http
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store default_store file
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-api.conf glance_store filesystem_store_datadir &#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F;

# 修改相应的配置文件--registry
cp &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf&#123;,.bak&#125;
grep &#39;^[a-Z\[]&#39; &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf.bak &gt; &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf database connection mysql+pymysql:&#x2F;&#x2F;glance:GLANCE_DBPASS@controller&#x2F;glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken username glance
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf keystone_authtoken password GLANCE_PASS
openstack-config --set &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf paste_deploy flavor keystone

# md5值验证
md5sum &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
3e1a4234c133eda11b413788e001cba3  &#x2F;etc&#x2F;glance&#x2F;glance-api.conf
md5sum &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf
46acabd81a65b924256f56fe34d90b8f  &#x2F;etc&#x2F;glance&#x2F;glance-registry.conf

# 写入镜像服务数据库
su -s &#x2F;bin&#x2F;sh -c &quot;glance-manage db_sync&quot; glance # 会有Warning不用在意
# 验证
mysql glance -e &quot;show tables;&quot;

# 启动服务
systemctl enable openstack-glance-api.service   openstack-glance-registry.service
systemctl start openstack-glance-api.service   openstack-glance-registry.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4-2-上传镜像测试"><a href="#2-4-2-上传镜像测试" class="headerlink" title="2.4.2 上传镜像测试"></a>2.4.2 上传镜像测试</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 错误日志查看
&#x2F;var&#x2F;log&#x2F;glance

# 确保已获取token令牌
openstack token issue

# 下载测试镜像
wget http:&#x2F;&#x2F;download.cirros-cloud.net&#x2F;0.3.4&#x2F;cirros-0.3.4-x86_64-disk.img

# 上传测试镜像
openstack image create &quot;cirros&quot; \
--file cirros-0.3.4-x86_64-disk.img \
--disk-format qcow2 --container-format bare \
--public

# 上传文件确认
ls &#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F; (在&#x2F;etc&#x2F;glance&#x2F;glance-api.conf中设置)
mysql glance -e &quot;show tables;&quot; | grep image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-5-安装nova计算服务"><a href="#2-5-安装nova计算服务" class="headerlink" title="2.5 安装nova计算服务"></a>2.5 安装nova计算服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nova-api -- 接受并相应所有的计算服务请求，管理云主机生命周期
nova-compute（多个）-- 真正管理虚拟机(nova-compute调用libvirt)
nova-scheduler -- nova 调度器（挑选最合适的nova-compute）
nova-conductor -- 帮助nova-compute连接数据库
nova-network --  早期版本管理虚拟机的网络（已弃用，改用neutron，留着为了方便兼容早期版本）
nova-consoleauth和nova-novncproxy -- web版的vnc来直接操作云主机
novnproxy -- web版vnc客户端
nova-api-metadata -- 接受来自虚拟机发送的元数据请求（配合neutron-metadata-agent实现虚拟机定制化）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-1-控制节点–安装步骤"><a href="#2-5-1-控制节点–安装步骤" class="headerlink" title="2.5.1 控制节点–安装步骤"></a>2.5.1 控制节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创库授权
mysql &gt;&gt;
CREATE DATABASE nova_api;
CREATE DATABASE nova;
GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NOVA_DBPASS&#39;;
  
# 在keystone创建用户nova
openstack user create --domain default   --password NOVA_PASS nova
# 给Nova用户添加admin角色
openstack role add --project service --user nova admin

# 在keystone上创建服务和注册api
openstack service create --name nova   --description &quot;OpenStack Compute&quot; compute
openstack endpoint create --region RegionOne   compute public http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s
openstack endpoint create --region RegionOne   compute internal http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s
openstack endpoint create --region RegionOne   compute admin http:&#x2F;&#x2F;controller:8774&#x2F;v2.1&#x2F;%\(tenant_id\)s

# 安装相应软件包
yum install -y openstack-nova-api openstack-nova-conductor \
  openstack-nova-console openstack-nova-novncproxy \
  openstack-nova-scheduler
  
# 修改配置文件
cp &#x2F;etc&#x2F;nova&#x2F;nova.conf&#123;,.bak&#125;
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;nova&#x2F;nova.conf.bak &gt; &#x2F;etc&#x2F;nova&#x2F;nova.conf

openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT enabled_apis osapi_compute,metadata
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT my_ip 10.0.0.11
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT use_neutron True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf api_database connection mysql+pymysql:&#x2F;&#x2F;nova:NOVA_DBPASS@controller&#x2F;nova_api
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf database connection mysql+pymysql:&#x2F;&#x2F;nova:NOVA_DBPASS@controller&#x2F;nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf glance api_servers http:&#x2F;&#x2F;controller:9292
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken username nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;nova&#x2F;tmp
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_listen &#39;$my_ip&#39;
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_proxyclient_address &#39;$my_ip&#39;

# 校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
47ded61fdd1a79ab91bdb37ce59ef192  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage api_db sync&quot; nova
su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage db sync&quot; nova

# 验证
mysql nova_api -e &quot;show tables;&quot;
mysql nova -e &quot;show tables;&quot;

# 启动服务
systemctl enable openstack-nova-api.service \
openstack-nova-consoleauth.service openstack-nova-scheduler.service \
openstack-nova-conductor.service openstack-nova-novncproxy.service
systemctl restart openstack-nova-api.service \
openstack-nova-consoleauth.service openstack-nova-scheduler.service \
openstack-nova-conductor.service openstack-nova-novncproxy.service

# 验证
[root@controller ~]# nova service-list
+----+------------------+------------+----------+---------+-------+------------+-----------------+
| Id | Binary           | Host       | Zone     | Status  | State | Updated_at | Disabled Reason |
+----+------------------+------------+----------+---------+-------+------------+-----------------+
| 1  | nova-conductor   | controller | internal | enabled | down  | -          | -               |
| 4  | nova-scheduler   | controller | internal | enabled | down  | -          | -               |
| 5  | nova-consoleauth | controller | internal | enabled | down  | -          | -               |
+----+------------------+------------+----------+---------+-------+------------+-----------------+

# novncproxy 怎么检测起来没有？
[root@controller ~]# netstat -lntup | grep 6080
tcp        0      0 0.0.0.0:6080            0.0.0.0:*               LISTEN      8719&#x2F;python2
[root@controller ~]# ps -ef | grep 8719
nova       8719      1  0 21:53 ?        00:00:01 &#x2F;usr&#x2F;bin&#x2F;python2 &#x2F;usr&#x2F;bin&#x2F;nova-novncproxy --web &#x2F;usr&#x2F;share&#x2F;novnc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-1-计算节点–安装步骤"><a href="#2-5-1-计算节点–安装步骤" class="headerlink" title="2.5.1 计算节点–安装步骤"></a>2.5.1 计算节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装软件包
yum install -y openstack-nova-compute openstack-utils

# 修改配置文件
cp &#x2F;etc&#x2F;nova&#x2F;nova.conf&#123;,.bak&#125;
grep -Ev &#39;^$|#&#39; &#x2F;etc&#x2F;nova&#x2F;nova.conf.bak &gt; &#x2F;etc&#x2F;nova&#x2F;nova.conf

openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT enabled_apis osapi_compute,metadata
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT my_ip 10.0.0.31 # 注意ip
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT use_neutron True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf glance api_servers http:&#x2F;&#x2F;controller:9292
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken username nova
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf keystone_authtoken password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;nova&#x2F;tmp
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc enabled  True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_listen 0.0.0.0
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc vncserver_proxyclient_address &#39;$my_ip&#39;
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf vnc novncproxy_base_url http:&#x2F;&#x2F;controller:6080&#x2F;vnc_auto.html

# 校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
45cab6030a9ab82761e9f697d6d79e14  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 启动服务
systemctl enable libvirtd.service openstack-nova-compute.service
systemctl restart libvirtd.service openstack-nova-compute.service

# 服务启动错误排查
参考博客：https:&#x2F;&#x2F;www.codeleading.com&#x2F;article&#x2F;89785382846&#x2F;
cat &#x2F;etc&#x2F;nova&#x2F;nova.conf # compute1日志查看
报错 nova AccessRefused: (0, 0): (403) ACCESS_REFUSED
处理步骤：
在controller
cat &#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;rabbit@controller.log # 发现报错AMQPLAIN login refused: user &#39;openstack&#39; - invalid credentials 无效凭证
rabbitmqctl list_users # 确认是否还有openstack用户
rabbitmqctl add_user openstack RABBIT_PASS
rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
systemctl restart rabbitmq-server.service # 重新创用户，并重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-6-安装neutron网络服务"><a href="#2-6-安装neutron网络服务" class="headerlink" title="2.6 安装neutron网络服务"></a>2.6 安装neutron网络服务</h3><p>neutron-server – 端口9696，api接受和响应外部的网络管理请求</p>
<p>neutron-linuxbridge-agent –  负责创建桥接网卡</p>
<p>neutron-dhcp-agent – 负责分配ip</p>
<p>neutron-metadata-agent –  配合nova-metadata-api实现虚拟机的定制化操作</p>
<p>L3-agent – 实现三层网络vxlan（网络层）</p>
<h4 id="2-6-1-控制节点–安装步骤"><a href="#2-6-1-控制节点–安装步骤" class="headerlink" title="2.6.1 控制节点–安装步骤"></a>2.6.1 控制节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创库授权
Mysql &gt;&gt;
CREATE DATABASE neutron;
GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;localhost&#39; \
  IDENTIFIED BY &#39;NEUTRON_DBPASS&#39;;
GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;%&#39; \
  IDENTIFIED BY &#39;NEUTRON_DBPASS&#39;;
  
# 在keystone创建用户neutron
openstack user create --domain default   --password NEUTRON_PASS neutron
# 给neutron用户添加admin角色
openstack role add --project service --user neutron admin

# 在keystone上创建服务和注册api
openstack service create --name neutron   --description &quot;OpenStack Networking&quot; network
openstack endpoint create --region RegionOne   network public http:&#x2F;&#x2F;controller:9696
openstack endpoint create --region RegionOne   network internal http:&#x2F;&#x2F;controller:9696
openstack endpoint create --region RegionOne   network admin http:&#x2F;&#x2F;controller:9696

# 网络配置--公共网络
cp &#x2F;etc&#x2F;neutron&#x2F;neutron.conf&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf.bak  &gt; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf database connection mysql+pymysql:&#x2F;&#x2F;neutron:NEUTRON_DBPASS@controller&#x2F;neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT core_plugin ml2
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT service_plugins
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT notify_nova_on_port_status_changes True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT notify_nova_on_port_data_changes True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken username neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova username nova
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf nova password NOVA_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 type_drivers flat,vlan
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 tenant_network_types
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 mechanism_drivers linuxbridge
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2 extension_drivers port_security
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini ml2_type_flat flat_networks provider
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini securitygroup enable_ipset True
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini vxlan enable_vxlan False
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT  dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini DEFAULT  enable_isolated_metadata True
&gt;&gt;&gt;&gt;&gt;

cp &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini
&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini DEFAULT nova_metadata_ip controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini DEFAULT metadata_proxy_shared_secret METADATA_SECRET
&gt;&gt;&gt;&gt;&gt;

# 再次修改nova配置文件，添加neutron服务
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron url http:&#x2F;&#x2F;controller:9696
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron username neutron
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron service_metadata_proxy True
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron metadata_proxy_shared_secret METADATA_SECRET
# 校验文件
[root@controller ~]# md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
6334f359655efdbcf083b812ab94efc1  &#x2F;etc&#x2F;nova&#x2F;nova.conf

# 网络服务初始化脚本需要一个超链接
ln -s &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini &#x2F;etc&#x2F;neutron&#x2F;plugin.ini

# 同步数据库
su -s &#x2F;bin&#x2F;sh -c &quot;neutron-db-manage --config-file &#x2F;etc&#x2F;neutron&#x2F;neutron.conf \
  --config-file &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini upgrade head&quot; neutron
  
# 检查数据库
mysql neutron -e &quot;show tables;&quot;

# 重启Nova服务
systemctl restart openstack-nova-api.service

# 启动Neutron服务
systemctl enable neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service
systemctl start neutron-server.service   neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service

# 查看服务有没有起来
neutron agent-list
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+
| id                                   | agent_type         | host       | availability_zone | alive | admin_state_up | binary                    |
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+
| 0d68dc27-f2b8-4cae-9c30-cddd126076b4 | Linux bridge agent | controller |                   | :-)   | True           | neutron-linuxbridge-agent |
| 688cc47d-424d-4243-ae2b-b1c4b298a2a8 | Metadata agent     | controller |                   | :-)   | True           | neutron-metadata-agent    |
| c4c5e360-ee02-4b9b-a1a5-59a0d0d088b0 | DHCP agent         | controller | nova              | :-)   | True           | neutron-dhcp-agent        |
+--------------------------------------+--------------------+------------+-------------------+-------+----------------+---------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-6-2-计算节点–安装步骤"><a href="#2-6-2-计算节点–安装步骤" class="headerlink" title="2.6.2 计算节点–安装步骤"></a>2.6.2 计算节点–安装步骤</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装组件
yum install -y openstack-neutron-linuxbridge ebtables ipset

# 网络配置--公共网络
cp &#x2F;etc&#x2F;neutron&#x2F;neutron.conf&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf.bak  &gt; &#x2F;etc&#x2F;neutron&#x2F;neutron.conf
&gt;&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT rpc_backend rabbit
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf DEFAULT auth_strategy keystone
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_host controller
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_userid openstack
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_messaging_rabbit rabbit_password RABBIT_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_uri http:&#x2F;&#x2F;controller:5000
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken auth_type password
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken user_domain_name default
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken project_name service
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken username neutron
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf keystone_authtoken password NEUTRON_PASS
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;neutron.conf oslo_concurrency lock_path &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp
&gt;&gt;&gt;&gt;&gt;&gt;
# md5校验
md5sum &#x2F;etc&#x2F;nova&#x2F;nova.conf
328cd5f0745e26a420e828b0dfc2934e  &#x2F;etc&#x2F;nova&#x2F;nova.conf

cp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini&#123;,.bak&#125;
grep -Ev &quot;^$|#&quot; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini.bak &gt; &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini
&gt;&gt;&gt;&gt;&gt;&gt;
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:ens33  # 要修改网络接口名
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini vxlan enable_vxlan False
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
&gt;&gt;&gt;&gt;&gt;&gt;

# 再次修改nova配置文件，添加neutron配置
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron url http:&#x2F;&#x2F;controller:9696
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_url http:&#x2F;&#x2F;controller:35357
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron auth_type password
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron user_domain_name default
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron region_name RegionOne
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron project_name service
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron username neutron
openstack-config --set &#x2F;etc&#x2F;nova&#x2F;nova.conf neutron password NEUTRON_PASS

# 重启nova服务
systemctl restart openstack-nova-compute.service

# 启动linuxbridge代理服务
systemctl enable neutron-linuxbridge-agent.service
systemctl restart neutron-linuxbridge-agent.service

# 查看是否配置成功
controller执行 &gt;&gt; neutron agent-list
配置正确会多出来一个
Linux bridge agent | compute1   |                   | :-)   | True 

# 查看计算资源
openstack compute service list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-7-安装horizon-（Dashboard）web界面"><a href="#2-7-安装horizon-（Dashboard）web界面" class="headerlink" title="2.7 安装horizon （Dashboard）web界面"></a>2.7 安装horizon （Dashboard）web界面</h3><h4 id="2-7-1-安装步骤（控制节点"><a href="#2-7-1-安装步骤（控制节点" class="headerlink" title="2.7.1 安装步骤（控制节点)"></a>2.7.1 安装步骤（控制节点)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装组件包
yum install -y openstack-dashboard

# 修改配置文件
vim &#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings
&gt;&gt;&gt;&gt;
OPENSTACK_HOST &#x3D; &quot;controller&quot;
ALLOWED_HOSTS &#x3D; [&#39;*&#39;, ]
SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;
CACHES &#x3D; &#123;
    &#39;default&#39;: &#123;
         &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,
         &#39;LOCATION&#39;: &#39;controller:11211&#39;,
    &#125;
&#125;
OPENSTACK_KEYSTONE_URL &#x3D; &quot;http:&#x2F;&#x2F;%s:5000&#x2F;v3&quot; % OPENSTACK_HOST
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT &#x3D; True
OPENSTACK_API_VERSIONS &#x3D; &#123;
    &quot;identity&quot;: 3,
    &quot;image&quot;: 2,
    &quot;volume&quot;: 2,
&#125;
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN &#x3D; &quot;default&quot;
OPENSTACK_KEYSTONE_DEFAULT_ROLE &#x3D; &quot;user&quot;
OPENSTACK_NEUTRON_NETWORK &#x3D; &#123;
    ...
    &#39;enable_router&#39;: False,
    &#39;enable_quotas&#39;: False,
    &#39;enable_distributed_router&#39;: False,
    &#39;enable_ha_router&#39;: False,
    &#39;enable_lb&#39;: False,
    &#39;enable_firewall&#39;: False,
    &#39;enable_vpn&#39;: False,
    &#39;enable_fip_topology_check&#39;: False,
&#125;
TIME_ZONE &#x3D; &quot;Asia&#x2F;Shanghai&quot;
&gt;&gt;&gt;&gt;

# 解决不能进入页面的BUG
vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-dashboard.conf
添加一行 &gt;&gt; WSGIAppicationGroup %&#123;GLOBAL&#125;

# 重启服务
systemctl restart httpd.service memcached.service

# 登录界面
https:&#x2F;&#x2F;10.0.0.11&#x2F;dashboard
域:default
用户名:admin
密码:ADMIN_PASS

# 扩展：查看文件输入那个rpm包
rpm -qf &#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-7-2-Dashboard报错解决"><a href="#2-7-2-Dashboard报错解决" class="headerlink" title="2.7.2 Dashboard报错解决"></a>2.7.2 Dashboard报错解决</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 问题1--Invalid service catalog service: image
发生原因：
	openstack service list 存在两个 glance
解决方法：
    openstack service delete c12c125edc2041e3aaf2f250442162c6
    openstack service delete 6a11431b95bc44d1bd1e9371c0faa16b # 两个glance都删掉
    重复2.4.1在keystone上创建glance服务和注册api
    再重启服务systemctl restart httpd.service memcached.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-8-启动一个云主机"><a href="#2-8-启动一个云主机" class="headerlink" title="2.8 启动一个云主机"></a>2.8 启动一个云主机</h3><h3 id="2-8-1-创建步骤"><a href="#2-8-1-创建步骤" class="headerlink" title="2.8.1 创建步骤"></a>2.8.1 创建步骤</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建网络
neutron net-create --shared --provider:physical_network provider \
  --provider:network_type flat gs
  
# 在网络中创建一个子网
neutron subnet-create --name gs2 \
  --allocation-pool start&#x3D;10.0.0.101,end&#x3D;10.0.0.250 \
  --dns-nameserver 223.5.5.5 --gateway 10.0.0.2 \
  gs 10.0.0.0&#x2F;24
  
# 创建云主机硬件配置方案（规格）
openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano

# 创建密钥键值对
ssh-keygen -q -N &quot;&quot; -f ~&#x2F;.ssh&#x2F;id_rsa
openstack keypair create --public-key ~&#x2F;.ssh&#x2F;id_rsa.pub mykey
# 验证公钥的添加
openstack keypair list

# 添加安全组规则
openstack security group rule create --proto icmp default
openstack security group rule create --proto tcp --dst-port 22 default

# 在公有网络启动一个实例
openstack flavor list # 查看可用的配置规格
openstack image list # 查看可用镜像
openstack network list # 查看可用网络
openstack security group list # 查看已设置的安全组

openstack server create --flavor 规格名&#x2F;ID --image 镜像名&#x2F;ID \
  --nic net-id&#x3D;网络ID --security-group default \
  --key-name mykey 实例名称
示例：
openstack server create --flavor m1.tiny --image cirros \
--nic net-id&#x3D;cb032582-893b-414d-b78d-c89c6548612d --security-group default \
--key-name mykey my-instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-8-2-创建云主机问题解决"><a href="#2-8-2-创建云主机问题解决" class="headerlink" title="2.8.2 创建云主机问题解决"></a>2.8.2 创建云主机问题解决</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、启动云主机时，No valid host was found
【计算节点中】
查看云主机创建日志：&#x2F;var&#x2F;log&#x2F;nova&#x2F;nova-compute.log，里面有记录问题原因是CPU feature spec-ctrl not found
修改&#x2F;usr&#x2F;share&#x2F;libvirt&#x2F;cpu_map.xml，将和spec-ctrl相关的特性删除
然后重启服务
systemctl restart libvirtd openstack-nova-compute
参考博客：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;laolieren&#x2F;p&#x2F;solve_openstack_create_instance_error.html

# 2、云主机控制台seabios -- Booting from Hard Disk错误
【计算节点中】
vim &#x2F;etc&#x2F;nova&#x2F;nova.conf
&gt;&gt;&gt;&gt;
[libvirt]
virt_type &#x3D; qemu
cpu_mode &#x3D; none
&gt;&gt;&gt;&gt;
systemctl restart libvirtd openstack-nova-compute
重启云主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







]]></content>
      <categories>
        <category>运维</category>
        <category>（四）虚拟化之OpenStack</category>
      </categories>
  </entry>
  <entry>
    <title>01_MySQL数据库(一)</title>
    <url>/2022/07/13/03_Python/01_MySQL/01-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="1-MySQL数据库的安装"><a href="#1-MySQL数据库的安装" class="headerlink" title="1 MySQL数据库的安装"></a>1 MySQL数据库的安装</h2><h3 id="1-1-版本获取"><a href="#1-1-版本获取" class="headerlink" title="1.1 版本获取"></a>1.1 版本获取</h3><p>版本选择</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">目前用的较多的是5.6 &#x2F; 5.7 &#x2F; 8.0 三个版本
生产环境大多用5.X
其中5.6版本在2021年2月暂停更新支持，这意味着MySQL 5.6会有安全风险，请及时升级到MySQL 5.7或是MySQL 8系列
本文选用5.7版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>windows版本下载地址</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;downloads.mysql.com&#x2F;archives&#x2F;installer&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../../../img/image-20220713102756709.png" alt="image-20220713102756709"></p>
<h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><h2 id="2-数据库的基本操作"><a href="#2-数据库的基本操作" class="headerlink" title="2 数据库的基本操作"></a>2 数据库的基本操作</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>K8S系列(一)-安装K8S</title>
    <url>/2021/07/08/01_%E8%BF%90%E7%BB%B4/05-K8S/K8S%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%AE%89%E8%A3%85K8S/</url>
    <content><![CDATA[<p>课程目录：</p>
<blockquote>
<p>第一部分：K8S概念和架构</p>
<p>第二部分：K8S安装</p>
<p>​	kubeadm</p>
<p>​	二进制</p>
<p>第三部分：K8S核心概念</p>
<p>POD </p>
<p>CONTROLLER</p>
<p>SERVICE</p>
<p>INGRESS</p>
<p>RABC</p>
<p>HELM</p>
<p>持久化存储</p>
<p>第四部分：集群监控平台</p>
<p>第五部分：从零开始搭建高可用K8S集群</p>
<p>第六部分：在集群环境中部署项目</p>
</blockquote>
<h2 id="一、K8S概念和架构"><a href="#一、K8S概念和架构" class="headerlink" title="一、K8S概念和架构"></a>一、K8S概念和架构</h2><h3 id="1-K8S概述和特性"><a href="#1-K8S概述和特性" class="headerlink" title="1 K8S概述和特性"></a>1 K8S概述和特性</h3><h4 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h4><ul>
<li>K8S是谷歌在2014年开发的容器化集群管理系统</li>
<li>使用K8S可以进行容器化应用部署</li>
<li>使用K8S利于应用扩展</li>
<li>K8S目标是让部署容器化应用更加简洁和高效</li>
</ul>
<p>容器化部署的好处：</p>
<h4 id="1-2-K8S的特性和优势"><a href="#1-2-K8S的特性和优势" class="headerlink" title="1.2 K8S的特性和优势"></a>1.2 K8S的特性和优势</h4><p>自动装箱：自动部署应用容器</p>
<p>自我修复（自愈能力）： </p>
<p>水平扩展：副本数量增加</p>
<p>服务发现（负载均衡）：通过Service实现，为多个副本对外提供统一的入口，节点调度负载均衡</p>
<p>滚动更新：</p>
<p>版本回退：</p>
<p>密钥配置管理：不需要重新构建镜像，可以部署和更新密钥和应用配置</p>
<p>存储编排：</p>
<p>批处理：	</p>
<h3 id="2-K8S架构组件"><a href="#2-K8S架构组件" class="headerlink" title="2 K8S架构组件"></a>2 K8S架构组件</h3><h3 id="3-K8S核心概念"><a href="#3-K8S核心概念" class="headerlink" title="3 K8S核心概念"></a>3 K8S核心概念</h3><p>3.1 Pod</p>
<p>3.2 Controller</p>
<p>3.3 Service</p>
<h2 id="二、K8S安装"><a href="#二、K8S安装" class="headerlink" title="二、K8S安装"></a>二、K8S安装</h2><blockquote>
<p>master  192.168.44.146</p>
<p>node1	192.168.44.145</p>
<p>node2	192.168.44.144</p>
</blockquote>
<h3 id="1-kubeadm安装"><a href="#1-kubeadm安装" class="headerlink" title="1 kubeadm安装"></a>1 kubeadm安装</h3><h3 id="2-二进制安装"><a href="#2-二进制安装" class="headerlink" title="2 二进制安装"></a>2 二进制安装</h3><hr>
<p>生产环境通用需求：</p>
<p>​	服务的自动发现和负载均衡</p>
<p>​	自愈</p>
<p>​	一键升级和回滚</p>
<p>​	水平扩展（弹性伸缩） </p>
<h3 id="1-容器管理平台"><a href="#1-容器管理平台" class="headerlink" title="1 容器管理平台"></a>1 容器管理平台</h3><p>docker swarm</p>
<p>messos</p>
<p>marathon</p>
<p>kubernetes  (90%市场)</p>
<h2 id="2-K8S发展"><a href="#2-K8S发展" class="headerlink" title="2 K8S发展"></a>2 K8S发展</h2><p>发布频繁，一年4个版本	</p>
<h3 id="3-核心组件"><a href="#3-核心组件" class="headerlink" title="3 核心组件"></a>3 核心组件</h3><h2 id="二、K8S安装-1"><a href="#二、K8S安装-1" class="headerlink" title="二、K8S安装"></a>二、K8S安装</h2><blockquote>
<p>K8S安装方式很多：</p>
<ul>
<li>源码编译安装 ：golang编译环境</li>
<li>二进制安装 ：文档，全程手动，ansible等</li>
<li>kubeadm安装：网络要求</li>
<li>minikube ：开发者学习</li>
<li>yum安装</li>
</ul>
<p>这里使用yum安装的方法</p>
</blockquote>
<h3 id="1-虚拟机准备"><a href="#1-虚拟机准备" class="headerlink" title="1 虚拟机准备"></a>1 虚拟机准备</h3><blockquote>
<p>centos7, 1CPU 1G</p>
<p>设置主机名，<strong>添加hosts解析</strong></p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">k8s-master  --  10.0.0.21
k8s-node1   --  10.0.0.22
k8s-node2   --  10.0.0.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>配置Centos7源和epel7源</p>
<pre class="line-numbers language-he" data-language="he"><code class="language-he">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo
curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo
yum clean all
yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Master节点安装"><a href="#2-Master节点安装" class="headerlink" title="2 Master节点安装"></a>2 Master节点安装</h3><h4 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install docker -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-2-安装etcd"><a href="#2-2-安装etcd" class="headerlink" title="2.2 安装etcd"></a>2.2 安装etcd</h4><blockquote>
<p>etcd是一个nosql数据库</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install etcd -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改etcd配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;etcd&#x2F;etcd.conf
ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;0.0.0.0:2379&quot;
ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;10.0.0.21:2379&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>启动etcd服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable etcd
systemctl restart etcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>测试etcd</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">etcdctl set testdir&#x2F;testkey0 0
etcdctl get testdir&#x2F;testkey0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>etcdctl相关设置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">etcdctl -C http:&#x2F;&#x2F;10.0.0.21:2379 cluster-health<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-3-安装k8s服务"><a href="#2-3-安装k8s服务" class="headerlink" title="2.3 安装k8s服务"></a>2.3 安装k8s服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install kubernetes-master -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置文件修改</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;kubernetes&#x2F;apiserver
KUBE_API_ADDRESS&#x3D;&quot;--insecure-bind-address&#x3D;0.0.0.0&quot;
KUBE_API_PORT&#x3D;&quot;--port&#x3D;8080&quot;
KUBE_ETCD_SERVERS&#x3D;&quot;--etcd-servers&#x3D;http:&#x2F;&#x2F;10.0.0.21:2379&quot;
# 23行删除ServiceAccount，如下
KUBE_ADMISSION_CONTROL&#x3D;&quot;--admission-control&#x3D;NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota&quot; # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;kubernetes&#x2F;config
KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;10.0.0.21:8080&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>开放防火墙端口【重要】</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --zone&#x3D;public --add-port&#x3D;2379&#x2F;tcp --permanent
firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent
firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>启动服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable kube-apiserver
systemctl restart kube-apiserver
systemctl enable kube-controller-manager
systemctl restart kube-controller-manager
systemctl enable kube-scheduler
systemctl restart kube-scheduler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-Node节点安装"><a href="#3-Node节点安装" class="headerlink" title="3 Node节点安装"></a>3 Node节点安装</h3><h4 id="3-1-安装k8s-node服务"><a href="#3-1-安装k8s-node服务" class="headerlink" title="3.1 安装k8s-node服务"></a>3.1 安装k8s-node服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install kubernetes-node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编辑配置文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;kubernetes&#x2F;config
KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;10.0.0.21:8080&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;kubernetes&#x2F;kubelet
KUBELET_ADDRESS&#x3D;&quot;--address&#x3D;0.0.0.0&quot;
KUBELET_PORT&#x3D;&quot;--port&#x3D;10250&quot;
KUBELET_HOSTNAME&#x3D;&quot;--hostname-override&#x3D;10.0.0.22&quot;
KUBELET_API_SERVER&#x3D;&quot;--api-servers&#x3D;http:&#x2F;&#x2F;10.0.0.21:8080&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动服务</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable kubelet
systemctl restart kubelet
systemctl enable kube-proxy
systemctl restart kube-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-2-fannel网络服务安装"><a href="#3-2-fannel网络服务安装" class="headerlink" title="3.2 fannel网络服务安装"></a>3.2 fannel网络服务安装</h4><blockquote>
<p>用于节点之间通信</p>
</blockquote>
<p>所有节点安装并配置fannel</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install flannel -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;sysconfig&#x2F;flanneld
FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;10.0.0.21:2379&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">etcdctl mk &#x2F;atomic.io&#x2F;network&#x2F;config &#39;&#123;&quot;Network&quot;:&quot;172.16.0.0&#x2F;16&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重新启动服务—Master节点</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable fanneld
systemctl restart fanneld
systemctl restart kube-apiserver
systemctl restart kube-controller-manager
systemctl restart kube-scheduler	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重新启动服务—Node节点</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl enable fanneld
systemctl restart fanneld
systemctl restart kubelet
systemctl restart kube-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-配置Master为镜像服务器"><a href="#4-配置Master为镜像服务器" class="headerlink" title="4 配置Master为镜像服务器"></a>4 配置Master为镜像服务器</h3><h2 id="三、K8S使用"><a href="#三、K8S使用" class="headerlink" title="三、K8S使用"></a>三、K8S使用</h2><p>1 查看节点</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2 查看服务状态</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl get componentstatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="1-Pod使用"><a href="#1-Pod使用" class="headerlink" title="1 Pod使用"></a>1 Pod使用</h3><p>创建pod</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl create -f k8s_pod.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除pod</p>
<pre class="line-numbers language-she" data-language="she"><code class="language-she">kubectl delete pod oldboy
kubectl delete pod --all 删除所有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看pod</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl get pods
kubectl get pods -o wides<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看pod详细信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl descripe pod nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 更新</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl replace xxxx.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h4 id="1-1-创建一个pod-为什么要启动两个容器？"><a href="#1-1-创建一个pod-为什么要启动两个容器？" class="headerlink" title="1.1 创建一个pod,为什么要启动两个容器？"></a>1.1 创建一个pod,为什么要启动两个容器？</h4><blockquote>
<p>一个pod中可以挂多个容器</p>
</blockquote>
<p>比如创建一个niginx pod，将启动一个pod容器，一个nginx容器</p>
<p>Pod容器172.16.18.2</p>
<p>Nginx容器，共用pod容器ip</p>
<p>主要通过用POD来实现K8S的高级功能</p>
<h4 id="1-2-rc副本控制器的使用"><a href="#1-2-rc副本控制器的使用" class="headerlink" title="1.2 rc副本控制器的使用"></a>1.2 rc副本控制器的使用</h4><p>通过rc保证容器高可用</p>
<p>调整rc副本数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl scale rc myweb --replicates&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="1-3-利用rc实现滚动升级和一键回滚"><a href="#1-3-利用rc实现滚动升级和一键回滚" class="headerlink" title="1.3 利用rc实现滚动升级和一键回滚"></a>1.3 利用rc实现滚动升级和一键回滚</h4><p>案例：nginx 1.13升级1.15</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 每5s升级一个
kubectl rolling-update myweb -f nginx-rc1.15.yaml --update-period&#x3D;5s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>案例：nginx1.15回滚到1.13</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl rolling-update mywebv2 -f nginx-rc1.13.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="service的创建和访问"><a href="#service的创建和访问" class="headerlink" title="service的创建和访问"></a>service的创建和访问</h3><blockquote>
<p>外部访问容器，端口映射</p>
</blockquote>
<h4 id="K8S小结"><a href="#K8S小结" class="headerlink" title="K8S小结"></a>K8S小结</h4><p>1 端口30000开始？</p>
<p>2 查看yml字段编写帮助</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl explain svc.spec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（五）K8S</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL数据库(一)</title>
    <url>/2022/07/13/03_Python/01_MySQL/01_MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="1-MySQL数据库的安装"><a href="#1-MySQL数据库的安装" class="headerlink" title="1 MySQL数据库的安装"></a>1 MySQL数据库的安装</h2><h3 id="1-1-版本获取"><a href="#1-1-版本获取" class="headerlink" title="1.1 版本获取"></a>1.1 版本获取</h3><p>版本选择</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">目前用的较多的是5.6 &#x2F; 5.7 &#x2F; 8.0 三个版本
生产环境大多用5.X
其中5.6版本在2021年2月暂停更新支持，这意味着MySQL 5.6会有安全风险，请及时升级到MySQL 5.7或是MySQL 8系列
本文选用5.7版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>windows版本下载地址</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;downloads.mysql.com&#x2F;archives&#x2F;installer&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../../../img/image-20220713102756709.png" alt="image-20220713102756709"></p>
<h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><h2 id="2-数据库的基本操作"><a href="#2-数据库的基本操作" class="headerlink" title="2 数据库的基本操作"></a>2 数据库的基本操作</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/02_Python%E8%BF%9B%E9%98%B6/01_%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/04_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p>我们学习变量是为了让计算机能够像人一样去记忆事物的某种状态，而变量的值就是用来存储事物状态的，很明显事物的状态分成不同种类的（比如人的年龄，身高，职位，工资等等），所以变量值也应该有不同的类型，例如</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">salary <span class="token operator">=</span> <span class="token number">3.1</span> <span class="token comment"># 用浮点型去记录薪资</span>
age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment"># 用整型去记录年龄</span>
name <span class="token operator">=</span> <span class="token string">'lili'</span> <span class="token comment"># 用字符串类型去记录人名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-350a0a150010ed0dc13cf18062f4919b_720w.jpg" alt="img"></p>
<h2 id="二-数字类型"><a href="#二-数字类型" class="headerlink" title="二 数字类型"></a>二 数字类型</h2><h2 id="2-1-int整型"><a href="#2-1-int整型" class="headerlink" title="2.1 int整型"></a>2.1 int整型</h2><h3 id="2-1-1-作用"><a href="#2-1-1-作用" class="headerlink" title="2.1.1 作用"></a>2.1.1 作用</h3><p>用来记录人的年龄，出生年份，学生人数等整数相关的状态</p>
<h3 id="2-1-2-定义"><a href="#2-1-2-定义" class="headerlink" title="2.1.2 定义"></a>2.1.2 定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">age<span class="token operator">=</span><span class="token number">18</span>

birthday<span class="token operator">=</span><span class="token number">1990</span>

student_count<span class="token operator">=</span><span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-2-float浮点型"><a href="#2-2-float浮点型" class="headerlink" title="2.2 float浮点型"></a>2.2 float浮点型</h2><h3 id="2-2-1-作用"><a href="#2-2-1-作用" class="headerlink" title="2.2.1 作用"></a>2.2.1 作用</h3><p>用来记录人的身高，体重，薪资等小数相关的状态</p>
<h3 id="2-2-2-定义"><a href="#2-2-2-定义" class="headerlink" title="2.2.2 定义"></a>2.2.2 定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">height<span class="token operator">=</span><span class="token number">172.3</span>

weight<span class="token operator">=</span><span class="token number">103.5</span>

salary<span class="token operator">=</span><span class="token number">15000.89</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-3-数字类型的使用"><a href="#2-3-数字类型的使用" class="headerlink" title="2.3 数字类型的使用"></a>2.3 数字类型的使用</h2><p>1 、数学运算</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token operator">>></span><span class="token operator">></span> c
<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、比较大小</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token number">11</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">></span> y
<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三-字符串类型str"><a href="#三-字符串类型str" class="headerlink" title="三 字符串类型str"></a>三 字符串类型str</h2><h2 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h2><p>用来记录人的名字，家庭住址，性别等描述性质的状态</p>
<h2 id="3-2-定义"><a href="#3-2-定义" class="headerlink" title="3.2 定义"></a>3.2 定义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Tony'</span>

address <span class="token operator">=</span> <span class="token string">'上海市浦东新区'</span>

sex <span class="token operator">=</span> <span class="token string">'男'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用单引号、双引号、多引号，都可以定义字符串，本质上是没有区别的，但是</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、需要考虑引号嵌套的配对问题</span>
msg <span class="token operator">=</span> <span class="token string">"My name is Tony , I'm 18 years old!"</span> <span class="token comment">#内层有单引号，外层就需要用双引号</span>
<span class="token comment">#2、多引号可以写多行字符串</span>
msg <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
        天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。
        照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。
        不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。
      '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">数字可以进行加减乘除等运算，字符串呢？也可以，但只能进行<span class="token string">"相加"</span>和<span class="token string">"相乘"</span>运算。
<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'tony'</span>
<span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token string">'18'</span>
<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">+</span> age <span class="token comment">#相加其实就是简单的字符串拼接</span>
<span class="token string">'tony18'</span>
<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment">#相乘就相当于将字符串相加了5次</span>
<span class="token string">'tonytonytonytonytony'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-118b686f12172e202cd10eceb93a2edd_720w.jpg" alt="img"></p>
<h2 id="四-列表list"><a href="#四-列表list" class="headerlink" title="四 列表list"></a>四 列表list</h2><h2 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4.1 作用"></a>4.1 作用</h2><p>如果我们需要用一个变量记录多个学生的姓名，用数字类型是无法实现，字符串类型确实可以记录下来，比如</p>
<p>stu_names&#x3D;’张三 李四 王五’，但存的目的是为了取，此时若想取出第二个学生的姓名实现起来相当麻烦，而列表类型就是专门用来记录多个同种属性的值（比如同一个班级多个学生的姓名、同一个人的多个爱好等），并且存取都十分方便</p>
<h2 id="4-2-定义"><a href="#4-2-定义" class="headerlink" title="4.2 定义"></a>4.2 定义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> stu_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、列表类型是用索引来对应值，索引代表的是数据的位置，从0开始计数</span>
<span class="token operator">>></span><span class="token operator">></span> stu_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> stu_names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token string">'张三'</span>
<span class="token operator">>></span><span class="token operator">></span> stu_names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">'李四'</span>
<span class="token operator">>></span><span class="token operator">></span> stu_names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token string">'王五'</span>
<span class="token comment"># 2、列表可以嵌套，嵌套取值如下</span>
<span class="token operator">>></span><span class="token operator">></span> students_info<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'play'</span><span class="token punctuation">,</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> students_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#取出第一个学生的第一个爱好</span>
<span class="token string">'play'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="五-字典dict"><a href="#五-字典dict" class="headerlink" title="五 字典dict"></a>五 字典dict</h2><h2 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h2><p>如果我们需要用一个变量记录多个值，但多个值是不同属性的，比如人的姓名、年龄、身高，用列表可以存，但列表是用索引对应值的，而索引不能明确地表示值的含义，这就用到字典类型，字典类型是用key：value形式来存储数据，其中key可以对value有描述性的功能</p>
<h2 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2 定义"></a>5.2 定义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> person_info<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'height'</span><span class="token punctuation">:</span><span class="token number">185.3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="5-3-使用"><a href="#5-3-使用" class="headerlink" title="5.3 使用"></a>5.3 使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、字典类型是用key来对应值，key可以对值有描述性的功能，通常为字符串类型</span>
<span class="token operator">>></span><span class="token operator">></span> person_info<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'height'</span><span class="token punctuation">:</span><span class="token number">185.3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> person_info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
<span class="token string">'tony'</span>
<span class="token operator">>></span><span class="token operator">></span> person_info<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>
<span class="token number">18</span>
<span class="token operator">>></span><span class="token operator">></span> person_info<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span>
<span class="token number">185.3</span>
<span class="token comment"># 2、字典可以嵌套，嵌套取值如下</span>
<span class="token operator">>></span><span class="token operator">></span> students<span class="token operator">=</span><span class="token punctuation">[</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'play'</span><span class="token punctuation">,</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">,</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'rose'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'read'</span><span class="token punctuation">,</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hobbies'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#取第二个学生的第二个爱好</span>
<span class="token string">'sleep'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="六-布尔bool"><a href="#六-布尔bool" class="headerlink" title="六 布尔bool"></a>六 布尔bool</h2><h2 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h2><p>用来记录真假这两种状态</p>
<h2 id="6-2-定义"><a href="#6-2-定义" class="headerlink" title="6.2 定义"></a>6.2 定义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> is_ok <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> is_ok <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="6-3-使用"><a href="#6-3-使用" class="headerlink" title="6.3 使用"></a>6.3 使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">通常用来当作判断的条件，我们将在<span class="token keyword">if</span>判断中用到它<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-a933426890a5ab350b920e812f7d7b99_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>编辑于 2022-04-26 18:53</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/03_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p>我们知道学习 <strong>Python</strong> 语言的目的是为了与计算机进行沟通&#x2F;交流，从而控制计算机帮助我们做一些事情，所以，在 <strong>Python</strong> 语言的所有语法中，每个语法存在的意义都是为了让计算机能够像人类一样，直白地讲，就是让计算机具备我们人类的某一项技能。这是我们理解后续所有 <strong>Python</strong> 语法的根本，一定要熟记。</p>
<h2 id="二-变量"><a href="#二-变量" class="headerlink" title="二 变量"></a>二 变量</h2><h2 id="一、什么是变量？"><a href="#一、什么是变量？" class="headerlink" title="一、什么是变量？"></a>一、什么是变量？</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 变量就是可以变化的量，量指的是事物的状态，比如人的年龄、性别，游戏角色的等级、金钱等等</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、为什么要有变量？"><a href="#二、为什么要有变量？" class="headerlink" title="二、为什么要有变量？"></a>二、为什么要有变量？</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的</span>
<span class="token comment"># 详细地说：</span>
<span class="token comment"># 程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态，以及状态的变化。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="三、怎么使用变量（先定义、后使用）"><a href="#三、怎么使用变量（先定义、后使用）" class="headerlink" title="三、怎么使用变量（先定义、后使用）"></a>三、怎么使用变量（先定义、后使用）</h2><h3 id="3-1、变量的定义与使用"><a href="#3-1、变量的定义与使用" class="headerlink" title="3.1、变量的定义与使用"></a>3.1、变量的定义与使用</h3><p>变量的定义由三部分组成，如下图</p>
<p><img src="/../../../img/image-20220718091017221.png" alt="image-20220718091017221"></p>
<p>定义变量示范如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Jason'</span> <span class="token comment"># 记下人的名字为'Jason'</span>
sex <span class="token operator">=</span> <span class="token string">'男'</span>    <span class="token comment"># 记下人的性别为男性</span>
age <span class="token operator">=</span> <span class="token number">18</span>      <span class="token comment"># 记下人的年龄为18岁</span>
salary <span class="token operator">=</span> <span class="token number">30000.1</span>  <span class="token comment"># 记下人的薪资为30000.1元</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>解释器执行到变量定义的代码时会申请内存空间存放变量值，然后将变量值的内存地址绑定给变量名，以变量的定义age&#x3D;18为例，如下图</p>
<p>插图：定义变量申请内存</p>
<p>通过变量名即可引用到对应的值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通过变量名即可引用到值，我们可以结合print()功能将其打印出来</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment"># 通过变量名age找到值18，然后执行print(18),输出：18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="3-2、变量名的命名规范"><a href="#3-2、变量名的命名规范" class="headerlink" title="3.2、变量名的命名规范"></a>3.2、变量名的命名规范</h3><p>变量名的命名应该见名知意</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果我们要存储的数据18代表的是一个人的年龄，那么变量名推荐命名为age</span>
age <span class="token operator">=</span> <span class="token number">18</span> 
<span class="token comment"># 如果我们要存储的数据18代表的是一个人的等级，那么变量名推荐命名为level</span>
level <span class="token operator">=</span> <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他详细规范如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 命名规范</span>
<span class="token number">1.</span> 变量名只能是 字母、数字或下划线的任意组合
<span class="token number">2.</span> 变量名的第一个字符不能是数字
<span class="token number">3.</span> 关键字不能声明为变量名，常用关键字如下
<span class="token punctuation">[</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span><span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'print'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span>

<span class="token comment"># 错误示范如下：</span>
<span class="token operator">*</span>a<span class="token operator">=</span><span class="token number">123</span>
$b<span class="token operator">=</span><span class="token number">456</span>
c$<span class="token operator">=</span><span class="token number">789</span>
2_name<span class="token operator">=</span><span class="token string">'lili'</span>
<span class="token number">123</span><span class="token operator">=</span><span class="token string">'lili'</span>
<span class="token keyword">and</span><span class="token operator">=</span><span class="token number">123</span>
年龄<span class="token operator">=</span><span class="token number">18</span> <span class="token comment"># 强烈建议不要使用中文命名</span>

<span class="token comment"># 正确示范如下</span>
age_of_jason<span class="token operator">=</span><span class="token number">31</span>
page1<span class="token operator">=</span><span class="token string">'首页'</span>
_class<span class="token operator">=</span><span class="token string">'终极一班'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3、变量名的命名风格"><a href="#3-3、变量名的命名风格" class="headerlink" title="3.3、变量名的命名风格"></a>3.3、变量名的命名风格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 风格一：驼峰体</span>
AgeOfTony <span class="token operator">=</span> <span class="token number">56</span> 
NumberOfStudents <span class="token operator">=</span> <span class="token number">80</span>
<span class="token comment"># 风格二：纯小写下划线(在python中，变量名的命名推荐使用该风格)</span>
age_of_tony <span class="token operator">=</span> <span class="token number">56</span> 
number_of_students <span class="token operator">=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-4、变量值的三大特性"><a href="#3-4、变量值的三大特性" class="headerlink" title="3.4、变量值的三大特性"></a>3.4、变量值的三大特性</h3><p>变量的值具备三大特性</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、id</span>
反应的是变量在内存中的唯一编号，内存地址不同<span class="token builtin">id</span>肯定不同

<span class="token comment">#2、type</span>
变量值的类型

<span class="token comment">#3、value</span>
变量值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看变量值三大特性的方式如下，我们将会在运算符中用到变量值的三大特性</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token string">'Info Tony:18'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x
<span class="token number">4376607152</span>，<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token string">'Info Tony:18'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>了解：<a href="https://zhuanlan.zhihu.com/p/113408690">Python是一门解释型的强类型动态语言</a></p>
<h2 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h2><h2 id="3-1、什么是常量？"><a href="#3-1、什么是常量？" class="headerlink" title="3.1、什么是常量？"></a>3.1、什么是常量？</h2><p>常量指在程序运行过程中不会改变的量</p>
<h2 id="3-2、为什么要有常量？"><a href="#3-2、为什么要有常量？" class="headerlink" title="3.2、为什么要有常量？"></a>3.2、为什么要有常量？</h2><p>在程序运行过程中，有些值是固定的、不应该被改变，比如圆周率 3.141592653…</p>
<h2 id="3-3、怎么使用常量？"><a href="#3-3、怎么使用常量？" class="headerlink" title="3.3、怎么使用常量？"></a>3.3、怎么使用常量？</h2><p>在Python中没有一个专门的语法定义常量，约定俗成是用全部大写的变量名表示常量。如：PI&#x3D;3.14159。所以单从语法层面去讲，常量的使用与变量完全一致。</p>
<p><img src="/../../../img/image-20220718091033465.png" alt="image-20220718091033465"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=4">https://www.bilibili.com/video/av73342471?p=4www.bilibili.com/video/av73342471?p=4</a></p>
]]></content>
  </entry>
  <entry>
    <title>一、计算机核心基础</title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-引子"><a href="#1-引子" class="headerlink" title="1 引子:"></a>1 引子:</h2><p>接下来一段时间，我们的目标的是：学会使用python这门编程语言来编写ATM+购物车程序，那么问题来了:</p>
<h3 id="1-1-什么是语言？什么是编程语言？为何要有编程语言？"><a href="#1-1-什么是语言？什么是编程语言？为何要有编程语言？" class="headerlink" title="1.1 什么是语言？什么是编程语言？为何要有编程语言？"></a>1.1 什么是语言？什么是编程语言？为何要有编程语言？</h3><p><img src="/../../../img/image-20220715110229082.png" alt="image-20220715110229082"></p>
<p>语言其实就是人与人之间沟通的介质，如英语，汉语，俄语等。</p>
<p>而编程语言则是人与计算机之间沟通的介质。</p>
<p>那么为何要有编程语言，或者说人为何要与计算机沟通呢？这是因为在编程的世界里，计算机就好比是人的奴隶，人与计算机沟通的目的就是为了奴役计算机，让计算机按照人类的思维逻辑自发地去工作从而把人力解放出来。</p>
<p>此处我们可以提炼出如下两个重要的概念</p>
<h3 id="1-2-什么是编程？为什么要编程？"><a href="#1-2-什么是编程？为什么要编程？" class="headerlink" title="1.2 什么是编程？为什么要编程？"></a>1.2 什么是编程？为什么要编程？</h3><p>编程就是人把自己想命令计算机干的事用编程语言翻译出来并写到文件里（这一系列的文件就是程序），那么为什么要编程？</p>
<p>小人类编程的目的就是为了让计算机按照人类的思维逻辑(程序)自发地去工作从而把人力解放出来。</p>
<p>综上，我们接下来的学习应该分为两个层面</p>
<p>1、为了更好地控制人类的奴隶（即计算机），我们需要学习计算机是由什么组成的、它能做什么事、它是怎样工作的（详见计算机组成原理、操作系统概述）</p>
<p>2、我们需要学习编程语言，从而把原来需要人力来完成的业务（比如ATM和购物）交给计算机去做</p>
<h2 id="2-计算机组成原理"><a href="#2-计算机组成原理" class="headerlink" title="2 计算机组成原理"></a>2 计算机组成原理</h2><h3 id="2-1、什么是计算机？"><a href="#2-1、什么是计算机？" class="headerlink" title="2.1、什么是计算机？"></a>2.1、什么是计算机？</h3><p>俗称电脑，即通电的大脑，电脑二字蕴含了人类对计算机的终极期望，希望它能真的像人脑一样去工作，从而解放人力。</p>
<h3 id="2-2、为什么要用计算机？"><a href="#2-2、为什么要用计算机？" class="headerlink" title="2.2、为什么要用计算机？"></a>2.2、为什么要用计算机？</h3><p>世界是由聪明的懒人统治的，任何时期，总有一群聪明的懒人想要奴隶别人。在奴隶制社会，聪明的懒人奴役的是真正的人，而人是无法不吃、不喝、不睡觉一直工作的，但是计算机作为一台机器是可以做到的，所以把计算机当奴隶是上上之选。</p>
<h3 id="2-3、计算机的五大组成部分"><a href="#2-3、计算机的五大组成部分" class="headerlink" title="2.3、计算机的五大组成部分"></a>2.3、计算机的五大组成部分</h3><p>计算机有五大组成部分，既然计算机是人的奴隶，那么计算机设计核心肯定也是在模仿真正的人，所以我们完全可以把计算机的五大组件比喻成人类的各种器官</p>
<h4 id="2-3-1、控制器"><a href="#2-3-1、控制器" class="headerlink" title="2.3.1、控制器"></a>2.3.1、控制器</h4><p>控制器是计算机的指挥系统，用来控制计算机其他组件的运行，相当于人类的大脑</p>
<h4 id="2-3-2、运算器"><a href="#2-3-2、运算器" class="headerlink" title="2.3.2、运算器"></a>2.3.2、运算器</h4><p>运算器是计算机的运算功能，用来做算术运算和逻辑运算，相当于人脑。</p>
<p>ps：控制器+运算器&#x3D;CPU，cpu相当于人的大脑</p>
<p>cpu详解见：</p>
<p><a href="https://www.cnblogs.com/xiaoyuanqujing/articles/11640866.html">https://www.cnblogs.com/xiaoyuanqujing/articles/11640866.html</a></p>
<h4 id="2-3-3、存储器"><a href="#2-3-3、存储器" class="headerlink" title="2.3.3、存储器"></a>2.3.3、存储器</h4><p>存储器是计算机的记忆功能，用来存取数据。</p>
<p>存储器主要分为内存与外存：</p>
<p> 内存相当于人的短期记忆。断电数据丢失</p>
<p> 外存(如磁盘),相当于记事的本子，断电数据不会丢失，是用来永久保存数据的</p>
<p> ps：内存的存取速度要远远高于外存</p>
<h4 id="2-3-4、输入设备input"><a href="#2-3-4、输入设备input" class="headerlink" title="2.3.4、输入设备input"></a>2.3.4、输入设备input</h4><p>输入设备是计算接收外界输入数据的工具，如键盘、鼠标，相当于人的眼睛或耳朵。</p>
<h4 id="2-3-5、输出设备output"><a href="#2-3-5、输出设备output" class="headerlink" title="2.3.5、输出设备output"></a>2.3.5、输出设备output</h4><p>输出设备是计算机向外输出数据的工具，如显示器、打印机，相当于人说的话，写出的文章。</p>
<p>ps：存储器如内存、磁盘等既是输入设备又是输出设备，统称为IO设备</p>
<h4 id="一个非常重要的基础知识-与运行程序相关的三大核心硬件"><a href="#一个非常重要的基础知识-与运行程序相关的三大核心硬件" class="headerlink" title="一个非常重要的基础知识:与运行程序相关的三大核心硬件"></a>一个非常重要的基础知识:与运行程序相关的三大核心硬件</h4><p>我们编写的程序一定是要运行于计算机硬件之上，而站在硬件的角度，与运行程序有关的三大核心硬件为CPU、内存、硬盘。</p>
<p>程序最先是存放于硬盘中的，程序的运行是先从硬盘把代码加载到内存中，然后cpu是从内存中读取指令运行。</p>
<p><strong>ps：了解其他计算机硬件知识</strong></p>
<p><a href="https://www.cnblogs.com/linhaifeng/p/6523843.html#4462371">https://www.cnblogs.com/linhaifeng/p/6523843.html#4462371</a></p>
<h2 id="3-操作系统概述"><a href="#3-操作系统概述" class="headerlink" title="3 操作系统概述"></a>3 操作系统概述</h2><h3 id="3-1、操作系统的由来"><a href="#3-1、操作系统的由来" class="headerlink" title="3.1、操作系统的由来"></a>3.1、操作系统的由来</h3><p> 大前提：我们编程目的就是为了奴役计算机，让计算机硬件自发地运行起来，然而硬件毕竟是”死的“，硬件的运行都是由软件支配。</p>
<p> 倘若我们要开发一个应用程序，比如暴风音影，该软件的一个核心业务就是播放视频，开发者若要编写程序完成播放视频这个业务逻辑，必先涉及到底层硬件硬盘的基本运作（视频文件都是先存放于硬盘中），这意味着开发者在编写业务逻辑代码之前，必须先编写一个控制硬盘基本运行的控制程序，然而这仅仅只是一个开始，事实上，在编写应用程序的业务逻辑前，需要开发者编写出一套完整的控制程序用来控制所有硬件的基本运行（这要求开发者需要详细了解计算机硬件的各种控制细节，例如我们必须把CPU里面所有指令集都掌握一遍），如此，所有的开发者在开发程序时都必须依次开发两种：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、编写一套完整的的控制程序，用来控制硬件的基本运行，以及把复杂的硬件的操作封装成简单的接口</span>
<span class="token comment">#2、基于控制程序的接口开发包含一系列业务逻辑的程序，为了与控制程序区分，可以称为应用程序，以ATM这款应用程序为例，业务逻辑有提款、转账、查询余额等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 综上，对于不同公司的开发者来说，应用程序的业务逻辑各不相同，但硬件的控制程序都大致相同，为了避免所有程序员做重复劳动，以及不用再耗费精力去了解所有硬件的运行细节，有公司专门跳出来承担起控制程序的开发任务，这里所说的控制程序指的就是操作系统。</p>
<p> 操作系统的功能就是帮我们把复杂的硬件的控制封装成简单的接口，对于开发应用程序来说只需要调用操作系统提供给我们的接口即可</p>
<h3 id="3-2、系统软件与应用软件"><a href="#3-2、系统软件与应用软件" class="headerlink" title="3.2、系统软件与应用软件"></a>3.2、系统软件与应用软件</h3><p>硬件以上运行的都是软件，而软件分为两类：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一、应用软件（例如qq、word、暴风影音，我们学习python就是为了开发应用软件的）</span>

<span class="token comment">#二、操作系统，操作系统应用软件与硬件之间的一个桥梁，是协调、管理、控制计算机硬件与应用软件资源的控制程序。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3、计算机系统三层结构"><a href="#3-3、计算机系统三层结构" class="headerlink" title="3.3、计算机系统三层结构"></a>3.3、计算机系统三层结构</h3><p>综上，我们开发应用程序本质是在控制硬件，但是我们直接打交道的是操作系统，应用程序都是通过操作系统来间接地操作硬件的，所以一套完整的计算机系统分为三层，如下</p>
<p><img src="/../../../img/image-20220715110139880.png" alt="image-20220715110139880"></p>
<h3 id="一个非常重要的基础概念：平台"><a href="#一个非常重要的基础概念：平台" class="headerlink" title="一个非常重要的基础概念：平台"></a>一个非常重要的基础概念：平台</h3><p>应用程序都是运行于操作系统之上，而操作系统则是运行于硬件之上的，所以承载应用程序的是一台运行有操作系统的计算机，称之为应用程序的运行平台，即：硬件 + 操作系统 &#x3D;&#x3D; 平台</p>
<p><img src="/../../../img/image-20220715110156372.png" alt="image-20220715110156372"></p>
<p>常见的平台有：windows系统+某款硬件、linux系统+某款硬件、ubuntu+某款硬件等，我们在开发应用程序时就需要考虑到应用程序的跨平台性，如果能开发出一款可以在任意平台运行的应用程序，那对于开发者来说真是极大的福音。而决定应用软件的跨平台性的关键因素往往是编程语言的选择，python恰好是一款跨平台性语言，这也是我们学习它的原因之一。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Python入门</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/05_Python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 解释器在执行到定义变量的语法时，会申请内存空间来存放变量的值，而内存的容量是有限的，这就涉及到变量值所占用内存空间的回收问题，当一个变量值没有用了（简称垃圾）就应该将其占用的内存给回收掉，那什么样的变量值是没有用的呢？</p>
<p>单从逻辑层面分析，我们定义变量将变量值存起来的目的是为了以后取出来使用，而取得变量值需要通过其绑定的直接引用（如x&#x3D;10，10被x直接引用）或间接引用（如l&#x3D;[x,]，x&#x3D;10，10被x直接引用，而被容器类型l间接引用），所以当一个变量值不再绑定任何引用时，我们就无法再访问到该变量值了，该变量值自然就是没有用的，就应该被当成一个垃圾回收。</p>
<p>毫无疑问，内存空间的申请与回收都是非常耗费精力的事情，而且存在很大的危险性，稍有不慎就有可能引发内存溢出问题，好在Cpython解释器提供了自动的垃圾回收机制来帮我们解决了这件事。</p>
<p><img src="https://pic4.zhimg.com/80/v2-fdd6ee1176778e295514ae8f3d0d6053_720w.jpg" alt="img"></p>
<h2 id="二、什么是垃圾回收机制？"><a href="#二、什么是垃圾回收机制？" class="headerlink" title="二、什么是垃圾回收机制？"></a>二、什么是垃圾回收机制？</h2><p>垃圾回收机制（简称GC）是Python解释器自带一种机，专门用来回收不可用的变量值所占用的内存空间</p>
<h2 id="三、为什么要用垃圾回收机制？"><a href="#三、为什么要用垃圾回收机制？" class="headerlink" title="三、为什么要用垃圾回收机制？"></a>三、为什么要用垃圾回收机制？</h2><p>程序运行过程中会申请大量的内存空间，而对于一些无用的内存空间如果不及时清理的话会导致内存使用殆尽（内存溢出），导致程序崩溃，因此管理内存是一件重要且繁杂的事情，而python解释器自带的垃圾回收机制把程序员从繁杂的内存管理中解放出来。</p>
<p><img src="https://pic2.zhimg.com/80/v2-1dade7ff0e1a23520534e517b2cde6b1_720w.jpg" alt="img"></p>
<h2 id="四、垃圾回收机制原理分析"><a href="#四、垃圾回收机制原理分析" class="headerlink" title="四、垃圾回收机制原理分析"></a>四、垃圾回收机制原理分析</h2><p>Python的GC模块主要运用了“引用计数”（reference counting）来跟踪和回收垃圾。在引用计数的基础上，还可以通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用的问题，并且通过“分代回收”（generation collection）以空间换取时间的方式来进一步提高垃圾回收的效率。</p>
<p><img src="https://pic1.zhimg.com/80/v2-d0747b871d71091eff8ab5b0ebb6b3b0_720w.jpg" alt="img"></p>
<h2 id="4-1、什么是引用计数？"><a href="#4-1、什么是引用计数？" class="headerlink" title="4.1、什么是引用计数？"></a>4.1、什么是引用计数？</h2><p>引用计数就是：变量值被变量名关联的次数</p>
<p>如：age&#x3D;18</p>
<p>变量值18被关联了一个变量名age，称之为引用计数为1</p>
<p><img src="https://pic3.zhimg.com/80/v2-89915f2dc64db1fe79ce739a233bb09a_720w.jpg" alt="img"></p>
<p>引用计数增加：</p>
<p>age&#x3D;18 （此时，变量值18的引用计数为1）</p>
<p>m&#x3D;age （把age的内存地址给了m，此时，m,age都关联了18，所以变量值18的引用计数为2）</p>
<p><img src="https://pic4.zhimg.com/80/v2-8a46e8993c193017bbbbca370ce6970b_720w.jpg" alt="img"></p>
<p>引用计数减少：</p>
<p>age&#x3D;10（名字age先与值18解除关联，再与3建立了关联，变量值18的引用计数为1）</p>
<p>del m（del的意思是解除变量名x与变量值18的关联关系，此时，变量18的引用计数为0）</p>
<p><img src="https://pic3.zhimg.com/80/v2-6d0ed3fa462194215235ae22888b373a_720w.jpg" alt="img"></p>
<p>值18的引用计数一旦变为0，其占用的内存地址就应该被解释器的垃圾回收机制回收</p>
<h2 id="4-2、引用计数扩展阅读"><a href="#4-2、引用计数扩展阅读" class="headerlink" title="4.2、引用计数扩展阅读"></a>4.2、引用计数扩展阅读</h2><p>变量值被关联次数的增加或减少，都会引发引用计数机制的执行（增加或减少值的引用计数），这存在明显的效率问题。</p>
<p><img src="https://pic1.zhimg.com/80/v2-2876d1bad8466226f58b1edcb84714a0_720w.jpg" alt="img"></p>
<p>如果说执行效率还仅仅是引用计数机制的一个软肋的话，那么很不幸，引用计数机制还存在着一个致命的弱点，即循环引用（也称交叉引用）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如下我们定义了两个列表，简称列表1与列表2，变量名l1指向列表1，变量名l2指向列表2</span>
<span class="token operator">>></span><span class="token operator">></span> l1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span>  <span class="token comment"># 列表1被引用一次，列表1的引用计数变为1   </span>
<span class="token operator">>></span><span class="token operator">></span> l2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'yyy'</span><span class="token punctuation">]</span>  <span class="token comment"># 列表2被引用一次，列表2的引用计数变为1   </span>
<span class="token operator">>></span><span class="token operator">></span> l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>             <span class="token comment"># 把列表2追加到l1中作为第二个元素，列表2的引用计数变为2</span>
<span class="token operator">>></span><span class="token operator">></span> l2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>             <span class="token comment"># 把列表1追加到l2中作为第二个元素，列表1的引用计数变为2</span>

<span class="token comment"># l1与l2之间有相互引用</span>
<span class="token comment"># l1 = ['xxx'的内存地址,列表2的内存地址]</span>
<span class="token comment"># l2 = ['yyy'的内存地址,列表1的内存地址]</span>
<span class="token operator">>></span><span class="token operator">></span> l1
<span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'yyy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l2
<span class="token punctuation">[</span><span class="token string">'yyy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> l1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token string">'xxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>循环引用会导致：值不再被任何名字关联，但是值的引用计数并不会为0，应该被回收但不能被回收，什么意思呢？试想一下，请看如下操作</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> l1 <span class="token comment"># 列表1的引用计数减1，列表1的引用计数变为1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> l2 <span class="token comment"># 列表2的引用计数减1，列表2的引用计数变为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>此时，只剩下列表1与列表2之间的相互引用，两个列表的引用计数均不为0，但两个列表不再被任何其他对象关联，没有任何人可以再引用到它们，所以它俩占用内存空间应该被回收，但由于相互引用的存在，每一个对象的引用计数都不为0，因此这些对象所占用的内存永远不会被释放，所以循环引用是致命的，这与手动进行内存管理所产生的内存泄露毫无区别。 所以Python引入了“标记-清除” 与“分代回收”来分别解决引用计数的循环引用与效率低的问题</p>
<p><img src="https://pic1.zhimg.com/80/v2-3c62f9500a8809200caa264257b93b14_720w.jpg" alt="img"></p>
<h3 id="4-2-1-标记-清除"><a href="#4-2-1-标记-清除" class="headerlink" title="4.2.1 标记-清除"></a>4.2.1 标记-清除</h3><p>容器对象（比如：list，set，dict，class，instance）都可以包含对其他对象的引用，所以都可能产生循环引用。而“标记-清除”计数就是为了解决循环引用的问题。</p>
<p>在了解标记清除算法前，我们需要明确一点，关于变量的存储，内存中有两块区域：堆区与栈区，在定义变量时，变量名与值内存地址的关联关系存放于栈区，变量值存放于堆区，内存管理回收的则是堆区的内容，详解如下图,</p>
<p>定义了两个变量x &#x3D; 10、y &#x3D; 20</p>
<p><img src="https://pic1.zhimg.com/80/v2-73d5845ef7dc5a403333d2099d456fc0_720w.jpg" alt="img"></p>
<p>当我们执行x&#x3D;y时，内存中的栈区与堆区变化如下</p>
<p><img src="https://pic1.zhimg.com/80/v2-9ec5b20fd2c2d2e9c90194d57bcf7778_720w.jpg" alt="img"></p>
<p>标记&#x2F;清除算法的做法是当应用程序可用的内存空间被耗尽的时，就会停止整个程序，然后进行两项工作，第一项则是标记，第二项则是清除</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、标记</span>
通俗地讲就是：标记的过程就行相当于从栈区出发一条线，“连接”到堆区，再由堆区间接“连接”到其他地址，凡是被这条自栈区起始的线连接到内存空间都属于可以访达的，会被标记为存活

具体地：标记的过程其实就是，遍历所有的GC Roots对象<span class="token punctuation">(</span>栈区中的所有内容或者线程都可以作为GC Roots对象），然后将所有GC Roots的对象可以直接或间接访问到的对象标记为存活的对象，其余的均为非存活对象，应该被清除。
                          
<span class="token comment">#2、清除</span>
清除的过程将遍历堆中所有的对象，将没有标记存活的对象全部清除掉。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接引用指的是从栈区出发直接引用到的内存地址，间接引用指的是从栈区出发引用到堆区后再进一步引用到的内存地址，以我们之前的两个列表l1与l2为例画出如下图像</p>
<p><img src="https://pic3.zhimg.com/80/v2-1bfee07a84fc747da5980d990430d10a_720w.jpg" alt="img"></p>
<p>当我们同时删除l1与l2时，会清理到栈区中l1与l2的内容</p>
<p><img src="https://pic2.zhimg.com/80/v2-509de2bd1adfb0566368719c73620fbd_720w.jpg" alt="img"></p>
<p>这样在启用标记清除算法时，发现栈区内不再有l1与l2（只剩下堆区内二者的相互引用），于是列表1与列表2都没有被标记为存活，二者会被清理掉，这样就解决了循环引用带来的内存泄漏问题。</p>
<h3 id="4-2-2-分代回收"><a href="#4-2-2-分代回收" class="headerlink" title="4.2.2 分代回收"></a>4.2.2 分代回收</h3><p>背景：</p>
<p>基于引用计数的回收机制，每次回收内存，都需要把所有对象的引用计数都遍历一遍，这是非常消耗时间的，于是引入了分代回收来提高回收效率，分代回收采用的是用“空间换时间”的策略。</p>
<p><strong>分代：</strong></p>
<p>分代回收的核心思想是：在历经多次扫描的情况下，都没有被回收的变量，gc机制就会认为，该变量是常用变量，gc对其扫描的频率会降低，具体实现原理如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">分代指的是根据存活时间来为变量划分不同等级（也就是不同的代）

新定义的变量，放到新生代这个等级中，假设每隔<span class="token number">1</span>分钟扫描新生代一次，如果发现变量依然被引用，那么该对象的权重（权重本质就是个整数）加一，当变量的权重大于某个设定得值（假设为<span class="token number">3</span>），会将它移动到更高一级的青春代，青春代的gc扫描的频率低于新生代（扫描时间间隔更长），假设<span class="token number">5</span>分钟扫描青春代一次，这样每次gc需要扫描的变量的总个数就变少了，节省了扫描的总时间，接下来，青春代中的对象，也会以同样的方式被移动到老年代中。也就是等级（代）越高，被垃圾回收机制扫描的频率越低<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>回收：</strong></p>
<p>回收依然是使用引用计数作为回收的依据</p>
<p><img src="https://pic1.zhimg.com/80/v2-2458685b385b338192d6b90628ed92a8_720w.jpg" alt="img"></p>
<p>虽然分代回收可以起到提升效率的效果，但也存在一定的缺点：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#例如一个变量刚刚从新生代移入青春代，该变量的绑定关系就解除了，该变量应该被回收，但青春代的扫描频率低于新生代，</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/10_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 应用程序运行过程中产生的数据最先都是存放于内存中的，若想永久保存下来，必须要保存于硬盘中。应用程序若想操作硬件必须通过操作系统，而文件就是操作系统提供给应用程序来操作硬盘的虚拟概念，用户或应用程序对文件的操作，就是向操作系统发起调用，然后由操作系统完成对硬盘的具体操作。</p>
<p><img src="https://pic2.zhimg.com/80/v2-e1c5ac2494f15c2d7a1ee4732fbb9289_720w.jpg" alt="img"></p>
<h2 id="二-文件操作的基本流程"><a href="#二-文件操作的基本流程" class="headerlink" title="二 文件操作的基本流程"></a>二 文件操作的基本流程</h2><h2 id="2-1-基本流程"><a href="#2-1-基本流程" class="headerlink" title="2.1 基本流程"></a>2.1 基本流程</h2><p><img src="https://pic3.zhimg.com/80/v2-5f2bdccc6b9d407c733fe1c4315a050a_720w.jpg" alt="img"></p>
<p>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件，由应用程序向操作系统发起系统调用open(...)，操作系统打开该文件，对应一块硬盘空间，并返回一个文件对象赋值给一个变量f</span>
f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment">#默认打开模式就为r</span>

<span class="token comment"># 2. 调用文件对象下的读/写方法，会被操作系统转换为读/写硬盘的操作</span>
data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 3. 向操作系统发起关闭文件的请求，回收系统资源</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-df5334d72003b1b12e88bdf983af6b5d_720w.jpg" alt="img"></p>
<h2 id="2-2-资源回收与with上下文管理"><a href="#2-2-资源回收与with上下文管理" class="headerlink" title="2.2 资源回收与with上下文管理"></a>2.2 资源回收与with上下文管理</h2><p>打开一个文件包含两部分资源：应用程序的变量f和操作系统打开的文件。在操作完毕一个文件时，必须把与该文件的这两部分资源全部回收，回收方法为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#回收操作系统打开的文件资源</span>
<span class="token number">2</span>、<span class="token keyword">del</span> f <span class="token comment">#回收应用程序级的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>其中del f一定要发生在f.close()之后，否则就会导致操作系统打开的文件无法关闭，白白占用资源， 而python自动的垃圾回收机制决定了我们无需考虑del f，这就要求我们，在操作完毕文件后，一定要记住f.close()，虽然我们如此强调，但是大多数读者还是会不由自主地忘记f.close()，考虑到这一点，python提供了with关键字来帮我们管理上下文</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、在执行完子代码块后，with 会自动执行f.close()</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">pass</span> 

<span class="token comment"># 2、可用用with同时打开多个文件，用逗号分隔开即可</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> read_f<span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> write_f<span class="token punctuation">:</span>  
    data <span class="token operator">=</span> read_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    write_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-d5d2e9ba1e1584d711be9141313c9a55_720w.jpg" alt="img"></p>
<h2 id="2-3-指定操作文本文件的字符编码"><a href="#2-3-指定操作文本文件的字符编码" class="headerlink" title="2.3 指定操作文本文件的字符编码"></a>2.3 指定操作文本文件的字符编码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>是由操作系统打开文件，如果打开的是文本文件，会涉及到字符编码问题，如果没有为<span class="token builtin">open</span>指定编码，那么打开文本文件的默认编码很明显是操作系统说了算了，操作系统会用自己的默认编码去打开文件，在windows下是gbk，在linux下是utf<span class="token operator">-</span><span class="token number">8</span>。
这就用到了上节课讲的字符编码的知识：若要保证不乱码，文件以什么方式存的，就要以什么方式打开。

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-fc61df44636a5f14346f24fae99f1b67_720w.jpg" alt="img"></p>
<h2 id="三-文件的操作模式"><a href="#三-文件的操作模式" class="headerlink" title="三 文件的操作模式"></a>三 文件的操作模式</h2><h2 id="3-1-控制文件读写操作的模式"><a href="#3-1-控制文件读写操作的模式" class="headerlink" title="3.1 控制文件读写操作的模式"></a>3.1 控制文件读写操作的模式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">(</span>默认的<span class="token punctuation">)</span>：只读
w：只写
a：只追加写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-1-1-案例一：r-模式的使用"><a href="#3-1-1-案例一：r-模式的使用" class="headerlink" title="3.1.1 案例一：r 模式的使用"></a>3.1.1 案例一：r 模式的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># r只读模式: 在文件不存在时则报错,文件存在文件内指针直接跳到文件开头</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     res<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 会将文件的内容由硬盘全部读入内存，赋值给res</span>

<span class="token comment"># 小练习：实现用户认证功能</span>
 inp_name<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的名字: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
 inp_pwd<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的密码: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'db.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
         <span class="token comment"># 把用户输入的名字与密码与读出内容做比对</span>
         u<span class="token punctuation">,</span>p<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>
         <span class="token keyword">if</span> inp_name <span class="token operator">==</span> u <span class="token keyword">and</span> inp_pwd <span class="token operator">==</span> p<span class="token punctuation">:</span>
             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>
             <span class="token keyword">break</span>
     <span class="token keyword">else</span><span class="token punctuation">:</span>
         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'账号名或者密码错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-1-2-案例二：w-模式的使用"><a href="#3-1-2-案例二：w-模式的使用" class="headerlink" title="3.1.2 案例二：w 模式的使用"></a>3.1.2 案例二：w 模式的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># w只写模式: 在文件不存在时会创建空文档,文件存在会清空文件,文件指针跑到文件开头</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'你好\n'</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'我好\n'</span><span class="token punctuation">)</span> 
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'大家好\n'</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'111\n222\n333\n'</span><span class="token punctuation">)</span>
<span class="token comment">#强调：</span>
<span class="token comment"># 1 在文件不关闭的情况下,连续的写入，后写的内容一定跟在前写内容的后面</span>
<span class="token comment"># 2 如果重新以w模式打开文件，则会清空文件内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-1-3-案例三：a-模式的使用"><a href="#3-1-3-案例三：a-模式的使用" class="headerlink" title="3.1.3 案例三：a 模式的使用"></a>3.1.3 案例三：a 模式的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a只追加写模式: 在文件不存在时会创建空文档,文件存在会将文件指针直接移动到文件末尾</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'44444\n'</span><span class="token punctuation">)</span>
     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'55555\n'</span><span class="token punctuation">)</span>
<span class="token comment">#强调 w 模式与 a 模式的异同：</span>
<span class="token comment"># 1 相同点：在打开的文件不关闭的情况下，连续的写入，新写的内容总会跟在前写的内容之后</span>
<span class="token comment"># 2 不同点：以 a 模式重新打开文件，不会清空原文件内容，会将文件指针直接移动到文件末尾，新写的内容永远写在最后</span>

<span class="token comment"># 小练习：实现注册功能:</span>
 name<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'username>>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
 pwd<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'password>>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'db1.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     info<span class="token operator">=</span><span class="token string">'%s:%s\n'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span>
     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-1-4-案例四：-模式的使用-了解"><a href="#3-1-4-案例四：-模式的使用-了解" class="headerlink" title="3.1.4 案例四：+ 模式的使用(了解)"></a>3.1.4 案例四：+ 模式的使用(了解)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># r+ w+ a+ :可读可写</span>
<span class="token comment">#在平时工作中，我们只单纯使用r/w/a，要么只读，要么只写，一般不用可读可写的模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-bea42b94950b49f8be785289904e17b7_720w.jpg" alt="img"></p>
<h2 id="3-2-控制文件读写内容的模式"><a href="#3-2-控制文件读写内容的模式" class="headerlink" title="3.2 控制文件读写内容的模式"></a>3.2 控制文件读写内容的模式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">大前提<span class="token punctuation">:</span> tb模式均不能单独使用<span class="token punctuation">,</span>必须与r<span class="token operator">/</span>w<span class="token operator">/</span>a之一结合使用
t（默认的）：文本模式
    <span class="token number">1.</span> 读写文件都是以字符串为单位的
    <span class="token number">2.</span> 只能针对文本文件
    <span class="token number">3.</span> 必须指定encoding参数
b：二进制模式<span class="token punctuation">:</span>
   <span class="token number">1.</span>读写文件都是以<span class="token builtin">bytes</span><span class="token operator">/</span>二进制为单位的
   <span class="token number">2.</span> 可以针对所有文件
   <span class="token number">3.</span> 一定不能指定encoding参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-1-案例一：t-模式的使用"><a href="#3-2-1-案例一：t-模式的使用" class="headerlink" title="3.2.1 案例一：t 模式的使用"></a>3.2.1 案例一：t 模式的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># t 模式：如果我们指定的文件打开模式为r/w/a，其实默认就是rt/wt/at</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     res<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> 
     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：&lt;class 'str'></span>

 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     s<span class="token operator">=</span><span class="token string">'abc'</span>
     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment"># 写入的也必须是字符串类型</span>

 <span class="token comment">#强调：t 模式只能用于操作文本文件,无论读写，都应该以字符串为单位，而存取硬盘本质都是二进制的形式，当指定 t 模式时，内部帮我们做了编码与解码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-2-案例二：-b-模式的使用"><a href="#3-2-2-案例二：-b-模式的使用" class="headerlink" title="3.2.2 案例二： b 模式的使用"></a>3.2.2 案例二： b 模式的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># b: 读写都是以二进制位单位</span>
 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.mp4'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：&lt;class 'bytes'></span>

 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     msg<span class="token operator">=</span><span class="token string">"你好"</span>
     res<span class="token operator">=</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># res为bytes类型</span>
     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment"># 在b模式下写入文件的只能是bytes类型</span>

<span class="token comment">#强调：b模式对比t模式</span>
<span class="token number">1</span>、在操作纯文本文件方面t模式帮我们省去了编码与解码的环节，b模式则需要手动编码与解码，所以此时t模式更为方便
<span class="token number">2</span>、针对非文本文件（如图片、视频、音频等）只能使用b模式

<span class="token comment"># 小练习： 编写拷贝工具</span>
src_file<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'源文件路径: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
dst_file<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'目标文件路径: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'%s'</span> <span class="token operator">%</span>src_file<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> read_f<span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'%s'</span> <span class="token operator">%</span>dst_file<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> write_f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> read_f<span class="token punctuation">:</span>
        <span class="token comment"># print(line)</span>
        write_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-4af94c11c6a45976fca8c53a0794c3a2_720w.jpg" alt="img"></p>
<h2 id="四-操作文件的方法"><a href="#四-操作文件的方法" class="headerlink" title="四 操作文件的方法"></a>四 操作文件的方法</h2><h2 id="4-1-重点"><a href="#4-1-重点" class="headerlink" title="4.1 重点"></a>4.1 重点</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读操作</span>
f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取所有内容,执行完该操作后，文件指针会移动到文件末尾</span>
f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取一行内容,光标移动到第二行首部</span>
f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取每一行内容,存放于列表中</span>

<span class="token comment"># 强调：</span>
<span class="token comment"># f.read()与f.readlines()都是将内容一次性读入内容，如果内容过大会导致内存溢出，若还想将内容全读入内存，则必须分多次读入，有两种实现方式：</span>
<span class="token comment"># 方式一</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token comment"># 同一时刻只读入一行内容到内存中</span>

<span class="token comment"># 方式二</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.mp4'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 同一时刻只读入1024个Bytes到内存中</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment"># 写操作</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'1111\n222\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 针对文本模式的写,需要自己写换行符</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'1111\n222\n'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 针对b模式的写,需要自己写换行符</span>
f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'333\n'</span><span class="token punctuation">,</span><span class="token string">'444\n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 文件模式</span>
f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'333\n'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'444\n'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#b模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-30d5763461db05414c3ac2cc944a8f6e_720w.jpg" alt="img"></p>
<h2 id="4-2-了解"><a href="#4-2-了解" class="headerlink" title="4.2 了解"></a>4.2 了解</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件是否可读</span>
f<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件是否可读</span>
f<span class="token punctuation">.</span>closed  <span class="token comment"># 文件是否关闭</span>
f<span class="token punctuation">.</span>encoding  <span class="token comment"># 如果文件打开模式为b,则没有该属性</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 立刻将文件内容从内存刷到硬盘</span>
f<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-3474d487b3fb518ce9b511c73153ce78_720w.jpg" alt="img"></p>
<h2 id="五-主动控制文件内指针移动"><a href="#五-主动控制文件内指针移动" class="headerlink" title="五 主动控制文件内指针移动"></a>五 主动控制文件内指针移动</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#大前提:文件内指针的移动都是Bytes为单位的,唯一例外的是t模式下的read(n),n以字符为单位</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 读取3个字符</span>


<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
     data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 读取3个Bytes</span>


<span class="token comment"># 之前文件内指针的移动都是由读/写操作而被动触发的，若想读取文件某一特定位置的数据，则则需要用f.seek方法主动控制文件内指针的移动，详细用法如下：</span>
<span class="token comment"># f.seek(指针移动的字节数,模式控制): </span>
<span class="token comment"># 模式控制:</span>
<span class="token comment"># 0: 默认的模式,该模式代表指针移动的字节数是以文件开头为参照的</span>
<span class="token comment"># 1: 该模式代表指针移动的字节数是以当前所在的位置为参照的</span>
<span class="token comment"># 2: 该模式代表指针移动的字节数是以文件末尾的位置为参照的</span>
<span class="token comment"># 强调:其中0模式可以在t或者b模式使用,而1跟2模式只能在b模式下用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-2b5a0f6ecedec41601c52959b34d7f5a_720w.jpg" alt="img"></p>
<h2 id="5-1-案例一：-0模式详解"><a href="#5-1-案例一：-0模式详解" class="headerlink" title="5.1 案例一： 0模式详解"></a>5.1 案例一： 0模式详解</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span>
abc你好

<span class="token comment"># 0模式的使用</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 参照文件开头移动了3个字节</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 查看当前文件指针距离文件开头的位置，输出结果为3</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 从第3个字节的位置读到文件末尾，输出结果为：你好</span>
    <span class="token comment"># 注意：由于在t模式下，会将读取的内容自动解码，所以必须保证读取的内容是一个完整中文数据，否则解码失败</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出结果为: 好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-9a9115785268e099152bbed9d0bc7e97_720w.jpg" alt="img"></p>
<h2 id="5-2-案例二：-1模式详解"><a href="#5-2-案例二：-1模式详解" class="headerlink" title="5.2 案例二： 1模式详解"></a>5.2 案例二： 1模式详解</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1模式的使用</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 从当前位置往后移动3个字节，而此时的当前位置就是文件开头</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：3</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 从当前位置往后移动4个字节，而此时的当前位置为3</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-2122d50b6c97ed1c5fe27a13126266d0_720w.jpg" alt="img"></p>
<h2 id="5-3-案例三：-2模式详解"><a href="#5-3-案例三：-2模式详解" class="headerlink" title="5.3 案例三： 2模式详解"></a>5.3 案例三： 2模式详解</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span>
abc你好

<span class="token comment"># 2模式的使用</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># 参照文件末尾移动0个字节， 即直接跳到文件末尾</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：9</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># 参照文件末尾往前移动了3个字节</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：好</span>

<span class="token comment"># 小练习：实现动态查看最新一条日志的效果</span>
<span class="token keyword">import</span> time
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'access.log'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        line<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 没有内容</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-009f54e4493921a84480b80a4fa5aa90_720w.jpg" alt="img"></p>
<h2 id="六-文件的修改"><a href="#六-文件的修改" class="headerlink" title="六 文件的修改"></a>六 文件的修改</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 文件a.txt内容如下</span>
张一蛋     山东    <span class="token number">179</span>    <span class="token number">49</span>    <span class="token number">12344234523</span>
李二蛋     河北    <span class="token number">163</span>    <span class="token number">57</span>    <span class="token number">13913453521</span>
王全蛋     山西    <span class="token number">153</span>    <span class="token number">62</span>    <span class="token number">18651433422</span>

<span class="token comment"># 执行操作</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'r+t'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;妇女主任>'</span><span class="token punctuation">)</span>

<span class="token comment"># 文件修改后的内容如下</span>
张一蛋<span class="token operator">&lt;</span>妇女主任<span class="token operator">></span> <span class="token number">179</span>    <span class="token number">49</span>    <span class="token number">12344234523</span>
李二蛋     河北    <span class="token number">163</span>    <span class="token number">57</span>    <span class="token number">13913453521</span>
王全蛋     山西    <span class="token number">153</span>    <span class="token number">62</span>    <span class="token number">18651433422</span>

<span class="token comment"># 强调：</span>
<span class="token comment"># 1、硬盘空间是无法修改的,硬盘中数据的更新都是用新内容覆盖旧内容</span>
<span class="token comment"># 2、内存中的数据是可以修改的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-138c4c7000b5db3a37d691ea0aa09fb0_720w.jpg" alt="img"></p>
<p>文件对应的是硬盘空间,硬盘不能修改对应着文件本质也不能修改, 那我们看到文件的内容可以修改,是如何实现的呢? 大致的思路是将硬盘中文件内容读入内存,然后在内存中修改完毕后再覆盖回硬盘 具体的实现方式分为两种:</p>
<h2 id="6-1-文件修改方式一"><a href="#6-1-文件修改方式一" class="headerlink" title="6.1 文件修改方式一"></a>6.1 文件修改方式一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实现思路：将文件内容发一次性全部读入内存,然后在内存中修改完毕后再覆盖写回原文件</span>
<span class="token comment"># 优点: 在文件修改过程中同一份数据只有一份</span>
<span class="token comment"># 缺点: 会过多地占用内存</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'db.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'db.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">,</span><span class="token string">'SB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-1-文件修改方式二"><a href="#6-1-文件修改方式二" class="headerlink" title="6.1 文件修改方式二"></a>6.1 文件修改方式二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实现思路：以读的方式打开原文件,以写的方式打开一个临时文件,一行行读取原文件内容,修改完后写入临时文件...,删掉原文件,将临时文件重命名原文件名</span>
<span class="token comment"># 优点: 不会占用过多的内存</span>
<span class="token comment"># 缺点: 在文件修改过程中同一份数据存了两份</span>
<span class="token keyword">import</span> os

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'db.txt'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'rt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> read_f<span class="token punctuation">,</span>\
        <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'.db.txt.swap'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wrife_f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> read_f<span class="token punctuation">:</span>
        wrife_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'SB'</span><span class="token punctuation">,</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'db.txt'</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'.db.txt.swap'</span><span class="token punctuation">,</span><span class="token string">'db.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-d45f4a423f5dd6e9880e4dbcdb1bdaf7_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>文件处理</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=31">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=31<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=32">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=32<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=33">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=33<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=34">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=34<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=35">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=35<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=36">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=36<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=37">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=37<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/09_%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 字符串类型、文本文件的内容都是由字符组成的，但凡涉及到字符的存取，都需要考虑字符编码的问题。</p>
<p> 字符编码这个知识点的典型特征就是理论多、结论少，但对于开发而言只需要记住结论即可，下面让我们来一点点介绍它</p>
<p><img src="https://pic1.zhimg.com/80/v2-621d28181cc40a235414a49fc9d14738_720w.jpg" alt="img"></p>
<h2 id="二-知识储备"><a href="#二-知识储备" class="headerlink" title="二 知识储备"></a>二 知识储备</h2><h2 id="2-1-三大核心硬件"><a href="#2-1-三大核心硬件" class="headerlink" title="2.1 三大核心硬件"></a>2.1 三大核心硬件</h2><p>所有软件都是运行硬件之上的，与运行软件相关的三大核心硬件为cpu、内存、硬盘，我们需要明确三点</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的</span>

<span class="token comment">#2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行</span>

<span class="token comment">#3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-48e25e7f03030e066f8fcaf4750cc892_720w.jpg" alt="img"></p>
<h2 id="2-2-文本编辑器读取文件内容的流程"><a href="#2-2-文本编辑器读取文件内容的流程" class="headerlink" title="2.2 文本编辑器读取文件内容的流程"></a>2.2 文本编辑器读取文件内容的流程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）</span>

<span class="token comment">#阶段2、文件编辑器会将文件内容从硬盘读入内存</span>

<span class="token comment">#阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-3-python解释器执行文件的流程"><a href="#2-3-python解释器执行文件的流程" class="headerlink" title="2.3 python解释器执行文件的流程"></a>2.3 python解释器执行文件的流程</h2><p>以python test.py为例，执行流程如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#阶段1、启动python解释器，此时就相当于启动了一个文本编辑器</span>

<span class="token comment">#阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中</span>

<span class="token comment">#阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>python解释器与文件本编辑的异同如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下</span>
python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样

<span class="token comment">#2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下</span>
文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-c80921c5d7ede2fd94262892c7e0a733_720w.jpg" alt="img"></p>
<h2 id="三、字符编码介绍"><a href="#三、字符编码介绍" class="headerlink" title="三、字符编码介绍"></a>三、字符编码介绍</h2><h2 id="3-1-什么是字符编码？"><a href="#3-1-什么是字符编码？" class="headerlink" title="3.1 什么是字符编码？"></a>3.1 什么是字符编码？</h2><p>人类在与计算机交互时，用的都是人类能读懂的字符，如中文字符、英文字符、日文字符等</p>
<p>而计算机只能识别二进制数,详解如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#二进制数即由0和1组成的数字，例如010010101010。计算机是基于电工作的，电的特性即高低电平，人类从逻辑层面将高电平对应为数字1,低电平对应为数字0，这直接决定了计算机可以识别的是由0和1组成的数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>毫无疑问，由人类的字符到计算机中的数字，必须经历一个过程，如下</p>
<p><img src="https://pic1.zhimg.com/80/v2-80b925e192579faa59dcffbb046535a4_720w.jpg" alt="img"></p>
<p>翻译的过程必须参照一个特定的标准，该标准称之为字符编码表，该表上存放的就是字符与数字一一对应的关系。</p>
<p>字符编码中的编码指的是翻译或者转换的意思，即将人能理解的字符翻译成计算机能识别的数字</p>
<h2 id="3-2-字符编码表的发展史-了解"><a href="#3-2-字符编码表的发展史-了解" class="headerlink" title="3.2 字符编码表的发展史 (了解)"></a>3.2 字符编码表的发展史 (了解)</h2><p>字符编码的发展经历了三个重要的阶段，如下</p>
<h3 id="3-2-1-阶段一：一家独大"><a href="#3-2-1-阶段一：一家独大" class="headerlink" title="3.2.1 阶段一：一家独大"></a>3.2.1 阶段一：一家独大</h3><p>现代计算机起源于美国，所以最先考虑仅仅是让计算机识别英文字符，于是诞生了ASCII表</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ASCII表的特点:</span>
    <span class="token number">1</span>、只有英文字符与数字的一一对应关系
    <span class="token number">2</span>、一个英文字符对应1Bytes，1Bytes<span class="token operator">=</span>8bit，8bit最多包含<span class="token number">256</span>个数字，可以对应<span class="token number">256</span>个字符，足够表示所有英文字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-c4a210efb1a57b869288eb7e89bf6fc9_720w.jpg" alt="img"></p>
<h3 id="3-2-2-阶段二：诸侯割据、天下大乱"><a href="#3-2-2-阶段二：诸侯割据、天下大乱" class="headerlink" title="3.2.2 阶段二：诸侯割据、天下大乱"></a>3.2.2 阶段二：诸侯割据、天下大乱</h3><p><img src="https://pic2.zhimg.com/80/v2-114700ee2814bcf3de172a4b673001e1_720w.jpg" alt="img"></p>
<p>为了让计算机能够识别中文和英文，中国人定制了GBK</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># GBK表的特点：</span>
    <span class="token number">1</span>、只有中文字符、英文字符与数字的一一对应关系
    <span class="token number">2</span>、一个英文字符对应1Bytes
       一个中文字符对应2Bytes   
       补充说明：
       1Bytes<span class="token operator">=</span>8bit，8bit最多包含<span class="token number">256</span>个数字，可以对应<span class="token number">256</span>个字符，足够表示所有英文字符
       2Bytes<span class="token operator">=</span>16bit，16bit最多包含<span class="token number">65536</span>个数字，可以对应<span class="token number">65536</span>个字符，足够表示所有中文字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每个国家都各自的字符，为让计算机能够识别自己国家的字符外加英文字符，各个国家都制定了自己的字符编码表</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Shift_JIS表的特点：</span>
    <span class="token number">1</span>、只有日文字符、英文字符与数字的一一对应关系

<span class="token comment"># Euc-kr表的特点：</span>
    <span class="token number">1</span>、只有韩文字符、英文字符与数字的一一对应关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时,美国人用的计算机里使用字符编码标准是ASCII、中国人用的计算机里使用字符编码标准是GBK、日本人用的计算机里使用字符编码标准是Shift_JIS,如下图所示，</p>
<p><img src="https://pic3.zhimg.com/80/v2-19bac7b0910652bbd1f7e026683a28be_720w.jpg" alt="img"></p>
<p>字符编码发展到了这个阶段，可以用一句话概括：诸侯割据、天下大乱，详解如下</p>
<p><img src="https://pic3.zhimg.com/80/v2-b6ac2031b2082daa422c8dc233be95ee_720w.jpg" alt="img"></p>
<p>图1中，文本编辑存取文件的原理如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">文本文件内容全都为字符，无论存取都是涉及到字符编码问题
<span class="token comment">#1、存文本文件</span>
人类通过文本编辑器输入的字符会被转化成ASCII格式的二进制存放于内存中，如果需要永久保存，则直接将内存中的ASCII格式的二进制写入硬盘

<span class="token comment">#2、读文本文件</span>
直接将硬盘中的ASCII格式的二进制读入内存，然后通过ASCII表反解成英文字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>图2图3都是相同的过程，此时无论是存还是取由于采用的字符编码表一样，所以肯定不会出现乱码问题，但问题是在美国人用的计算机里只能输入英文字符，而在中国人用的计算机里只能输入中文字符和英文字符….,毫无疑问我们希望计算机允许我们输入万国字符均可识别、不乱码，而现阶段计算机采用的字符编码ASCII、GBK、Shift_JIS都无法识别万国字符，所以我们必须定制一个兼容万国字符的编码表，请看阶段三</p>
<p><img src="https://pic3.zhimg.com/80/v2-aeb16d83abab152e00e7e2f99eaeb102_720w.jpg" alt="img"></p>
<h3 id="3-2-3-阶段三：分久必合"><a href="#3-2-3-阶段三：分久必合" class="headerlink" title="3.2.3 阶段三：分久必合"></a>3.2.3 阶段三：分久必合</h3><p><img src="https://pic1.zhimg.com/80/v2-f405404cd434f2280b4586c4f95ce760_720w.jpg" alt="img"></p>
<p>unicode于1990年开始研发，1994年正式公布，具备两大特点：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1. 存在所有语言中的所有字符与数字的一一对应关系,即兼容万国字符</span>

<span class="token comment">#2. 与传统的字符编码的二进制数都有对应关系，详解如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>很多地方或老的系统、应用软件仍会采用各种各样传统的编码，这是历史遗留问题。此处需要强调：软件是存放于硬盘的，而运行软件是要将软件加载到内存的，面对硬盘中存放的各种传统编码的软件，想让我们的计算机能够将它们全都正常运行而不出现乱码，内存中必须有一种兼容万国的编码，并且该编码需要与其他编码有相对应的映射&#x2F;转换关系，这就是unicode的第二大特点产生的缘由</p>
<p><img src="https://pic1.zhimg.com/80/v2-484a43054d2217ed11c7d5d9170675f8_720w.jpg" alt="img"></p>
<p>文本编辑器输入任何字符都是最新存在于内存中，是unicode编码的，存放于硬盘中，则可以转换成任意其他编码，只要该编码可以支持相应的字符</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 英文字符可以被ASCII识别</span>
英文字符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>unciode格式的数字<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>ASCII格式的数字

<span class="token comment"># 中文字符、英文字符可以被GBK识别</span>
中文字符、英文字符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">unicode</span>格式的数字<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>gbk格式的数字

<span class="token comment"># 日文字符、英文字符可以被shift-JIS识别</span>
日文字符、英文字符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">unicode</span>格式的数字<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>shift<span class="token operator">-</span>JIS格式的数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-77be4ea6e528d6ed700fd08b2096566f_720w.jpg" alt="img"></p>
<h2 id="3-3-编码与解码"><a href="#3-3-编码与解码" class="headerlink" title="3.3 编码与解码"></a>3.3 编码与解码</h2><p>由字符转换成内存中的unicode，以及由unicode转换成其他编码的过程，都称为编码encode</p>
<p><img src="https://pic3.zhimg.com/80/v2-08a12814397a5a6d3e530a66cf2dbc02_720w.jpg" alt="img"></p>
<p>由内存中的unicode转换成字符，以及由其他编码转换成unicode的过程，都称为解码decode</p>
<p><img src="https://pic4.zhimg.com/80/v2-5f7b25aaeb4ccc913f0c23d586acdbab_720w.jpg" alt="img"></p>
<p>在诸多文件类型中，只有文本文件的内存是由字符组成的，因而文本文件的存取也涉及到字符编码的问题</p>
<h2 id="3-4-utf-8的由来"><a href="#3-4-utf-8的由来" class="headerlink" title="3.4 utf-8的由来"></a>3.4 utf-8的由来</h2><p>注意：如果保存到硬盘的是GBK格式二进制，当初用户输入的字符只能是中文或英文，同理如果保存到硬盘的是Shift_JIS格式二进制，当初用户输入的字符只能是日文或英文……如果我们输入的字符中包含多国字符，那么该如何处理？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（GBK格式的二进制）</span>

<span class="token comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（Shift_JIS格式的二进制）</span>

<span class="token comment">#多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（???格式的二进制）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>理论上是可以将内存中unicode格式的二进制直接存放于硬盘中的，但由于unicode固定使用两个字节来存储一个字符，如果多国字符中包含大量的英文字符时，使用unicode格式存放会额外占用一倍空间（英文字符其实只需要用一个字节存放即可），然而空间占用并不是最致命的问题，最致命地是当我们由内存写入硬盘时会额外耗费一倍的时间，所以将内存中的unicode二进制写入硬盘或者基于网络传输时必须将其转换成一种精简的格式，这种格式即utf-8（全称Unicode Transformation Format，即unicode的转换格式）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（utf-8格式的二进制）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-c2a4ec82d946e4e35645f9782dbc798a_720w.jpg" alt="img"></p>
<p>那为何在内存中不直接使用utf-8呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">utf<span class="token operator">-</span><span class="token number">8</span>是针对Unicode的可变长度字符编码：一个英文字符占1Bytes，一个中文字符占3Bytes，生僻字用更多的Bytes存储

<span class="token builtin">unicode</span>更像是一个过渡版本，我们新开发的软件或文件存入硬盘都采用utf<span class="token operator">-</span><span class="token number">8</span>格式，等过去几十年，所有老编码的文件都淘汰掉之后，会出现一个令人开心的场景，即硬盘里放的都是utf<span class="token operator">-</span><span class="token number">8</span>格式，此时<span class="token builtin">unicode</span>便可以退出历史舞台，内存里也改用utf<span class="token operator">-</span><span class="token number">8</span>，天下重新归于统一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-183090ce203c9e1b6edab8aff77460cb_720w.jpg" alt="img"></p>
<h2 id="四-字符编码的应用"><a href="#四-字符编码的应用" class="headerlink" title="四 字符编码的应用"></a>四 字符编码的应用</h2><p>我们学习字符编码就是为了存取字符时不发生乱码问题：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、内存中固定使用unicode无论输入任何字符都不会发生乱码</span>

<span class="token comment">#2、我们能够修改的是存/取硬盘的编码方式，如果编码设置不正确将会出现乱码问题。乱码问题分为两种：存乱了，读乱了</span>

<span class="token comment">#2.1 存乱了：如果用户输入的内容中包含中文和日文字符，如果单纯以shift_JIS存，日文可以正常写入硬盘，而由于中文字符在shift_jis中没有找到对应关系而导致存乱了</span>

<span class="token comment">#2.2 读乱了：如果硬盘中的数据是shift_JIS格式存储的，采GBK格式读入内存就读乱了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总结：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1. 保证存的时候不乱：在由内存写入硬盘时，必须将编码格式设置为支持所输入字符的编码格式</span>
<span class="token comment">#2. 保证存的时候不乱：在由硬盘读入内存时，必须采用与写入硬盘时相同的编码格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="4-1-文本编辑器nodpad-存取文本文件"><a href="#4-1-文本编辑器nodpad-存取文本文件" class="headerlink" title="4.1 文本编辑器nodpad++存取文本文件"></a>4.1 文本编辑器nodpad++存取文本文件</h2><p>文本编辑器存取的都是文本文件，而文本文件中包含的内容全为字符，所以存取文本文件都涉及到字符编码的问题。</p>
<p><img src="https://pic4.zhimg.com/80/v2-80d179cdb9262eced650c8574bc74d33_720w.jpg" alt="img"></p>
<p><img src="https://pic4.zhimg.com/80/v2-75e2cb4b6932bc76c6161a086ad1a5a3_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-3d3b0ae681354751c1a85d75b27ee1d0_720w.jpg" alt="img"></p>
<h2 id="4-2-python解释器执行文件的前两个阶段"><a href="#4-2-python解释器执行文件的前两个阶段" class="headerlink" title="4.2 python解释器执行文件的前两个阶段"></a>4.2 python解释器执行文件的前两个阶段</h2><p>执行py文件的前两个阶段就是python解释器读文本文件的过程，与文本编辑读文本文件的前两个阶段没人任何区别，要保证读不乱码，则必须将python解释器读文件时采用的编码方式设置为文件当初写入硬盘时的编码格式，如果没有设置，python解释器则才用默认的编码方式，在python3中默认为utf-8，在python2中默认为ASCII，我们可以通过指定文件头来修改默认的编码</p>
<ul>
<li>在文件首行写入包含#号在内的以下内容</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: 当初文件写入硬盘时采用的编码格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解释器会先用默认的编码方式读取文件的首行内容，由于首行是纯英文组成，而任何编码方式都可以识别英文字符。</p>
<p><img src="https://pic4.zhimg.com/80/v2-b39022bd9969bcba565b7cfe6c067b13_720w.jpg" alt="img"></p>
<h2 id="4-3-python解释器执行文件的第三个阶段"><a href="#4-3-python解释器执行文件的第三个阶段" class="headerlink" title="4.3 python解释器执行文件的第三个阶段"></a>4.3 python解释器执行文件的第三个阶段</h2><p>设置文件头的作用是保证运行python程序的前两个阶段不乱码，经过前两个阶段后py文件的内容都会以unicode格式存放于内存中。</p>
<p>在经历第三个阶段时开始识别python语法，当遇到特定的语法name &#x3D; ‘上’（代码本身也都全都是unicode格式存的）时，需要申请内存空间来存储字符串’上’，这就又涉及到应该以什么编码存储‘上’的问题了。</p>
<p>在Python3中，字符串类的值都是使用unicode格式来存储</p>
<p>由于Python2的盛行是早于unicode的，因此在Python2中是按照文件头指定的编码来存储字符串类型的值的（如果文件头中没有指定编码，那么解释器会按照它自己默认的编码方式来存储‘上’），所以，这就有可能导致乱码问题</p>
<p><img src="https://pic2.zhimg.com/80/v2-d27cfdaa0659c34c85fcff4a48a4e2f9_720w.jpg" alt="img"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span>
x <span class="token operator">=</span> <span class="token string">'上'</span> <span class="token comment"># x的值为untf-8格式的二进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 打印操作是将x的值，即utf-8格式的二进制交给终端，当终端收到后发现并不是unicode（只有unicode才与字符有对应关系），所以终端会执行操作：utf-8二进制---解码-->unicode格式的二进制，解码的过程终端会采用自己默认的编码，而在pycharm的终端默认编码为utf-8、windows下的cmd终端的默认编码为gbk，所以该打印操作在pycharm中显示正常，而在windows下的cmd中则乱码</span>

<span class="token comment"># 在windows下的cmd中运行效果如下</span>
C<span class="token punctuation">:</span>\Users\Administrator<span class="token operator">></span>python2 E<span class="token punctuation">:</span>\aaa<span class="token punctuation">.</span>py
涓<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>python2后推出了一种补救措施，就是在字符串类型前加u，则会将字符串类型强制存储unicode，这就与python3保持一致了，对于unicode格式无论丢给任何终端进行打印，都可以直接对应字符不会出现乱码问题</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span>
x <span class="token operator">=</span> <span class="token string">u'上'</span> <span class="token comment"># 即便文件头为utf-8，x的值依然存成unicode</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-1ef12a426d5d928e8ce10eafef489616_720w.jpg" alt="img"></p>
<h2 id="4-4-字符串encode编码与decode解码的使用"><a href="#4-4-字符串encode编码与decode解码的使用" class="headerlink" title="4.4 字符串encode编码与decode解码的使用"></a>4.4 字符串encode编码与decode解码的使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、unicode格式------编码encode-------->其它编码格式</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token string">'上'</span> <span class="token comment"># 在python3在'上'被存成unicode</span>
<span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>x<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> res<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment"># unicode编码成了utf-8格式，而编码的结果为bytes类型，可以当作直接当作二进制去使用</span>
<span class="token punctuation">(</span><span class="token string">b'\xe4\xb8\x8a'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytes'</span><span class="token operator">></span><span class="token punctuation">)</span>

<span class="token comment"># 2、其它编码格式------解码decode-------->unicode格式</span>
<span class="token operator">>></span><span class="token operator">></span> res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> 
<span class="token string">'上'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=27">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=27<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=28">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=28<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=29">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=29<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=30">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=30<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/11_%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一-引入"><a href="#一-引入" class="headerlink" title="一 引入"></a>一 引入</h2><p> 基于前一部分的学习，我们已经能开发一些功能简单的小程序了，但随着程序功能的增多，代码量随之增大，此时仍不加区分地把所有功能的实现代码放到一起，将会使得程序的组织结构不清晰，可读性变差，且程序中需要频繁使用同一功能时，只能重复编写该功能的实现代码，日积月累，程序将变得冗长，并且当某一功能需要修改时，又不得不找出所有定义及使用这段功能的地方修改之，管理维护的难度极大，好吧，装了半天逼，到底该如何解决提出的这些问题呢？</p>
<p><img src="https://pic1.zhimg.com/80/v2-9c9953bf70a721520e78add4ceeeb340_720w.jpg" alt="img"></p>
<p>我们完全可以从现实生活中找到简化程序设计的方案：比如一个修理工会事先准备好螺丝刀、锤子等工具，这样在进行修理的过程中，需要用到拧螺丝的功能时就直接拿来螺丝刀使用，需要用到锤击物体的功能时就直接拿来锤子使用，而无需临时制造。这个例子的核心在于’事先准备好工具’，遇到应用场景时’拿来就用’，。</p>
<p>在程序中，具备某一功能的‘工具’指的就是函数，‘事先准备工具’的过程即函数的定义，‘拿来就用’即函数的调用。</p>
<h2 id="二-定义函数"><a href="#二-定义函数" class="headerlink" title="二 定义函数"></a>二 定义函数</h2><p>函数的使用必须遵循’先定义，后调用’的原则。函数的定义就相当于事先将函数体代码保存起来，然后将内存地址赋值给函数名，函数名就是对这段代码的引用，这和变量的定义是相似的。没有事先定义函数而直接调用，就相当于在引用一个不存在的’变量名’。</p>
<p>定义函数的语法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""文档描述"""</span>
    函数体
    <span class="token keyword">return</span> 值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>def: 定义函数的关键字；</li>
<li>函数名：函数名指向函数内存地址，是对函数体代码的引用。函数的命名应该反映出函数的功能；</li>
<li>括号：括号内定义参数，参数是可有可无的，且无需指定参数的类型；</li>
<li>冒号：括号后要加冒号，然后在下一行开始缩进编写函数体的代码；</li>
<li>“””文档描述”””: 描述函数功能，参数介绍等信息的文档，非必要，但是建议加上，从而增强函数的可读性；</li>
<li>函数体：由语句和表达式组成；</li>
<li>return 值：定义函数的返回值，return是可有可无的。</li>
</ol>
<p><img src="https://pic1.zhimg.com/80/v2-b6820acb8b8135a298d22c46d88dc078_720w.jpg" alt="img"></p>
<p>参数是函数的调用者向函数体传值的媒介，若函数体代码逻辑依赖外部传来的参数时则需要定义为参函数，</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span>x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y
    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>否则定义为无参函数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">interactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'user>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pwd<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'password>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p> 函数体为pass代表什么都不做，称之为空函数。定义空函数通常是有用的，因为在程序设计的开始，往往是先想好程序都需要完成什么功能，然后把所有功能都列举出来用pass充当函数体“占位符”，这将使得程序的体系结构立见，清晰且可读性强。例如要编写一个ftp程序，我们可能想到的功能有用户认证，下载，上传，浏览，切换目录等功能，可以先做出如下定义：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">auth_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""user authentication function"""</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">download_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""download file function"""</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""upload file function"""</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""list contents function"""</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">cd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""change directory"""</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之后我们便可以统筹安排编程任务，有选择性的去实现上述功能来替换掉pass，从而提高开发效率。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7eec3d29ee04903367255ddf4ba56fa2_720w.jpg" alt="img"></p>
<h2 id="三-调用函数与函数返回值"><a href="#三-调用函数与函数返回值" class="headerlink" title="三 调用函数与函数返回值"></a>三 调用函数与函数返回值</h2><p> 函数的使用分为定义阶段与调用阶段，定义函数时只检测语法，不执行函数体代码，函数名加括号即函数调用，只有调用函数时才会执行函数体代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义阶段</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in the foo'</span><span class="token punctuation">)</span>
    bar<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in the bar'</span><span class="token punctuation">)</span>

<span class="token comment">#调用阶段</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行结果：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">in</span> the foo
<span class="token keyword">in</span> the bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>定义阶段函数foo与bar均无语法错误，而在调用阶段调用foo()时，函数foo与bar都早已经存在于内存中了，所以不会有任何问题。</p>
<p><img src="https://pic4.zhimg.com/80/v2-49571392a08c9cb0980b37d25890cf57_720w.jpg" alt="img"></p>
<p>按照在程序出现的形式和位置，可将函数的调用形式分为三种：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、语句形式：</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#2、表达式形式：</span>
m<span class="token operator">=</span>my_min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#将调用函数的返回值赋值给x</span>
n<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>my_min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#将调用函数的返回值乘以10的结果赋值给n</span>

<span class="token comment">#3、函数调用作为参数的形式：</span>
<span class="token comment"># my_min（2，3）作为函数my_min的第二个参数，实现了取1,2,3中的较小者赋值给m</span>
m<span class="token operator">=</span>my_min<span class="token punctuation">(</span><span class="token number">1</span>，my_min（<span class="token number">2</span>，<span class="token number">3</span>）<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若需要将函数体代码执行的结果返回给调用者，则需要用到return。return后无值或直接省略return，则默认返回None，return的返回值无类型限制，且可以将多个返回值放到一个元组内。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token comment">#等同于return (x,y,z)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>return是一个函数结束的标志,函数内可以有多个return，但只执行一次函数就结束了，并把return后定义的值作为本次调用的结果返回。</p>
<p><img src="https://pic3.zhimg.com/80/v2-46449ad493f48f4863cefab55f8da196_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>函数基础</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=38">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=38<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p>函数返回值</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=39">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=39<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/12_%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一-形参与实参介绍"><a href="#一-形参与实参介绍" class="headerlink" title="一 形参与实参介绍"></a>一 形参与实参介绍</h2><p><img src="https://pic2.zhimg.com/80/v2-3be956bc3ace8da945af47995ea41b19_720w.jpg" alt="img"></p>
<p>函数的参数分为形式参数和实际参数，简称形参和实参：</p>
<p>形参即在定义函数时，括号内声明的参数。形参本质就是一个变量名，用来接收外部传来的值。</p>
<p>实参即在调用函数时，括号内传入的值，值可以是常量、变量、表达式或三者的组合:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1：实参是常量</span>
res<span class="token operator">=</span>my_min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">#2：实参是变量</span>
a<span class="token operator">=</span><span class="token number">1</span>
b<span class="token operator">=</span><span class="token number">2</span>
res<span class="token operator">=</span>my_min<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>

<span class="token comment">#3：实参是表达式</span>
res<span class="token operator">=</span>my_min<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">*</span>my_min<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#4：实参可以是常量、变量、表达式的任意组合</span>
a<span class="token operator">=</span><span class="token number">2</span>
my_min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">*</span>my_min<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在调用有参函数时，实参（值）会赋值给形参（变量名）。在Python中，变量名与值只是单纯的绑定关系，而对于函数来说，这种绑定关系只在函数调用时生效，在调用结束后解除。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b0036c8f8942a558d95a3200f38338d1_720w.jpg" alt="img"></p>
<h2 id="二-形参与实参的具体使用"><a href="#二-形参与实参的具体使用" class="headerlink" title="二 形参与实参的具体使用"></a>二 形参与实参的具体使用</h2><h2 id="2-1-位置参数"><a href="#2-1-位置参数" class="headerlink" title="2.1 位置参数"></a>2.1 位置参数</h2><p>位置即顺序，位置参数指的是按顺序定义的参数，需要从两个角度去看：</p>
<ol>
<li>在定义函数时，按照从左到右的顺序依次定义形参,称为位置形参，凡是按照这种形式定义的形参都必须被传值</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义位置形参：name，age，sex，三者都必须被传值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:%s Age:%s Sex:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>
register<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#TypeError：缺少3个位置参数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol>
<li>在调用函数时，按照从左到右的顺序依次定义实参，称为位置实参，凡是按照这种形式定义的实参会按照从左到右的顺序与形参一一对应</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义位置形参：name，age，sex，三者都必须被传值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:%s Age:%s Sex:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>
register<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#TypeError：缺少3个位置参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-1152d1943f7d6b217981965ad5d2b8be_720w.jpg" alt="img"></p>
<h2 id="2-2-关键字参数"><a href="#2-2-关键字参数" class="headerlink" title="2.2 关键字参数"></a>2.2 关键字参数</h2><p>在调用函数时，实参可以是key&#x3D;value的形式，称为关键字参数，凡是按照这种形式定义的实参，可以完全不按照从左到右的顺序定义，但仍能为指定的形参赋值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'lili'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
Name<span class="token punctuation">:</span>lili Age<span class="token punctuation">:</span><span class="token number">18</span> Sex<span class="token punctuation">:</span>male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>需要注意在调用函数时，实参也可以是按位置或按关键字的混合使用，但必须保证关键字参数在位置参数后面，且不可以对一个形参重复赋值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment">#正确使用</span>
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">)</span> <span class="token comment">#SyntaxError：关键字参数name=‘lili’在位置参数18之前</span>
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">)</span> <span class="token comment">#TypeError：形参name被重复赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-751903e8073067049e6c42c5196754fe_720w.jpg" alt="img"></p>
<h2 id="2-3-默认参数"><a href="#2-3-默认参数" class="headerlink" title="2.3 默认参数"></a>2.3 默认参数</h2><p>在定义函数时，就已经为形参赋值，这类形参称之为默认参数，当函数有多个参数时，需要将值经常改变的参数定义成位置参数，而将值改变较少的参数定义成默认参数。例如编写一个注册学生信息的函数，如果大多数学生的性别都为男，那完全可以将形参sex定义成默认参数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#默认sex的值为male</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:%s Age:%s Sex:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>定义时就已经为参数sex赋值，意味着调用时可以不对sex赋值，这降低了函数调用的复杂度</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token comment">#大多数情况,无需为sex传值,默认为male</span>
Name<span class="token punctuation">:</span>tom Age<span class="token punctuation">:</span><span class="token number">17</span> Sex<span class="token punctuation">:</span>male
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'Lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">)</span> <span class="token comment">#少数情况,可以为sex传值female</span>
Name<span class="token punctuation">:</span>Lili Age<span class="token punctuation">:</span><span class="token number">18</span> Sex<span class="token punctuation">:</span>female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-85c49040b5ca19b0a6cd236d6a335d21_720w.jpg" alt="img"></p>
<p>需要注意：</p>
<ol>
<li>默认参数必须在位置参数之后</li>
<li>默认参数的值仅在函数定义阶段被赋值一次</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#定义阶段arg已被赋值为1，此处的修改与默认参数arg无任何关系</span>
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>默认参数的值通常应设为不可变类型</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    
     arg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    
     <span class="token keyword">return</span> arg    
foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 
foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> 
foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次调用是在上一次的基础上向同一列表增加值，修改如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>arg<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    
     <span class="token keyword">if</span> arg <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    
         arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    
     arg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    
     <span class="token keyword">return</span> arg    
foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 
foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 
foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-c48b74c4968b946d68531c2ef2c1b40e_720w.jpg" alt="img"></p>
<h2 id="2-4-可变长度的参数（-与-的用法）"><a href="#2-4-可变长度的参数（-与-的用法）" class="headerlink" title="2.4 可变长度的参数（*与**的用法）"></a>2.4 可变长度的参数（*与**的用法）</h2><p><img src="https://pic2.zhimg.com/80/v2-ac1ed3f13dbd9fea9e3c5cfbb1047611_720w.jpg" alt="img"></p>
<p>参数的长度可变指的是在调用函数时，实参的个数可以不固定，而在调用函数时，实参的定义无非是按位置或者按关键字两种形式，这就要求形参提供两种解决方案来分别处理两种形式的可变长度的参数</p>
<h3 id="2-4-1-可变长度的位置参数"><a href="#2-4-1-可变长度的位置参数" class="headerlink" title="2.4.1 可变长度的位置参数"></a>2.4.1 可变长度的位置参数</h3><p>如果在最后一个形参名前加<em>号,那么在调用函数时，溢出的位置实参，都会被</em>接收，以元组的形式保存下来赋值给该形参</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#在最后一个形参名args前加*号</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">#实参1、2、3按位置为形参x、y、z赋值，多余的位置实参4、5、6、7都被*接收，以元组的形式保存下来，赋值给args，即args=(4, 5, 6,7)</span>

<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们事先生成了一个列表,仍然是可以传值给*args的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token comment"># *L就相当于位置参数3，4，5, foo(1,2,*L)就等同于foo(1,2,3,4,5)</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-e73cc42b02d988741717036dab3ef3d8_720w.jpg" alt="img"></p>
<p>注意：如果在传入L时没有加*,那L就只是一个普通的位置参数了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span> <span class="token comment">#仅多出一个位置实参L</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果形参为常规的参数（位置或默认），实参仍可以是*的形式</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#等同于foo(1,2)</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们想要求多个值的和，*args就派上用场了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     res<span class="token operator">=</span><span class="token number">0</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         res<span class="token operator">+=</span>i
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> res
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-8996656ee55ad76ec5b15628a8044140_720w.jpg" alt="img"></p>
<h3 id="2-4-2-可变长度的关键字参数"><a href="#2-4-2-可变长度的关键字参数" class="headerlink" title="2.4.2 可变长度的关键字参数"></a>2.4.2 可变长度的关键字参数</h3><p>如果在最后一个形参名前加<strong>号,那么在调用函数时，溢出的关键字参数，都会被</strong>接收，以字典的形式保存下来赋值给该形参</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#在最后一个参数kwargs前加**</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#溢出的关键字实参y=2，z=3都被**接收，以字典的形式保存下来，赋值给kwargs</span>
<span class="token number">1</span>
<span class="token punctuation">&#123;</span><span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们事先生成了一个字典,仍然是可以传值给**kwargs的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span> 
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">**</span>dic<span class="token punctuation">)</span> <span class="token comment">#**dic就相当于关键字参数a=1，b=2，foo(1,2,**dic)等同foo(1,2,a=1,b=2)</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-b4374327737ac837551b67f7813666e8_720w.jpg" alt="img"></p>
<p>注意：如果在传入dic时没有加**,那dic就只是一个普通的位置参数了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>dic<span class="token punctuation">)</span> <span class="token comment">#TypeError:函数foo只需要2个位置参数，但是传了3个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果形参为常规参数（位置或默认），实参仍可以是**的形式</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token operator">**</span><span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#等同于foo(y=2,x=1)</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们要编写一个用户认证的函数，起初可能只基于用户名密码的验证就可以了，可以使用**kwargs为日后的扩展供良好的环境，同时保持了函数的简洁性。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-5-命名关键字参数"><a href="#2-5-命名关键字参数" class="headerlink" title="2.5 命名关键字参数"></a>2.5 命名关键字参数</h2><p>在定义了**kwargs参数后，函数调用者就可以传入任意的关键字参数key&#x3D;value，如果函数体代码的执行需要依赖某个key，必须在函数内进行判断</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> <span class="token string">'sex'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">#有sex参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> <span class="token string">'height'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">#有height参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>想要限定函数的调用者必须以key&#x3D;value的形式传值，Python3提供了专门的语法：需要在定义形参时，用<em>作为一个分隔符号，</em>号之后的形参称为命名关键字参数。对于这类参数，在函数调用时，必须按照key&#x3D;value的形式为其传值，且必须被传值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#sex,height为命名关键字参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token string">'1.8m'</span><span class="token punctuation">)</span> <span class="token comment">#正确使用</span>
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">,</span><span class="token string">'1.8m'</span><span class="token punctuation">)</span> <span class="token comment"># TypeError:未使用关键字的形式为sex和height传值</span>
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token string">'1.8m'</span><span class="token punctuation">)</span> <span class="token comment"># TypeError没有为命名关键字参数height传值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-536b4db7a18e1f39795a152f4c6249bb_720w.jpg" alt="img"></p>
<p>命名关键字参数也可以有默认值，从而简化调用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:%s,Age:%s,Sex:%s,Height:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token string">'1.8m'</span><span class="token punctuation">)</span>
Name<span class="token punctuation">:</span>lili<span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>Sex<span class="token punctuation">:</span>male<span class="token punctuation">,</span>Height<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>8m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要强调的是：sex不是默认参数，height也不是位置参数，因为二者均在<em>后，所以都是命名关键字参数，形参sex&#x3D;’male’属于命名关键字参数的默认值，因而即便是放到形参height之前也不会有问题。另外，如果形参中已经有一个</em>args了，命名关键字参数就不再需要一个单独的*作为分隔符号了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:%s,Age:%s,Args:%s,Sex:%s,Height:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>args<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> register<span class="token punctuation">(</span><span class="token string">'lili'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token string">'1.8m'</span><span class="token punctuation">)</span> <span class="token comment">#sex与height仍为命名关键字参数</span>
Name<span class="token punctuation">:</span>lili<span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>Args<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Sex<span class="token punctuation">:</span>male<span class="token punctuation">,</span>Height<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>8m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-daa2f3a7038bc4603a334da19e216dcf_720w.jpg" alt="img"></p>
<p><img src="https://pic1.zhimg.com/80/v2-f69da71d076e7119fd2ec2e84817dd6c_720w.jpg" alt="img"></p>
<h2 id="2-6-组合使用"><a href="#2-6-组合使用" class="headerlink" title="2.6 组合使用"></a>2.6 组合使用</h2><p>综上所述所有参数可任意组合使用，但定义顺序必须是：位置参数、默认参数、*args、命名关键字参数、**kwargs</p>
<p>可变参数*args与关键字参数<strong>kwargs通常是组合在一起使用的，如果一个函数的形参为*args与</strong>kwargs，那么代表该函数可以接收任何形式、任意长度的参数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-8a33c0e3ae4f314dc75eca6250b66fe7_720w.jpg" alt="img"></p>
<p>在该函数内部还可以把接收到的参数传给另外一个函数（这在4.6小节装饰器的实现中大有用处）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> wrapper<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按照上述写法，在为函数wrapper传参时，其实遵循的是函数func的参数规则，调用函数wrapper的过程分析如下：</p>
<ol>
<li>位置实参1被*接收，以元组的形式保存下来，赋值给args，即args&#x3D;(1,),关键字实参z&#x3D;3，y&#x3D;2被**接收，以字典的形式保存下来，赋值给kwargs，即kwargs&#x3D;{‘y’: 2, ‘z’: 3}</li>
<li>执行func(<em>args,<em>kwargs),即func(</em>(1,),</em>* {‘y’: 2, ‘z’: 3}),等同于func(1,z&#x3D;3,y&#x3D;2)</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">提示： <span class="token operator">*</span>args、<span class="token operator">**</span>kwargs中的args和kwargs被替换成其他名字并无语法错误，但使用args、kwargs是约定俗成的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-0064bdc3b1e3fd19d4240f375fecce8a_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=40">https://www.bilibili.com/video/av73342471/?p=40www.bilibili.com/video/av73342471/?p=40</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=41">https://www.bilibili.com/video/av73342471?p=41www.bilibili.com/video/av73342471?p=41</a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=42">https://www.bilibili.com/video/av73342471?p=42www.bilibili.com/video/av73342471?p=42</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/13_%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="一-名称空间"><a href="#一-名称空间" class="headerlink" title="一 名称空间"></a>一 名称空间</h2><p>名称空间即存放名字与对象映射&#x2F;绑定关系的地方。对于x&#x3D;3，Python会申请内存空间存放对象3，然后将名字x与3的绑定关系存放于名称空间中，del x表示清除该绑定关系。</p>
<p> 在程序执行期间最多会存在三种名称空间</p>
<p><img src="https://pic2.zhimg.com/80/v2-596e030156bc539213fb080d356ca1d9_720w.jpg" alt="img"></p>
<h2 id="1-1-内建名称空间"><a href="#1-1-内建名称空间" class="headerlink" title="1.1 内建名称空间"></a>1.1 内建名称空间</h2><p>伴随python解释器的启动&#x2F;关闭而产生&#x2F;回收，因而是第一个被加载的名称空间，用来存放一些内置的名字，比如内建函数名</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span>
<span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function <span class="token builtin">max</span><span class="token operator">></span> <span class="token comment">#built-in内建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-6b1e7070c484f0d266dcfdc04ebf265a_720w.jpg" alt="img"></p>
<h2 id="1-2-全局名称空间"><a href="#1-2-全局名称空间" class="headerlink" title="1.2 全局名称空间"></a>1.2 全局名称空间</h2><p>伴随python文件的开始执行&#x2F;执行完毕而产生&#x2F;回收，是第二个被加载的名称空间，文件执行过程中产生的名字都会存放于该名称空间中，如下名字</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys <span class="token comment">#模块名sys</span>

x<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#变量名x</span>

<span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    y<span class="token operator">=</span><span class="token number">2</span> <span class="token comment">#变量名y</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#函数名foo</span>
    y<span class="token operator">=</span><span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

Class <span class="token class-name">Bar</span><span class="token punctuation">:</span> <span class="token comment">#类名Bar</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-2def7f8d2d87802b200813e691a5acfd_720w.jpg" alt="img"></p>
<h2 id="1-3-局部名称空间"><a href="#1-3-局部名称空间" class="headerlink" title="1.3 局部名称空间"></a>1.3 局部名称空间</h2><p>伴随函数的调用&#x2F;结束而临时产生&#x2F;回收，函数的形参、函数内定义的名字都会被存放于该名称空间中</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    y<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#调用函数时，才会执行函数代码，名字x和y都存放于该函数的局部名称空间中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>名称空间的加载顺序是：内置名称空间-&gt;全局名称空间-&gt;局部名称空间，而查找一个名字，必须从三个名称空间之一找到，查找顺序为：局部名称空间-&gt;全局名称空间-&gt;内置名称空间。</p>
<p><img src="https://pic1.zhimg.com/80/v2-521d2bf3131371f8d2656b184ad17798_720w.jpg" alt="img"></p>
<h2 id="二-作用域"><a href="#二-作用域" class="headerlink" title="二 作用域"></a>二 作用域</h2><h2 id="2-1-全局作用域与局部作用域"><a href="#2-1-全局作用域与局部作用域" class="headerlink" title="2.1 全局作用域与局部作用域"></a>2.1 全局作用域与局部作用域</h2><p>按照名字作用范围的不同可以将三个名称空间划分为两个区域：</p>
<ol>
<li>全局作用域:位于全局名称空间、内建名称空间中的名字属于全局范围，该范围内的名字全局存活（除非被删除，否则在整个文件执行过程中存活）、全局有效（在任意位置都可以使用）；</li>
<li>局部作用域:位于局部名称空间中的名字属于局部范围。该范围内的名字临时存活（即在函数调用时临时生成，函数调用结束后就释放）、局部有效（只能在函数内使用）。</li>
</ol>
<p><img src="https://pic4.zhimg.com/80/v2-c7c952d4554d6db0cf46305be525bafb_720w.jpg" alt="img"></p>
<h2 id="2-2-作用域与名字查找的优先级"><a href="#2-2-作用域与名字查找的优先级" class="headerlink" title="2.2 作用域与名字查找的优先级"></a>2.2 作用域与名字查找的优先级</h2><p> 在局部作用域查找名字时，起始位置是局部作用域，所以先查找局部名称空间，没有找到，再去全局作用域查找：先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">100</span> <span class="token comment">#全局作用域的名字x</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">300</span> <span class="token comment">#局部作用域的名字x</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#在局部找x</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#结果为300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在全局作用域查找名字时，起始位置便是全局作用域，所以先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">100</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">300</span> <span class="token comment">#在函数调用时产生局部作用域的名字x</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#在全局找x,结果为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>提示：可以调用内建函数locals()和globals()来分别查看局部作用域和全局作用域的名字，查看的结果都是字典格式。在全局作用域查看到的locals()的结果等于globals()</p>
<p><img src="https://pic3.zhimg.com/80/v2-7adbbd64e5216724e7933789054d0f1e_720w.jpg" alt="img"></p>
<p>Python支持函数的嵌套定义，在内嵌的函数内查找名字时，会优先查找自己局部作用域的名字，然后由内而外一层层查找外部嵌套函数定义的作用域，没有找到，则查找全局作用域</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">2</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 函数名inner属于outer这一层作用域的名字</span>
        x<span class="token operator">=</span><span class="token number">3</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner x:%s'</span> <span class="token operator">%</span>x<span class="token punctuation">)</span>

    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'outer x:%s'</span> <span class="token operator">%</span>x<span class="token punctuation">)</span>

outer<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">#结果为</span>
inner x<span class="token punctuation">:</span><span class="token number">3</span>
outer x<span class="token punctuation">:</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在函数内，无论嵌套多少层，都可以查看到全局作用域的名字，若要在函数内修改全局名称空间中名字的值，当值为不可变类型时，则需要用到global关键字</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> x <span class="token comment">#声明x为全局名称空间的名字</span>
    x<span class="token operator">=</span><span class="token number">2</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#结果为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当实参的值为可变类型时，函数体内对该值的修改将直接反应到原值，</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

foo<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>
<span class="token comment">#结果为</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于嵌套多层的函数，使用nonlocal关键字可以将名字声明为来自外部嵌套函数定义的作用域（非全局）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">2</span>
    <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> x
        x<span class="token operator">=</span><span class="token number">3</span>
    f2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#调用f2(),修改f1作用域中名字x的值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#在f1作用域查看x</span>

f1<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#结果</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>nonlocal x会从当前函数的外层函数开始一层层去查找名字x，若是一直到最外层函数都找不到，则会抛出异常。</p>
<p><img src="https://pic2.zhimg.com/80/v2-632ec1c5586b42b1b603268097360c35_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471/?p=45">https://www.bilibili.com/video/av73342471/?p=45www.bilibili.com/video/av73342471/?p=45</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/14_%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一-函数对象"><a href="#一-函数对象" class="headerlink" title="一 函数对象"></a>一 函数对象</h2><p>函数对象指的是函数可以被当做’数据’来处理，具体可以分为四个方面的使用，我们如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-610f07da055d449976326f5e234075d9_720w.jpg" alt="img"></p>
<h2 id="1-1-函数可以被引用"><a href="#1-1-函数可以被引用" class="headerlink" title="1.1 函数可以被引用"></a>1.1 函数可以被引用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x<span class="token operator">+</span>y
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token operator">=</span>add
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-2-函数可以作为容器类型的元素"><a href="#1-2-函数可以作为容器类型的元素" class="headerlink" title="1.2 函数可以作为容器类型的元素"></a>1.2 函数可以作为容器类型的元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'add'</span><span class="token punctuation">:</span>add<span class="token punctuation">,</span><span class="token string">'max'</span><span class="token punctuation">:</span><span class="token builtin">max</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dic
<span class="token punctuation">&#123;</span><span class="token string">'add'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function add at <span class="token number">0x100661e18</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function <span class="token builtin">max</span><span class="token operator">></span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dic<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-3-函数可以作为参数传入另外一个函数"><a href="#1-3-函数可以作为参数传入另外一个函数" class="headerlink" title="1.3 函数可以作为参数传入另外一个函数"></a>1.3 函数可以作为参数传入另外一个函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> func<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-4-函数的返回值可以是一个函数"><a href="#1-4-函数的返回值可以是一个函数" class="headerlink" title="1.4 函数的返回值可以是一个函数"></a>1.4 函数的返回值可以是一个函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
     <span class="token keyword">return</span> add 
func<span class="token operator">=</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span> 
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">3</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-3a92b83b2c4ab23b0e237f071b6bcd7e_720w.jpg" alt="img"></p>
<h2 id="二-闭包函数"><a href="#二-闭包函数" class="headerlink" title="二 闭包函数"></a>二 闭包函数</h2><h2 id="2-1-闭与包"><a href="#2-1-闭与包" class="headerlink" title="2.1 闭与包"></a>2.1 闭与包</h2><p>基于函数对象的概念，可以将函数返回到任意位置去调用，但作用域的关系是在定义完函数时就已经被确定了的，与函数的调用位置无关。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

    <span class="token keyword">return</span> f2

<span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">3</span>
    f2<span class="token operator">=</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#调用f1()返回函数f2</span>
    f2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#需要按照函数定义时的作用关系去执行，与调用位置无关</span>

f3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#结果为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也就是说函数被当做数据处理时，始终以自带的作用域为准。若内嵌函数包含对外部函数作用域（而非全局作用域）中变量的引用，那么该’内嵌函数’就是闭包函数，简称闭包(Closures)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token operator">=</span><span class="token number">2</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

func<span class="token operator">=</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结果为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-f8b3a3ff993a95277b4ec5b1514cb103_720w.jpg" alt="img"></p>
<p>可以通过函数的<strong>closure</strong>属性，查看到闭包函数所包裹的外部变量</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">.</span>__closure__
<span class="token punctuation">(</span><span class="token operator">&lt;</span>cell at <span class="token number">0x10212af78</span><span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token builtin">object</span> at <span class="token number">0x10028cca0</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">.</span>__closure__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cell_contents
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>“闭”代表函数是内部的，“包”代表函数外’包裹’着对外层作用域的引用。因而无论在何处调用闭包函数，使用的仍然是包裹在其外层的变量。</p>
<p><img src="https://pic4.zhimg.com/80/v2-c6e623206aa2c60c1036f30656ffbbaf_720w.jpg" alt="img"></p>
<h2 id="2-2-闭包的用途"><a href="#2-2-闭包的用途" class="headerlink" title="2.2 闭包的用途"></a>2.2 闭包的用途</h2><p>目前为止，我们得到了两种为函数体传值的方式，一种是直接将值以参数的形式传入，另外一种就是将值包给函数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment">#方式一：</span>
<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text

<span class="token comment">#方式二：</span>
<span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text
    <span class="token keyword">return</span> get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>提示：requests模块是用来模拟浏览器向网站发送请求并将页面内容下载到本地，需要事先安装：pip3 install requests</p>
<p><img src="https://pic1.zhimg.com/80/v2-25aba810eb15ef9e3d59241516b05358_720w.jpg" alt="img"></p>
<p>对比两种方式，方式一在下载同一页面时需要重复传入url，而方式二只需要传一次值，就会得到一个包含指定url的闭包函数，以后调用该闭包函数无需再传url</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一下载同一页面</span>
get<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span>
get<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span>
get<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span>
……

<span class="token comment"># 方式二下载同一页面</span>
python<span class="token operator">=</span>page<span class="token punctuation">(</span><span class="token string">'https://www.python.org'</span><span class="token punctuation">)</span>
python<span class="token punctuation">(</span><span class="token punctuation">)</span>
python<span class="token punctuation">(</span><span class="token punctuation">)</span>
python<span class="token punctuation">(</span><span class="token punctuation">)</span>
……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>闭包函数的这种特性有时又称为惰性计算。使用将值包给函数的方式，在接下来的装饰器中也将大有用处</p>
<p><img src="https://pic3.zhimg.com/80/v2-fbcde5e64980428d3864f2c389ce3f3e_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>函数对象：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=43">https://www.bilibili.com/video/av73342471?p=43www.bilibili.com/video/av73342471?p=43</a></p>
<p>闭包函数：</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=46">https://www.bilibili.com/video/av73342471?p=46www.bilibili.com/video/av73342471?p=46</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/16_%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-迭代器介绍"><a href="#一-迭代器介绍" class="headerlink" title="一 迭代器介绍"></a>一 迭代器介绍</h2><p>迭代器即用来迭代取值的工具，而迭代是重复反馈过程的活动，其目的通常是为了逼近所需的目标或结果，每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值,单纯的重复并不是迭代</p>
<p><img src="https://pic4.zhimg.com/80/v2-565373773a847faa7a97a79b8851d2db_720w.jpg" alt="img"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>下述while循环才是一个迭代过程，不仅满足重复，而且以每次重新赋值后的index值作为下一次循环中新的索引进行取值，反复迭代，最终可以取尽列表中的值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">goods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'mac'</span><span class="token punctuation">,</span><span class="token string">'lenovo'</span><span class="token punctuation">,</span><span class="token string">'acer'</span><span class="token punctuation">,</span><span class="token string">'dell'</span><span class="token punctuation">,</span><span class="token string">'sony'</span><span class="token punctuation">]</span>

index<span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    index<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-70866f67008dbbd32b1db9a0122e5a85_720w.jpg" alt="img"></p>
<h2 id="1-1-可迭代对象"><a href="#1-1-可迭代对象" class="headerlink" title="1.1 可迭代对象"></a>1.1 可迭代对象</h2><p>通过索引的方式进行迭代取值，实现简单，但仅适用于序列类型：字符串，列表，元组。对于没有索引的字典、集合等非序列类型，必须找到一种不依赖索引来进行迭代取值的方式，这就用到了迭代器。</p>
<p>要想了解迭代器为何物，必须事先搞清楚一个很重要的概念：可迭代对象(Iterable)。从语法形式上讲，内置有__iter__方法的对象都是可迭代对象，字符串、列表、元组、字典、集合、打开的文件都是可迭代对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'egon'</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>__iter__
<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>__iter__
……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-2d426dd7229747e25b7342c4bba5be50_720w.jpg" alt="img"></p>
<h3 id="1-2-迭代器对象"><a href="#1-2-迭代器对象" class="headerlink" title="1.2 迭代器对象"></a>1.2 迭代器对象</h3><p>调用obj.<strong>iter</strong>()方法返回的结果就是一个迭代器对象(Iterator)。迭代器对象是内置有<strong>iter</strong>和<strong>next</strong>方法的对象，打开的文件本身就是一个迭代器对象，执行迭代器对象.<strong>iter</strong>()方法得到的仍然是迭代器本身，而执行迭代器.<strong>next</strong>()方法就会计算出迭代器中的下一个值。 迭代器是Python提供的一种统一的、不依赖于索引的迭代取值方式，只要存在多个“值”，无论序列类型还是非序列类型都可以按照迭代器的方式取值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token comment"># 可迭代对象s</span>
<span class="token operator">>></span><span class="token operator">></span> i<span class="token operator">=</span><span class="token builtin">iter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment"># 本质就是在调用s.__iter__(),返回s的迭代器对象i，</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 本质就是在调用i.__next__()</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment">#抛出StopIteration的异常，代表无值可取，迭代结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-737e0d369eb76a990b772d9666e25a4f_720w.jpg" alt="img"></p>
<h2 id="二-for循环原理"><a href="#二-for循环原理" class="headerlink" title="二 for循环原理"></a>二 for循环原理</h2><p>有了迭代器后，我们便可以不依赖索引迭代取值了，使用while循环的实现方式如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">goods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'mac'</span><span class="token punctuation">,</span><span class="token string">'lenovo'</span><span class="token punctuation">,</span><span class="token string">'acer'</span><span class="token punctuation">,</span><span class="token string">'dell'</span><span class="token punctuation">,</span><span class="token string">'sony'</span><span class="token punctuation">]</span>
i<span class="token operator">=</span><span class="token builtin">iter</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span> <span class="token comment">#每次都需要重新获取一个迭代器对象</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span> <span class="token comment">#捕捉异常终止循环</span>
        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>for循环又称为迭代循环，in后可以跟任意可迭代对象，上述while循环可以简写为</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">goods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'mac'</span><span class="token punctuation">,</span><span class="token string">'lenovo'</span><span class="token punctuation">,</span><span class="token string">'acer'</span><span class="token punctuation">,</span><span class="token string">'dell'</span><span class="token punctuation">,</span><span class="token string">'sony'</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> goods<span class="token punctuation">:</span>   
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>for 循环在工作时，首先会调用可迭代对象goods内置的<strong>iter</strong>方法拿到一个迭代器对象，然后再调用该迭代器对象的<strong>next</strong>方法将取到的值赋给item,执行循环体完成一次循环，周而复始，直到捕捉StopIteration异常，结束迭代。</p>
<p><img src="https://pic2.zhimg.com/80/v2-c64b3c28a2b8977bfce7621078da63b9_720w.jpg" alt="img"></p>
<h2 id="三-迭代器的优缺点"><a href="#三-迭代器的优缺点" class="headerlink" title="三 迭代器的优缺点"></a>三 迭代器的优缺点</h2><p>基于索引的迭代取值，所有迭代的状态都保存在了索引中，而基于迭代器实现迭代的方式不再需要索引，所有迭代的状态就保存在迭代器中，然而这种处理方式优点与缺点并存：</p>
<h2 id="3-1-优点："><a href="#3-1-优点：" class="headerlink" title="3.1 优点："></a>3.1 优点：</h2><p>1、为序列和非序列类型提供了一种统一的迭代取值方式。</p>
<p>2、惰性计算：迭代器对象表示的是一个数据流，可以只在需要时才去调用<strong>next</strong>来计算出一个值，就迭代器本身来说，同一时刻在内存中只有一个值，因而可以存放无限大的数据流，而对于其他容器类型，如列表，需要把所有的元素都存放于内存中，受内存大小的限制，可以存放的值的个数是有限的。</p>
<p><img src="https://pic2.zhimg.com/80/v2-c91b05bd30f1abae45ec6867bb5e9625_720w.jpg" alt="img"></p>
<h2 id="3-2-缺点："><a href="#3-2-缺点：" class="headerlink" title="3.2 缺点："></a>3.2 缺点：</h2><p>1、除非取尽，否则无法获取迭代器的长度</p>
<p>2、只能取下一个值，不能回到开始，更像是‘一次性的’，迭代器产生后的唯一目标就是重复执行next方法直到值取尽，否则就会停留在某个位置，等待下一次调用next；若是要再次迭代同个对象，你只能重新调用iter方法去创建一个新的迭代器对象，如果有两个或者多个循环使用同一个迭代器，必然只会有一个循环能取到值。</p>
<p><img src="https://pic2.zhimg.com/80/v2-8e0f71376333332d0411bb2199131c6d_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=51">https://www.bilibili.com/video/av73342471?p=51www.bilibili.com/video/av73342471?p=51</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/15_%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-装饰器介绍"><a href="#一-装饰器介绍" class="headerlink" title="一 装饰器介绍"></a>一 装饰器介绍</h2><h2 id="1-1-为何要用装饰器"><a href="#1-1-为何要用装饰器" class="headerlink" title="1.1 为何要用装饰器"></a>1.1 为何要用装饰器</h2><p><img src="https://pic3.zhimg.com/80/v2-5f0bd90a1428a4b373be52c22f7d871a_720w.jpg" alt="img"></p>
<p>软件的设计应该遵循开放封闭原则，即对扩展是开放的，而对修改是封闭的。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着对象一旦设计完成，就可以独立完成其工作，而不要对其进行修改。</p>
<p>软件包含的所有功能的源代码以及调用方式，都应该避免修改，否则一旦改错，则极有可能产生连锁反应，最终导致程序崩溃，而对于上线后的软件，新需求或者变化又层出不穷，我们必须为程序提供扩展的可能性，这就用到了装饰器。</p>
<h2 id="1-2-什么是装饰器"><a href="#1-2-什么是装饰器" class="headerlink" title="1.2 什么是装饰器"></a>1.2 什么是装饰器</h2><p><img src="https://pic2.zhimg.com/80/v2-b43bfaa7c4abf2a53d535ce272d937b9_720w.jpg" alt="img"></p>
<p>’装饰’代指为被装饰对象添加新的功能，’器’代指器具&#x2F;工具，装饰器与被装饰的对象均可以是任意可调用对象。概括地讲，装饰器的作用就是在不修改被装饰对象源代码和调用方式的前提下为被装饰对象添加额外的功能。装饰器经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等应用场景，装饰器是解决这类问题的绝佳设计，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</p>
<p>提示：可调用对象有函数，方法或者类，此处我们单以本章主题函数为例，来介绍函数装饰器，并且被装饰的对象也是函数。</p>
<h2 id="二-装饰器的实现"><a href="#二-装饰器的实现" class="headerlink" title="二 装饰器的实现"></a>二 装饰器的实现</h2><p>函数装饰器分为：无参装饰器和有参装饰两种，二者的实现原理一样，都是’函数嵌套+闭包+函数对象’的组合使用的产物。</p>
<p><img src="https://pic2.zhimg.com/80/v2-21b3488ea792ad818b3eea81740f6945_720w.jpg" alt="img"></p>
<h2 id="2-1-无参装饰器的实现"><a href="#2-1-无参装饰器的实现" class="headerlink" title="2.1 无参装饰器的实现"></a>2.1 无参装饰器的实现</h2><p>如果想为下述函数添加统计其执行时间的功能</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>'Welcome to the index page’<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">200</span>

index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#函数执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>遵循不修改被装饰对象源代码的原则，我们想到的解决方法可能是这样</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#函数执行</span>
stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-2e3af8429a3c2606c4cfbedb0b196e89_720w.jpg" alt="img"></p>
<p>考虑到还有可能要统计其他函数的执行时间，于是我们将其做成一个单独的工具，函数体需要外部传入被装饰的函数从而进行调用，我们可以使用参数的形式传入</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 通过参数接收外部的值</span>
    start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>
    stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但之后函数的调用方式都需要统一改成</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">wrapper<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
wrapper<span class="token punctuation">(</span>其他函数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这便违反了不能修改被装饰对象调用方式的原则，于是我们换一种为函数体传值的方式，即将值包给函数，如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 引用外部作用域的变量func</span>
        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样我们便可以在不修改被装饰函数源代码和调用方式的前提下为其加上统计时间的功能，只不过需要事先执行一次timer将被装饰的函数传入，返回一个闭包函数wrapper重新赋值给变量名 &#x2F;函数名index，如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">index<span class="token operator">=</span>timer<span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">#得到index=wrapper，wrapper携带对外作用域的引用：func=原始的index</span>
index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 执行的是wrapper()，在wrapper的函数体内再执行最原始的index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-6c1260375fb70d489df20b676c5cac51_720w.jpg" alt="img"></p>
<p>至此我们便实现了一个无参装饰器timer，可以在不修改被装饰对象index源代码和调用方式的前提下为其加上新功能。但我们忽略了若被装饰的函数是一个有参函数，便会抛出异常</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to the home page'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>

home<span class="token operator">=</span>timer<span class="token punctuation">(</span>home<span class="token punctuation">)</span>
home<span class="token punctuation">(</span><span class="token string">'egon'</span><span class="token punctuation">)</span>
<span class="token comment">#抛出异常</span>
TypeError<span class="token punctuation">:</span> wrapper<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">0</span> positional arguments but <span class="token number">1</span> was given<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以会抛出异常，是因为home(‘egon’)调用的其实是wrapper(‘egon’)，而函数wrapper没有参数。wrapper函数接收的参数其实是给最原始的func用的，为了能满足被装饰函数参数的所有情况，便用上*args+**kwargs组合（见4.3小节）,于是修正装饰器timer如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic4.zhimg.com/80/v2-da8d9c6733f96b2a897c986e3515ffe3_720w.jpg" alt="img"></p>
<p>此时我们就可以用timer来装饰带参数或不带参数的函数了，但是为了简洁而优雅地使用装饰器，Python提供了专门的装饰器语法来取代index&#x3D;timer(index)的形式，需要在被装饰对象的正上方单独一行添加@timer,当解释器解释到@timer时就会调用timer函数，且把它正下方的函数名当做实参传入，然后将返回的结果重新赋值给原函数名</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@timer</span> <span class="token comment"># index=timer(index)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to the index page'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">200</span>
<span class="token decorator annotation punctuation">@timer</span> <span class="token comment"># index=timer(home)</span>           <span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>'Welcome to the home page’<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们有多个装饰器，可以叠加多个</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@deco3</span>
<span class="token decorator annotation punctuation">@deco2</span>
<span class="token decorator annotation punctuation">@deco1</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>叠加多个装饰器也无特殊之处，上述代码语义如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">index<span class="token operator">=</span>deco3<span class="token punctuation">(</span>deco2<span class="token punctuation">(</span>deco1<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-c6e67404ac0e4319ce3cd89af56ead5d_720w.jpg" alt="img"></p>
<h2 id="2-2-有参装饰器的实现"><a href="#2-2-有参装饰器的实现" class="headerlink" title="2.2 有参装饰器的实现"></a>2.2 有参装饰器的实现</h2><p>了解无参装饰器的实现原理后，我们可以再实现一个用来为被装饰对象添加认证功能的装饰器，实现的基本形式如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        编写基于文件的认证<span class="token punctuation">,</span>认证通过则执行res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">,</span>并返回res
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们想提供多种不同的认证方式以供选择，单从wrapper函数的实现角度改写如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> driver <span class="token operator">==</span> <span class="token string">'file'</span><span class="token punctuation">:</span>
                编写基于文件的认证<span class="token punctuation">,</span>认证通过则执行res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">,</span>并返回res
            <span class="token keyword">elif</span> driver <span class="token operator">==</span> <span class="token string">'mysql'</span><span class="token punctuation">:</span>
                编写基于mysql认证<span class="token punctuation">,</span>认证通过则执行res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">,</span>并返回res
        <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-82fb584a53b2277048a09561b3e19b58_720w.jpg" alt="img"></p>
<p>函数wrapper需要一个driver参数，而函数deco与wrapper的参数都有其特定的功能，不能用来接受其他类别的参数，可以在deco的外部再包一层函数auth，用来专门接受额外的参数，这样便保证了在auth函数内无论多少层都可以引用到</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ……
    <span class="token keyword">return</span> deco<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时我们就实现了一个有参装饰器，使用方式如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">先调用auth_type<span class="token punctuation">(</span>driver<span class="token operator">=</span><span class="token string">'file'</span><span class="token punctuation">)</span>，得到@deco，deco是一个闭包函数，
包含了对外部作用域名字driver的引用，@deco的语法意义与无参装饰器一样
<span class="token decorator annotation punctuation">@auth</span><span class="token punctuation">(</span>driver<span class="token operator">=</span><span class="token string">'file'</span><span class="token punctuation">)</span> 
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     
    <span class="token keyword">pass</span>
<span class="token decorator annotation punctuation">@auth</span><span class="token punctuation">(</span>driver<span class="token operator">=</span><span class="token string">'mysql'</span><span class="token punctuation">)</span> 
<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以使用help(函数名)来查看函数的文档注释，本质就是查看函数的<strong>doc</strong>属性，但对于被装饰之后的函数，查看文档注释</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@timer</span>
<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    home page function
    :param name: str
    :return: None
    '''</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to the home page'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>home<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">''</span>'
打印结果：

Help on function wrapper <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>

wrapper<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

<span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-3380e05c82d8501f9ac1c2681311a062_720w.jpg" alt="img"></p>
<p>在被装饰之后home&#x3D;wrapper,查看home.<strong>name</strong>也可以发现home的函数名确实是wrapper，想要保留原函数的文档和函数名属性，需要修正装饰器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
    wrapper<span class="token punctuation">.</span>__doc__<span class="token operator">=</span>func<span class="token punctuation">.</span>__doc__
    wrapper<span class="token punctuation">.</span>__name__<span class="token operator">=</span>func<span class="token punctuation">.</span>__name__
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按照上述方式来实现保留原函数属性过于麻烦，functools模块下提供一个装饰器wraps专门用来帮我们实现这件事，用法如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps

<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-091acff94160bf2b8258553158168f79_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p>简单装饰器的实现</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=47">https://www.bilibili.com/video/av73342471?p=47www.bilibili.com/video/av73342471?p=47</a></p>
<p>装饰器修订</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=48">https://www.bilibili.com/video/av73342471?p=48www.bilibili.com/video/av73342471?p=48</a></p>
<p>wraps补充</p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=49">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=49<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/17_%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一-生成器与yield"><a href="#一-生成器与yield" class="headerlink" title="一 生成器与yield"></a>一 生成器与yield</h2><p><img src="https://pic2.zhimg.com/80/v2-2c92ed3ae0da1fd192339be9abc973a1_720w.jpg" alt="img"></p>
<p>若函数体包含yield关键字，再调用函数，并不会执行函数体代码，得到的返回值即生成器对象</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">my_range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">,</span>step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start...'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">while</span> start <span class="token operator">&lt;</span> stop<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">yield</span> start
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         start<span class="token operator">+=</span>step
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end...'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> g<span class="token operator">=</span>my_range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> g
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> my_range at <span class="token number">0x104105678</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>生成器内置有__iter__和__next__方法，所以生成器本身就是一个迭代器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>__iter__
<span class="token operator">&lt;</span>method<span class="token operator">-</span>wrapper <span class="token string">'__iter__'</span> of generator <span class="token builtin">object</span> at <span class="token number">0x1037d2af0</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>__next__
<span class="token operator">&lt;</span>method<span class="token operator">-</span>wrapper <span class="token string">'__next__'</span> of generator <span class="token builtin">object</span> at <span class="token number">0x1037d2af0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-31590362f23201814f45879db5dd6a51_720w.jpg" alt="img"></p>
<p>因而我们可以用next(生成器)触发生成器所对应函数的执行，</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment"># 触发函数执行直到遇到yield则停止,将yield后的值返回，并在当前位置挂起函数</span>
start<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment"># 再次调用next(g)，函数从上次暂停的位置继续执行，直到重新遇到yield...</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment"># 周而复始...</span>
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment"># 触发函数执行没有遇到yield则无值返回，即取值完毕抛出异常结束迭代</span>
end<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
StopIteration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-fa04ec0eaa5bd7bb8804908ad7b88369_720w.jpg" alt="img"></p>
<p>既然生成器对象属于迭代器，那么必然可以使用for循环迭代，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> countdown<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
countdown start
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
Done!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了yield关键字，我们就有了一种自定义迭代器的实现方式。yield可以用于返回值，但不同于return，函数一旦遇到return就结束了，而yield可以保存函数的运行状态挂起函数，用来返回多次值</p>
<p><img src="https://pic4.zhimg.com/80/v2-024f3ac36393f784226497828d53eebf_720w.jpg" alt="img"></p>
<h2 id="二-yield表达式应用"><a href="#二-yield表达式应用" class="headerlink" title="二 yield表达式应用"></a>二 yield表达式应用</h2><p>在函数内可以采用表达式形式的yield</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Ready to eat'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         food<span class="token operator">=</span><span class="token keyword">yield</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get the food: %s, and start to eat'</span> <span class="token operator">%</span>food<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以拿到函数的生成器对象持续为函数体send值，如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> g<span class="token operator">=</span>eater<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 得到生成器对象</span>
<span class="token operator">>></span><span class="token operator">></span> g
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> eater at <span class="token number">0x101b6e2b0</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment"># 需要事先”初始化”一次，让函数挂起在food=yield，等待调用g.send()方法为其传值</span>
Ready to eat
<span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'包子'</span><span class="token punctuation">)</span>
get the food<span class="token punctuation">:</span> 包子<span class="token punctuation">,</span> <span class="token keyword">and</span> start to eat
<span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'鸡腿'</span><span class="token punctuation">)</span>
get the food<span class="token punctuation">:</span> 鸡腿<span class="token punctuation">,</span> <span class="token keyword">and</span> start to eat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>针对表达式形式的yield，生成器对象必须事先被初始化一次，让函数挂起在food&#x3D;yield的位置，等待调用g.send()方法为函数体传值，g.send(None)等同于next(g)。</p>
<p><img src="https://pic1.zhimg.com/80/v2-277c3fe7374520dba8973dea02474790_720w.jpg" alt="img"></p>
<p> 我们可以编写装饰器来完成为所有表达式形式yield对应生成器的初始化操作，如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        g<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
        <span class="token keyword">return</span> g
    <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@init</span>
<span class="token keyword">def</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Ready to eat'</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        food<span class="token operator">=</span><span class="token keyword">yield</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get the food: %s, and start to eat'</span> <span class="token operator">%</span>food<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>表达式形式的yield也可以用于返回多次值，即<code>变量名=yield 值</code>的形式，如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Ready to eat'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     food_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         food<span class="token operator">=</span><span class="token keyword">yield</span> food_list
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         food_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>food<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> e<span class="token operator">=</span>eater<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
Ready to eat
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'蒸羊羔'</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'蒸羊羔'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'蒸熊掌'</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'蒸羊羔'</span><span class="token punctuation">,</span> <span class="token string">'蒸熊掌'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'蒸鹿尾儿'</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'蒸羊羔'</span><span class="token punctuation">,</span> <span class="token string">'蒸熊掌'</span><span class="token punctuation">,</span> <span class="token string">'蒸鹿尾儿'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三-三元表达式、列表生成式、生成器表达式"><a href="#三-三元表达式、列表生成式、生成器表达式" class="headerlink" title="三 三元表达式、列表生成式、生成器表达式"></a>三 三元表达式、列表生成式、生成器表达式</h2><h2 id="3-1-三元表达式"><a href="#3-1-三元表达式" class="headerlink" title="3.1 三元表达式"></a>3.1 三元表达式</h2><p>三元表达式是python为我们提供的一种简化代码的解决方案，语法如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> 条件成立时返回的值 <span class="token keyword">if</span> 条件 <span class="token keyword">else</span> 条件不成立时返回的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>针对下述场景</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">></span> y<span class="token punctuation">:</span>
        <span class="token keyword">return</span> x
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> y

res <span class="token operator">=</span> max2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用三元表达式可以一行解决</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span>
y<span class="token operator">=</span><span class="token number">2</span>
res <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">></span> y <span class="token keyword">else</span> y <span class="token comment"># 三元表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic2.zhimg.com/80/v2-6b5e335f9c2baca1a9d076721c672b19_720w.jpg" alt="img"></p>
<h2 id="3-2-列表生成式"><a href="#3-2-列表生成式" class="headerlink" title="3.2 列表生成式"></a>3.2 列表生成式</h2><p>列表生成式是python为我们提供的一种简化代码的解决方案，用来快速生成列表，语法如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>expression <span class="token keyword">for</span> item1 <span class="token keyword">in</span> iterable1 <span class="token keyword">if</span> condition1
<span class="token keyword">for</span> item2 <span class="token keyword">in</span> iterable2 <span class="token keyword">if</span> condition2
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">for</span> itemN <span class="token keyword">in</span> iterableN <span class="token keyword">if</span> conditionN
<span class="token punctuation">]</span>

<span class="token comment">#类似于</span>
res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item1 <span class="token keyword">in</span> iterable1<span class="token punctuation">:</span>
    <span class="token keyword">if</span> condition1<span class="token punctuation">:</span>
        <span class="token keyword">for</span> item2 <span class="token keyword">in</span> iterable2<span class="token punctuation">:</span>
            <span class="token keyword">if</span> condition2
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token keyword">for</span> itemN <span class="token keyword">in</span> iterableN<span class="token punctuation">:</span>
                    <span class="token keyword">if</span> conditionN<span class="token punctuation">:</span>
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>针对下述场景</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">egg_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    egg_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'鸡蛋%s'</span> <span class="token operator">%</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>用列表生成式可以一行解决</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">egg_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'鸡蛋%s'</span> <span class="token operator">%</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pic3.zhimg.com/80/v2-d9640f4c3f1c13bbd78e7cf6de6dc316_720w.jpg" alt="img"></p>
<h2 id="3-3-生成器表达式"><a href="#3-3-生成器表达式" class="headerlink" title="3.3 生成器表达式"></a>3.3 生成器表达式</h2><p>创建一个生成器对象有两种方式，一种是调用带yield关键字的函数，另一种就是生成器表达式，与列表生成式的语法格式相同，只需要将[]换成()，即：</p>
<p><img src="https://pic3.zhimg.com/80/v2-70257d333a3e9a49704c10982ce48856_720w.jpg" alt="img"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">（expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对比列表生成式返回的是一个列表，生成器表达式返回的是一个生成器对象</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> g<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> g
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> <span class="token operator">&lt;</span>genexpr<span class="token operator">></span> at <span class="token number">0x101be0ba0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对比列表生成式，生成器表达式的优点自然是节省内存（一次只产生一个值在内存中）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token number">4</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment">#抛出异常StopIteration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们要读取一个大文件的字节数，应该基于生成器表达式的方式完成</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'db.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    nums<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">)</span>
    total_size<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment"># 依次执行next(nums)，然后累加到一起得到结果=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-f0a061871b663d857e13ada7c10b31ac_720w.jpg" alt="img"></p>
<h2 id="视频链接："><a href="#视频链接：" class="headerlink" title="视频链接："></a>视频链接：</h2><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=52">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=52<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=53">python快速入门（一）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/av73342471?p=53<img src="https://pic4.zhimg.com/v2-c64ada0dd06d0c57ed905be65d17acb7_180x120.jpg" alt="img"></a></p>
<p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/av73342471?p=54">https://www.bilibili.com/video/av73342471?p=54www.bilibili.com/video/av73342471?p=54</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/54_%E9%99%84%E5%BD%95%E4%B9%9D%EF%BC%9AType/</url>
    <content><![CDATA[<p>类型提示 <strong>Type hinting</strong>（最低Python版本为3.5）</p>
<p>python3新增类型提示功能，例如我们可以为函数增加类型提示信息，而不影响函数本身的执行：</p>
<p>注释的一般规则是参数名后跟一个冒号（：），然后再跟一个expression，这个expression可以是任何形式。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">def func(a: 'spam', b: (1, 10), c: float) -> int:
    return a + b + c
 
>>> func(1, 2, 3)
6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回值的形式是 -&gt; int，annotation可被保存为函数的attributes。查看所有的annotation，可通过如下语句</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">>>> func.__annotations__
&#123;'c': &lt;class 'float'>, 'a': 'spam', 'b': (1, 10), 'return': &lt;class 'int'>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果为函数增加了注释，可不可以继续使用默认参数呢？答案是肯定的。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">>>> def func(a: 'spam' = 4, b: (1, 10) = 5, c: float = 6) -> int:
...   return a + b + c
... 
>>> func(1, 2, 3)
6
>>> func()
15
>>> func(1, c=10)
16
>>> func.__annotations__
&#123;'c': &lt;class 'float'>, 'a': 'spam', 'b': (1, 10), 'return': &lt;class 'int'>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>运维之基础命令--虚拟机安装</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day01-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="day01-课堂笔记"><a href="#day01-课堂笔记" class="headerlink" title="day01 : 课堂笔记"></a>day01 : 课堂笔记</h1><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p><strong>1、安装虚拟机</strong></p>
<p><img src="/.%5Cassets%5Cimage-20210302121236930.png" alt="image-20210302121236930"></p>
<p>解压上述软件，创建vmware.exe快捷方式，然后用快捷方式打开。</p>
<p><img src="/.%5Cassets%5Cimage-20210302121408360.png" alt="image-20210302121408360"></p>
<p><strong>2、创建虚拟机</strong></p>
<p><img src="/.%5Cassets%5Cimage-20210302121456338.png" alt="image-20210302121456338"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121550128.png" alt="image-20210302121550128"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121622000.png" alt="image-20210302121622000"></p>
<p><img src="/.%5Cassets%5Cimage-20210302121745568.png" alt="image-20210302121745568"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122035359.png" alt="image-20210302122035359"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122256831.png" alt="image-20210302122256831"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122359568.png" alt="image-20210302122359568"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122603313.png" alt="image-20210302122603313"></p>
<p><img src="/.%5Cassets%5Cimage-20210302122657199.png" alt="image-20210302122657199"></p>
<p><img src="/.%5Cassets%5Cimage-20210302123826623.png" alt="image-20210302123826623"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124229475.png" alt="image-20210302124229475"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124308081.png" alt="image-20210302124308081"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124327456.png" alt="image-20210302124327456"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124404318.png" alt="image-20210302124404318"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124713502.png" alt="image-20210302124713502"></p>
<p><img src="/.%5Cassets%5Cimage-20210302124741038.png" alt="image-20210302124741038"></p>
<p><img src="/.%5Cassets%5Cimage-20210302125049653.png" alt="image-20210302125049653"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/18/03_Python/01_Python%E5%9F%BA%E7%A1%80/hinting/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>运维之基础命令--打包与压缩</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day08-%E6%89%93%E5%8C%85%E4%B8%8E%E5%8E%8B%E7%BC%A9/%E6%89%93%E5%8C%85%E4%B8%8E%E5%8E%8B%E7%BC%A9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h1><blockquote>
<p>将文件或文件夹合并成一个包，然后通过压缩算法进行数据压缩，减小包的体积，方便网络传输。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows：
	<span class="token function">zip</span>
	<span class="token function">rar</span>

linux:
	<span class="token function">zip</span>
	<span class="token function">tar</span>
	gz
	bz2
	tar.gz
	tar.bz2

压缩算法：
	<span class="token function">gzip</span>
	<span class="token function">bzip2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote>
<p>是一个Windows和Linux中常用打包压缩工具，支持的压缩算法是zip。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zip工具需要安装
	yum <span class="token function">install</span> <span class="token function">zip</span> <span class="token function">unzip</span> -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="zip压缩一个文件"><a href="#zip压缩一个文件" class="headerlink" title="zip压缩一个文件"></a>zip压缩一个文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 格式</span>
	<span class="token function">zip</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 压缩包名称  文件路径

<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># zip 123.zip 123.log </span>
  adding: <span class="token number">123</span>.log <span class="token punctuation">(</span>deflated <span class="token number">87</span>%<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4732</span>
-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">646165</span> Mar  <span class="token number">9</span> <span class="token number">10</span>:31 <span class="token number">123</span>.log
-rw-r--r--  <span class="token number">1</span> root root   <span class="token number">85296</span> Mar <span class="token number">11</span> <span class="token number">11</span>:58 <span class="token number">123</span>.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="zip压缩文件夹"><a href="#zip压缩文件夹" class="headerlink" title="zip压缩文件夹"></a>zip压缩文件夹</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要一个-r参数去递归压缩文件夹下的所有内容</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># zip -r dir.zip dir/</span>
  adding: dir/ <span class="token punctuation">(</span>stored <span class="token number">0</span>%<span class="token punctuation">)</span>
  adding: dir/one/ <span class="token punctuation">(</span>stored <span class="token number">0</span>%<span class="token punctuation">)</span>
  adding: dir/123.log <span class="token punctuation">(</span>deflated <span class="token number">87</span>%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="zip的静默输出"><a href="#zip的静默输出" class="headerlink" title="zip的静默输出"></a>zip的静默输出</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -q：参数就是不输出任何打包信息</span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># zip -r -q etc.zip /etc/</span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">14200</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">13674457</span> Mar <span class="token number">11</span> <span class="token number">12</span>:15 etc.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="zip解压命令（unzip）"><a href="#zip解压命令（unzip）" class="headerlink" title="zip解压命令（unzip）"></a>zip解压命令（unzip）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 格式</span>
	<span class="token function">unzip</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 压缩包路径

<span class="token comment"># unzip解压命令只能解压由zip打包的压缩文件</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># unzip dir.zip </span>
Archive:  dir.zip
  inflating: dir/123.log             
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># </span>

<span class="token comment"># 其他压缩包由unzip解压时随即报错。</span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># unzip nginx-.tar.gz</span>
Archive:  nginx-.tar.gz
  End-of-central-directory signature not found.  Either this <span class="token function">file</span> is not
  a zipfile, or it constitutes one disk of a multi-part archive.  In the
  latter <span class="token keyword">case</span> the central directory and zipfile comment will be found on
  the last disk<span class="token punctuation">(</span>s<span class="token punctuation">)</span> of this archive.
unzip:  cannot <span class="token function">find</span> zipfile directory <span class="token keyword">in</span> one of nginx-.tar.gz or
        nginx-.tar.gz.zip, and cannot <span class="token function">find</span> nginx-.tar.gz.ZIP, period.


<span class="token comment"># 查看压缩包中压缩那些内容，不解压？</span>
<span class="token comment"># 只查看压缩包内容不解压需要使用 -l 参数</span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># unzip -l dir.zip </span>
Archive:  dir.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
        <span class="token number">0</span>  03-11-2021 <span class="token number">12</span>:04   dir/
---------                     -------
        <span class="token number">0</span>                     <span class="token number">1</span> <span class="token function">file</span>

<span class="token comment"># 解压到指定目录（-d）</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># unzip -d /root/  etc.zip </span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># cd /root/</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls</span>
<span class="token punctuation">]</span>        anaconda-ks.cfg  dir.zip  index.html           test.pdf.gz  xxxeth0xxx           系统优化.md
<span class="token number">123</span>.log  demo.txt         etc      nginx-0.1.22.tar.gz  test.txt     上传与下载.md
<span class="token number">123</span>.zip  <span class="token function">dir</span>              eth0xxx  <span class="token builtin class-name">test</span>                 xxxeth0      文件管理_<span class="token punctuation">(</span>高级<span class="token punctuation">)</span>.pdf

<span class="token comment"># 静默输出(-q)</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># rm -rf etc</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># unzip -q -d /root/ /opt/etc.zip </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4828</span>
drwxr-xr-x  <span class="token number">91</span> root root    <span class="token number">8192</span> Mar <span class="token number">11</span> <span class="token number">11</span>:16 etc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><blockquote>
<p>tar压缩支持多种压缩算法</p>
<p>tar.gz   gzip (用的最多)</p>
<p>tar.bz2 bzip2</p>
</blockquote>
<h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><blockquote>
<p>通过gzip压缩算法，将文件压缩一定体积，有利于传输, 不支持打包</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4828</span>
-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">244977</span> Mar <span class="token number">10</span> <span class="token number">12</span>:12 index.html
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># gzip index.html </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4612</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">22652</span> Mar <span class="token number">10</span> <span class="token number">12</span>:12 index.html.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="gzip压缩一个目录"><a href="#gzip压缩一个目录" class="headerlink" title="gzip压缩一个目录"></a>gzip压缩一个目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc etc<span class="token punctuation">]</span><span class="token comment"># gzip -r /etc</span>
<span class="token punctuation">[</span>root@abc etc<span class="token punctuation">]</span><span class="token comment"># ls </span>
abrt                        GREP_COLORS.gz               my.cnf.d                 security
adjtime.gz                  groff                        my.cnf.gz                selinux
aliases.db.gz               group-.gz                    NetworkManager           services.gz
aliases.gz                  group.gz                     networks.gz              sestatus.conf.gz
alternatives                grub2.cfg                    nsswitch.conf.bak.gz     sgml
anacrontab.gz               grub.d                       nsswitch.conf.gz         shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="gzip解压-d"><a href="#gzip解压-d" class="headerlink" title="gzip解压(-d)"></a>gzip解压(-d)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
-rw-r--r--   <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span>   <span class="token number">22652</span> Mar <span class="token number">10</span> <span class="token number">12</span>:12 index.html.gz
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># gzip -d index.html.gz </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4828</span>
-rw-r--r--   <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span>  <span class="token number">244977</span> Mar <span class="token number">10</span> <span class="token number">12</span>:12 index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><blockquote>
<p>使用bzip2 压缩算法来压缩一定体积的文件。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4828</span>
-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">646165</span> Mar  <span class="token number">9</span> <span class="token number">10</span>:31 <span class="token number">123</span>.log     
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># bzip2 123.log </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4240</span>
-rw-r--r--   <span class="token number">1</span> root root       <span class="token number">0</span> Mar <span class="token number">10</span> <span class="token number">12</span>:04 <span class="token punctuation">]</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">42210</span> Mar  <span class="token number">9</span> <span class="token number">10</span>:31 <span class="token number">123</span>.log.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="bzip2解压（-d）"><a href="#bzip2解压（-d）" class="headerlink" title="bzip2解压（-d）"></a>bzip2解压（-d）</h3><blockquote>
<p>bzip2解压是针对于bzip2压缩的压缩包来进行解压。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4240</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">42210</span> Mar  <span class="token number">9</span> <span class="token number">10</span>:31 <span class="token number">123</span>.log.bz2
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># bzip2 -d 123.log.bz2 </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">4828</span>
-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">646165</span> Mar  <span class="token number">9</span> <span class="token number">10</span>:31 <span class="token number">123</span>.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="tar-1"><a href="#tar-1" class="headerlink" title="tar"></a>tar</h3><blockquote>
<p>tar其实是一个打包工具，不具备压缩功能，但是可以使用参数调用压缩工具来进行解压。</p>
</blockquote>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><p>-c : 创建压缩包</p>
</li>
<li><p>-f : 指定压缩包名称</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -c -f test.tar 123.log </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">5468</span>
-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">655360</span> Mar <span class="token number">11</span> <span class="token number">15</span>:49 test.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-z ： 指定使用gzip压缩工具进行压缩</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar  -c -z -f test-one.tar 123.log </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l </span>
total <span class="token number">5084</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">85279</span> Mar <span class="token number">11</span> <span class="token number">15</span>:56 test-one.tar

<span class="token comment"># 注：使用-z参数，不会自动添加.gz后缀</span>

<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -c -z -f anaconda.tar.gz  anaconda-ks.cfg </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">5084</span>
-rw-r--r--   <span class="token number">1</span> root root    <span class="token number">1010</span> Mar <span class="token number">11</span> <span class="token number">15</span>:58 anaconda.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-j : 指定使用bzip2压缩工具进行压缩</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -c -j -f 123-bask-one.tar 123.log </span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">5172</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">42328</span> Mar <span class="token number">11</span> <span class="token number">16</span>:00 <span class="token number">123</span>-bak.tar.bz2
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">42328</span> Mar <span class="token number">11</span> <span class="token number">16</span>:01 <span class="token number">123</span>-bask-one.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-J : 指定使用xz压缩工具进行压缩</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># tar -c -J  -f etc.tar.xz /etc/</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">9493376</span> Mar <span class="token number">11</span> <span class="token number">17</span>:00 etc.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-t : 查看压缩包内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -t -f 123-bak.tar.bz2 </span>
<span class="token number">123</span>.log
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-v ： 显示压缩包压缩过程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -x -v -f etc.tar -C /opt/</span>
/etc/centos-release
/etc/DIR_COLORS.lightbgcolor
/etc/libaudit.conf
/etc/mail.rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-P : 允许使用绝对路径进行打包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -c -P -f 123-three.tar /etc/passwd</span>
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -c -f 123-three.tar /etc/passwd</span>
tar: Removing leading `/' from member names
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-x ： 解压</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tar解压是按照原来的路径进行解压</span>
<span class="token punctuation">[</span>root@abc test<span class="token punctuation">]</span><span class="token comment"># tar -x -f etc.tar </span>

<span class="token comment"># tar会自动识别压缩功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-C ： 指定解压路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># tar -x -f etc.tar -C /opt/</span>
tar: Removing leading `/' from member names
<span class="token punctuation">[</span>root@abc ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span>
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># ls</span>
abc23  <span class="token function">dir</span>  dir.zip  etc  nginx-0.1.22.tar.gz  nginx-.tar.gz  xxx
<span class="token punctuation">[</span>root@abc opt<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>–exclude : 排除某些文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># tar -c -f abc.tar ./* --exclude=abc7 --exclude=abc5   --exclude=abc1 </span>
<span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># tar -t -f abc.tar </span>
./abc2
./abc3
./abc4
./abc6
./abc8
./abc9
<span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>–exclude-from : 根据某个文件列表排除多个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># cat list.txt </span>
abc995
abc996
abc997
abc998
abc999
<span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># tar -c -f abc.tar ./* --exclude-from=list.txt </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>-h : 打包软连接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@abc test-tar<span class="token punctuation">]</span><span class="token comment"># tar -c -h -f bin-h.tar /bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar参数
	-c <span class="token builtin class-name">:</span> 创建压缩
	-f ； 指定压缩包名称
	-z <span class="token builtin class-name">:</span> 使用gzip压缩工具进行压缩
	-j <span class="token builtin class-name">:</span> 使用bzip2压缩工具进行压缩
	-J <span class="token builtin class-name">:</span> 使用xz压缩工具进行压缩
	-t <span class="token builtin class-name">:</span> 显示压缩包内容，不解压
	-v <span class="token builtin class-name">:</span> 显示压缩过程
	-P <span class="token builtin class-name">:</span> 允许使用绝对路径进行压缩
	-x <span class="token builtin class-name">:</span> 解压
	-C <span class="token builtin class-name">:</span> 指定解压路径
	-h <span class="token builtin class-name">:</span> 打包软连接
	--exclude <span class="token builtin class-name">:</span> 排除某些文件
	--exclude-from <span class="token builtin class-name">:</span> 根据文件列表排除多个文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.linux下常见的压缩包类型有哪些
<span class="token function">zip</span> 
gz 
bz2 
tar.gz 
tar.bz 
<span class="token function">tar</span>

<span class="token number">2</span>.将/etc/hosts文件用tar格式打包。
<span class="token function">tar</span> -c -P -f hosts.tar /etc/hosts

<span class="token number">3</span>.查看打包之后的/etc/hosts的文件内容，在不解压的情况下查看。
<span class="token function">tar</span> -t -f hosts.tar

<span class="token number">4</span>.使用tar打包/var/log/目录。
<span class="token function">tar</span> -c -P -f hosts.tar /var/log/

<span class="token number">5</span>.使用zip打包/etc目录。
<span class="token function">zip</span> -r etc.zip /etc

<span class="token number">6</span>.查看/var/log/abc.zip目录的压缩包中有哪些内容。
<span class="token function">unzip</span> -l /var/log/abc.zip

<span class="token number">7</span>.将/var/log/abc.zip目录解压到/opt目录中。
<span class="token function">unzip</span> -d /opt /var/log/abc.zip

<span class="token number">10</span>.解压/etc/abc.tar.gz目录到/opt目录中。
<span class="token function">tar</span> -xf /etc/abc.tar.gz -C /opt

<span class="token number">11</span>.用zip打包/opt目录，要求不显示打包过程。
<span class="token function">zip</span> -q opt.zip /opt

<span class="token function">zip</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 压缩包名称  压缩文件路径
 
<span class="token number">12</span>.打包/etc/目录，要求是.bz2格式
<span class="token function">tar</span> -c -j -f etc.tar /etc

<span class="token number">13</span>.打包/var/log目录，要求是.xz格式
<span class="token function">tar</span> -c -J -f log.tar.xz /var/log

<span class="token number">14</span>.使用tar命令打包/etc/时，会出现一个删根的操作，怎样打包不会进行删根的操作
<span class="token function">tar</span> -c -P -f etc.tar /etc

<span class="token number">15</span>.打包/etc/目录，要求不打包/etc/hosts这个文件。

<span class="token number">16</span>.打包/etc/目录，要求不打包/etc/hosts和/etc/hostname这两个文件。

<span class="token number">17</span>.打包/etc/目录，但要排除passwd,shadow,group,gshadow,hosts,hostname这些文件。<span class="token punctuation">(</span>你能用两种方法实现吗<span class="token punctuation">)</span>

<span class="token number">18</span>.已知/etc/grub2.cfg文件是个软连接文件，在你不知道的情况下，请问怎么打包该文件的真实文件。

<span class="token number">19</span>.把/var/log/目录中所有.log的文件进行打包成一个压缩包，名称定义为log.tar.gz的压缩包。

<span class="token number">20</span>.已知文件oldboy.gz,请问在不解压的情况下，怎样查看该文件的内容。

<span class="token number">21</span>.打包/etc/目录，当前时间方式的压缩包:比如: <span class="token number">2019</span>-12-24_etc.tar.gz

<span class="token number">22</span>.创建/data/bak目录，然后复制如下文件到/data/bak目录下

<span class="token number">23</span>.接22题，使用tar命令对/data/bak目录下的文件及目录以gzip的格式进行归档压缩到/data目录下（压缩包的名字以自己名字命名）

<span class="token number">24</span>.使用tar命令查看上题/data目录下压缩包内的内容。

<span class="token number">25</span>.把第23题/data目录下的压缩包，解压到/backup目录下

<span class="token number">26</span>.再次使用tar命令把/data/bak目录下的文件及目录以gzip的格式进行归档压缩到/data目录下，但是在进行归档压缩时，排除文件“sudoers”，然后查看该压缩包内容是否存在文件“sudoers”（压缩包名自行拟定）

<span class="token number">27</span>.打包/etc目录下所有普通文件到root用户家目录。

<span class="token number">28</span>.打包/etc/目录到/opt/目录下，名称要求以当前主机名和ip地址命名，例：oldboy_10.0.0.100.tar.gz

<span class="token number">29</span>.如何使用gzip命令对文件进行压缩、解压

<span class="token number">30</span>.如何用zip命令对文件以及目录进行压缩、解压

<span class="token number">32</span>.打包opt整个目录，并命名test_opt.tar.gz

<span class="token number">33</span>.查看打包好的test_opt.tar.gz里的文件

<span class="token number">34</span>.将打包好的test_opt.tar.gz内容指定解压至/tmp目录

<span class="token number">35</span>.打包etc目录下的所有文件，不要目录只要文件

<span class="token number">36</span>.打包etc目录下的所有文件，排除passwd，shadow

<span class="token number">37</span>.打包etc目录下的所有以p开头的文件

<span class="token number">38</span>.打包etc目录下所有大于1M的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>.权限中的rwx-，每个字符所代表什么意思？对应的数字是什么？

r		可读		<span class="token number">4</span>

w		可写		<span class="token number">2</span>

x		可执行		<span class="token number">1</span>

-		没有权限	<span class="token number">0</span>


<span class="token number">3</span>.-rwxr-xr-x，写出对应数字权限



<span class="token number">4</span>.-rwxr--r--，写出对应数字权限


<span class="token number">5</span>.-r-xr-x--x，写出对应数字权限



<span class="token number">6</span>.-rw-r-xr-x，写出对应数字权限


<span class="token number">7</span>.-r--r--r--，写出对应数字权限



<span class="token number">8</span>.-r-xr-----，写出对应数字权限


<span class="token number">9</span>.---x-w-r--，写出对应数字权限


<span class="token number">10</span>.-rwxr--rw-，写出对应数字权限



<span class="token number">11</span>.-rw-r--r--，写出对应数字权限


<span class="token number">12</span>.---xr--rwx，写出对应数字权限


<span class="token number">13.777</span>，写出对应字母权限


<span class="token number">14.545</span>，写出对应字母权限




<span class="token number">15.744</span>，写出对应字母权限



<span class="token number">16.600</span>，写出对应字母权限



<span class="token number">17.641</span>，写出对应字母权限


<span class="token number">18.711</span>，写出对应字母权限



<span class="token number">19.700</span>，写出对应字母权限



<span class="token number">20.555</span>，写出对应字母权限



<span class="token number">21.733</span>，写出对应字母权限


<span class="token number">22.713</span>，写出对应字母权限



<span class="token number">23</span>.建一个目录/test,查看这个目录的默认权限是?




<span class="token number">24</span>.进入/test目录中,建一个文件abc,查看其默认的权限为？




<span class="token number">25</span>.创建一个文件test.txt,并其将权限改为600.



<span class="token number">26</span>.将test.txt文件的权限改为755.



<span class="token number">27</span>.将test.txt文件的权限改为000.



<span class="token number">28</span>.修改test.txt文件的权限为644.



<span class="token number">29</span>.给test.txt文件的属主加上x权限。




<span class="token number">30</span>.给test.txt文件的其他用户加上x权限。



<span class="token number">31</span>.去除test.txt文件的所有执行权限。



<span class="token number">32</span>.给/test目录及目录下的所有文件或目录的权限统一改为744。

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--用户权限</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day10-Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="修改用户信息-usermod"><a href="#修改用户信息-usermod" class="headerlink" title="修改用户信息(usermod)"></a>修改用户信息(usermod)</h1><blockquote>
<p>修改用户信息最主要的命令是usermod命令，其参数跟useradd基本一致。</p>
</blockquote>
<ul>
<li><p>修改UID</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2002:2002::/home/xiaoyu:/bin/bash
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod -u 2302 xiaoyu</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2002::/home/xiaoyu:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改基本组及附加组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本组 : 一个用户必须拥有的哪个组</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2002::/home/xiaoyu:/bin/bash
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># id xiaoyu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>xiaoyu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2002</span><span class="token punctuation">(</span>xiaoyu<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2002</span><span class="token punctuation">(</span>xiaoyu<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod -g group1 xiaoyu</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># id xiaoyu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>xiaoyu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2003::/home/xiaoyu:/bin/bash
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># </span>

<span class="token comment"># 附加组 ： 用户加入的其他用户组</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># groupadd group1</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># id</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span>,1001<span class="token punctuation">(</span>sssssssssssssssssssssss<span class="token punctuation">)</span>,1002<span class="token punctuation">(</span>test<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod -G group1 root</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/group</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
group1:x:2003:root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改家目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod  -d /home/xiaoyu123 xiaoyu</span>

<span class="token comment"># 注：修改家目录仅仅修改了配置，而原来的家目录文件没有迁移</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改用户描述信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2003::/home/xiaoyu123:/bin/bash
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod -c "这是一个甩锅" xiaoyu</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改用户默认解析器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># usermod -s /bin/sh xiaoyu</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
xiaoyu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>锁定与解锁</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -L xiaoyu</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -U xiaoyu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>修改登录名称</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -l dayu xiaoyu</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
dayu:x:2302:2003:这是一个甩锅:/home/xiaoyu123:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>追加</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -G root dayu</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,0<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -G oldboy dayu</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># usermod -a -G root dayu</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,0<span class="token punctuation">(</span>root<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="密码（passwd）"><a href="#密码（passwd）" class="headerlink" title="密码（passwd）"></a>密码（passwd）</h1><blockquote>
<p>修改或添加Linux普通用户的密码。直接影响的文件是&#x2F;etc&#x2F;shadow</p>
</blockquote>
<ul>
<li><p>增加或修改密码</p>
<p>当用户密码不存在的时候即为增加密码，当用户密码存在时即为修改密码。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># useradd password</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
password:x:2303:2303::/home/password:/bin/bash
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/shadow</span>
password:<span class="token operator">!</span><span class="token operator">!</span>:18701:0:99999:7:::
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># passwd password</span>
Changing password <span class="token keyword">for</span> user password.
New password: 
BAD PASSWORD: The password is a palindrome
Retype new password: 
passwd: all authentication tokens updated successfully.
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
password:x:2303:2303::/home/password:/bin/bash
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/shadow</span>
password:<span class="token variable">$6</span>$.EmM.4Bl<span class="token variable">$f</span>.LimfvMsxxFZq6yFklfyk08JKQORdQovlk2a2dtrpkP31lAMLQpezFqLheBYOTm4Sur9aAqZlC/6MN6wHFBM1:18701:0:99999:7:::
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>免交互修改密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># echo "123" | passwd --stdin dayu</span>
Changing password <span class="token keyword">for</span> user dayu.
passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><blockquote>
<p>就类似于班级，是某个同权限用户的集合。</p>
</blockquote>
<h2 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupadd group2</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
group2:x:2304:
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>指定gid</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupadd -g 2204 group3</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
group3:x:2204:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>创建系统组</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupadd -r group4</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
group4:x:996:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h2><ul>
<li><p>修改名称</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -8 /etc/group</span>
girl:x:2001:
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupmod -n boy girl</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -8 /etc/group</span>
boy:x:2001:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改gid</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupmod -g 2021 boy</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -8 /etc/group</span>
boy:x:2021:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h2><blockquote>
<p>用户组在系统中删除，如果一个组被用户占用则不能删除。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># groupdel group4</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -8 /etc/group</span>
dajige:x:1003:
abc:x:2000:
xiaoyu:x:2002:
group1:x:2003:root
password:x:2303:
group2:x:2304:
group3:x:2204:
boy:x:2021:
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># </span>

<span class="token comment"># 注：用户被删除，用户基本组也会被删除</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># useradd test-group-del</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
test-group-del:x:2304:2305::/home/test-group-del:/bin/bash
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
test-group-del:x:2305:
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># userdel -r test-group-del</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/passwd</span>
password:x:2303:2303::/home/password:/bin/bash
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># tail -1 /etc/group</span>
boy:x:2021:
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="组成员管理"><a href="#组成员管理" class="headerlink" title="组成员管理"></a>组成员管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一个组到用户</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># useradd gtest</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># vim /etc/group</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id gtest</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2304</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># gpasswd -a gtest group2</span>
Adding user gtest to group group2
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id gtest</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2304</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span>,2304<span class="token punctuation">(</span>group2<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>

<span class="token comment"># 添加多个组到用户</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># gpasswd -M gtest,root,dayu group</span>
gpasswd: group <span class="token string">'group'</span> does not exist <span class="token keyword">in</span> /etc/group
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># gpasswd -M gtest,root,dayu group3</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id root</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>,2000<span class="token punctuation">(</span>abc<span class="token punctuation">)</span>,2003<span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,0<span class="token punctuation">(</span>root<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment"># id gtest</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2304</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2305</span><span class="token punctuation">(</span>gtest<span class="token punctuation">)</span>,2304<span class="token punctuation">(</span>group2<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>

<span class="token comment"># 为一个组添加组长(组长有权限向组内添加用户，其他用户[除root外]没有权限添加用户到该组)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># gpasswd -A dayu group3</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/gshadow</span>
group3:<span class="token operator">!</span>:dayu:gtest,dayu,oldboy

<span class="token comment"># 组权限</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># id dayu</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">2302</span><span class="token punctuation">(</span>dayu<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2003</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span>,1000<span class="token punctuation">(</span>oldboy<span class="token punctuation">)</span>,2204<span class="token punctuation">(</span>group3<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># chown .group3 /tmp/12.txt </span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls -l /tmp/12.txt</span>
-rw-r--r-- <span class="token number">1</span> root group3 <span class="token number">4</span> Mar <span class="token number">15</span> <span class="token number">11</span>:35 /tmp/12.txt
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># chmod g+w /tmp/12.txt</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ls -l /tmp/12.txt</span>
-rw-rw-r-- <span class="token number">1</span> root group3 <span class="token number">4</span> Mar <span class="token number">15</span> <span class="token number">11</span>:35 /tmp/12.txt
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su - dayu</span>
Last login: Mon Mar <span class="token number">15</span> <span class="token number">11</span>:37:05 CST <span class="token number">2021</span> on pts/3
<span class="token punctuation">[</span>dayu@localhost ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"456"</span> <span class="token operator">></span> /tmp/12.txt 
<span class="token punctuation">[</span>dayu@localhost ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /tmp/12.txt
<span class="token number">456</span>
<span class="token punctuation">[</span>dayu@localhost ~<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--用户组管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day09-%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="linux中用户介绍"><a href="#linux中用户介绍" class="headerlink" title="linux中用户介绍"></a>linux中用户介绍</h2><p>什么是用户？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">用户其实就是相当于权限的化身，
处于安全考虑
所以，我们在进入系统之前都需要登录，根据用户给相应权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>Linux系统中用户角色</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uid <span class="token builtin class-name">:</span> Linux系统当中用户ID（相当于身份证号）
gid <span class="token builtin class-name">:</span> ANTA20163307

用户组其实是统一某一类用户权限

需求：
	大项目 ： 
		开发者：a b c d
		运维 ： e f
		测试：g
	共同的权限：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>超级用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">linux当中的老大（皇帝）: root
Windows当中的老大：administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="用户与组相关的文件"><a href="#用户与组相关的文件" class="headerlink" title="用户与组相关的文件"></a>用户与组相关的文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/passwd</span>
root:x:0:0:root:/root:/bin/bash
用户名称   是否存在密码   uid  gid  组名称/注释信息 家目录  默认解析器 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--文件ACL</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day11-sudo%E4%B8%8Esu/facl/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><blockquote>
<p>补充：</p>
<p>​	权限的归属</p>
<p>​		a : 属组、属主以及其他人的权限一起设置。</p>
<p>​		o : 其他人</p>
<p>​		g : 属组</p>
<p>​		u : 属主</p>
</blockquote>
<h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><blockquote>
<p>就是解决目录及文件的默认权限。</p>
</blockquote>
<ul>
<li>文件的最高权限是多少     777</li>
<li>文件夹的最高权限是多少  777</li>
</ul>
<h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><blockquote>
<p>ACL是为了解决某种特殊环境下的，用户权限需求。</p>
</blockquote>
<ul>
<li>setfacl ： 设置acl权限</li>
<li>getfacl ：查看ACL权限</li>
</ul>
<h3 id="acl权限归属"><a href="#acl权限归属" class="headerlink" title="acl权限归属"></a>acl权限归属</h3><ul>
<li>u : 指定用户</li>
<li>g : 指定组</li>
<li>o : 修改其他用户权限</li>
<li>m : 指定mask权限</li>
</ul>
<p>注：默认情况下，ACL权限跟普通权限保持一致。</p>
<h2 id="ACL-的流程"><a href="#ACL-的流程" class="headerlink" title="ACL 的流程"></a>ACL 的流程</h2><ul>
<li><p>1、创建文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> o+x /root
<span class="token function">chmod</span> o+x /root/xiaochen
<span class="token builtin class-name">cd</span> xiaochen

<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># touch abc.txt</span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># chmod 000 abc.txt </span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">0</span>
---------- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">16</span> <span class="token number">11</span>:39 abc.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>编写文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># echo 111 > abc.txt </span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># cat abc.txt </span>
<span class="token number">111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>设置ACL权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># useradd xiaozhang</span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># setfacl -m u:xiaozhang:r abc.txt </span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
user:xiaozhang:r--
group::---
mask::r--
other::---

<span class="token comment"># 注：</span>
setfacl -m u:用户名称:权限<span class="token punctuation">(</span>rwx<span class="token punctuation">)</span> 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查看文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su - xiaozhang</span>
<span class="token punctuation">[</span>xiaozhang@localhost ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /root/xiaochen/abc.txt
<span class="token number">111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>mask :  rw-</p>
<p>xxxx :   -w-</p>
<p>-w-</p>
<h2 id="ACL权限的删除"><a href="#ACL权限的删除" class="headerlink" title="ACL权限的删除"></a>ACL权限的删除</h2><ul>
<li><p>删除某个权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
user:xiaozhang:r--
group::---
group:xiaochen:r-x		<span class="token comment">#effective:r--</span>
mask::rw-
other::r--

<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># setfacl -x u:xiaozhang abc.txt</span>

<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
group::---
group:xiaochen:r-x
mask::r-x
other::r--


<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
group::---
group:xiaochen:r-x
mask::r-x
other::r--

<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># setfacl -x g:xiaochen abc.txt </span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
group::---
mask::---
other::r--
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>清空acl权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
user:xiaochen:rw-
user:xiaocao:rw-
group::---
group:xiaochen:rw-
group:xiaocao:rw-
mask::rw-
other::r--

<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># setfacl -b abc.txt </span>
<span class="token punctuation">[</span>root@localhost xiaochen<span class="token punctuation">]</span><span class="token comment"># getfacl abc.txt </span>
<span class="token comment"># file: abc.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::---
group::---
other::r--
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="ACL继承"><a href="#ACL继承" class="headerlink" title="ACL继承"></a>ACL继承</h2><blockquote>
<p>默认情况下，ACL是不会继承上层目录的权限的。只有目录设置可继承子集文件才可以继承ACL权限。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost linux12<span class="token punctuation">]</span><span class="token comment"># setfacl -m d:u:xiaochen:w ../linux12</span>
<span class="token punctuation">[</span>root@localhost linux12<span class="token punctuation">]</span><span class="token comment"># touch bcd.txt</span>
<span class="token punctuation">[</span>root@localhost linux12<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
total <span class="token number">0</span>
-rw-r--r--  <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">16</span> <span class="token number">15</span>:40 abc.txt
-rw-rw-r--+ <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">16</span> <span class="token number">15</span>:43 bcd.txt
<span class="token punctuation">[</span>root@localhost linux12<span class="token punctuation">]</span><span class="token comment"># getfacl bcd.txt </span>
<span class="token comment"># file: bcd.txt</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::rw-
user:xiaochen:-w-
group::r-x			<span class="token comment">#effective:r--</span>
mask::rw-
other::r--

<span class="token punctuation">[</span>root@localhost linux12<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--软件包管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day12-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%8C%85/</url>
    <content><![CDATA[<h1 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h1><ul>
<li><p>rpm包来源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、来源网络下载
<span class="token number">2</span>、来源本地：自己的镜像自带的rpm包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>




</li>
<li><p>rpm命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>

<span class="token function">rpm</span> -ivh xxx.rpm

<span class="token comment"># http://nginx.org/packages/centos/7/x86_64/RPMS/</span>

-v <span class="token builtin class-name">:</span> 显示安装过程
-i ：显示安装包的详细信息
-h <span class="token builtin class-name">:</span> 安装包哈希标记

<span class="token comment"># 下载Nginx rpm安装包的全名</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.18.0-1.el7.ngx.x86_64.rpm</span>
--2021-03-17 <span class="token number">12</span>:16:47--  http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.18.0-1.el7.ngx.x86_64.rpm
Resolving nginx.org <span class="token punctuation">(</span>nginx.org<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">52.58</span>.199.22, <span class="token number">3.125</span>.197.172, 2a05:d014:edb:5702::6, <span class="token punctuation">..</span>.
Connecting to nginx.org <span class="token punctuation">(</span>nginx.org<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">52.58</span>.199.22<span class="token operator">|</span>:80<span class="token punctuation">..</span>. connected.
HTTP request sent, awaiting response<span class="token punctuation">..</span>. <span class="token number">200</span> OK
Length: <span class="token number">790284</span> <span class="token punctuation">(</span>772K<span class="token punctuation">)</span> <span class="token punctuation">[</span>application/x-redhat-package-manager<span class="token punctuation">]</span>
Saving to: ‘nginx-1.18.0-1.el7.ngx.x86_64.rpm’

<span class="token number">100</span>%<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span> <span class="token number">790,284</span>      339KB/s   <span class="token keyword">in</span> <span class="token number">2</span>.3s   

<span class="token number">2021</span>-03-17 <span class="token number">12</span>:16:51 <span class="token punctuation">(</span><span class="token number">339</span> KB/s<span class="token punctuation">)</span> - ‘nginx-1.18.0-1.el7.ngx.x86_64.rpm’ saved <span class="token punctuation">[</span><span class="token number">790284</span>/790284<span class="token punctuation">]</span>

<span class="token comment"># 安装rpm安装包</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh nginx-1.18.0-1.el7.ngx.x86_64.rpm </span>
warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY
Preparing<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>
Updating / installing<span class="token punctuation">..</span>.
   <span class="token number">1</span>:nginx-1:1.18.0-1.el7.ngx         <span class="token comment">################################# [100%]</span>
----------------------------------------------------------------------

Thanks <span class="token keyword">for</span> using nginx<span class="token operator">!</span>

Please <span class="token function">find</span> the official documentation <span class="token keyword">for</span> nginx here:
* http://nginx.org/en/docs/

Please subscribe to nginx-announce mailing list to get
the <span class="token function">most</span> important news about nginx:
* http://nginx.org/en/support.html

Commercial subscriptions <span class="token keyword">for</span> nginx are available on:
* http://nginx.com/products/

----------------------------------------------------------------------

<span class="token comment"># 验证nginx是否安装成功</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nginx -v</span>
nginx version: nginx/1.18.0


<span class="token comment"># 卸载</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -e nginx (软件包名称)</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nginx -v</span>
-bash: /usr/sbin/nginx: No such <span class="token function">file</span> or directory
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># </span>


<span class="token comment"># 查看系统当中安装了哪些rpm软件包</span>
<span class="token function">rpm</span> -qa

<span class="token comment"># 查看系统当中是否安装了某个rpm软件包</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -q nginx（软件包名）</span>
nginx-1.18.0-1.el7.ngx.x86_64
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -q safsdgsfdgfd</span>
package safsdgsfdgfd is not installed


<span class="token comment"># 显示已经安装过的rpm包详细信息。</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -qi nginx</span>
Name        <span class="token builtin class-name">:</span> nginx
Epoch       <span class="token builtin class-name">:</span> <span class="token number">1</span>
Version     <span class="token builtin class-name">:</span> <span class="token number">1.18</span>.0
Release     <span class="token builtin class-name">:</span> <span class="token number">1</span>.el7.ngx
Architecture: x86_64
Install Date: Wed <span class="token number">17</span> Mar <span class="token number">2021</span> 04:18:55 PM CST
Group       <span class="token builtin class-name">:</span> System Environment/Daemons
Size        <span class="token builtin class-name">:</span> <span class="token number">2830028</span>
License     <span class="token builtin class-name">:</span> <span class="token number">2</span>-clause BSD-like license
Signature   <span class="token builtin class-name">:</span> RSA/SHA1, Tue <span class="token number">21</span> Apr <span class="token number">2020</span> <span class="token number">11</span>:19:18 PM CST, Key ID abf5bd827bd9bf62
Source RPM  <span class="token builtin class-name">:</span> nginx-1.18.0-1.el7.ngx.src.rpm
Build Date  <span class="token builtin class-name">:</span> Tue <span class="token number">21</span> Apr <span class="token number">2020</span> <span class="token number">11</span>:07:33 PM CST
Build Host  <span class="token builtin class-name">:</span> ip-10-1-17-101.eu-central-1.compute.internal
Relocations <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>not relocatable<span class="token punctuation">)</span>
Vendor      <span class="token builtin class-name">:</span> Nginx, Inc.
URL         <span class="token builtin class-name">:</span> http://nginx.org/
Summary     <span class="token builtin class-name">:</span> High performance web server
Description <span class="token builtin class-name">:</span>
nginx <span class="token punctuation">[</span>engine x<span class="token punctuation">]</span> is an HTTP and reverse proxy server, as well as
a mail proxy server.

<span class="token comment"># 查看安装包的内容</span>
<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># rpm -ql nginx</span>
/etc/logrotate.d/nginx
/etc/nginx
/etc/nginx/conf.d
/etc/nginx/conf.d/default.conf
/etc/nginx/fastcgi_params
/etc/nginx/koi-utf
/etc/nginx/koi-win
/etc/nginx/mime.types
/etc/nginx/modules
/etc/nginx/nginx.conf
/etc/nginx/scgi_params
/etc/nginx/uwsgi_params
/etc/nginx/win-utf
/etc/sysconfig/nginx
/etc/sysconfig/nginx-debug
/usr/lib/systemd/system/nginx-debug.service
/usr/lib/systemd/system/nginx.service
/usr/lib64/nginx
/usr/lib64/nginx/modules
/usr/libexec/initscripts/legacy-actions/nginx
/usr/libexec/initscripts/legacy-actions/nginx/check-reload
/usr/libexec/initscripts/legacy-actions/nginx/upgrade
/usr/sbin/nginx
/usr/sbin/nginx-debug
/usr/share/doc/nginx-1.18.0
/usr/share/doc/nginx-1.18.0/COPYRIGHT
/usr/share/man/man8/nginx.8.gz
/usr/share/nginx
/usr/share/nginx/html
/usr/share/nginx/html/50x.html
/usr/share/nginx/html/index.html
/var/cache/nginx
/var/log/nginx

<span class="token comment"># 查看配置信息</span>
<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># rpm -qc nginx</span>
/etc/logrotate.d/nginx
/etc/nginx/conf.d/default.conf
/etc/nginx/fastcgi_params
/etc/nginx/koi-utf
/etc/nginx/koi-win
/etc/nginx/mime.types
/etc/nginx/nginx.conf
/etc/nginx/scgi_params
/etc/nginx/uwsgi_params
/etc/nginx/win-utf
/etc/sysconfig/nginx
/etc/sysconfig/nginx-debug

<span class="token comment"># 查看文件帮助信息</span>
<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># rpm -qd zlib</span>
/usr/share/doc/zlib-1.2.7/ChangeLog
/usr/share/doc/zlib-1.2.7/FAQ
/usr/share/doc/zlib-1.2.7/README

<span class="token comment"># </span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -qf /usr/sbin/nginx</span>
nginx-1.18.0-1.el7.ngx.x86_64

<span class="token comment"># 用 -p 可以查看未安装软件包的详细信息</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -qip nginx-1.18.0-1.el7.ngx.x86_64.rpm </span>
warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY
Name        <span class="token builtin class-name">:</span> nginx
Epoch       <span class="token builtin class-name">:</span> <span class="token number">1</span>
Version     <span class="token builtin class-name">:</span> <span class="token number">1.18</span>.0
Release     <span class="token builtin class-name">:</span> <span class="token number">1</span>.el7.ngx
Architecture: x86_64
Install Date: <span class="token punctuation">(</span>not installed<span class="token punctuation">)</span>
Group       <span class="token builtin class-name">:</span> System Environment/Daemons
Size        <span class="token builtin class-name">:</span> <span class="token number">2830028</span>
License     <span class="token builtin class-name">:</span> <span class="token number">2</span>-clause BSD-like license
Signature   <span class="token builtin class-name">:</span> RSA/SHA1, Tue <span class="token number">21</span> Apr <span class="token number">2020</span> <span class="token number">11</span>:19:18 PM CST, Key ID abf5bd827bd9bf62
Source RPM  <span class="token builtin class-name">:</span> nginx-1.18.0-1.el7.ngx.src.rpm
Build Date  <span class="token builtin class-name">:</span> Tue <span class="token number">21</span> Apr <span class="token number">2020</span> <span class="token number">11</span>:07:33 PM CST
Build Host  <span class="token builtin class-name">:</span> ip-10-1-17-101.eu-central-1.compute.internal
Relocations <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>not relocatable<span class="token punctuation">)</span>
Vendor      <span class="token builtin class-name">:</span> Nginx, Inc.
URL         <span class="token builtin class-name">:</span> http://nginx.org/
Summary     <span class="token builtin class-name">:</span> High performance web server
Description <span class="token builtin class-name">:</span>
nginx <span class="token punctuation">[</span>engine x<span class="token punctuation">]</span> is an HTTP and reverse proxy server, as well as
a mail proxy server.

<span class="token comment"># 升级软件包</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -Uvh nginx-1.18.0-1.el7.ngx.x86_64.rpm </span>
warning: nginx-1.18.0-1.el7.ngx.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY
Preparing<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>
Updating / installing<span class="token punctuation">..</span>.
   <span class="token number">1</span>:nginx-1:1.18.0-1.el7.ngx         <span class="token comment">################################# [ 50%]</span>
Cleaning up / removing<span class="token punctuation">..</span>.
   <span class="token number">2</span>:nginx-1:1.14.0-1.el7_4.ngx       <span class="token comment">################################# [100%]</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nginx -v</span>
nginx version: nginx/1.18.0


<span class="token comment"># 强制删除软件包--nodeps</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># rpm -e zlib --nodeps</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><blockquote>
<p>yum是CentOS的软件包管理工具，自动为我们解决软件依赖问题。yum包管理工具必须使用yum源指定软件下载地址去下载需要安装的软件包。配置的路径是：&#x2F;etc&#x2F;yum.repos.d</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清空本机所有的yum源</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/yum.repos.d/*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<ul>
<li><p>yum源命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前系统的yum源列表</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum repolist </span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
repo <span class="token function">id</span>                   repo name                                           status
base                      <span class="token string">"This is local repo, and 非常屌"</span>                    <span class="token number">10,072</span>
repolist: <span class="token number">10,072</span>

<span class="token comment"># yum清空缓存</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
Loaded plugins: fastestmirror
Cleaning repos: base
Cleaning up list of fastest mirrors
Other repos take up <span class="token number">76</span> M of disk space <span class="token punctuation">(</span>use --verbose <span class="token keyword">for</span> details<span class="token punctuation">)</span>

<span class="token comment"># 建立yum缓存</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>yum源的执行原理</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、需要在/etc/yum.repos.d目录下配置yum源地址
<span class="token number">2</span>、清空缓存建立新的缓存
<span class="token number">3</span>、安装软件（自动解决依赖关系）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>yum常用的基础命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装软件包的命令</span>
yum <span class="token function">install</span> 软件包名称
	-y <span class="token builtin class-name">:</span> 免交互安装

<span class="token comment"># 卸载软件（直接将软件的依赖包一起删除）</span>
yum remove 软件包名称
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum remove httpd</span>
	-y <span class="token builtin class-name">:</span> 免交互移除

<span class="token comment"># 查看当前系统需要更新软件</span>
yum check-update

<span class="token comment"># 更新所有的需要更新的软件</span>
yum update 
	-y ： 免交互

<span class="token comment"># 更新某一个软件</span>
yum update <span class="token punctuation">(</span>软件包名称<span class="token punctuation">)</span>

<span class="token comment"># 重装软件</span>
yum reinstall <span class="token punctuation">(</span>软件包名称<span class="token punctuation">)</span>

<span class="token comment"># 搜索软件包</span>
<span class="token punctuation">[</span>root@www httpd<span class="token punctuation">]</span><span class="token comment"># yum search （软件包名称）</span>
-------------------------------------------------------

<span class="token comment"># 查看yum执行历史</span>
yum <span class="token function">history</span>
<span class="token punctuation">[</span>root@www httpd<span class="token punctuation">]</span><span class="token comment"># yum history info (历史ID号)</span>
<span class="token punctuation">[</span>root@www httpd<span class="token punctuation">]</span><span class="token comment"># yum history undo (历史ID号)</span>
<span class="token comment"># 查看当前系统当中可更新的软件包</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum check-update </span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile

postfix.x86_64                                        <span class="token number">2</span>:2.10.1-9.0.1.el7.centos.plus                                      centosplus
python-perf.x86_64                                    <span class="token number">3.10</span>.0-1160.15.2.el7.centos.plus                                    centosplus
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># </span>

<span class="token comment"># 查看系统中有哪些仓库地址</span>
yum repolist    <span class="token comment"># 正在启用的yum仓库</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum repolist</span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
repo <span class="token function">id</span>                   repo name                                           status
base/7/x86_64             CentOS-7 - Base - repo.huaweicloud.com              <span class="token number">10,072</span>
extras/7/x86_64           CentOS-7 - Extras - repo.huaweicloud.com               <span class="token number">453</span>
updates/7/x86_64          CentOS-7 - Updates - repo.huaweicloud.com            <span class="token number">1,729</span>

yum repolist all <span class="token comment"># 查看系统中所有的yum仓库</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum repolist all</span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
repo <span class="token function">id</span>                                        repo name                                                             status
base/7/x86_64                                  CentOS-7 - Base - repo.huaweicloud.com                                enabled: <span class="token number">10,072</span>
centosplus/7/x86_64                            CentOS-7 - Plus - repo.huaweicloud.com                                disabled
extras/7/x86_64                                CentOS-7 - Extras - repo.huaweicloud.com                              enabled:    <span class="token number">453</span>
updates/7/x86_64                               CentOS-7 - Updates - repo.huaweicloud.com                             enabled:  <span class="token number">1,72</span>


<span class="token comment"># 启用repo仓库</span>
yum <span class="token function">install</span> yum-utils -y

启用一个yum仓库：yum-config-manager --enable <span class="token punctuation">(</span>仓库名称<span class="token punctuation">)</span>
关闭一个yum仓库：yum-config-manager --disable <span class="token punctuation">(</span>仓库名称<span class="token punctuation">)</span>


<span class="token comment"># 查看一个仓库中的软件包列表</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum list</span>

<span class="token comment"># 查看软件包组</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum grouplist</span>

<span class="token comment"># 安装软件包组</span>
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum groupinstall "Development Tools"</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>本地yum源配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、备份/etc/yum.repos.d/下的所文件
	<span class="token function">rm</span> -rf /etc/yum.repos.d/*

<span class="token number">2</span>、编写本地yum源
<span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat test.repo </span>
<span class="token punctuation">[</span>base<span class="token punctuation">]</span> <span class="token comment"># yum源名称</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is repo infomation"</span> <span class="token comment">#yum源的简介</span>
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt    <span class="token comment"># 指定yum源地址</span>
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>				<span class="token comment"># 是否启用yum源</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>				<span class="token comment"># 是否检查gpg秘钥</span>

<span class="token number">3</span>、更新缓存
yum makecache

<span class="token number">4</span>、安装软件
yum <span class="token function">install</span> dos2unix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>共享yum源配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、安装ftp
yum <span class="token function">install</span> vsftpd -y

<span class="token number">2</span>、启动vsftpd
systemctl <span class="token builtin class-name">enable</span> --now vsftpd <span class="token comment"># 设置开机自启动并且立即启动</span>

<span class="token number">3</span>、创建yum源共享文件夹
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># mkdir /var/ftp/centos</span>

<span class="token number">4</span>、将映像中的软件复制到/var/ftp/centos
<span class="token function">cp</span> -rp /opt/* /var/ftp/centos

<span class="token number">5</span>、编辑本地yum源，接入ftp
<span class="token punctuation">[</span>root@localhost yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat local.repo </span>
<span class="token punctuation">[</span>base<span class="token punctuation">]</span>
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://192.168.15.100/centos
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is ftp repo"</span>
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token number">6</span>、测试安装
yum <span class="token function">install</span> dos2unix -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>yum的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum仓库的机器上执行</span>
<span class="token number">1</span>、修改/etc/yum.conf
    <span class="token assign-left variable">cachedir</span><span class="token operator">=</span>/var/ftp/centos/Packages   <span class="token comment"># 指定yum缓存目录</span>
    <span class="token assign-left variable">keepcache</span><span class="token operator">=</span><span class="token number">1</span>							<span class="token comment"># 下载的缓存软件不立即删除， 0为立即删除</span>

<span class="token number">2</span>、安装ftp
yum <span class="token function">install</span> vsftpd -y

<span class="token number">3</span>、启动vsftpd
systemctl <span class="token builtin class-name">enable</span> --now vsftpd <span class="token comment"># 设置开机自启动并且立即启动</span>

<span class="token number">4</span>、创建yum源共享文件夹
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># mkdir /var/ftp/centos</span>

<span class="token number">5</span>、更新yum仓库
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>

<span class="token number">6</span>、建立一个快捷方式
<span class="token builtin class-name">cd</span> /var/ftp/centos/Packages/base
<span class="token function">ln</span> -s packages Packages

<span class="token number">7</span>、安装mariadb
yum <span class="token function">install</span> mariadb -y

<span class="token number">8</span>、建立/var/ftp/centos/Packages/base/repodata
<span class="token function">mkdir</span> /var/ftp/centos/Packages/base/repodata

<span class="token number">9</span>、把/var/ftp/centos/Packages/base下面的自动生成的压缩文件复制到/var/ftp/centos/Packages/base/repodata用做认证。

<span class="token comment"># 使用yum仓库的机器上执行</span>
<span class="token number">1</span>、建立yum配置文件
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/yum.repos.d/local.repo </span>
<span class="token punctuation">[</span>base<span class="token punctuation">]</span>
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://192.168.15.100/centos/Packages/base
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is ftp repo"</span>
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token number">2</span>、更新yum仓库
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
<span class="token punctuation">[</span>root@www ftp<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>

<span class="token number">3</span>、测试安装mariadb
yum <span class="token function">install</span> mariadb -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--sudo和su</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day11-sudo%E4%B8%8Esu/sudo%20and%20su/</url>
    <content><![CDATA[<h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><blockquote>
<p>用于普通用提升权限的。</p>
</blockquote>
<ul>
<li><p>相关的文件：<code>/etc/sudoers</code></p>
</li>
<li><p>检查<code>/etc/sudoers</code>是否修改正确：visudo -c</p>
</li>
<li><p>sudoers文件格式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom       <span class="token assign-left variable">ALL</span><span class="token operator">=</span>           <span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>          ALL
用户名称   所有机器可登陆    所有IP或主机名   所有的指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>指令编写格式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 必须写全路径：which查看命令全路径</span>

<span class="token comment">## 只支持vim命令提权</span>
xianchen <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>  /usr/bin/vim

<span class="token comment">## 支持所有的命令提权</span>
tom <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>  ALL

<span class="token comment">## 不支持某个命令提权</span>
tom <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL, <span class="token operator">!</span>/usr/bin/vim

<span class="token comment">## 不支持某个命令的部分功能</span>
xiaochen <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>   ALL, <span class="token operator">!</span>/usr/bin/vim /root/123.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><ul>
<li><p>su - xxx  和 su xxx之间区别</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、su - xxx ：相当于切换一个窗口，su xxx 仅仅切换了用户

<span class="token number">2</span>、su - xxx ： 切换用户执行的系统文件要多于 <span class="token function">su</span> xxx

<span class="token number">3</span>、su - xxx 是登录
   <span class="token function">su</span>  xxx  切换用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--yum仓库</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day13-yum%E4%BB%93%E5%BA%93/yum%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="yum仓库"><a href="#yum仓库" class="headerlink" title="yum仓库"></a>yum仓库</h1><p>1、克隆两台主机</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum仓库主机
	外网地址：192.168.15.30
	内网地址：172.16.1.30

yum测试主机
	外网地址：192.168.15.31
	内网地址：172.16.1.31

修改的命令：
	<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eth0
	<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eth1
	
	重启网卡：systemctl restart network
	
	修改主机名：
		yum仓库主机：hostnamectl set-hostname warehouse
		yum测试主机：hostnamectl set-hostname yum-test
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、配置yum仓库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、需要有一个软件包目录，存放软件包的
<span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># mkdir /backup</span>
	
	<span class="token number">1.1</span>、缓存yum安装下载的软件包
	<span class="token punctuation">[</span>root@warehouse <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment"># vim /etc/yum.conf</span>
	<span class="token punctuation">[</span>main<span class="token punctuation">]</span>
    <span class="token assign-left variable">cachedir</span><span class="token operator">=</span>/var/cache/yum/<span class="token variable">$basearch</span>/<span class="token variable">$releasever</span>
    <span class="token assign-left variable">keepcache</span><span class="token operator">=</span><span class="token number">1</span>
    <span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># yum install mariadb -y</span>
	
	<span class="token number">1.2</span>、将缓存的软件包复制到yum仓库目录
	<span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># cd /var/cache/yum/x86_64/7/base/packages/</span>
	<span class="token punctuation">[</span>root@warehouse packages<span class="token punctuation">]</span><span class="token comment"># cp -rp ./* /backup/</span>
    <span class="token punctuation">[</span>root@warehouse packages<span class="token punctuation">]</span><span class="token comment"># cd /backup/</span>
    <span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># ll</span>
    total <span class="token number">8964</span>
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">9175948</span> Oct <span class="token number">15</span> 02:55 mariadb-5.5.68-1.el7.x86_64.rpm
	
<span class="token number">2</span>、建立软件包依赖关系
	<span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># yum install createrepo -y</span>
	<span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># createrepo /backup/</span>
    Spawning worker <span class="token number">0</span> with <span class="token number">1</span> pkgs
    Spawning worker <span class="token number">1</span> with <span class="token number">0</span> pkgs
    Workers Finished
    Saving Primary metadata
    Saving <span class="token function">file</span> lists metadata
    Saving other metadata
    Generating sqlite DBs
    Sqlite DBs complete
    <span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># ll</span>
    total <span class="token number">8968</span>
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">9175948</span> Oct <span class="token number">15</span> 02:55 mariadb-5.5.68-1.el7.x86_64.rpm
    drwxr-xr-x <span class="token number">2</span> root root    <span class="token number">4096</span> Mar <span class="token number">18</span> 08:54 repodata
    <span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># ll repodata/</span>
    total <span class="token number">28</span>
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">1970</span> Mar <span class="token number">18</span> 08:54 5d54624b2aa7a1fe974ff5553a9a78289683189c6a7b60c8c1421ecf011d270f-other.sqlite.bz2
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">3449</span> Mar <span class="token number">18</span> 08:54 5e68ee34f7e8f1a11a039f55c990bcc044f16bceb6af7f4486b55d518ad91346-primary.sqlite.bz2
    -rw-r--r-- <span class="token number">1</span> root root  <span class="token number">539</span> Mar <span class="token number">18</span> 08:54 6e94b0fa1d98955542fb8238348ea171be7a130ba97573eb3ac756e1aadcec50-filelists.xml.gz
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">1291</span> Mar <span class="token number">18</span> 08:54 a9afb0b2457f41f5c2d64744a07d5d12599e6c2588c870ae73568cf345a0abca-other.xml.gz
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">1333</span> Mar <span class="token number">18</span> 08:54 cf41627875b17ef4bea5f0ea566ac63a5c83adc606d3ca730a74944ceb969028-primary.xml.gz
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">1158</span> Mar <span class="token number">18</span> 08:54 f34cbfd9e5608e8402041e98100f853e913f3df04d6946874c73ba31a78969ba-filelists.sqlite.bz2
    -rw-r--r-- <span class="token number">1</span> root root <span class="token number">2969</span> Mar <span class="token number">18</span> 08:54 repomd.xml
    <span class="token punctuation">[</span>root@warehouse backup<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、测试连接（本地版本）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、备份系统所有的yum源
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mkdir backup1</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mv *.repo backup1</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># vim local.repo</span>
<span class="token punctuation">[</span>local<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is xxx"</span>
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///backup
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token comment"># 清理yum缓存</span>
<span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
<span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /var/cache/yum/x86_64/7/*</span>

<span class="token comment"># 生成新的yum缓存</span>
<span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>

<span class="token comment"># 测试连接</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rpm -e mariadb</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rpm -ql mariadb</span>
package mariadb is not installed
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum install mariadb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>4、测试连接（远程版本）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#########################  yum仓库机器上执行  ###################################</span>
<span class="token number">1</span>、备份系统所有的yum源
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mkdir local</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mv *.repo local</span>

<span class="token number">2</span>、安装远程访问软件
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mv backup1/*  .</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum install vsftpd -y</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># systemctl enable --now vsftpd </span>
Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.

<span class="token number">3</span>、配置系统yum仓库
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cd /var/ftp</span>
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># mkdir yum_warehouse</span>

<span class="token number">4</span>、将软件包复制到yum仓库目录
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># cp -rp /backup/* /var/ftp/yum_warehouse/</span>
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># ll yum_warehouse/</span>
total <span class="token number">8968</span>
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">9175948</span> Oct <span class="token number">15</span> 02:55 mariadb-5.5.68-1.el7.x86_64.rpm
drwxr-xr-x <span class="token number">2</span> root root    <span class="token number">4096</span> Mar <span class="token number">18</span> 08:54 repodata

<span class="token number">5</span>、建立yum软件包依赖关系
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># createrepo /var/ftp/yum_warehouse/</span>


<span class="token comment">#########################  yum测试机器上执行  ###################################</span>
<span class="token number">1</span>、本机测试网络连接
    <span class="token number">1</span>、备份系统所有的yum源
    <span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span>
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mv *.repo backup1</span>
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># vim local.repo</span>
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat local.repo </span>
    <span class="token punctuation">[</span>local-ftp<span class="token punctuation">]</span>
    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is ftp server"</span>
    <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.16.1.30/yum_warehouse
    <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>

    <span class="token comment"># 清理yum缓存</span>
    <span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
    <span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /var/cache/yum/x86_64/7/*</span>

    <span class="token comment"># 生成新的yum缓存</span>
    <span class="token punctuation">[</span>root@warehouse ~<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>

    <span class="token comment"># 测试连接</span>
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rpm -e mariadb</span>
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rpm -ql mariadb</span>
    package mariadb is not installed
    <span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum install mariadb</span>

<span class="token number">2</span>、yum测试机器执行
	<span class="token number">1</span>、备份yum仓库内容
	<span class="token punctuation">[</span>root@yum-test ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/yum.repos.d/</span>
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mkdir backup1</span>
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># mv *.repo backup1</span>
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># ll</span>
    total <span class="token number">0</span>
    drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">187</span> Mar  <span class="token number">4</span> 09:55 backup
    drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">220</span> Mar <span class="token number">18</span> 09:20 backup1
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># </span>
    
    <span class="token number">2</span>、编写本地yum源配置文件
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># vim local.repo</span>
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat local.repo </span>
    <span class="token punctuation">[</span>loacl-ftp-30<span class="token punctuation">]</span>
    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is 30 ftp server"</span>
    <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.16.1.30/yum_warehouse
    <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>
    
    <span class="token number">3</span>、清理yum缓存
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rm -rf /var/cache/yum/x86_64/7/*</span>
    
    <span class="token number">4</span>、生成yum缓存
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>
    
    <span class="token number">5</span>、测试安装
    <span class="token punctuation">[</span>root@yum-test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum install mariadb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>4、同步远程yum仓库内容到本机</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、安装华为云镜像仓库
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/yum.repos.d/*</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span>

<span class="token number">2</span>、生成yum缓存
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum clean all</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># rm -rf /var/cache/yum/x86_64/7/*</span>
<span class="token punctuation">[</span>root@warehouse yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum makecache</span>

<span class="token number">3</span>、同步华为云镜像站软件包到本地yum仓库
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># yum install yum-utils -y</span>
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># reposync -r (仓库名称：yum repolist)</span>

<span class="token number">4</span>、建立依赖关系
<span class="token punctuation">[</span>root@warehouse ftp<span class="token punctuation">]</span><span class="token comment"># createrepo base</span>

<span class="token number">5</span>、测试
    <span class="token punctuation">[</span>loacl-ftp-30<span class="token punctuation">]</span>
    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"This is 30 ftp server"</span>
    <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.16.1.30/base
    <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/.%5Cassets%5Cimage-20210318112338781.png" alt="image-20210318112338781"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--linux信号</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day17-Linux%E4%BF%A1%E5%8F%B7/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>1、设置进程的nice值</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置进程的优先级</span>
<span class="token function">nice</span> -n -11 <span class="token function">bash</span> test.sh

-n ： 设置优先级
	普通用户：（0~19）
	超级用户：（-20~19）
	
<span class="token comment"># 给指定进程设置优先级</span>
<span class="token function">renice</span> <span class="token punctuation">[</span>设置优先级<span class="token punctuation">]</span> pid
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、Linux系统信号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">中断信号
	ctrl + c
	ctrl + z

	INT<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> 
		<span class="token function">kill</span> -<span class="token punctuation">[</span>信号名称<span class="token operator">|</span>信号ID<span class="token punctuation">]</span>　pid
		
		<span class="token function">kill</span> -SIGINT  PID
		<span class="token function">kill</span> -INT     PID
		<span class="token function">kill</span> -2       PID 

退出信号:
	ctrl + d

暂停信号：将进程暂停
	SIGTSTP（20）
		<span class="token function">kill</span> -20 PID 
		<span class="token function">kill</span> -SIGTSTP PID 
		<span class="token function">kill</span> -TSTP PID

杀死进程信号
	SIGKILL
		<span class="token function">kill</span> -9 PID 
		<span class="token function">kill</span> -SIGKILL PID
		<span class="token function">kill</span> -KILL PID
注：不能够被捕捉

终止信号
	SIGTREM
		<span class="token function">kill</span> -15 PID 
		<span class="token function">kill</span> -SIGTERM PID
		<span class="token function">kill</span> -<span class="token environment constant">TERM</span> PID

注：优雅终止进程

暂停和恢复信号
	SIGCONT <span class="token builtin class-name">:</span> 恢复
	SIGSTOP ：暂停

重载信号
	SIGHUP（1）


<span class="token number">1</span>、nohup <span class="token punctuation">[</span>执行的命令<span class="token punctuation">]</span> <span class="token operator">&amp;</span>
后台启动，会在当前目录生成一个nohub.out文件，用于执行的命令的输出。
<span class="token number">2</span>、setsid <span class="token builtin class-name">:</span> 实际上开了一个孤儿进程
<span class="token number">3</span>、（执行的命令<span class="token operator">&amp;</span>）
<span class="token number">4</span>、screen  开启一个子窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--进程管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day16-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序：安装包</p>
<p>进程：正在运行的实例</p>
<p>CPU：计算</p>
<p>内存：存储CPU计算使用的临时数据</p>
<p>存储：</p>
<p>进程和线程</p>
<p>僵尸进程和孤儿进程</p>
<p>僵尸进程：进程生命周期结束了，但是PID未被回收</p>
<p>孤儿进程：父进程生命周期结束了，但是子进程未结束，子进程被系统进程接收</p>
<p>1、查看进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令：ps, 默认查看当前进程</span>

<span class="token comment"># 参数</span>
-a <span class="token builtin class-name">:</span> 查询所有进程
-x <span class="token builtin class-name">:</span> 查看后台所有的进程
-u <span class="token builtin class-name">:</span> 查看进程的用户

<span class="token environment constant">USER</span> ： 开启当前进程的用户
PID  ： 当前进程的ID号
%CPU ： CPU的使用率
%MEM ： 内存使用率
VSZ  ： 进程启动时默认向计算机申请的内存
RSS  ： 进程运行时实际使用的内存
TTY  ： 进程运行的终端
	？： 后台运行（没有终端）
	tty：使用系统终端
	pts：使用虚拟终端
STAT ：进程运行状态
	R ： 正在运行中的进程
	+ ： 在前台运行
	S ： 睡眠中状态
	D ： 不可中断睡眠
	T ： 停止状态
	Z <span class="token builtin class-name">:</span>  僵尸状态
	X ： 死掉的进程
	<span class="token operator">&lt;</span> <span class="token builtin class-name">:</span> 优先级较高的进程
	N ：优先级较低的进程
	s <span class="token builtin class-name">:</span> 包含子进程       yum <span class="token function">install</span> psmisc -y 
	l <span class="token builtin class-name">:</span> 已线程的方式运行
	<span class="token operator">|</span> ： 代表管道
START ： 进程的启动时间
TIME  ： 占用CPU的时间
COMMAND ： 进程执行的命令


-e <span class="token builtin class-name">:</span> 显示所有的进程
-f <span class="token builtin class-name">:</span> 格式化输出同时显示<span class="token environment constant">PPID</span>

<span class="token environment constant">PPID</span> ： 父进程ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、top</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 根据一定频率的去监控系统</span>

up前是系统时间
up后是开启的时间

load average: <span class="token number">0.01</span>, <span class="token number">0.42</span>, <span class="token number">0.73</span>
<span class="token number">0.01</span>  ： 一分钟平均负载
<span class="token number">0.42</span>  ： 五分钟平均负载
<span class="token number">0.73</span>  ： 十五分钟平均负载

平均负载：


<span class="token comment"># CPU加压工具</span>
stress --cpu <span class="token punctuation">[</span>需要加压的系统核心数<span class="token punctuation">]</span> --timeout <span class="token punctuation">[</span>加压的时间<span class="token punctuation">]</span>

<span class="token comment"># CPU 性能加压工具</span>
<span class="token comment">## 添加epel源（epel源主要用来安装红帽系列操作系统附加软件）</span>
yum <span class="token function">install</span> stress -y

<span class="token comment"># CPU 性能分析工具</span>
yum <span class="token function">install</span> sysstat -y

mpstat -P ALL <span class="token number">3</span>   

<span class="token comment"># 进程性能分析⼯具</span>
pidstat -u <span class="token number">1</span> <span class="token number">5</span>  



Tasks
Tasks: <span class="token number">125</span> total,   <span class="token number">1</span> running, <span class="token number">124</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie

total <span class="token builtin class-name">:</span> 当前系统一共运行的是125个进程
running <span class="token builtin class-name">:</span> 正在运行的是1个
sleeping <span class="token builtin class-name">:</span> <span class="token number">124</span>个处于睡眠状态
stopped <span class="token builtin class-name">:</span> 停止运行的进程数
zombie  ：僵尸进程数


%Cpu0  <span class="token builtin class-name">:</span>  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni,100.0 id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st

us ：在单位时间进程使用CPU所占用的时间百分比
sy <span class="token builtin class-name">:</span> 在单位时间内系统进程占用CPU时间百分比
ni <span class="token builtin class-name">:</span> 在单位时间内优先使用CPU所占时间百分比
<span class="token function">id</span> ：在单位时间内CPU空闲所占时间百分比
wa <span class="token builtin class-name">:</span> 在单位时间内CPU阻塞态所占CPU时间的百分比
hi <span class="token builtin class-name">:</span> 硬件中断
si <span class="token builtin class-name">:</span> 软件中断
st <span class="token builtin class-name">:</span> 其他占用CPU时间百分比

KiB Mem <span class="token builtin class-name">:</span>  <span class="token number">2027892</span> total,  <span class="token number">1234180</span> free,   <span class="token number">176352</span> used,   <span class="token number">617360</span> buff/cache

total ：系统总内存
<span class="token function">free</span>  ：系统空闲内存
used  <span class="token builtin class-name">:</span> 系统使用内存
buff/cache ： 缓存使用内存
avail Mem ：

  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND  
  
PID ： 进程编号
<span class="token environment constant">USER</span> ： 启动进程的用户
PR <span class="token builtin class-name">:</span> 优先级
NI ：nice值
VIRT ： 虚拟内存
RES  ： 使用内存
SHR  ： 共享内存
%CPU ： cpu使用率
%MEM ：内存使用率
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、top快捷键</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">按1 <span class="token builtin class-name">:</span> 展示所有的CPU的详情
按s <span class="token builtin class-name">:</span> 设置top监控频率（默认3秒）
按m <span class="token builtin class-name">:</span> 按照内存排序 
按z <span class="token builtin class-name">:</span> 添加颜色
按p <span class="token builtin class-name">:</span> 按照CPU排序
按l <span class="token builtin class-name">:</span> 展示CPU总负载（默认显示）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、top的参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-d ： 设置top的刷新频率
-p <span class="token builtin class-name">:</span>  设置查看的进程PID
	<span class="token function">top</span> -d <span class="token number">1</span> -p <span class="token variable"><span class="token variable">`</span>pgrep nginx <span class="token operator">|</span> <span class="token function">head</span> -1<span class="token variable">`</span></span>

-u <span class="token builtin class-name">:</span>  查询指定用户的经常的进程
	<span class="token function">top</span> -u oldboy

-n <span class="token builtin class-name">:</span> 表示查询n次
	 <span class="token function">top</span> -d <span class="token number">0.1</span> -u oldboy -n <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>epel<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - <span class="token variable">$basearch</span>
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="token variable">$basearch</span>
<span class="token comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span>
<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token punctuation">[</span>epel-debuginfo<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - <span class="token variable">$basearch</span> - Debug
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/epel/7/<span class="token variable">$basearch</span>/debug
<span class="token comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span>
<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token punctuation">[</span>epel-source<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - <span class="token variable">$basearch</span> - Source
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS
<span class="token comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span>
<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--磁盘分区</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day19-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/01_%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、磁盘分区方案"><a href="#一、磁盘分区方案" class="headerlink" title="一、磁盘分区方案"></a>一、磁盘分区方案</h2><h3 id="1-1-MBR与GPT介绍"><a href="#1-1-MBR与GPT介绍" class="headerlink" title="1.1 MBR与GPT介绍"></a>1.1 MBR与GPT介绍</h3><p>Linux中磁盘分区有两种方案</p>
<ul>
<li><strong>MBR</strong>（主引导记录）</li>
<li><strong>GPT</strong>（GUID分区表）</li>
</ul>
<p>**<font color='blue'>MBR分区方案</font>**的特点（支持的磁盘容量&lt;&#x3D;2T）：</p>
<ol>
<li>最多支持四个主分区 </li>
<li>在Linux上使用扩展分区和逻辑分区最多可以创建15个分区， </li>
<li>由于分区中的数据以32位存储，使用MBR分区是最大支持2T空间。 </li>
<li>用fdisk管理工具来创建MBR分区</li>
</ol>
<p>**<font color='red'>GPT分区方案</font>**的特点（支持的磁盘容量&gt;2T）：</p>
<ol>
<li>是UEFI标准的一部分，主板必须要支持UEFI标准 </li>
<li>GPT分区列表支持最大128PB(1PB&#x3D;1024TB) </li>
<li>可以定义128个分区 </li>
<li>没有主分区，扩展分区和逻辑分区的概念，所有分区都能格式化 </li>
<li>gdisk和parted管理工具可以创建GPT分区</li>
</ol>
<h3 id="1-2-MBR与GTP的区别"><a href="#1-2-MBR与GTP的区别" class="headerlink" title="1.2 MBR与GTP的区别"></a>1.2 MBR与GTP的区别</h3><table>
<thead>
<tr>
<th>对比项</th>
<th>MBR</th>
<th>GPT</th>
</tr>
</thead>
<tbody><tr>
<td>新旧度</td>
<td>旧</td>
<td>新</td>
</tr>
<tr>
<td>支持的硬盘容量大小</td>
<td>最大2TB</td>
<td>支持2T以上</td>
</tr>
<tr>
<td>分区计数</td>
<td>最多支持4个主分区或3个主分区一个扩展分区</td>
<td>最多支持128个分区,部分主分区、扩展分区</td>
</tr>
<tr>
<td>安全功能</td>
<td>不提供任何安全功能</td>
<td>支持CRC32校验和机制</td>
</tr>
</tbody></table>
<h2 id="二、分区工具使用"><a href="#二、分区工具使用" class="headerlink" title="二、分区工具使用"></a>二、分区工具使用</h2><h3 id="2-1-MBR分区工具fdisk"><a href="#2-1-MBR分区工具fdisk" class="headerlink" title="2.1 MBR分区工具fdisk"></a>2.1 MBR分区工具fdisk</h3><h3 id="2-2-GPT分区工具gdisk"><a href="#2-2-GPT分区工具gdisk" class="headerlink" title="2.2 GPT分区工具gdisk"></a>2.2 GPT分区工具gdisk</h3><h3 id="2-3-GPT分区工具parted"><a href="#2-3-GPT分区工具parted" class="headerlink" title="2.3 GPT分区工具parted"></a>2.3 GPT分区工具parted</h3><p>​	parted用于对磁盘（或RAID磁盘）进行分区及管理，与fdisk分区工具相比，支持2TB以上的磁盘分区，并且允许调整分区的大小，<font color='red'>支持命令行方式或交互式方式</font>，常用命令如下：</p>
<table>
<thead>
<tr>
<th>parted交互命令</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>check NUMBER</td>
<td>做一次简单的文件系统检测</td>
</tr>
<tr>
<td>cp [FROM-DEVICE] FROM-NUMBER TO-NUMBER</td>
<td>复制文件系统到另一个分区</td>
</tr>
<tr>
<td>help [COMMAND]</td>
<td>显示所有的命令帮助</td>
</tr>
<tr>
<td>mklabel,mktable LABEL-TYPE</td>
<td>创建新的磁盘卷标（分区表）</td>
</tr>
<tr>
<td>mkfs NUMBER FS-TYPE</td>
<td>在分区上建立文件系统</td>
</tr>
<tr>
<td>mkpart PART-TYPE [FS-TYPE] START END</td>
<td>创建一个分区</td>
</tr>
<tr>
<td>mkpartfs PART-TYPE FS-TYPE START END</td>
<td>创建分区，并建立文件系统</td>
</tr>
<tr>
<td>move NUMBER START END</td>
<td>移动分区</td>
</tr>
<tr>
<td>name NUMBER NAME</td>
<td>给分区命名</td>
</tr>
<tr>
<td>print [devices|free|list,all|NUMBER]</td>
<td>显示分区表、活动设备、空闲空间、所有分区</td>
</tr>
<tr>
<td>quit</td>
<td>退出</td>
</tr>
<tr>
<td>rescue START END</td>
<td>修复丢失的分区</td>
</tr>
<tr>
<td>resize NUMBER START END</td>
<td>修改分区大小</td>
</tr>
<tr>
<td>rm NUMBER</td>
<td>删除分区</td>
</tr>
<tr>
<td>select DEVICE</td>
<td>选择需要编辑的设备</td>
</tr>
<tr>
<td>set NUMBER FLAG STATE</td>
<td>改变分区标记</td>
</tr>
<tr>
<td>toggle [NUMBER [FLAG]]</td>
<td>切换分区表的状态</td>
</tr>
<tr>
<td>unit UNIT</td>
<td>设置默认的单位</td>
</tr>
<tr>
<td>Version</td>
<td>显示版本</td>
</tr>
</tbody></table>
<blockquote>
<p>关于mkpart与PART-TYPE（FS-TYPE）的解释：</p>
<p>Make a part-type partition for filesystem fs-type (if specified), beginning at start and ending at end (by default in megabytes).  fs-type can  be  one  of  “btrfs”,  “ext2”, “ext3”, “ext4”, “fat16”, “fat32”, “hfs”, “hfs+”, “linux-swap”, “ntfs”, “reiserfs”, or “xfs”.  part-type should be one of “primary”, “logical”, or “extended”.</p>
</blockquote>
<h4 id="2-3-1-使用parted"><a href="#2-3-1-使用parted" class="headerlink" title="2.3.1 使用parted"></a>2.3.1 使用parted</h4><h4 id="2-3-1-1-列出所有块设备分区情况"><a href="#2-3-1-1-列出所有块设备分区情况" class="headerlink" title="2.3.1.1 列出所有块设备分区情况"></a>2.3.1.1 列出所有块设备分区情况</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看当前有哪些块设备</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      <span class="token number">8</span>:0    <span class="token number">0</span>   50G  <span class="token number">0</span> disk
├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>    2G  <span class="token number">0</span> part <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3   <span class="token number">8</span>:3    <span class="token number">0</span>   47G  <span class="token number">0</span> part /
sdb      <span class="token number">8</span>:16   <span class="token number">0</span>   10G  <span class="token number">0</span> disk
sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  792M  <span class="token number">0</span> rom

<span class="token comment"># 查看分区情况</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted -l</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sda: <span class="token number">53</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system     Flags
 <span class="token number">1</span>      1049kB  1075MB  1074MB  primary  xfs             boot
 <span class="token number">2</span>      1075MB  3223MB  2149MB  primary  linux-swap<span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
 <span class="token number">3</span>      3223MB  <span class="token number">53</span>.7GB  <span class="token number">50</span>.5GB  primary  xfs


Error: /dev/sdb: unrecognised disk label	<span class="token comment"># sdb还没有分区</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: unknown
Disk Flags:

Warning: Unable to <span class="token function">open</span> /dev/sr0 read-write <span class="token punctuation">(</span>Read-only <span class="token function">file</span> system<span class="token punctuation">)</span>.  /dev/sr0
has been opened read-only.
Model: NECVMWar VMware IDE CDR10 <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sr0: 830MB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 2048B/2048B
Partition Table: msdos
Disk Flags:

Number  Start  End     Size    Type     File system  Flags
 <span class="token number">2</span>      885kB  <span class="token number">37</span>.7MB  <span class="token number">36</span>.8MB  primary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-1-2-创建分区"><a href="#2-3-1-2-创建分区" class="headerlink" title="2.3.1.2 创建分区"></a>2.3.1.2 创建分区</h4><blockquote>
<p>案例：在&#x2F;dev&#x2F;sdb中创建一个1GB的分区</p>
</blockquote>
<p>a、命令行方式，创建一个主分区</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 转换为MBR分区方案msdos, GPT方案为gpt</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mklabel msdos</span>
Information: You may need to update /etc/fstab.

<span class="token comment"># 创建主分区</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mkpart primary ext4 0GB 1GB  # 把1GB换成100%就是分完剩余空间</span>
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      <span class="token number">8</span>:0    <span class="token number">0</span>   50G  <span class="token number">0</span> disk
├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>    2G  <span class="token number">0</span> part <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3   <span class="token number">8</span>:3    <span class="token number">0</span>   47G  <span class="token number">0</span> part /
sdb      <span class="token number">8</span>:16   <span class="token number">0</span>   10G  <span class="token number">0</span> disk
└─sdb1   <span class="token number">8</span>:17   <span class="token number">0</span>  953M  <span class="token number">0</span> part
sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  792M  <span class="token number">0</span> rom
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>b、再用交互方式，继续创建一个主分区</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted</span>
GNU Parted <span class="token number">3.1</span>
Using /dev/sda
Welcome to GNU Parted<span class="token operator">!</span> Type <span class="token string">'help'</span> to view a list of commands.
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> <span class="token keyword">select</span> /dev/sdb <span class="token comment"># 选择块设备</span>
Using /dev/sdb
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> mkpart	<span class="token comment"># 新建分区</span>
Partition type?  primary/extended? primary
File system type?  <span class="token punctuation">[</span>ext2<span class="token punctuation">]</span>? ext4
Start? 1GB
End? 2GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>c、扩展分区与逻辑分区的创建</p>
<blockquote>
<p>扩展分区最多只有一个，再创建会提示选择primary&#x2F;logical</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>parted<span class="token punctuation">)</span> <span class="token keyword">select</span> /dev/sdb
Using /dev/sdb
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> print
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type      File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary   ext4
 <span class="token number">2</span>      1000MB  4000MB  3000MB  extended               lba

<span class="token comment"># 给扩展分区2创建一个逻辑分区（使用范围只能在扩展分区2的范围内）</span>
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> mkpart logical 1GB 2GB
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> print
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type      File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary   ext4
 <span class="token number">2</span>      1000MB  4000MB  3000MB  extended               lba
 <span class="token number">5</span>      1001MB  2000MB  998MB   logical

<span class="token comment"># 给扩展分区2再创建一个逻辑分区</span>
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> mkpart logical 2GB 3GB
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> print
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type      File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary   ext4
 <span class="token number">2</span>      1000MB  4000MB  3000MB  extended               lba
 <span class="token number">5</span>      1001MB  2000MB  998MB   logical
 <span class="token number">6</span>      2001MB  3000MB  999MB   logical<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-1-3-查看分区"><a href="#2-3-1-3-查看分区" class="headerlink" title="2.3.1.3 查看分区"></a>2.3.1.3 查看分区</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>parted<span class="token punctuation">)</span> print <span class="token comment"># 打印分区</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size   Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB  primary
 <span class="token number">2</span>      1000MB  2000MB  999MB  primary
 
 <span class="token punctuation">(</span>parted<span class="token punctuation">)</span> print <span class="token function">free</span> <span class="token comment"># 查看剩余空间</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
        <span class="token number">32</span>.3kB  1049kB  1016kB           Free Space
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary
 <span class="token number">2</span>      1000MB  2000MB  999MB   primary
        2000MB  <span class="token number">10</span>.7GB  8738MB           Free Space
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-1-4-调整分区大小"><a href="#2-3-1-4-调整分区大小" class="headerlink" title="2.3.1.4 调整分区大小"></a>2.3.1.4 调整分区大小</h4><blockquote>
<p>将分区2从1GB扩展到2GB</p>
<p>PS：v2.4之后的版本，resize命令已经移除，更新到3.1-32版本有resizepart</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size   Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB  primary
 <span class="token number">2</span>      1000MB  2000MB  999MB  primary

<span class="token comment"># 调整分区2的大小为2GB</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb resizepart 2 3GB	(3GB是指END位置，即使用1GB-3GB的空间，共2GB)</span>
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary
 <span class="token number">2</span>      1000MB  3000MB  2000MB  primary
 
 <span class="token comment"># 如果已经格式化并挂载使用，需要重新调整文件系统大小</span>
 <span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># resize2fs /dev/sdb2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>缩小分区大小会怎样？将提示有数据丢失的风险</p>
</blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb resizepart 2 2GB</span>
Warning: Shrinking a partition can cause data loss, are you sure you want to continue?
Yes/No?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-1-5-删除分区"><a href="#2-3-1-5-删除分区" class="headerlink" title="2.3.1.5 删除分区"></a>2.3.1.5 删除分区</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB   primary
 <span class="token number">2</span>      1000MB  4000MB  3000MB  primary  ext4

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb rm 2   // 删除2号分区，因为已挂载，会提示要先卸载</span>
Error: Partition /dev/sdb2 is being used. You must unmount it before you modify it with Parted.
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># umount /dev/sdb2</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb rm 2 // 删除成功</span>
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># print</span>
-bash: print: <span class="token builtin class-name">command</span> not found
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size   Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB  primary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-1-6-设置-x2F-更改分区标志"><a href="#2-3-1-6-设置-x2F-更改分区标志" class="headerlink" title="2.3.1.6 设置&#x2F;更改分区标志"></a>2.3.1.6 设置&#x2F;更改分区标志</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb set 1 lvm on</span>
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size   Type     File system  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB  primary               lvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看有哪些标志可以设置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted</span>
GNU Parted <span class="token number">3.1</span>
Using /dev/sda
Welcome to GNU Parted<span class="token operator">!</span> Type <span class="token string">'help'</span> to view a list of commands.
<span class="token punctuation">(</span>parted<span class="token punctuation">)</span> <span class="token builtin class-name">help</span> <span class="token builtin class-name">set</span>
  <span class="token builtin class-name">set</span> NUMBER FLAG STATE                    change the FLAG on partition NUMBER

        NUMBER is the partition number used by Linux.  On MS-DOS disk labels, the primary partitions number from <span class="token number">1</span> to <span class="token number">4</span>, logical partitions from <span class="token number">5</span> onwards.
        FLAG is one of: boot, root, swap, hidden, raid, lvm, lba, hp-service, palo, prep, msftres, bios_grub, atvrecv, diag, legacy_boot
        STATE is one of: on, off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-16-GPT分区方案下的NAME标签"><a href="#2-3-16-GPT分区方案下的NAME标签" class="headerlink" title="2.3.16 GPT分区方案下的NAME标签"></a>2.3.16 GPT分区方案下的NAME标签</h4><p>GPT分区的print</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start  End  Size  File system  Name  Flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>MBR分区的print</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mklabel msdos</span>
Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?
Yes/No? Yes
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start  End  Size  Type  File system  Flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong><font color='red'>可见GPT标志中多了一个Name标签</font></strong></p>
</blockquote>
<p>使用的时候GPT分区方式可以指定分区名，不用指定主分区、扩展分区这些类型</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mkpart BOOT 0GB 1GB</span>
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb print</span>
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: <span class="token number">10</span>.7GB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size   File system  Name  Flags
 <span class="token number">1</span>      1049kB  1000MB  999MB  xfs          BOOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是MBR就不能</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mkpart BOOT 0GB 1GB</span>
parted: invalid token: BOOT
Partition type?  primary/extended?
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/sdb mkpart primary BOOT 0GB 1GB</span>
parted: invalid token: BOOT
File system type?  <span class="token punctuation">[</span>ext2<span class="token punctuation">]</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、磁盘挂载"><a href="#三、磁盘挂载" class="headerlink" title="三、磁盘挂载"></a>三、磁盘挂载</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>、开机自动挂载
	开机自动执行：/etc/rc.local
	
	<span class="token function">chmod</span> +x /etc/ec.local
	
	<span class="token builtin class-name">echo</span> <span class="token string">"mount /dev/sdc1 /root/test"</span> <span class="token operator">>></span> /etc/rc.local

<span class="token number">2</span>、修改配置文件 /etc/fstab
/dev/sdc100     /opt    xfs         defaults   <span class="token number">0</span>      <span class="token number">0</span>
设备				挂载点  文件系统类型   挂载类型  是否备份  是否检测
<span class="token assign-left variable">UUID</span><span class="token operator">=</span>1327e665-44b3-4223-a93b-69c36ec602f9   /root/oldboy  xfs   defaults <span class="token number">0</span> <span class="token number">0</span>

 /dev/sdc100  等价于  UUID

<span class="token number">3</span>、查询设备UUID
	<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># blkid </span>
/dev/sdc1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"b5797ad6-9b98-452c-8962-fa12f6590fa6"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> <span class="token assign-left variable">PARTLABEL</span><span class="token operator">=</span><span class="token string">"Linux filesystem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、创建SWAP分区"><a href="#四、创建SWAP分区" class="headerlink" title="四、创建SWAP分区"></a>四、创建SWAP分区</h2><pre class="line-numbers language-she" data-language="she"><code class="language-she">1、创建一个硬盘分区

2、制作swap分区
mkswap &#x2F;dev&#x2F;sdb3

3、激活swap
swapon &#x2F;dev&#x2F;sdb3

4、关闭swap
swapoff 

5、自动挂载
	5.1、
        echo &quot;mkswap &#x2F;dev&#x2F;sdb3&quot; &gt;&gt; &#x2F;etc&#x2F;rc.local
        echo &quot;swapon &#x2F;dev&#x2F;sdb3&quot; &gt;&gt; &#x2F;etc&#x2F;rc.local
	5.2、
		echo &quot;&#x2F;dev&#x2F;sdb3  swap  swap  defaults 0  0&quot; &gt;&gt; &#x2F;etc&#x2F;fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--netstat使用</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day18-netstat%E4%BD%BF%E7%94%A8/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>1、netstat</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netstat主要用来查询系统端口相关问题

注：要使用netstat，需要安装yum <span class="token function">install</span> -y net-tools

<span class="token comment"># netstat常用参数</span>
-t <span class="token builtin class-name">:</span> 打印tcp链接的进程
-u <span class="token builtin class-name">:</span> 打印UDP链接的进程
-l <span class="token builtin class-name">:</span> 监听
-p <span class="token builtin class-name">:</span> 打印进程的PID
-n <span class="token builtin class-name">:</span> 不反解，不将ip地址解析成域名同时不将端口解析成对应的协议名称

<span class="token function">netstat</span> -nutlp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看系统磁盘</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk </span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk 
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part 
  ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   18G  <span class="token number">0</span> lvm  /
  └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
sdb               <span class="token number">8</span>:16   <span class="token number">0</span>   40G  <span class="token number">0</span> disk 
sdc               <span class="token number">8</span>:32   <span class="token number">0</span>  <span class="token number">3</span>.9T  <span class="token number">0</span> disk 

<span class="token comment"># 分区</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb </span>

n <span class="token builtin class-name">:</span> 新建一个分区
p <span class="token builtin class-name">:</span> 查看分区情况
m ：查看帮助
d <span class="token builtin class-name">:</span> 删除分区
w ；保存分区修改内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、使用文件系统的流程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、装硬盘

<span class="token number">2</span>、查看当前系统硬盘
<span class="token punctuation">[</span>root@localhost a<span class="token punctuation">]</span><span class="token comment"># lsblk </span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk 
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part 
  ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   18G  <span class="token number">0</span> lvm  /
  └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
sdb               <span class="token number">8</span>:16   <span class="token number">0</span>   40G  <span class="token number">0</span> disk 
sdc               <span class="token number">8</span>:32   <span class="token number">0</span>  <span class="token number">3</span>.9T  <span class="token number">0</span> disk 
sr0              <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">4</span>.3G  <span class="token number">0</span> rom  

<span class="token number">3</span>、分区
	2TB 以下的硬盘，使用MBR分区
	2TB 以上的硬盘，使用GPT分区
	
	<span class="token function">fdisk</span> /dev/sdb

<span class="token number">4</span>、格式化分区（将分区做成文件系统）
	mkfs.xfs /dev/sdb1

<span class="token number">5</span>、挂载分区
	<span class="token function">mount</span> /dev/sdb1  /a

<span class="token number">6</span>、检测
	<span class="token function">df</span>
		-h <span class="token builtin class-name">:</span> 显示硬盘大小单位

<span class="token comment"># 注：挂载哪个硬盘则显示对应硬盘里面的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--逻辑卷管理</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day19-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/02_%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、LVM介绍"><a href="#一、LVM介绍" class="headerlink" title="一、LVM介绍"></a>一、LVM介绍</h2><p>​	逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理“逻辑”卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。</p>
<p>LVM使用分层结构，如下如所示：</p>
<p><img src="/02_%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86.assets/134408sa12dauefffyszfg.jpg" alt="img"></p>
<p>​	图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG）。然后基于卷组可以创建逻辑卷（LV）。只要在卷组中有可用空间，就可以随心所欲的创建逻辑卷。文件系统就是在逻辑卷上创建的，然后可以在操作系统挂载和访问</p>
<h2 id="二、LVM使用"><a href="#二、LVM使用" class="headerlink" title="二、LVM使用"></a>二、LVM使用</h2><h3 id="2-1-磁盘准备"><a href="#2-1-磁盘准备" class="headerlink" title="2.1 磁盘准备"></a>2.1 磁盘准备</h3><p>加装两块硬盘，sdb-10G与sdc-5G</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      <span class="token number">8</span>:0    <span class="token number">0</span>   50G  <span class="token number">0</span> disk
├─sda1   <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2   <span class="token number">8</span>:2    <span class="token number">0</span>    2G  <span class="token number">0</span> part <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3   <span class="token number">8</span>:3    <span class="token number">0</span>   47G  <span class="token number">0</span> part /
sdb      <span class="token number">8</span>:16   <span class="token number">0</span>   10G  <span class="token number">0</span> disk
sdc      <span class="token number">8</span>:32   <span class="token number">0</span>    5G  <span class="token number">0</span> disk
sr0     <span class="token number">11</span>:0    <span class="token number">1</span>  792M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>给sbd创建LVM分区</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdb</span>
Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>.

Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.
Be careful before using the <span class="token function">write</span> command.


Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n  <span class="token comment"># 新建分区</span>
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>:
Using default response p
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>:
First sector <span class="token punctuation">(</span><span class="token number">2048</span>-20971519, default <span class="token number">2048</span><span class="token punctuation">)</span>:
Using default value <span class="token number">2048</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">2048</span>-20971519, default <span class="token number">20971519</span><span class="token punctuation">)</span>: +2G
Partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">2</span> GiB is <span class="token builtin class-name">set</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: t  <span class="token comment"># 将分区改为LVM分区</span>
Selected partition <span class="token number">1</span>
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: L

 <span class="token number">0</span>  Empty           <span class="token number">24</span>  NEC DOS         <span class="token number">81</span>  Minix / old Lin bf  Solaris
 <span class="token number">1</span>  FAT12           <span class="token number">27</span>  Hidden NTFS Win <span class="token number">82</span>  Linux swap / So c1  DRDOS/sec <span class="token punctuation">(</span>FAT-
 <span class="token number">2</span>  XENIX root      <span class="token number">39</span>  Plan <span class="token number">9</span>          <span class="token number">83</span>  Linux           c4  DRDOS/sec <span class="token punctuation">(</span>FAT-
 <span class="token number">3</span>  XENIX usr       3c  PartitionMagic  <span class="token number">84</span>  OS/2 hidden C:  c6  DRDOS/sec <span class="token punctuation">(</span>FAT-
 <span class="token number">4</span>  FAT16 <span class="token operator">&lt;</span>32M      <span class="token number">40</span>  Venix <span class="token number">80286</span>     <span class="token number">85</span>  Linux extended  c7  Syrinx
 <span class="token number">5</span>  Extended        <span class="token number">41</span>  PPC PReP Boot   <span class="token number">86</span>  NTFS volume <span class="token builtin class-name">set</span> da  Non-FS data
 <span class="token number">6</span>  FAT16           <span class="token number">42</span>  SFS             <span class="token number">87</span>  NTFS volume <span class="token builtin class-name">set</span> db  CP/M / CTOS / <span class="token builtin class-name">.</span>
 <span class="token number">7</span>  HPFS/NTFS/exFAT 4d  QNX4.x          <span class="token number">88</span>  Linux plaintext de  Dell Utility
 <span class="token number">8</span>  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       <span class="token function">df</span>  BootIt
 <span class="token number">9</span>  AIX bootable    4f  QNX4.x 3rd part <span class="token number">93</span>  Amoeba          e1  DOS access
 a  OS/2 Boot Manag <span class="token number">50</span>  OnTrack DM      <span class="token number">94</span>  Amoeba BBT      e3  DOS R/O
 b  W95 FAT32       <span class="token number">51</span>  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor
 c  W95 FAT32 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> <span class="token number">52</span>  CP/M            a0  IBM Thinkpad hi eb  BeOS fs
 e  W95 FAT16 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> <span class="token number">53</span>  OnTrack DM6 Aux a5  FreeBSD         ee  GPT
 f  W95 Ext<span class="token string">'d (LBA) 54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/
10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC b
11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor
12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f4  SpeedStor
14  Hidden FAT16 &lt;3 61  SpeedStor       ab  Darwin boot     f2  DOS secondary
16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS
17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE
18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fd  Linux raid auto
1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fe  LANstep
1c  Hidden W95 FAT3 75  PC/IX           be  Solaris boot    ff  BBT
1e  Hidden W95 FAT1 80  Old Minix
Hex code (type L to list all codes): 8e
Changed type of partition '</span>Linux<span class="token string">' to '</span>Linux LVM'

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p

Disk /dev/sdb: <span class="token number">10.7</span> GB, <span class="token number">10737418240</span> bytes, <span class="token number">20971520</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x0005122b

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            <span class="token number">2048</span>     <span class="token number">4196351</span>     <span class="token number">2097152</span>   8e  Linux LVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重复添加，再加一个3G，一个2G的分区，可见分区表如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># fdisk -l /dev/sdb</span>

Disk /dev/sdb: <span class="token number">10.7</span> GB, <span class="token number">10737418240</span> bytes, <span class="token number">20971520</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x0005122b

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            <span class="token number">2048</span>     <span class="token number">4196351</span>     <span class="token number">2097152</span>   8e  Linux LVM
/dev/sdb2         <span class="token number">4196352</span>    <span class="token number">10487807</span>     <span class="token number">3145728</span>   8e  Linux LVM
/dev/sdb3        <span class="token number">10487808</span>    <span class="token number">14682111</span>     <span class="token number">2097152</span>   8e  Linux LVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2-创建物理卷（PV）"><a href="#2-2-创建物理卷（PV）" class="headerlink" title="2.2 创建物理卷（PV）"></a>2.2 创建物理卷（PV）</h3><p>安装LVM工具</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># yum install lvm2 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将准备好的LVM分区生成为物理卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvcreate /dev/sdb1</span>
WARNING: ext4 signature detected on /dev/sdb1 at offset <span class="token number">1080</span>. Wipe it? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Wiping ext4 signature on /dev/sdb1.
  Physical volume <span class="token string">"/dev/sdb1"</span> successfully created.
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvcreate /dev/sdb2</span>
  Physical volume <span class="token string">"/dev/sdb2"</span> successfully created.
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvcreate /dev/sdb3</span>
  Physical volume <span class="token string">"/dev/sdb3"</span> successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看物理卷信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvdisplay</span>
  <span class="token string">"/dev/sdb1"</span> is a new physical volume of <span class="token string">"2.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sdb1
  VG Name
  PV Size               <span class="token number">2.00</span> GiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               YUHdrd-AH1x-ew0m-Mp9i-3GHp-S4zc-XxlDJM

  <span class="token string">"/dev/sdb2"</span> is a new physical volume of <span class="token string">"3.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sdb2
  VG Name
  PV Size               <span class="token number">3.00</span> GiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               wGDQvx-7zfs-g018-wqx4-Y8rh-1kWT-PnLuFu

  <span class="token string">"/dev/sdb3"</span> is a new physical volume of <span class="token string">"2.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sdb3
  VG Name
  PV Size               <span class="token number">2.00</span> GiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               fykcuR-jooY-WKbi-yM8j-7fQ5-mhnH-JCkXC8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>补充：如何删除物理卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvremove /dev/sdb1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-3-创建卷组（VG）"><a href="#2-3-创建卷组（VG）" class="headerlink" title="2.3 创建卷组（VG）"></a>2.3 创建卷组（VG）</h3><p>将&#x2F;dev&#x2F;sdb{1,2,3}合并为卷组vg01</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># vgcreate vg01 /dev/sdb1 /dev/sdb2 /dev/sdb3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看卷组信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># vgdisplay</span>
  --- Volume group ---
  VG Name               vg01
  System ID
  Format                lvm2
  Metadata Areas        <span class="token number">3</span>
  Metadata Sequence No  <span class="token number">1</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">0</span>
  Open LV               <span class="token number">0</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">3</span>
  Act PV                <span class="token number">3</span>
  VG Size               <span class="token operator">&lt;</span><span class="token number">6.99</span> GiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">1789</span>
  Alloc PE / Size       <span class="token number">0</span> / <span class="token number">0</span>
  Free  PE / Size       <span class="token number">1789</span> / <span class="token operator">&lt;</span><span class="token number">6.99</span> GiB
  VG UUID               gzeouH-16qO-n6xv-V6VM-A9ep-eK6E-ODuIwU<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>补充：如何删除卷组</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># vgremove vg01</span>
  Volume group <span class="token string">"vg01"</span> successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-4-创建逻辑卷（LV）"><a href="#2-4-创建逻辑卷（LV）" class="headerlink" title="2.4 创建逻辑卷（LV）"></a>2.4 创建逻辑卷（LV）</h3><p>创建一个名为lv01，大小为100M的逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvcreate -L 100M -n lv01 vg01</span>
  Logical volume <span class="token string">"lv01"</span> created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvdisplay</span>
  --- Logical volume ---
  LV Path                /dev/vg01/lv01
  LV Name                lv01
  VG Name                vg01
  LV UUID                xFksnb-ENc2-mEo4-5gEb-yaJj-wP2c-oFuBeT
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> lb01, <span class="token number">2021</span>-09-01 <span class="token number">20</span>:39:16 +0800
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">100.00</span> MiB
  Current LE             <span class="token number">25</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>补充：删除逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvremove /dev/vg01/lv02</span>
Do you really want to remove active logical volume vg01/lv02? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Logical volume <span class="token string">"lv02"</span> successfully removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2-5-逻辑卷挂载"><a href="#2-5-逻辑卷挂载" class="headerlink" title="2.5 逻辑卷挂载"></a>2.5 逻辑卷挂载</h3><p>格式化逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># mkfs.ext4 /dev/vg01/lv01</span>
<span class="token function">mke2fs</span> <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem <span class="token assign-left variable">label</span><span class="token operator">=</span>
OS type: Linux
Block <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
Fragment <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token assign-left variable">Stride</span><span class="token operator">=</span><span class="token number">0</span> blocks, Stripe <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token number">0</span> blocks
<span class="token number">25688</span> inodes, <span class="token number">102400</span> blocks
<span class="token number">5120</span> blocks <span class="token punctuation">(</span><span class="token number">5.00</span>%<span class="token punctuation">)</span> reserved <span class="token keyword">for</span> the super user
First data <span class="token assign-left variable">block</span><span class="token operator">=</span><span class="token number">1</span>
Maximum filesystem <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">33685504</span>
<span class="token number">13</span> block <span class="token function">groups</span>
<span class="token number">8192</span> blocks per group, <span class="token number">8192</span> fragments per group
<span class="token number">1976</span> inodes per group
Superblock backups stored on blocks:
        <span class="token number">8193</span>, <span class="token number">24577</span>, <span class="token number">40961</span>, <span class="token number">57345</span>, <span class="token number">73729</span>

Allocating group tables: <span class="token keyword">done</span>
Writing inode tables: <span class="token keyword">done</span>
Creating journal <span class="token punctuation">(</span><span class="token number">4096</span> blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>
Writing superblocks and filesystem accounting information: <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>挂载逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># mkdir /mnt/test-lv01</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/vg01/lv01 /mnt/test-lv01</span>
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem             Size  Used Avail Use% Mounted on
/dev/sda3               47G  <span class="token number">1</span>.9G   46G   <span class="token number">4</span>% /
devtmpfs               479M     <span class="token number">0</span>  479M   <span class="token number">0</span>% /dev
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /dev/shm
tmpfs                  489M  <span class="token number">6</span>.8M  482M   <span class="token number">2</span>% /run
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1             1014M  119M  896M  <span class="token number">12</span>% /boot
tmpfs                   98M     <span class="token number">0</span>   98M   <span class="token number">0</span>% /run/user/0
/dev/mapper/vg01-lv01   93M  <span class="token number">1</span>.6M   85M   <span class="token number">2</span>% /mnt/test-lv01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-6-扩展逻辑卷"><a href="#2-6-扩展逻辑卷" class="headerlink" title="2.6 扩展逻辑卷"></a>2.6 扩展逻辑卷</h3><p>卸载逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># umount /dev/vg01/lv01</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将逻辑卷lv01调整为200M</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvresize -L 200M /dev/vg01/lv01 </span>
  Size of logical volume vg01/lv01 changed from <span class="token number">100.00</span> MiB <span class="token punctuation">(</span><span class="token number">25</span> extents<span class="token punctuation">)</span> to <span class="token number">200.00</span> MiB <span class="token punctuation">(</span><span class="token number">50</span> extents<span class="token punctuation">)</span>.
  Logical volume vg01/lv01 successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>检查磁盘错误</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># e2fsck -f /dev/vg01/lv01</span>
e2fsck <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Pass <span class="token number">1</span>: Checking inodes, blocks, and sizes
Pass <span class="token number">2</span>: Checking directory structure
Pass <span class="token number">3</span>: Checking directory connectivity
Pass <span class="token number">4</span>: Checking reference counts
Pass <span class="token number">5</span>: Checking group summary information
/dev/vg01/lv01: <span class="token number">11</span>/25688 files <span class="token punctuation">(</span><span class="token number">9.1</span>% non-contiguous<span class="token punctuation">)</span>, <span class="token number">8896</span>/102400 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调整文件系统大小</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># resize2fs /dev/vg01/lv01</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看逻辑卷信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvdisplay</span>
  --- Logical volume ---
  LV Path                /dev/vg01/lv01
  LV Name                lv01
  VG Name                vg01
  LV UUID                svm5Xk-B8jZ-QhZw-egCm-x6b2-e5Jt-wvMi2F
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> lb01, <span class="token number">2021</span>-09-01 <span class="token number">20</span>:41:53 +0800
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">200.00</span> MiB
  Current LE             <span class="token number">50</span>
  Segments               <span class="token number">2</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:0
  <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重新挂载使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># !mount</span>
<span class="token function">mount</span> /dev/vg01/lv01 /mnt/test-lv01
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem             Size  Used Avail Use% Mounted on
/dev/sda3               47G  <span class="token number">1</span>.9G   46G   <span class="token number">4</span>% /
devtmpfs               479M     <span class="token number">0</span>  479M   <span class="token number">0</span>% /dev
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /dev/shm
tmpfs                  489M  <span class="token number">6</span>.8M  482M   <span class="token number">2</span>% /run
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1             1014M  119M  896M  <span class="token number">12</span>% /boot
tmpfs                   98M     <span class="token number">0</span>   98M   <span class="token number">0</span>% /run/user/0
/dev/mapper/vg01-lv01  190M  <span class="token number">1</span>.6M  175M   <span class="token number">1</span>% /mnt/test-lv01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-7-缩减逻辑卷"><a href="#2-7-缩减逻辑卷" class="headerlink" title="2.7 缩减逻辑卷"></a>2.7 缩减逻辑卷</h3><p>卸载逻辑卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># umount /dev/vg01/lv01</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>检查磁盘错误</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># e2fsck -f /dev/vg01/lv01</span>
e2fsck <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Pass <span class="token number">1</span>: Checking inodes, blocks, and sizes
Pass <span class="token number">2</span>: Checking directory structure
Pass <span class="token number">3</span>: Checking directory connectivity
Pass <span class="token number">4</span>: Checking reference counts
Pass <span class="token number">5</span>: Checking group summary information
/dev/vg01/lv01: <span class="token number">11</span>/49400 files <span class="token punctuation">(</span><span class="token number">9.1</span>% non-contiguous<span class="token punctuation">)</span>, <span class="token number">11884</span>/204800 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缩减文件系统大小，更新ext4信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># resize2fs /dev/vg01/lv01 100M</span>
resize2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Resizing the filesystem on /dev/vg01/lv01 to <span class="token number">102400</span> <span class="token punctuation">(</span>1k<span class="token punctuation">)</span> blocks.
The filesystem on /dev/vg01/lv01 is now <span class="token number">102400</span> blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成后，减小逻辑卷大小</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvresize -L 100M /dev/vg01/lv01</span>
  WARNING: Reducing active logical volume to <span class="token number">100.00</span> MiB.
  THIS MAY DESTROY YOUR DATA <span class="token punctuation">(</span>filesystem etc.<span class="token punctuation">)</span>
Do you really want to reduce vg01/lv01? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Size of logical volume vg01/lv01 changed from <span class="token number">200.00</span> MiB <span class="token punctuation">(</span><span class="token number">50</span> extents<span class="token punctuation">)</span> to <span class="token number">100.00</span> MiB <span class="token punctuation">(</span><span class="token number">25</span> extents<span class="token punctuation">)</span>.
  Logical volume vg01/lv01 successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看逻辑卷信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvdisplay</span>
  --- Logical volume ---
  LV Path                /dev/vg01/lv01
  LV Name                lv01
  VG Name                vg01
  LV UUID                svm5Xk-B8jZ-QhZw-egCm-x6b2-e5Jt-wvMi2F
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> lb01, <span class="token number">2021</span>-09-01 <span class="token number">20</span>:41:53 +0800
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">100.00</span> MiB
  Current LE             <span class="token number">25</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:0
  <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>挂载使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># !mo</span>
<span class="token function">mount</span> /dev/vg01/lv01 /mnt/test-lv01
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem             Size  Used Avail Use% Mounted on
/dev/sda3               47G  <span class="token number">1</span>.9G   46G   <span class="token number">4</span>% /
devtmpfs               479M     <span class="token number">0</span>  479M   <span class="token number">0</span>% /dev
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /dev/shm
tmpfs                  489M  <span class="token number">6</span>.8M  482M   <span class="token number">2</span>% /run
tmpfs                  489M     <span class="token number">0</span>  489M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1             1014M  119M  896M  <span class="token number">12</span>% /boot
tmpfs                   98M     <span class="token number">0</span>   98M   <span class="token number">0</span>% /run/user/0
/dev/mapper/vg01-lv01   93M  <span class="token number">1</span>.6M   85M   <span class="token number">2</span>% /mnt/test-lv01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-8-VG增加一块磁盘"><a href="#2-8-VG增加一块磁盘" class="headerlink" title="2.8 VG增加一块磁盘"></a>2.8 VG增加一块磁盘</h3><p>新盘创建lvm分区</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sdc</span>
Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>.

Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.
Be careful before using the <span class="token function">write</span> command.

Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x05ff27fa.

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>:
Using default response p
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>:
First sector <span class="token punctuation">(</span><span class="token number">2048</span>-10485759, default <span class="token number">2048</span><span class="token punctuation">)</span>:
Using default value <span class="token number">2048</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">2048</span>-10485759, default <span class="token number">10485759</span><span class="token punctuation">)</span>: +4G
Partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">4</span> GiB is <span class="token builtin class-name">set</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: t
Selected partition <span class="token number">1</span>
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>:
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: 8e
Changed <span class="token builtin class-name">type</span> of partition <span class="token string">'Linux'</span> to <span class="token string">'Linux LVM'</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p

Disk /dev/sdc: <span class="token number">5368</span> MB, <span class="token number">5368709120</span> bytes, <span class="token number">10485760</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x05ff27fa

   Device Boot      Start         End      Blocks   Id  System
/dev/sdc1            <span class="token number">2048</span>     <span class="token number">8390655</span>     <span class="token number">4194304</span>   8e  Linux LVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建物理卷</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># pvcreate /dev/sdc1</span>
  Physical volume <span class="token string">"/dev/sdc1"</span> successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>扩容VG</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># vgextend vg01 /dev/sdc1</span>
  Volume group <span class="token string">"vg01"</span> successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查看VG信息</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># vgdisplay vg01</span>
  --- Volume group ---
  VG Name               vg01
  System ID
  Format                lvm2
  Metadata Areas        <span class="token number">4</span>
  Metadata Sequence No  <span class="token number">10</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">2</span>
  Open LV               <span class="token number">1</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">4</span>
  Act PV                <span class="token number">4</span>
  VG Size               <span class="token number">10.98</span> GiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">2812</span>
  Alloc PE / Size       <span class="token number">50</span> / <span class="token number">200.00</span> MiB
  Free  PE / Size       <span class="token number">2762</span> / <span class="token operator">&lt;</span><span class="token number">10.79</span> GiB
  VG UUID               2Tjzna-XmXI-9MQ7-zeyc-AARV-84r5-jyymkf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS：尽管我们使用一个单独的磁盘做示范，其实只要是‘8e’类型的磁盘分区都可以用来扩展卷组。</p>
</blockquote>
<p>在VG中创建LV，可以看到磁盘都用上了</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lvcreate -L 10G -n lv03 vg01</span>
  Logical volume <span class="token string">"lv03"</span> created.
<span class="token punctuation">[</span>root@lb01 ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda             <span class="token number">8</span>:0    <span class="token number">0</span>   50G  <span class="token number">0</span> disk
├─sda1          <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2          <span class="token number">8</span>:2    <span class="token number">0</span>    2G  <span class="token number">0</span> part <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3          <span class="token number">8</span>:3    <span class="token number">0</span>   47G  <span class="token number">0</span> part /
sdb             <span class="token number">8</span>:16   <span class="token number">0</span>   10G  <span class="token number">0</span> disk
├─sdb1          <span class="token number">8</span>:17   <span class="token number">0</span>    2G  <span class="token number">0</span> part
│ ├─vg01-lv01 <span class="token number">253</span>:0    <span class="token number">0</span>  100M  <span class="token number">0</span> lvm  /mnt/test-lv01
│ ├─vg01-lv02 <span class="token number">253</span>:1    <span class="token number">0</span>  100M  <span class="token number">0</span> lvm
│ └─vg01-lv03 <span class="token number">253</span>:2    <span class="token number">0</span>   10G  <span class="token number">0</span> lvm
├─sdb2          <span class="token number">8</span>:18   <span class="token number">0</span>    3G  <span class="token number">0</span> part
│ └─vg01-lv03 <span class="token number">253</span>:2    <span class="token number">0</span>   10G  <span class="token number">0</span> lvm
└─sdb3          <span class="token number">8</span>:19   <span class="token number">0</span>    2G  <span class="token number">0</span> part
  └─vg01-lv03 <span class="token number">253</span>:2    <span class="token number">0</span>   10G  <span class="token number">0</span> lvm
sdc             <span class="token number">8</span>:32   <span class="token number">0</span>    5G  <span class="token number">0</span> disk
└─sdc1          <span class="token number">8</span>:33   <span class="token number">0</span>    4G  <span class="token number">0</span> part
  └─vg01-lv03 <span class="token number">253</span>:2    <span class="token number">0</span>   10G  <span class="token number">0</span> lvm
sr0            <span class="token number">11</span>:0    <span class="token number">1</span>  792M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--dd与文件系统备份</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day20-dd%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>1、dd命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdb <span class="token assign-left variable">bs</span><span class="token operator">=</span>500M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span> 
 
<span class="token keyword">if</span> <span class="token builtin class-name">:</span> 从哪里读文件
of <span class="token builtin class-name">:</span> 写入到哪里
bs <span class="token builtin class-name">:</span> 写入500M
count <span class="token builtin class-name">:</span> 写一块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、模拟文件系统出问题</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、直接向硬盘中写数据，不能测试向分区写数据
<span class="token number">2</span>、卸载之后重新挂载
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdc1 /root/test</span>
mount: <span class="token function">mount</span> /dev/sdc1 on /root/test failed: Structure needs cleaning

<span class="token number">3</span>、对文件系统进行修复
xfs_repair <span class="token punctuation">[</span>磁盘或分区路径<span class="token punctuation">]</span>

注： xfs_repair修改硬盘之后，硬盘数据丢失，所以对重要的数据要进行数据备份<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、文件系统的备份与恢复</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">备份：另外在保存一份
恢复：将以前保存的数据进行还原

<span class="token function">touch</span> <span class="token number">1</span>.txt
<span class="token builtin class-name">echo</span> aaaa <span class="token operator">></span> <span class="token number">1</span>.txt
<span class="token function">cp</span>  <span class="token number">1</span>.txt   <span class="token number">2</span>.txt

<span class="token function">rm</span> <span class="token number">1</span>.txt

<span class="token function">cp</span> <span class="token number">2</span>.txt <span class="token number">1</span>.txt

<span class="token number">1</span>.log   1T <span class="token operator">=</span> 1024G

全量备份和增量备份
全量备份：将需要备份的文件全部复制一份
增量备份：在原来备份基础上，把新增数据重新备份一份

备份与恢复的命令
xfsdump <span class="token builtin class-name">:</span> 备份的命令
xfsrestore  <span class="token builtin class-name">:</span> 恢复的命令


<span class="token comment"># 备份的步骤</span>
<span class="token number">1</span>、安装备份命令
<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># yum install xfsdump -y</span>

<span class="token number">2</span>、备份的等级
<span class="token number">0</span>  全量备份

<span class="token number">1</span> ~ <span class="token number">9</span> 增量备份（等级）

<span class="token number">3</span>、备份的参数
-L ：记录每次备份的地方
-M ：注释，此次备份的注释
-l ：指定备份的等级
-f ：备份的文件名称
-I ：查看备份信息

<span class="token number">4</span>、备份的条件（限制）
	<span class="token number">1</span>、必须使用root权限
	<span class="token number">2</span>、只能备份已经挂载的内容
	<span class="token number">3</span>、只能备份xfs文件系统
	<span class="token number">4</span>、只能够用xfsrestore来恢复

<span class="token number">5</span>、备份的命令格式
xfsdump <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 备份路径
xfsdump -L sdb1_bak -M <span class="token string">"sbd1_from_xxx"</span> -l <span class="token number">0</span> -f sdb1_from_bak_1 /root/oldboy

<span class="token number">6</span>、数据恢复
xfsrestore

<span class="token number">7</span>、恢复数据的参数
-f <span class="token builtin class-name">:</span> 指定备份的文件路径

<span class="token number">8</span>、恢复的格式
xfsrestore <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 恢复的路径
<span class="token punctuation">[</span>root@localhost oldboy<span class="token punctuation">]</span><span class="token comment"># xfsrestore -f /root/sdb1_from_bak_3 /root/oldboy/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、LVM</p>
<pre class="line-numbers language-bsah" data-language="bsah"><code class="language-bsah">1、什么是lvm

你如何保证你的硬盘空间恰好够用？
如果你的硬盘你够用了怎么扩容？

LVM是文件系统管理工具

&#x2F;root&#x2F;oldboy ---&gt;  lv[5G]
&#x2F;root&#x2F;oldboy ---&gt;  lv[3G]

2、LVM的优点
	1、可以动态扩容与缩容
	2、可以将新增加的硬盘添加到VG存储池
	3、可以突破物理存储卷的限制



3、使用lvm
	1、安装lvm软件包
		yum install lvm2 -y
	2、将磁盘交给pv
		pvreate [磁盘|磁盘分区]
	3、查看pv
		pvs
		pvscan
	4、创建vg
		vgcreate [vg名称] [pv路径]
	5、查看vg
	6、创建lvm逻辑卷（lv）
		-L ： 创建逻辑卷的大小
		-n : 逻辑卷的名字
		lvcreate [参数] 逻辑卷名称
	7、制作文件系统
		mkfs.xfs &#x2F;dev&#x2F;vg1&#x2F;xxx
	
	8、挂载文件系统
		mount [lv的路径] [挂载点的路径]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--防火墙与iptables</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day22-%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8Eiptables/iptables%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="iptables使用手册"><a href="#iptables使用手册" class="headerlink" title="iptables使用手册"></a>iptables使用手册</h1><h2 id="一、简单实践"><a href="#一、简单实践" class="headerlink" title="一、简单实践"></a>一、简单实践</h2><blockquote>
<p>从信息查看、保存规则、清除规则、恢复规则、更改规则五个方面来学习。</p>
</blockquote>
<h3 id="1-1-信息查看"><a href="#1-1-信息查看" class="headerlink" title="1.1 信息查看"></a>1.1 信息查看</h3><p>查看现有规则</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
neutron-linuxbri-INPUT  all  --  anywhere             anywhere
nova-api-INPUT  all  --  anywhere             anywhere

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
neutron-filter-top  all  --  anywhere             anywhere
neutron-linuxbri-FORWARD  all  --  anywhere             anywhere
nova-filter-top  all  --  anywhere             anywhere
nova-api-FORWARD  all  --  anywhere             anywhere
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看现有规则，显示主机ip和端口号，-n</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
neutron-linuxbri-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
nova-api-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
neutron-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
neutron-linuxbri-FORWARD  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
nova-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
nova-api-FORWARD  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结果显示：</p>
<p>默认显示三条链的规则INPUT、FORWARD、OUTPUT，而且所有的规则都是默认接受的</p>
<p>每条链下面显示的信息是：</p>
<p>动作  协议 参数 源地址 目标地址</p>
</blockquote>
<p>显示详细信息，-v</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">11839</span> packets, 2842K bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">11839</span> 2842K neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">12985</span> 3090K nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> neutron-linuxbri-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结果显示：</p>
<p>-v显示的内容比-L -n 显示的内容多了四个字段</p>
<p>pkts  规则匹配到的报文数量的多少</p>
<p>bytes 规则匹配到的报文内容量的大小</p>
<p>in   规则匹配到的流入的接口，*代表任意接口</p>
<p>out   规则匹配到的流出的接口</p>
</blockquote>
<p>显示规则的标号 –line-numbers</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v --line-numbers</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">13663</span> packets, 3221K bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>    <span class="token number">13663</span> 3221K neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>    <span class="token number">14809</span> 3469K nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>        <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>        <span class="token number">0</span>     <span class="token number">0</span> neutron-linuxbri-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">3</span>        <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">4</span>        <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>打印规则命令，将防火墙的编写命令给我们打印出来，可以通过这种方式来学习规则的编写。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -S</span>
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N neutron-filter-top
-N neutron-linuxbri-FORWARD
-N neutron-linuxbri-INPUT
-N neutron-linuxbri-OUTPUT
-N neutron-linuxbri-local
-N neutron-linuxbri-scope
-N neutron-linuxbri-sg-chain
-N neutron-linuxbri-sg-fallback
-N nova-api-FORWARD
-N nova-api-INPUT
-N nova-api-OUTPUT
-N nova-api-local
-N nova-filter-top
-A INPUT -j neutron-linuxbri-INPUT
-A INPUT -j nova-api-INPUT
-A FORWARD -j neutron-filter-top
-A FORWARD -j neutron-linuxbri-FORWARD
-A FORWARD -j nova-filter-top
-A FORWARD -j nova-api-FORWARD
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-保存规则"><a href="#1-2-保存规则" class="headerlink" title="1.2 保存规则"></a>1.2 保存规则</h3><blockquote>
<p>使用 iptables-save命令可以保存规则</p>
</blockquote>
<p>将当前的规则保存到文件中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables-save > iptables.rules</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat iptables.rules</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Wed Oct 20 09:22:53 2021</span>
*filter
:INPUT ACCEPT <span class="token punctuation">[</span><span class="token number">16785</span>:3861723<span class="token punctuation">]</span>
:FORWARD ACCEPT <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span><span class="token number">16549</span>:3883715<span class="token punctuation">]</span>
:neutron-filter-top - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-FORWARD - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-INPUT - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-OUTPUT - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-local - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-scope - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-sg-chain - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:neutron-linuxbri-sg-fallback - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:nova-api-FORWARD - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:nova-api-INPUT - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-清除规则"><a href="#1-3-清除规则" class="headerlink" title="1.3 清除规则"></a>1.3 清除规则</h3><p>清除单个规则</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 先查看</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n --line-numbers</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
num  target     prot opt <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>    neutron-linuxbri-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>    nova-api-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
num  target     prot opt <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>    neutron-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>    neutron-linuxbri-FORWARD  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">3</span>    nova-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">4</span>    nova-api-FORWARD  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># 删除FORWARD的第2条规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -D FORWARD 2</span>

<span class="token comment"># 再次查看，删除成功</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n --line-numbers</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
num  target     prot opt <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>    neutron-linuxbri-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>    nova-api-INPUT  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
num  target     prot opt <span class="token builtin class-name">source</span>               destination
<span class="token number">1</span>    neutron-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">2</span>    nova-filter-top  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">3</span>    nova-api-FORWARD  all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># 如果不指定删除的序号，会报错</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -D FORWARD</span>
iptables: Bad rule <span class="token punctuation">(</span>does a matching rule exist <span class="token keyword">in</span> that chain?<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>清除规则计数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看原内容</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">3196</span> packets, 657K bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token number">23118</span> 5147K neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token number">24264</span> 5395K nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># 清除规则计数 -Z</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -Z</span>

<span class="token comment"># 查看效果，pkts与bytes减少，即规则匹配到的报文数量与报文内容大小均减少，清除成功</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">58</span> packets, <span class="token number">11344</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
   <span class="token number">58</span> <span class="token number">11344</span> neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
   <span class="token number">58</span> <span class="token number">11344</span> nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>清除所有规则</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 清除默认规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -F</span>

<span class="token comment"># 清除自定义规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -X</span>

<span class="token comment"># 查看效果</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">424</span> packets, <span class="token number">84770</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">398</span> packets, <span class="token number">83826</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-4-恢复规则"><a href="#1-4-恢复规则" class="headerlink" title="1.4 恢复规则"></a>1.4 恢复规则</h3><p>从备份文件恢复规则</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 从文件恢复</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables-restore &lt; iptables.rules</span>

<span class="token comment"># 查看确认已恢复</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">268</span> packets, <span class="token number">46570</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
  <span class="token number">268</span> <span class="token number">46570</span> neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
  <span class="token number">268</span> <span class="token number">46570</span> nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> neutron-linuxbri-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-更改规则"><a href="#1-5-更改规则" class="headerlink" title="1.5 更改规则"></a>1.5 更改规则</h3><p>可以从ACCEPT改为DROP</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看原规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">342</span> packets, <span class="token number">49890</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
 <span class="token number">4455</span>  836K neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
 <span class="token number">4455</span>  836K nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> neutron-linuxbri-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span>

<span class="token comment"># -P 修改</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -P FORWARD DROP</span>

<span class="token comment"># 再次查看，FORWARD链修改DROP成功</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">38</span> packets, <span class="token number">5017</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
 <span class="token number">4849</span>  905K neutron-linuxbri-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
 <span class="token number">4849</span>  905K nova-api-INPUT  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0

Chain FORWARD <span class="token punctuation">(</span>policy DROP <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> neutron-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> neutron-linuxbri-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-filter-top  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> nova-api-FORWARD  all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>-P 更改的规则，使用 -F 不能自动还原</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">></span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -F</span>
<span class="token operator">></span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
<span class="token operator">></span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">36</span> packets, <span class="token number">6554</span> bytes<span class="token punctuation">)</span>
<span class="token operator">></span>pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination

<span class="token operator">></span>Chain FORWARD <span class="token punctuation">(</span>policy DROP <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
<span class="token operator">></span>pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>重启iptables服务后，可以使用系统所有默认规则</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 清除所有默认规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -F</span>

<span class="token comment"># 查看，没有默认规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">8</span> packets, <span class="token number">520</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">4</span> packets, <span class="token number">448</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
 
<span class="token comment"># 重启iptables服务</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart iptables</span>

<span class="token comment"># 再次查看，新增了系统的默认规则</span>
<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iptables -L -n -v</span>
Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">6</span>   <span class="token number">432</span> ACCEPT     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            state RELATED,ESTABLISHED
    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     icmp --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  lo     *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     tcp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            state NEW tcp dpt:22
    <span class="token number">0</span>     <span class="token number">0</span> REJECT     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            reject-with icmp-host-prohibited

Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination
    <span class="token number">0</span>     <span class="token number">0</span> REJECT     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            reject-with icmp-host-prohibited

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">4</span> packets, <span class="token number">544</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
  <entry>
    <title>运维之基础命令--计划任务</title>
    <url>/2022/07/06/01_%E8%BF%90%E7%BB%B4/01-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/day21-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>1、Crontab表达式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*  *  *  * * 
分 时 日 月 周

每天的凌晨2点   02：00     00 02 * * *
每月执行一次    00  00  01  * *
每个月的一号零点零时零分同时这一天时星期六 00  00  01  *  <span class="token number">6</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2、系统级别的计划任务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、/etc/crontab

<span class="token number">2</span>、如下的目录
    /etc/cron.hourly/ <span class="token comment"># 系统定时任务每个⼩时运⾏这个⽬录⾥的内容</span>
    /etc/cron.daily/ <span class="token comment"># 系统定时任务每天运⾏这个⽬录⾥的内容</span>
    /etc/cron.weekly/ <span class="token comment"># 系统定时任务每周运⾏这个⽬录⾥的内容</span>
    /etc/cron.monthly/ <span class="token comment"># 系统定时任务每⽉运⾏这个⽬录⾥的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3、用户级别的计划任务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> -e

-e <span class="token builtin class-name">:</span> 编辑计划任务
-l <span class="token builtin class-name">:</span> 查看计划任务

<span class="token comment"># 注：用户级别的计划任务存放在/var/spool/cron/，不同的用户存放的计划任务是以其自己的名字命名的脚本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4、crontab语法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1 3 5</span>
00 00 <span class="token number">1,3</span>,5 * *

<span class="token comment"># 1到5号</span>
00 00 <span class="token number">1</span>-5

<span class="token comment"># 每几分钟，每几个小数，每几天</span>
<span class="token number">0</span>/2  /2 
00 <span class="token number">0</span>/2    00 /2
00 00 <span class="token number">0</span>/2   00 00 /2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>5、每3分钟同步一下系统时间</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>（一）基础命令</category>
      </categories>
  </entry>
</search>
